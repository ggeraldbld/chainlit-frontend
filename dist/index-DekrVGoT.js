import * as yt from "react";
import $e, { createContext as so, useContext as qn, useEffect as wn, useLayoutEffect as S2, useRef as un, useMemo as Cn, useCallback as dt, useDebugValue as _P, useReducer as mP, forwardRef as fP, useImperativeHandle as gP, Fragment as hP, useState as Hn, createElement as EP, Component as SP, lazy as bP, Suspense as TP, memo as gs } from "react";
import { keyframes as b2 } from "@emotion/react";
import Zt from "@mui/material/Box";
import fn from "@mui/material/Stack";
import { atom as Vt, selector as T2, DefaultValue as yP, useRecoilValue as Qt, useRecoilState as Pa, useSetRecoilState as Yt, useResetRecoilState as ku } from "recoil";
import Td from "@mui/material/Button";
import y2 from "@mui/material/CircularProgress";
import _s from "@mui/material/Typography";
import { Tooltip as Nl, Typography as Sa, LinearProgress as vP, Fade as CP, Box as mn, Skeleton as RP, IconButton as zl, Stack as Fa, TextField as v2, CircularProgress as C2, SvgIcon as AP, useTheme as SE, ListItem as OP, ListItemButton as NP, List as NT, Chip as IP, Backdrop as xP, MenuItem as DP, Menu as wP, useMediaQuery as R2, Button as LP, Avatar as MP, Grid as IT, Alert as kP } from "@mui/material";
import PP from "@mui/material/Avatar";
import ba from "@mui/material/Tooltip";
import FP from "@mui/icons-material/MoreVert";
import zr from "@mui/material/IconButton";
import BP from "@mui/material/Menu";
import xr from "@mui/material/SvgIcon";
import bE from "@mui/material/styles/useTheme";
import UP from "@mui/material/Dialog";
import GP from "@mui/material/DialogActions";
import HP from "@mui/material/DialogContent";
import YP from "@mui/material/DialogTitle";
import zP from "@mui/material/colors/grey";
import { useTheme as A2, styled as ql } from "@mui/material/styles";
import qP from "@mui/material/Slider";
import O2 from "@mui/material/styles/styled";
import VP from "@mui/material/FormControl";
import $P from "@mui/material/FormHelperText";
import WP from "@mui/icons-material/Info";
import KP from "@mui/material/InputLabel";
import TE from "@mui/material/TextField";
import QP from "@mui/material/Switch";
import N2 from "@mui/material/Chip";
import uh from "@mui/icons-material/Close";
import jP from "@mui/material/ClickAwayListener";
import I2 from "@mui/material/styles/createTheme";
import "@mui/icons-material/KeyboardArrowDown";
import "@mui/material/Select";
import "@mui/material/MenuItem";
import "@mui/material/ListSubheader";
import XP from "@mui/material/Divider";
import ZP from "@mui/material/Collapse";
import { DataGrid as JP } from "@mui/x-data-grid";
import yE from "@mui/material/Link";
import e7 from "@mui/material/Skeleton";
import t7 from "@mui/material/ImageList";
import n7 from "@mui/material/ImageListItem";
import x2 from "@mui/material/Alert";
import r7 from "@mui/material/AlertTitle";
import a7 from "@mui/material/Paper";
import i7 from "@mui/material/Table";
import s7 from "@mui/material/TableBody";
import xT from "@mui/material/TableCell";
import o7 from "@mui/material/TableContainer";
import l7 from "@mui/material/TableHead";
import c7 from "@mui/material/TableRow";
import u7 from "@mui/material/LinearProgress";
import "@mui/material/styles/ThemeProvider";
import "@mui/material/Tab";
import "@mui/material/Tabs";
import { useNavigate as D2 } from "react-router-dom";
import "react-dom";
import d7 from "@mui/icons-material/Tune";
import p7 from "@mui/material/InputAdornment";
import _7 from "@mui/icons-material/AutoDelete";
import m7 from "@mui/icons-material/StopCircle";
import f7 from "@mui/icons-material/Telegram";
import DT from "@mui/material/Fade";
var Qn = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function oo(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function g7(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var n = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    n.prototype = e.prototype;
  } else n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(t).forEach(function(r) {
    var a = Object.getOwnPropertyDescriptor(t, r);
    Object.defineProperty(n, r, a.get ? a : {
      enumerable: !0,
      get: function() {
        return t[r];
      }
    });
  }), n;
}
var dh = { exports: {} }, nl = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var wT;
function h7() {
  if (wT) return nl;
  wT = 1;
  var t = $e, e = Symbol.for("react.element"), n = Symbol.for("react.fragment"), r = Object.prototype.hasOwnProperty, a = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, i = { key: !0, ref: !0, __self: !0, __source: !0 };
  function s(l, c, d) {
    var p, _ = {}, f = null, g = null;
    d !== void 0 && (f = "" + d), c.key !== void 0 && (f = "" + c.key), c.ref !== void 0 && (g = c.ref);
    for (p in c) r.call(c, p) && !i.hasOwnProperty(p) && (_[p] = c[p]);
    if (l && l.defaultProps) for (p in c = l.defaultProps, c) _[p] === void 0 && (_[p] = c[p]);
    return { $$typeof: e, type: l, key: f, ref: g, props: _, _owner: a.current };
  }
  return nl.Fragment = n, nl.jsx = s, nl.jsxs = s, nl;
}
var rl = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var LT;
function E7() {
  return LT || (LT = 1, process.env.NODE_ENV !== "production" && function() {
    var t = $e, e = Symbol.for("react.element"), n = Symbol.for("react.portal"), r = Symbol.for("react.fragment"), a = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), l = Symbol.for("react.context"), c = Symbol.for("react.forward_ref"), d = Symbol.for("react.suspense"), p = Symbol.for("react.suspense_list"), _ = Symbol.for("react.memo"), f = Symbol.for("react.lazy"), g = Symbol.for("react.offscreen"), E = Symbol.iterator, T = "@@iterator";
    function R(W) {
      if (W === null || typeof W != "object")
        return null;
      var De = E && W[E] || W[T];
      return typeof De == "function" ? De : null;
    }
    var A = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function I(W) {
      {
        for (var De = arguments.length, qe = new Array(De > 1 ? De - 1 : 0), lt = 1; lt < De; lt++)
          qe[lt - 1] = arguments[lt];
        x("error", W, qe);
      }
    }
    function x(W, De, qe) {
      {
        var lt = A.ReactDebugCurrentFrame, Ft = lt.getStackAddendum();
        Ft !== "" && (De += "%s", qe = qe.concat([Ft]));
        var zt = qe.map(function(xt) {
          return String(xt);
        });
        zt.unshift("Warning: " + De), Function.prototype.apply.call(console[W], console, zt);
      }
    }
    var P = !1, D = !1, L = !1, K = !1, J = !1, X;
    X = Symbol.for("react.module.reference");
    function $(W) {
      return !!(typeof W == "string" || typeof W == "function" || W === r || W === i || J || W === a || W === d || W === p || K || W === g || P || D || L || typeof W == "object" && W !== null && (W.$$typeof === f || W.$$typeof === _ || W.$$typeof === s || W.$$typeof === l || W.$$typeof === c || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      W.$$typeof === X || W.getModuleId !== void 0));
    }
    function ae(W, De, qe) {
      var lt = W.displayName;
      if (lt)
        return lt;
      var Ft = De.displayName || De.name || "";
      return Ft !== "" ? qe + "(" + Ft + ")" : qe;
    }
    function ce(W) {
      return W.displayName || "Context";
    }
    function ve(W) {
      if (W == null)
        return null;
      if (typeof W.tag == "number" && I("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof W == "function")
        return W.displayName || W.name || null;
      if (typeof W == "string")
        return W;
      switch (W) {
        case r:
          return "Fragment";
        case n:
          return "Portal";
        case i:
          return "Profiler";
        case a:
          return "StrictMode";
        case d:
          return "Suspense";
        case p:
          return "SuspenseList";
      }
      if (typeof W == "object")
        switch (W.$$typeof) {
          case l:
            var De = W;
            return ce(De) + ".Consumer";
          case s:
            var qe = W;
            return ce(qe._context) + ".Provider";
          case c:
            return ae(W, W.render, "ForwardRef");
          case _:
            var lt = W.displayName || null;
            return lt !== null ? lt : ve(W.type) || "Memo";
          case f: {
            var Ft = W, zt = Ft._payload, xt = Ft._init;
            try {
              return ve(xt(zt));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var ge = Object.assign, fe = 0, Fe, ne, se, z, v, H, oe;
    function k() {
    }
    k.__reactDisabledLog = !0;
    function me() {
      {
        if (fe === 0) {
          Fe = console.log, ne = console.info, se = console.warn, z = console.error, v = console.group, H = console.groupCollapsed, oe = console.groupEnd;
          var W = {
            configurable: !0,
            enumerable: !0,
            value: k,
            writable: !0
          };
          Object.defineProperties(console, {
            info: W,
            log: W,
            warn: W,
            error: W,
            group: W,
            groupCollapsed: W,
            groupEnd: W
          });
        }
        fe++;
      }
    }
    function Ce() {
      {
        if (fe--, fe === 0) {
          var W = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: ge({}, W, {
              value: Fe
            }),
            info: ge({}, W, {
              value: ne
            }),
            warn: ge({}, W, {
              value: se
            }),
            error: ge({}, W, {
              value: z
            }),
            group: ge({}, W, {
              value: v
            }),
            groupCollapsed: ge({}, W, {
              value: H
            }),
            groupEnd: ge({}, W, {
              value: oe
            })
          });
        }
        fe < 0 && I("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var he = A.ReactCurrentDispatcher, Ne;
    function ye(W, De, qe) {
      {
        if (Ne === void 0)
          try {
            throw Error();
          } catch (Ft) {
            var lt = Ft.stack.trim().match(/\n( *(at )?)/);
            Ne = lt && lt[1] || "";
          }
        return `
` + Ne + W;
      }
    }
    var Ue = !1, Me;
    {
      var Qe = typeof WeakMap == "function" ? WeakMap : Map;
      Me = new Qe();
    }
    function _e(W, De) {
      if (!W || Ue)
        return "";
      {
        var qe = Me.get(W);
        if (qe !== void 0)
          return qe;
      }
      var lt;
      Ue = !0;
      var Ft = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var zt;
      zt = he.current, he.current = null, me();
      try {
        if (De) {
          var xt = function() {
            throw Error();
          };
          if (Object.defineProperty(xt.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(xt, []);
            } catch (ur) {
              lt = ur;
            }
            Reflect.construct(W, [], xt);
          } else {
            try {
              xt.call();
            } catch (ur) {
              lt = ur;
            }
            W.call(xt.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (ur) {
            lt = ur;
          }
          W();
        }
      } catch (ur) {
        if (ur && lt && typeof ur.stack == "string") {
          for (var Ct = ur.stack.split(`
`), Vn = lt.stack.split(`
`), dn = Ct.length - 1, hn = Vn.length - 1; dn >= 1 && hn >= 0 && Ct[dn] !== Vn[hn]; )
            hn--;
          for (; dn >= 1 && hn >= 0; dn--, hn--)
            if (Ct[dn] !== Vn[hn]) {
              if (dn !== 1 || hn !== 1)
                do
                  if (dn--, hn--, hn < 0 || Ct[dn] !== Vn[hn]) {
                    var cr = `
` + Ct[dn].replace(" at new ", " at ");
                    return W.displayName && cr.includes("<anonymous>") && (cr = cr.replace("<anonymous>", W.displayName)), typeof W == "function" && Me.set(W, cr), cr;
                  }
                while (dn >= 1 && hn >= 0);
              break;
            }
        }
      } finally {
        Ue = !1, he.current = zt, Ce(), Error.prepareStackTrace = Ft;
      }
      var $r = W ? W.displayName || W.name : "", Lo = $r ? ye($r) : "";
      return typeof W == "function" && Me.set(W, Lo), Lo;
    }
    function je(W, De, qe) {
      return _e(W, !1);
    }
    function et(W) {
      var De = W.prototype;
      return !!(De && De.isReactComponent);
    }
    function nt(W, De, qe) {
      if (W == null)
        return "";
      if (typeof W == "function")
        return _e(W, et(W));
      if (typeof W == "string")
        return ye(W);
      switch (W) {
        case d:
          return ye("Suspense");
        case p:
          return ye("SuspenseList");
      }
      if (typeof W == "object")
        switch (W.$$typeof) {
          case c:
            return je(W.render);
          case _:
            return nt(W.type, De, qe);
          case f: {
            var lt = W, Ft = lt._payload, zt = lt._init;
            try {
              return nt(zt(Ft), De, qe);
            } catch {
            }
          }
        }
      return "";
    }
    var mt = Object.prototype.hasOwnProperty, bt = {}, _t = A.ReactDebugCurrentFrame;
    function He(W) {
      if (W) {
        var De = W._owner, qe = nt(W.type, W._source, De ? De.type : null);
        _t.setExtraStackFrame(qe);
      } else
        _t.setExtraStackFrame(null);
    }
    function Gt(W, De, qe, lt, Ft) {
      {
        var zt = Function.call.bind(mt);
        for (var xt in W)
          if (zt(W, xt)) {
            var Ct = void 0;
            try {
              if (typeof W[xt] != "function") {
                var Vn = Error((lt || "React class") + ": " + qe + " type `" + xt + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof W[xt] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw Vn.name = "Invariant Violation", Vn;
              }
              Ct = W[xt](De, xt, lt, qe, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (dn) {
              Ct = dn;
            }
            Ct && !(Ct instanceof Error) && (He(Ft), I("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", lt || "React class", qe, xt, typeof Ct), He(null)), Ct instanceof Error && !(Ct.message in bt) && (bt[Ct.message] = !0, He(Ft), I("Failed %s type: %s", qe, Ct.message), He(null));
          }
      }
    }
    var pt = Array.isArray;
    function Be(W) {
      return pt(W);
    }
    function It(W) {
      {
        var De = typeof Symbol == "function" && Symbol.toStringTag, qe = De && W[Symbol.toStringTag] || W.constructor.name || "Object";
        return qe;
      }
    }
    function Oe(W) {
      try {
        return j(W), !1;
      } catch {
        return !0;
      }
    }
    function j(W) {
      return "" + W;
    }
    function Se(W) {
      if (Oe(W))
        return I("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", It(W)), j(W);
    }
    var ue = A.ReactCurrentOwner, be = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, Ge, Ze, vt;
    vt = {};
    function Pt(W) {
      if (mt.call(W, "ref")) {
        var De = Object.getOwnPropertyDescriptor(W, "ref").get;
        if (De && De.isReactWarning)
          return !1;
      }
      return W.ref !== void 0;
    }
    function Ln(W) {
      if (mt.call(W, "key")) {
        var De = Object.getOwnPropertyDescriptor(W, "key").get;
        if (De && De.isReactWarning)
          return !1;
      }
      return W.key !== void 0;
    }
    function Rn(W, De) {
      if (typeof W.ref == "string" && ue.current && De && ue.current.stateNode !== De) {
        var qe = ve(ue.current.type);
        vt[qe] || (I('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', ve(ue.current.type), W.ref), vt[qe] = !0);
      }
    }
    function nn(W, De) {
      {
        var qe = function() {
          Ge || (Ge = !0, I("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", De));
        };
        qe.isReactWarning = !0, Object.defineProperty(W, "key", {
          get: qe,
          configurable: !0
        });
      }
    }
    function Fn(W, De) {
      {
        var qe = function() {
          Ze || (Ze = !0, I("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", De));
        };
        qe.isReactWarning = !0, Object.defineProperty(W, "ref", {
          get: qe,
          configurable: !0
        });
      }
    }
    var ut = function(W, De, qe, lt, Ft, zt, xt) {
      var Ct = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: e,
        // Built-in properties that belong on the element
        type: W,
        key: De,
        ref: qe,
        props: xt,
        // Record the component responsible for creating this element.
        _owner: zt
      };
      return Ct._store = {}, Object.defineProperty(Ct._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(Ct, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: lt
      }), Object.defineProperty(Ct, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: Ft
      }), Object.freeze && (Object.freeze(Ct.props), Object.freeze(Ct)), Ct;
    };
    function wr(W, De, qe, lt, Ft) {
      {
        var zt, xt = {}, Ct = null, Vn = null;
        qe !== void 0 && (Se(qe), Ct = "" + qe), Ln(De) && (Se(De.key), Ct = "" + De.key), Pt(De) && (Vn = De.ref, Rn(De, Ft));
        for (zt in De)
          mt.call(De, zt) && !be.hasOwnProperty(zt) && (xt[zt] = De[zt]);
        if (W && W.defaultProps) {
          var dn = W.defaultProps;
          for (zt in dn)
            xt[zt] === void 0 && (xt[zt] = dn[zt]);
        }
        if (Ct || Vn) {
          var hn = typeof W == "function" ? W.displayName || W.name || "Unknown" : W;
          Ct && nn(xt, hn), Vn && Fn(xt, hn);
        }
        return ut(W, Ct, Vn, Ft, lt, ue.current, xt);
      }
    }
    var br = A.ReactCurrentOwner, Wi = A.ReactDebugCurrentFrame;
    function va(W) {
      if (W) {
        var De = W._owner, qe = nt(W.type, W._source, De ? De.type : null);
        Wi.setExtraStackFrame(qe);
      } else
        Wi.setExtraStackFrame(null);
    }
    var Ki;
    Ki = !1;
    function vs(W) {
      return typeof W == "object" && W !== null && W.$$typeof === e;
    }
    function Oo() {
      {
        if (br.current) {
          var W = ve(br.current.type);
          if (W)
            return `

Check the render method of \`` + W + "`.";
        }
        return "";
      }
    }
    function cc(W) {
      return "";
    }
    var No = {};
    function Io(W) {
      {
        var De = Oo();
        if (!De) {
          var qe = typeof W == "string" ? W : W.displayName || W.name;
          qe && (De = `

Check the top-level render call using <` + qe + ">.");
        }
        return De;
      }
    }
    function xo(W, De) {
      {
        if (!W._store || W._store.validated || W.key != null)
          return;
        W._store.validated = !0;
        var qe = Io(De);
        if (No[qe])
          return;
        No[qe] = !0;
        var lt = "";
        W && W._owner && W._owner !== br.current && (lt = " It was passed a child from " + ve(W._owner.type) + "."), va(W), I('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', qe, lt), va(null);
      }
    }
    function Do(W, De) {
      {
        if (typeof W != "object")
          return;
        if (Be(W))
          for (var qe = 0; qe < W.length; qe++) {
            var lt = W[qe];
            vs(lt) && xo(lt, De);
          }
        else if (vs(W))
          W._store && (W._store.validated = !0);
        else if (W) {
          var Ft = R(W);
          if (typeof Ft == "function" && Ft !== W.entries)
            for (var zt = Ft.call(W), xt; !(xt = zt.next()).done; )
              vs(xt.value) && xo(xt.value, De);
        }
      }
    }
    function uc(W) {
      {
        var De = W.type;
        if (De == null || typeof De == "string")
          return;
        var qe;
        if (typeof De == "function")
          qe = De.propTypes;
        else if (typeof De == "object" && (De.$$typeof === c || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        De.$$typeof === _))
          qe = De.propTypes;
        else
          return;
        if (qe) {
          var lt = ve(De);
          Gt(qe, W.props, "prop", lt, W);
        } else if (De.PropTypes !== void 0 && !Ki) {
          Ki = !0;
          var Ft = ve(De);
          I("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", Ft || "Unknown");
        }
        typeof De.getDefaultProps == "function" && !De.getDefaultProps.isReactClassApproved && I("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function Cs(W) {
      {
        for (var De = Object.keys(W.props), qe = 0; qe < De.length; qe++) {
          var lt = De[qe];
          if (lt !== "children" && lt !== "key") {
            va(W), I("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", lt), va(null);
            break;
          }
        }
        W.ref !== null && (va(W), I("Invalid attribute `ref` supplied to `React.Fragment`."), va(null));
      }
    }
    function wo(W, De, qe, lt, Ft, zt) {
      {
        var xt = $(W);
        if (!xt) {
          var Ct = "";
          (W === void 0 || typeof W == "object" && W !== null && Object.keys(W).length === 0) && (Ct += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var Vn = cc();
          Vn ? Ct += Vn : Ct += Oo();
          var dn;
          W === null ? dn = "null" : Be(W) ? dn = "array" : W !== void 0 && W.$$typeof === e ? (dn = "<" + (ve(W.type) || "Unknown") + " />", Ct = " Did you accidentally export a JSX literal instead of a component?") : dn = typeof W, I("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", dn, Ct);
        }
        var hn = wr(W, De, qe, Ft, zt);
        if (hn == null)
          return hn;
        if (xt) {
          var cr = De.children;
          if (cr !== void 0)
            if (lt)
              if (Be(cr)) {
                for (var $r = 0; $r < cr.length; $r++)
                  Do(cr[$r], W);
                Object.freeze && Object.freeze(cr);
              } else
                I("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              Do(cr, W);
        }
        return W === r ? Cs(hn) : uc(hn), hn;
      }
    }
    function Rs(W, De, qe) {
      return wo(W, De, qe, !0);
    }
    function dc(W, De, qe) {
      return wo(W, De, qe, !1);
    }
    var pc = dc, _c = Rs;
    rl.Fragment = r, rl.jsx = pc, rl.jsxs = _c;
  }()), rl;
}
process.env.NODE_ENV === "production" ? dh.exports = h7() : dh.exports = E7();
var C = dh.exports;
const w2 = {
  avatars: [],
  defaultCollapseContent: !1,
  highlightedMessage: null,
  loading: !1,
  onElementRefClick: void 0,
  onFeedbackUpdated: void 0,
  showFeedbackButtons: !0,
  onError: () => {
  },
  uiName: ""
}, Hi = so(w2);
var Ku = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
Ku.exports;
(function(t, e) {
  (function() {
    var n, r = "4.17.21", a = 200, i = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", s = "Expected a function", l = "Invalid `variable` option passed into `_.template`", c = "__lodash_hash_undefined__", d = 500, p = "__lodash_placeholder__", _ = 1, f = 2, g = 4, E = 1, T = 2, R = 1, A = 2, I = 4, x = 8, P = 16, D = 32, L = 64, K = 128, J = 256, X = 512, $ = 30, ae = "...", ce = 800, ve = 16, ge = 1, fe = 2, Fe = 3, ne = 1 / 0, se = 9007199254740991, z = 17976931348623157e292, v = NaN, H = 4294967295, oe = H - 1, k = H >>> 1, me = [
      ["ary", K],
      ["bind", R],
      ["bindKey", A],
      ["curry", x],
      ["curryRight", P],
      ["flip", X],
      ["partial", D],
      ["partialRight", L],
      ["rearg", J]
    ], Ce = "[object Arguments]", he = "[object Array]", Ne = "[object AsyncFunction]", ye = "[object Boolean]", Ue = "[object Date]", Me = "[object DOMException]", Qe = "[object Error]", _e = "[object Function]", je = "[object GeneratorFunction]", et = "[object Map]", nt = "[object Number]", mt = "[object Null]", bt = "[object Object]", _t = "[object Promise]", He = "[object Proxy]", Gt = "[object RegExp]", pt = "[object Set]", Be = "[object String]", It = "[object Symbol]", Oe = "[object Undefined]", j = "[object WeakMap]", Se = "[object WeakSet]", ue = "[object ArrayBuffer]", be = "[object DataView]", Ge = "[object Float32Array]", Ze = "[object Float64Array]", vt = "[object Int8Array]", Pt = "[object Int16Array]", Ln = "[object Int32Array]", Rn = "[object Uint8Array]", nn = "[object Uint8ClampedArray]", Fn = "[object Uint16Array]", ut = "[object Uint32Array]", wr = /\b__p \+= '';/g, br = /\b(__p \+=) '' \+/g, Wi = /(__e\(.*?\)|\b__t\)) \+\n'';/g, va = /&(?:amp|lt|gt|quot|#39);/g, Ki = /[&<>"']/g, vs = RegExp(va.source), Oo = RegExp(Ki.source), cc = /<%-([\s\S]+?)%>/g, No = /<%([\s\S]+?)%>/g, Io = /<%=([\s\S]+?)%>/g, xo = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Do = /^\w*$/, uc = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, Cs = /[\\^$.*+?()[\]{}|]/g, wo = RegExp(Cs.source), Rs = /^\s+/, dc = /\s/, pc = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, _c = /\{\n\/\* \[wrapped with (.+)\] \*/, W = /,? & /, De = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, qe = /[()=,{}\[\]\/\s]/, lt = /\\(\\)?/g, Ft = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, zt = /\w*$/, xt = /^[-+]0x[0-9a-f]+$/i, Ct = /^0b[01]+$/i, Vn = /^\[object .+?Constructor\]$/, dn = /^0o[0-7]+$/i, hn = /^(?:0|[1-9]\d*)$/, cr = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, $r = /($^)/, Lo = /['\n\r\u2028\u2029\\]/g, ur = "\\ud800-\\udfff", uS = "\\u0300-\\u036f", dS = "\\ufe20-\\ufe2f", pS = "\\u20d0-\\u20ff", op = uS + dS + pS, lp = "\\u2700-\\u27bf", cp = "a-z\\xdf-\\xf6\\xf8-\\xff", _S = "\\xac\\xb1\\xd7\\xf7", mS = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", fS = "\\u2000-\\u206f", gS = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", up = "A-Z\\xc0-\\xd6\\xd8-\\xde", dp = "\\ufe0e\\ufe0f", pp = _S + mS + fS + gS, mc = "['’]", hS = "[" + ur + "]", _p = "[" + pp + "]", Mo = "[" + op + "]", mp = "\\d+", ES = "[" + lp + "]", fp = "[" + cp + "]", gp = "[^" + ur + pp + mp + lp + cp + up + "]", fc = "\\ud83c[\\udffb-\\udfff]", hp = "(?:" + Mo + "|" + fc + ")", gc = "[^" + ur + "]", ko = "(?:\\ud83c[\\udde6-\\uddff]){2}", Po = "[\\ud800-\\udbff][\\udc00-\\udfff]", mi = "[" + up + "]", hc = "\\u200d", Ec = "(?:" + fp + "|" + gp + ")", Sc = "(?:" + mi + "|" + gp + ")", Fo = "(?:" + mc + "(?:d|ll|m|re|s|t|ve))?", Bo = "(?:" + mc + "(?:D|LL|M|RE|S|T|VE))?", bc = hp + "?", Tc = "[" + dp + "]?", yc = "(?:" + hc + "(?:" + [gc, ko, Po].join("|") + ")" + Tc + bc + ")*", As = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", Uo = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", Go = Tc + bc + yc, vc = "(?:" + [ES, ko, Po].join("|") + ")" + Go, Cc = "(?:" + [gc + Mo + "?", Mo, ko, Po, hS].join("|") + ")", SS = RegExp(mc, "g"), bS = RegExp(Mo, "g"), Ep = RegExp(fc + "(?=" + fc + ")|" + Cc + Go, "g"), Cw = RegExp([
      mi + "?" + fp + "+" + Fo + "(?=" + [_p, mi, "$"].join("|") + ")",
      Sc + "+" + Bo + "(?=" + [_p, mi + Ec, "$"].join("|") + ")",
      mi + "?" + Ec + "+" + Fo,
      mi + "+" + Bo,
      Uo,
      As,
      mp,
      vc
    ].join("|"), "g"), Rw = RegExp("[" + hc + ur + op + dp + "]"), Aw = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Ow = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ], Nw = -1, ln = {};
    ln[Ge] = ln[Ze] = ln[vt] = ln[Pt] = ln[Ln] = ln[Rn] = ln[nn] = ln[Fn] = ln[ut] = !0, ln[Ce] = ln[he] = ln[ue] = ln[ye] = ln[be] = ln[Ue] = ln[Qe] = ln[_e] = ln[et] = ln[nt] = ln[bt] = ln[Gt] = ln[pt] = ln[Be] = ln[j] = !1;
    var rn = {};
    rn[Ce] = rn[he] = rn[ue] = rn[be] = rn[ye] = rn[Ue] = rn[Ge] = rn[Ze] = rn[vt] = rn[Pt] = rn[Ln] = rn[et] = rn[nt] = rn[bt] = rn[Gt] = rn[pt] = rn[Be] = rn[It] = rn[Rn] = rn[nn] = rn[Fn] = rn[ut] = !0, rn[Qe] = rn[_e] = rn[j] = !1;
    var Iw = {
      // Latin-1 Supplement block.
      À: "A",
      Á: "A",
      Â: "A",
      Ã: "A",
      Ä: "A",
      Å: "A",
      à: "a",
      á: "a",
      â: "a",
      ã: "a",
      ä: "a",
      å: "a",
      Ç: "C",
      ç: "c",
      Ð: "D",
      ð: "d",
      È: "E",
      É: "E",
      Ê: "E",
      Ë: "E",
      è: "e",
      é: "e",
      ê: "e",
      ë: "e",
      Ì: "I",
      Í: "I",
      Î: "I",
      Ï: "I",
      ì: "i",
      í: "i",
      î: "i",
      ï: "i",
      Ñ: "N",
      ñ: "n",
      Ò: "O",
      Ó: "O",
      Ô: "O",
      Õ: "O",
      Ö: "O",
      Ø: "O",
      ò: "o",
      ó: "o",
      ô: "o",
      õ: "o",
      ö: "o",
      ø: "o",
      Ù: "U",
      Ú: "U",
      Û: "U",
      Ü: "U",
      ù: "u",
      ú: "u",
      û: "u",
      ü: "u",
      Ý: "Y",
      ý: "y",
      ÿ: "y",
      Æ: "Ae",
      æ: "ae",
      Þ: "Th",
      þ: "th",
      ß: "ss",
      // Latin Extended-A block.
      Ā: "A",
      Ă: "A",
      Ą: "A",
      ā: "a",
      ă: "a",
      ą: "a",
      Ć: "C",
      Ĉ: "C",
      Ċ: "C",
      Č: "C",
      ć: "c",
      ĉ: "c",
      ċ: "c",
      č: "c",
      Ď: "D",
      Đ: "D",
      ď: "d",
      đ: "d",
      Ē: "E",
      Ĕ: "E",
      Ė: "E",
      Ę: "E",
      Ě: "E",
      ē: "e",
      ĕ: "e",
      ė: "e",
      ę: "e",
      ě: "e",
      Ĝ: "G",
      Ğ: "G",
      Ġ: "G",
      Ģ: "G",
      ĝ: "g",
      ğ: "g",
      ġ: "g",
      ģ: "g",
      Ĥ: "H",
      Ħ: "H",
      ĥ: "h",
      ħ: "h",
      Ĩ: "I",
      Ī: "I",
      Ĭ: "I",
      Į: "I",
      İ: "I",
      ĩ: "i",
      ī: "i",
      ĭ: "i",
      į: "i",
      ı: "i",
      Ĵ: "J",
      ĵ: "j",
      Ķ: "K",
      ķ: "k",
      ĸ: "k",
      Ĺ: "L",
      Ļ: "L",
      Ľ: "L",
      Ŀ: "L",
      Ł: "L",
      ĺ: "l",
      ļ: "l",
      ľ: "l",
      ŀ: "l",
      ł: "l",
      Ń: "N",
      Ņ: "N",
      Ň: "N",
      Ŋ: "N",
      ń: "n",
      ņ: "n",
      ň: "n",
      ŋ: "n",
      Ō: "O",
      Ŏ: "O",
      Ő: "O",
      ō: "o",
      ŏ: "o",
      ő: "o",
      Ŕ: "R",
      Ŗ: "R",
      Ř: "R",
      ŕ: "r",
      ŗ: "r",
      ř: "r",
      Ś: "S",
      Ŝ: "S",
      Ş: "S",
      Š: "S",
      ś: "s",
      ŝ: "s",
      ş: "s",
      š: "s",
      Ţ: "T",
      Ť: "T",
      Ŧ: "T",
      ţ: "t",
      ť: "t",
      ŧ: "t",
      Ũ: "U",
      Ū: "U",
      Ŭ: "U",
      Ů: "U",
      Ű: "U",
      Ų: "U",
      ũ: "u",
      ū: "u",
      ŭ: "u",
      ů: "u",
      ű: "u",
      ų: "u",
      Ŵ: "W",
      ŵ: "w",
      Ŷ: "Y",
      ŷ: "y",
      Ÿ: "Y",
      Ź: "Z",
      Ż: "Z",
      Ž: "Z",
      ź: "z",
      ż: "z",
      ž: "z",
      Ĳ: "IJ",
      ĳ: "ij",
      Œ: "Oe",
      œ: "oe",
      ŉ: "'n",
      ſ: "s"
    }, xw = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    }, Dw = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    }, ww = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    }, Lw = parseFloat, Mw = parseInt, TS = typeof Qn == "object" && Qn && Qn.Object === Object && Qn, kw = typeof self == "object" && self && self.Object === Object && self, Xn = TS || kw || Function("return this")(), Sp = e && !e.nodeType && e, Qi = Sp && !0 && t && !t.nodeType && t, yS = Qi && Qi.exports === Sp, bp = yS && TS.process, Wr = function() {
      try {
        var te = Qi && Qi.require && Qi.require("util").types;
        return te || bp && bp.binding && bp.binding("util");
      } catch {
      }
    }(), vS = Wr && Wr.isArrayBuffer, CS = Wr && Wr.isDate, RS = Wr && Wr.isMap, AS = Wr && Wr.isRegExp, OS = Wr && Wr.isSet, NS = Wr && Wr.isTypedArray;
    function Lr(te, Ee, de) {
      switch (de.length) {
        case 0:
          return te.call(Ee);
        case 1:
          return te.call(Ee, de[0]);
        case 2:
          return te.call(Ee, de[0], de[1]);
        case 3:
          return te.call(Ee, de[0], de[1], de[2]);
      }
      return te.apply(Ee, de);
    }
    function Pw(te, Ee, de, Ke) {
      for (var ft = -1, qt = te == null ? 0 : te.length; ++ft < qt; ) {
        var Bn = te[ft];
        Ee(Ke, Bn, de(Bn), te);
      }
      return Ke;
    }
    function Kr(te, Ee) {
      for (var de = -1, Ke = te == null ? 0 : te.length; ++de < Ke && Ee(te[de], de, te) !== !1; )
        ;
      return te;
    }
    function Fw(te, Ee) {
      for (var de = te == null ? 0 : te.length; de-- && Ee(te[de], de, te) !== !1; )
        ;
      return te;
    }
    function IS(te, Ee) {
      for (var de = -1, Ke = te == null ? 0 : te.length; ++de < Ke; )
        if (!Ee(te[de], de, te))
          return !1;
      return !0;
    }
    function fi(te, Ee) {
      for (var de = -1, Ke = te == null ? 0 : te.length, ft = 0, qt = []; ++de < Ke; ) {
        var Bn = te[de];
        Ee(Bn, de, te) && (qt[ft++] = Bn);
      }
      return qt;
    }
    function Rc(te, Ee) {
      var de = te == null ? 0 : te.length;
      return !!de && Os(te, Ee, 0) > -1;
    }
    function Tp(te, Ee, de) {
      for (var Ke = -1, ft = te == null ? 0 : te.length; ++Ke < ft; )
        if (de(Ee, te[Ke]))
          return !0;
      return !1;
    }
    function pn(te, Ee) {
      for (var de = -1, Ke = te == null ? 0 : te.length, ft = Array(Ke); ++de < Ke; )
        ft[de] = Ee(te[de], de, te);
      return ft;
    }
    function gi(te, Ee) {
      for (var de = -1, Ke = Ee.length, ft = te.length; ++de < Ke; )
        te[ft + de] = Ee[de];
      return te;
    }
    function yp(te, Ee, de, Ke) {
      var ft = -1, qt = te == null ? 0 : te.length;
      for (Ke && qt && (de = te[++ft]); ++ft < qt; )
        de = Ee(de, te[ft], ft, te);
      return de;
    }
    function Bw(te, Ee, de, Ke) {
      var ft = te == null ? 0 : te.length;
      for (Ke && ft && (de = te[--ft]); ft--; )
        de = Ee(de, te[ft], ft, te);
      return de;
    }
    function vp(te, Ee) {
      for (var de = -1, Ke = te == null ? 0 : te.length; ++de < Ke; )
        if (Ee(te[de], de, te))
          return !0;
      return !1;
    }
    var Uw = Cp("length");
    function Gw(te) {
      return te.split("");
    }
    function Hw(te) {
      return te.match(De) || [];
    }
    function xS(te, Ee, de) {
      var Ke;
      return de(te, function(ft, qt, Bn) {
        if (Ee(ft, qt, Bn))
          return Ke = qt, !1;
      }), Ke;
    }
    function Ac(te, Ee, de, Ke) {
      for (var ft = te.length, qt = de + (Ke ? 1 : -1); Ke ? qt-- : ++qt < ft; )
        if (Ee(te[qt], qt, te))
          return qt;
      return -1;
    }
    function Os(te, Ee, de) {
      return Ee === Ee ? Jw(te, Ee, de) : Ac(te, DS, de);
    }
    function Yw(te, Ee, de, Ke) {
      for (var ft = de - 1, qt = te.length; ++ft < qt; )
        if (Ke(te[ft], Ee))
          return ft;
      return -1;
    }
    function DS(te) {
      return te !== te;
    }
    function wS(te, Ee) {
      var de = te == null ? 0 : te.length;
      return de ? Ap(te, Ee) / de : v;
    }
    function Cp(te) {
      return function(Ee) {
        return Ee == null ? n : Ee[te];
      };
    }
    function Rp(te) {
      return function(Ee) {
        return te == null ? n : te[Ee];
      };
    }
    function LS(te, Ee, de, Ke, ft) {
      return ft(te, function(qt, Bn, Jt) {
        de = Ke ? (Ke = !1, qt) : Ee(de, qt, Bn, Jt);
      }), de;
    }
    function zw(te, Ee) {
      var de = te.length;
      for (te.sort(Ee); de--; )
        te[de] = te[de].value;
      return te;
    }
    function Ap(te, Ee) {
      for (var de, Ke = -1, ft = te.length; ++Ke < ft; ) {
        var qt = Ee(te[Ke]);
        qt !== n && (de = de === n ? qt : de + qt);
      }
      return de;
    }
    function Op(te, Ee) {
      for (var de = -1, Ke = Array(te); ++de < te; )
        Ke[de] = Ee(de);
      return Ke;
    }
    function qw(te, Ee) {
      return pn(Ee, function(de) {
        return [de, te[de]];
      });
    }
    function MS(te) {
      return te && te.slice(0, BS(te) + 1).replace(Rs, "");
    }
    function Mr(te) {
      return function(Ee) {
        return te(Ee);
      };
    }
    function Np(te, Ee) {
      return pn(Ee, function(de) {
        return te[de];
      });
    }
    function Ho(te, Ee) {
      return te.has(Ee);
    }
    function kS(te, Ee) {
      for (var de = -1, Ke = te.length; ++de < Ke && Os(Ee, te[de], 0) > -1; )
        ;
      return de;
    }
    function PS(te, Ee) {
      for (var de = te.length; de-- && Os(Ee, te[de], 0) > -1; )
        ;
      return de;
    }
    function Vw(te, Ee) {
      for (var de = te.length, Ke = 0; de--; )
        te[de] === Ee && ++Ke;
      return Ke;
    }
    var $w = Rp(Iw), Ww = Rp(xw);
    function Kw(te) {
      return "\\" + ww[te];
    }
    function Qw(te, Ee) {
      return te == null ? n : te[Ee];
    }
    function Ns(te) {
      return Rw.test(te);
    }
    function jw(te) {
      return Aw.test(te);
    }
    function Xw(te) {
      for (var Ee, de = []; !(Ee = te.next()).done; )
        de.push(Ee.value);
      return de;
    }
    function Ip(te) {
      var Ee = -1, de = Array(te.size);
      return te.forEach(function(Ke, ft) {
        de[++Ee] = [ft, Ke];
      }), de;
    }
    function FS(te, Ee) {
      return function(de) {
        return te(Ee(de));
      };
    }
    function hi(te, Ee) {
      for (var de = -1, Ke = te.length, ft = 0, qt = []; ++de < Ke; ) {
        var Bn = te[de];
        (Bn === Ee || Bn === p) && (te[de] = p, qt[ft++] = de);
      }
      return qt;
    }
    function Oc(te) {
      var Ee = -1, de = Array(te.size);
      return te.forEach(function(Ke) {
        de[++Ee] = Ke;
      }), de;
    }
    function Zw(te) {
      var Ee = -1, de = Array(te.size);
      return te.forEach(function(Ke) {
        de[++Ee] = [Ke, Ke];
      }), de;
    }
    function Jw(te, Ee, de) {
      for (var Ke = de - 1, ft = te.length; ++Ke < ft; )
        if (te[Ke] === Ee)
          return Ke;
      return -1;
    }
    function e6(te, Ee, de) {
      for (var Ke = de + 1; Ke--; )
        if (te[Ke] === Ee)
          return Ke;
      return Ke;
    }
    function Is(te) {
      return Ns(te) ? n6(te) : Uw(te);
    }
    function pa(te) {
      return Ns(te) ? r6(te) : Gw(te);
    }
    function BS(te) {
      for (var Ee = te.length; Ee-- && dc.test(te.charAt(Ee)); )
        ;
      return Ee;
    }
    var t6 = Rp(Dw);
    function n6(te) {
      for (var Ee = Ep.lastIndex = 0; Ep.test(te); )
        ++Ee;
      return Ee;
    }
    function r6(te) {
      return te.match(Ep) || [];
    }
    function a6(te) {
      return te.match(Cw) || [];
    }
    var i6 = function te(Ee) {
      Ee = Ee == null ? Xn : xs.defaults(Xn.Object(), Ee, xs.pick(Xn, Ow));
      var de = Ee.Array, Ke = Ee.Date, ft = Ee.Error, qt = Ee.Function, Bn = Ee.Math, Jt = Ee.Object, xp = Ee.RegExp, s6 = Ee.String, Qr = Ee.TypeError, Nc = de.prototype, o6 = qt.prototype, Ds = Jt.prototype, Ic = Ee["__core-js_shared__"], xc = o6.toString, jt = Ds.hasOwnProperty, l6 = 0, US = function() {
        var o = /[^.]+$/.exec(Ic && Ic.keys && Ic.keys.IE_PROTO || "");
        return o ? "Symbol(src)_1." + o : "";
      }(), Dc = Ds.toString, c6 = xc.call(Jt), u6 = Xn._, d6 = xp(
        "^" + xc.call(jt).replace(Cs, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      ), wc = yS ? Ee.Buffer : n, Ei = Ee.Symbol, Lc = Ee.Uint8Array, GS = wc ? wc.allocUnsafe : n, Mc = FS(Jt.getPrototypeOf, Jt), HS = Jt.create, YS = Ds.propertyIsEnumerable, kc = Nc.splice, zS = Ei ? Ei.isConcatSpreadable : n, Yo = Ei ? Ei.iterator : n, ji = Ei ? Ei.toStringTag : n, Pc = function() {
        try {
          var o = ts(Jt, "defineProperty");
          return o({}, "", {}), o;
        } catch {
        }
      }(), p6 = Ee.clearTimeout !== Xn.clearTimeout && Ee.clearTimeout, _6 = Ke && Ke.now !== Xn.Date.now && Ke.now, m6 = Ee.setTimeout !== Xn.setTimeout && Ee.setTimeout, Fc = Bn.ceil, Bc = Bn.floor, Dp = Jt.getOwnPropertySymbols, f6 = wc ? wc.isBuffer : n, qS = Ee.isFinite, g6 = Nc.join, h6 = FS(Jt.keys, Jt), Un = Bn.max, nr = Bn.min, E6 = Ke.now, S6 = Ee.parseInt, VS = Bn.random, b6 = Nc.reverse, wp = ts(Ee, "DataView"), zo = ts(Ee, "Map"), Lp = ts(Ee, "Promise"), ws = ts(Ee, "Set"), qo = ts(Ee, "WeakMap"), Vo = ts(Jt, "create"), Uc = qo && new qo(), Ls = {}, T6 = ns(wp), y6 = ns(zo), v6 = ns(Lp), C6 = ns(ws), R6 = ns(qo), Gc = Ei ? Ei.prototype : n, $o = Gc ? Gc.valueOf : n, $S = Gc ? Gc.toString : n;
      function w(o) {
        if (yn(o) && !gt(o) && !(o instanceof Lt)) {
          if (o instanceof jr)
            return o;
          if (jt.call(o, "__wrapped__"))
            return Wb(o);
        }
        return new jr(o);
      }
      var Ms = /* @__PURE__ */ function() {
        function o() {
        }
        return function(u) {
          if (!En(u))
            return {};
          if (HS)
            return HS(u);
          o.prototype = u;
          var m = new o();
          return o.prototype = n, m;
        };
      }();
      function Hc() {
      }
      function jr(o, u) {
        this.__wrapped__ = o, this.__actions__ = [], this.__chain__ = !!u, this.__index__ = 0, this.__values__ = n;
      }
      w.templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        escape: cc,
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        evaluate: No,
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        interpolate: Io,
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        variable: "",
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        imports: {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          _: w
        }
      }, w.prototype = Hc.prototype, w.prototype.constructor = w, jr.prototype = Ms(Hc.prototype), jr.prototype.constructor = jr;
      function Lt(o) {
        this.__wrapped__ = o, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = H, this.__views__ = [];
      }
      function A6() {
        var o = new Lt(this.__wrapped__);
        return o.__actions__ = Tr(this.__actions__), o.__dir__ = this.__dir__, o.__filtered__ = this.__filtered__, o.__iteratees__ = Tr(this.__iteratees__), o.__takeCount__ = this.__takeCount__, o.__views__ = Tr(this.__views__), o;
      }
      function O6() {
        if (this.__filtered__) {
          var o = new Lt(this);
          o.__dir__ = -1, o.__filtered__ = !0;
        } else
          o = this.clone(), o.__dir__ *= -1;
        return o;
      }
      function N6() {
        var o = this.__wrapped__.value(), u = this.__dir__, m = gt(o), b = u < 0, O = m ? o.length : 0, F = GL(0, O, this.__views__), Y = F.start, Q = F.end, re = Q - Y, Re = b ? Q : Y - 1, Ae = this.__iteratees__, Ie = Ae.length, ze = 0, Xe = nr(re, this.__takeCount__);
        if (!m || !b && O == re && Xe == re)
          return gb(o, this.__actions__);
        var st = [];
        e:
          for (; re-- && ze < Xe; ) {
            Re += u;
            for (var Tt = -1, ot = o[Re]; ++Tt < Ie; ) {
              var Dt = Ae[Tt], Mt = Dt.iteratee, Fr = Dt.type, _r = Mt(ot);
              if (Fr == fe)
                ot = _r;
              else if (!_r) {
                if (Fr == ge)
                  continue e;
                break e;
              }
            }
            st[ze++] = ot;
          }
        return st;
      }
      Lt.prototype = Ms(Hc.prototype), Lt.prototype.constructor = Lt;
      function Xi(o) {
        var u = -1, m = o == null ? 0 : o.length;
        for (this.clear(); ++u < m; ) {
          var b = o[u];
          this.set(b[0], b[1]);
        }
      }
      function I6() {
        this.__data__ = Vo ? Vo(null) : {}, this.size = 0;
      }
      function x6(o) {
        var u = this.has(o) && delete this.__data__[o];
        return this.size -= u ? 1 : 0, u;
      }
      function D6(o) {
        var u = this.__data__;
        if (Vo) {
          var m = u[o];
          return m === c ? n : m;
        }
        return jt.call(u, o) ? u[o] : n;
      }
      function w6(o) {
        var u = this.__data__;
        return Vo ? u[o] !== n : jt.call(u, o);
      }
      function L6(o, u) {
        var m = this.__data__;
        return this.size += this.has(o) ? 0 : 1, m[o] = Vo && u === n ? c : u, this;
      }
      Xi.prototype.clear = I6, Xi.prototype.delete = x6, Xi.prototype.get = D6, Xi.prototype.has = w6, Xi.prototype.set = L6;
      function $a(o) {
        var u = -1, m = o == null ? 0 : o.length;
        for (this.clear(); ++u < m; ) {
          var b = o[u];
          this.set(b[0], b[1]);
        }
      }
      function M6() {
        this.__data__ = [], this.size = 0;
      }
      function k6(o) {
        var u = this.__data__, m = Yc(u, o);
        if (m < 0)
          return !1;
        var b = u.length - 1;
        return m == b ? u.pop() : kc.call(u, m, 1), --this.size, !0;
      }
      function P6(o) {
        var u = this.__data__, m = Yc(u, o);
        return m < 0 ? n : u[m][1];
      }
      function F6(o) {
        return Yc(this.__data__, o) > -1;
      }
      function B6(o, u) {
        var m = this.__data__, b = Yc(m, o);
        return b < 0 ? (++this.size, m.push([o, u])) : m[b][1] = u, this;
      }
      $a.prototype.clear = M6, $a.prototype.delete = k6, $a.prototype.get = P6, $a.prototype.has = F6, $a.prototype.set = B6;
      function Wa(o) {
        var u = -1, m = o == null ? 0 : o.length;
        for (this.clear(); ++u < m; ) {
          var b = o[u];
          this.set(b[0], b[1]);
        }
      }
      function U6() {
        this.size = 0, this.__data__ = {
          hash: new Xi(),
          map: new (zo || $a)(),
          string: new Xi()
        };
      }
      function G6(o) {
        var u = eu(this, o).delete(o);
        return this.size -= u ? 1 : 0, u;
      }
      function H6(o) {
        return eu(this, o).get(o);
      }
      function Y6(o) {
        return eu(this, o).has(o);
      }
      function z6(o, u) {
        var m = eu(this, o), b = m.size;
        return m.set(o, u), this.size += m.size == b ? 0 : 1, this;
      }
      Wa.prototype.clear = U6, Wa.prototype.delete = G6, Wa.prototype.get = H6, Wa.prototype.has = Y6, Wa.prototype.set = z6;
      function Zi(o) {
        var u = -1, m = o == null ? 0 : o.length;
        for (this.__data__ = new Wa(); ++u < m; )
          this.add(o[u]);
      }
      function q6(o) {
        return this.__data__.set(o, c), this;
      }
      function V6(o) {
        return this.__data__.has(o);
      }
      Zi.prototype.add = Zi.prototype.push = q6, Zi.prototype.has = V6;
      function _a(o) {
        var u = this.__data__ = new $a(o);
        this.size = u.size;
      }
      function $6() {
        this.__data__ = new $a(), this.size = 0;
      }
      function W6(o) {
        var u = this.__data__, m = u.delete(o);
        return this.size = u.size, m;
      }
      function K6(o) {
        return this.__data__.get(o);
      }
      function Q6(o) {
        return this.__data__.has(o);
      }
      function j6(o, u) {
        var m = this.__data__;
        if (m instanceof $a) {
          var b = m.__data__;
          if (!zo || b.length < a - 1)
            return b.push([o, u]), this.size = ++m.size, this;
          m = this.__data__ = new Wa(b);
        }
        return m.set(o, u), this.size = m.size, this;
      }
      _a.prototype.clear = $6, _a.prototype.delete = W6, _a.prototype.get = K6, _a.prototype.has = Q6, _a.prototype.set = j6;
      function WS(o, u) {
        var m = gt(o), b = !m && rs(o), O = !m && !b && vi(o), F = !m && !b && !O && Bs(o), Y = m || b || O || F, Q = Y ? Op(o.length, s6) : [], re = Q.length;
        for (var Re in o)
          (u || jt.call(o, Re)) && !(Y && // Safari 9 has enumerable `arguments.length` in strict mode.
          (Re == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          O && (Re == "offset" || Re == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          F && (Re == "buffer" || Re == "byteLength" || Re == "byteOffset") || // Skip index properties.
          Xa(Re, re))) && Q.push(Re);
        return Q;
      }
      function KS(o) {
        var u = o.length;
        return u ? o[qp(0, u - 1)] : n;
      }
      function X6(o, u) {
        return tu(Tr(o), Ji(u, 0, o.length));
      }
      function Z6(o) {
        return tu(Tr(o));
      }
      function Mp(o, u, m) {
        (m !== n && !ma(o[u], m) || m === n && !(u in o)) && Ka(o, u, m);
      }
      function Wo(o, u, m) {
        var b = o[u];
        (!(jt.call(o, u) && ma(b, m)) || m === n && !(u in o)) && Ka(o, u, m);
      }
      function Yc(o, u) {
        for (var m = o.length; m--; )
          if (ma(o[m][0], u))
            return m;
        return -1;
      }
      function J6(o, u, m, b) {
        return Si(o, function(O, F, Y) {
          u(b, O, m(O), Y);
        }), b;
      }
      function QS(o, u) {
        return o && Ra(u, $n(u), o);
      }
      function eL(o, u) {
        return o && Ra(u, vr(u), o);
      }
      function Ka(o, u, m) {
        u == "__proto__" && Pc ? Pc(o, u, {
          configurable: !0,
          enumerable: !0,
          value: m,
          writable: !0
        }) : o[u] = m;
      }
      function kp(o, u) {
        for (var m = -1, b = u.length, O = de(b), F = o == null; ++m < b; )
          O[m] = F ? n : f0(o, u[m]);
        return O;
      }
      function Ji(o, u, m) {
        return o === o && (m !== n && (o = o <= m ? o : m), u !== n && (o = o >= u ? o : u)), o;
      }
      function Xr(o, u, m, b, O, F) {
        var Y, Q = u & _, re = u & f, Re = u & g;
        if (m && (Y = O ? m(o, b, O, F) : m(o)), Y !== n)
          return Y;
        if (!En(o))
          return o;
        var Ae = gt(o);
        if (Ae) {
          if (Y = YL(o), !Q)
            return Tr(o, Y);
        } else {
          var Ie = rr(o), ze = Ie == _e || Ie == je;
          if (vi(o))
            return Sb(o, Q);
          if (Ie == bt || Ie == Ce || ze && !O) {
            if (Y = re || ze ? {} : Bb(o), !Q)
              return re ? DL(o, eL(Y, o)) : xL(o, QS(Y, o));
          } else {
            if (!rn[Ie])
              return O ? o : {};
            Y = zL(o, Ie, Q);
          }
        }
        F || (F = new _a());
        var Xe = F.get(o);
        if (Xe)
          return Xe;
        F.set(o, Y), _T(o) ? o.forEach(function(ot) {
          Y.add(Xr(ot, u, m, ot, o, F));
        }) : dT(o) && o.forEach(function(ot, Dt) {
          Y.set(Dt, Xr(ot, u, m, Dt, o, F));
        });
        var st = Re ? re ? t0 : e0 : re ? vr : $n, Tt = Ae ? n : st(o);
        return Kr(Tt || o, function(ot, Dt) {
          Tt && (Dt = ot, ot = o[Dt]), Wo(Y, Dt, Xr(ot, u, m, Dt, o, F));
        }), Y;
      }
      function tL(o) {
        var u = $n(o);
        return function(m) {
          return jS(m, o, u);
        };
      }
      function jS(o, u, m) {
        var b = m.length;
        if (o == null)
          return !b;
        for (o = Jt(o); b--; ) {
          var O = m[b], F = u[O], Y = o[O];
          if (Y === n && !(O in o) || !F(Y))
            return !1;
        }
        return !0;
      }
      function XS(o, u, m) {
        if (typeof o != "function")
          throw new Qr(s);
        return el(function() {
          o.apply(n, m);
        }, u);
      }
      function Ko(o, u, m, b) {
        var O = -1, F = Rc, Y = !0, Q = o.length, re = [], Re = u.length;
        if (!Q)
          return re;
        m && (u = pn(u, Mr(m))), b ? (F = Tp, Y = !1) : u.length >= a && (F = Ho, Y = !1, u = new Zi(u));
        e:
          for (; ++O < Q; ) {
            var Ae = o[O], Ie = m == null ? Ae : m(Ae);
            if (Ae = b || Ae !== 0 ? Ae : 0, Y && Ie === Ie) {
              for (var ze = Re; ze--; )
                if (u[ze] === Ie)
                  continue e;
              re.push(Ae);
            } else F(u, Ie, b) || re.push(Ae);
          }
        return re;
      }
      var Si = Cb(Ca), ZS = Cb(Fp, !0);
      function nL(o, u) {
        var m = !0;
        return Si(o, function(b, O, F) {
          return m = !!u(b, O, F), m;
        }), m;
      }
      function zc(o, u, m) {
        for (var b = -1, O = o.length; ++b < O; ) {
          var F = o[b], Y = u(F);
          if (Y != null && (Q === n ? Y === Y && !Pr(Y) : m(Y, Q)))
            var Q = Y, re = F;
        }
        return re;
      }
      function rL(o, u, m, b) {
        var O = o.length;
        for (m = ht(m), m < 0 && (m = -m > O ? 0 : O + m), b = b === n || b > O ? O : ht(b), b < 0 && (b += O), b = m > b ? 0 : fT(b); m < b; )
          o[m++] = u;
        return o;
      }
      function JS(o, u) {
        var m = [];
        return Si(o, function(b, O, F) {
          u(b, O, F) && m.push(b);
        }), m;
      }
      function Zn(o, u, m, b, O) {
        var F = -1, Y = o.length;
        for (m || (m = VL), O || (O = []); ++F < Y; ) {
          var Q = o[F];
          u > 0 && m(Q) ? u > 1 ? Zn(Q, u - 1, m, b, O) : gi(O, Q) : b || (O[O.length] = Q);
        }
        return O;
      }
      var Pp = Rb(), eb = Rb(!0);
      function Ca(o, u) {
        return o && Pp(o, u, $n);
      }
      function Fp(o, u) {
        return o && eb(o, u, $n);
      }
      function qc(o, u) {
        return fi(u, function(m) {
          return Za(o[m]);
        });
      }
      function es(o, u) {
        u = Ti(u, o);
        for (var m = 0, b = u.length; o != null && m < b; )
          o = o[Aa(u[m++])];
        return m && m == b ? o : n;
      }
      function tb(o, u, m) {
        var b = u(o);
        return gt(o) ? b : gi(b, m(o));
      }
      function dr(o) {
        return o == null ? o === n ? Oe : mt : ji && ji in Jt(o) ? UL(o) : ZL(o);
      }
      function Bp(o, u) {
        return o > u;
      }
      function aL(o, u) {
        return o != null && jt.call(o, u);
      }
      function iL(o, u) {
        return o != null && u in Jt(o);
      }
      function sL(o, u, m) {
        return o >= nr(u, m) && o < Un(u, m);
      }
      function Up(o, u, m) {
        for (var b = m ? Tp : Rc, O = o[0].length, F = o.length, Y = F, Q = de(F), re = 1 / 0, Re = []; Y--; ) {
          var Ae = o[Y];
          Y && u && (Ae = pn(Ae, Mr(u))), re = nr(Ae.length, re), Q[Y] = !m && (u || O >= 120 && Ae.length >= 120) ? new Zi(Y && Ae) : n;
        }
        Ae = o[0];
        var Ie = -1, ze = Q[0];
        e:
          for (; ++Ie < O && Re.length < re; ) {
            var Xe = Ae[Ie], st = u ? u(Xe) : Xe;
            if (Xe = m || Xe !== 0 ? Xe : 0, !(ze ? Ho(ze, st) : b(Re, st, m))) {
              for (Y = F; --Y; ) {
                var Tt = Q[Y];
                if (!(Tt ? Ho(Tt, st) : b(o[Y], st, m)))
                  continue e;
              }
              ze && ze.push(st), Re.push(Xe);
            }
          }
        return Re;
      }
      function oL(o, u, m, b) {
        return Ca(o, function(O, F, Y) {
          u(b, m(O), F, Y);
        }), b;
      }
      function Qo(o, u, m) {
        u = Ti(u, o), o = Yb(o, u);
        var b = o == null ? o : o[Aa(Jr(u))];
        return b == null ? n : Lr(b, o, m);
      }
      function nb(o) {
        return yn(o) && dr(o) == Ce;
      }
      function lL(o) {
        return yn(o) && dr(o) == ue;
      }
      function cL(o) {
        return yn(o) && dr(o) == Ue;
      }
      function jo(o, u, m, b, O) {
        return o === u ? !0 : o == null || u == null || !yn(o) && !yn(u) ? o !== o && u !== u : uL(o, u, m, b, jo, O);
      }
      function uL(o, u, m, b, O, F) {
        var Y = gt(o), Q = gt(u), re = Y ? he : rr(o), Re = Q ? he : rr(u);
        re = re == Ce ? bt : re, Re = Re == Ce ? bt : Re;
        var Ae = re == bt, Ie = Re == bt, ze = re == Re;
        if (ze && vi(o)) {
          if (!vi(u))
            return !1;
          Y = !0, Ae = !1;
        }
        if (ze && !Ae)
          return F || (F = new _a()), Y || Bs(o) ? kb(o, u, m, b, O, F) : FL(o, u, re, m, b, O, F);
        if (!(m & E)) {
          var Xe = Ae && jt.call(o, "__wrapped__"), st = Ie && jt.call(u, "__wrapped__");
          if (Xe || st) {
            var Tt = Xe ? o.value() : o, ot = st ? u.value() : u;
            return F || (F = new _a()), O(Tt, ot, m, b, F);
          }
        }
        return ze ? (F || (F = new _a()), BL(o, u, m, b, O, F)) : !1;
      }
      function dL(o) {
        return yn(o) && rr(o) == et;
      }
      function Gp(o, u, m, b) {
        var O = m.length, F = O, Y = !b;
        if (o == null)
          return !F;
        for (o = Jt(o); O--; ) {
          var Q = m[O];
          if (Y && Q[2] ? Q[1] !== o[Q[0]] : !(Q[0] in o))
            return !1;
        }
        for (; ++O < F; ) {
          Q = m[O];
          var re = Q[0], Re = o[re], Ae = Q[1];
          if (Y && Q[2]) {
            if (Re === n && !(re in o))
              return !1;
          } else {
            var Ie = new _a();
            if (b)
              var ze = b(Re, Ae, re, o, u, Ie);
            if (!(ze === n ? jo(Ae, Re, E | T, b, Ie) : ze))
              return !1;
          }
        }
        return !0;
      }
      function rb(o) {
        if (!En(o) || WL(o))
          return !1;
        var u = Za(o) ? d6 : Vn;
        return u.test(ns(o));
      }
      function pL(o) {
        return yn(o) && dr(o) == Gt;
      }
      function _L(o) {
        return yn(o) && rr(o) == pt;
      }
      function mL(o) {
        return yn(o) && ou(o.length) && !!ln[dr(o)];
      }
      function ab(o) {
        return typeof o == "function" ? o : o == null ? Cr : typeof o == "object" ? gt(o) ? ob(o[0], o[1]) : sb(o) : AT(o);
      }
      function Hp(o) {
        if (!Jo(o))
          return h6(o);
        var u = [];
        for (var m in Jt(o))
          jt.call(o, m) && m != "constructor" && u.push(m);
        return u;
      }
      function fL(o) {
        if (!En(o))
          return XL(o);
        var u = Jo(o), m = [];
        for (var b in o)
          b == "constructor" && (u || !jt.call(o, b)) || m.push(b);
        return m;
      }
      function Yp(o, u) {
        return o < u;
      }
      function ib(o, u) {
        var m = -1, b = yr(o) ? de(o.length) : [];
        return Si(o, function(O, F, Y) {
          b[++m] = u(O, F, Y);
        }), b;
      }
      function sb(o) {
        var u = r0(o);
        return u.length == 1 && u[0][2] ? Gb(u[0][0], u[0][1]) : function(m) {
          return m === o || Gp(m, o, u);
        };
      }
      function ob(o, u) {
        return i0(o) && Ub(u) ? Gb(Aa(o), u) : function(m) {
          var b = f0(m, o);
          return b === n && b === u ? g0(m, o) : jo(u, b, E | T);
        };
      }
      function Vc(o, u, m, b, O) {
        o !== u && Pp(u, function(F, Y) {
          if (O || (O = new _a()), En(F))
            gL(o, u, Y, m, Vc, b, O);
          else {
            var Q = b ? b(o0(o, Y), F, Y + "", o, u, O) : n;
            Q === n && (Q = F), Mp(o, Y, Q);
          }
        }, vr);
      }
      function gL(o, u, m, b, O, F, Y) {
        var Q = o0(o, m), re = o0(u, m), Re = Y.get(re);
        if (Re) {
          Mp(o, m, Re);
          return;
        }
        var Ae = F ? F(Q, re, m + "", o, u, Y) : n, Ie = Ae === n;
        if (Ie) {
          var ze = gt(re), Xe = !ze && vi(re), st = !ze && !Xe && Bs(re);
          Ae = re, ze || Xe || st ? gt(Q) ? Ae = Q : An(Q) ? Ae = Tr(Q) : Xe ? (Ie = !1, Ae = Sb(re, !0)) : st ? (Ie = !1, Ae = bb(re, !0)) : Ae = [] : tl(re) || rs(re) ? (Ae = Q, rs(Q) ? Ae = gT(Q) : (!En(Q) || Za(Q)) && (Ae = Bb(re))) : Ie = !1;
        }
        Ie && (Y.set(re, Ae), O(Ae, re, b, F, Y), Y.delete(re)), Mp(o, m, Ae);
      }
      function lb(o, u) {
        var m = o.length;
        if (m)
          return u += u < 0 ? m : 0, Xa(u, m) ? o[u] : n;
      }
      function cb(o, u, m) {
        u.length ? u = pn(u, function(F) {
          return gt(F) ? function(Y) {
            return es(Y, F.length === 1 ? F[0] : F);
          } : F;
        }) : u = [Cr];
        var b = -1;
        u = pn(u, Mr(it()));
        var O = ib(o, function(F, Y, Q) {
          var re = pn(u, function(Re) {
            return Re(F);
          });
          return { criteria: re, index: ++b, value: F };
        });
        return zw(O, function(F, Y) {
          return IL(F, Y, m);
        });
      }
      function hL(o, u) {
        return ub(o, u, function(m, b) {
          return g0(o, b);
        });
      }
      function ub(o, u, m) {
        for (var b = -1, O = u.length, F = {}; ++b < O; ) {
          var Y = u[b], Q = es(o, Y);
          m(Q, Y) && Xo(F, Ti(Y, o), Q);
        }
        return F;
      }
      function EL(o) {
        return function(u) {
          return es(u, o);
        };
      }
      function zp(o, u, m, b) {
        var O = b ? Yw : Os, F = -1, Y = u.length, Q = o;
        for (o === u && (u = Tr(u)), m && (Q = pn(o, Mr(m))); ++F < Y; )
          for (var re = 0, Re = u[F], Ae = m ? m(Re) : Re; (re = O(Q, Ae, re, b)) > -1; )
            Q !== o && kc.call(Q, re, 1), kc.call(o, re, 1);
        return o;
      }
      function db(o, u) {
        for (var m = o ? u.length : 0, b = m - 1; m--; ) {
          var O = u[m];
          if (m == b || O !== F) {
            var F = O;
            Xa(O) ? kc.call(o, O, 1) : Wp(o, O);
          }
        }
        return o;
      }
      function qp(o, u) {
        return o + Bc(VS() * (u - o + 1));
      }
      function SL(o, u, m, b) {
        for (var O = -1, F = Un(Fc((u - o) / (m || 1)), 0), Y = de(F); F--; )
          Y[b ? F : ++O] = o, o += m;
        return Y;
      }
      function Vp(o, u) {
        var m = "";
        if (!o || u < 1 || u > se)
          return m;
        do
          u % 2 && (m += o), u = Bc(u / 2), u && (o += o);
        while (u);
        return m;
      }
      function Rt(o, u) {
        return l0(Hb(o, u, Cr), o + "");
      }
      function bL(o) {
        return KS(Us(o));
      }
      function TL(o, u) {
        var m = Us(o);
        return tu(m, Ji(u, 0, m.length));
      }
      function Xo(o, u, m, b) {
        if (!En(o))
          return o;
        u = Ti(u, o);
        for (var O = -1, F = u.length, Y = F - 1, Q = o; Q != null && ++O < F; ) {
          var re = Aa(u[O]), Re = m;
          if (re === "__proto__" || re === "constructor" || re === "prototype")
            return o;
          if (O != Y) {
            var Ae = Q[re];
            Re = b ? b(Ae, re, Q) : n, Re === n && (Re = En(Ae) ? Ae : Xa(u[O + 1]) ? [] : {});
          }
          Wo(Q, re, Re), Q = Q[re];
        }
        return o;
      }
      var pb = Uc ? function(o, u) {
        return Uc.set(o, u), o;
      } : Cr, yL = Pc ? function(o, u) {
        return Pc(o, "toString", {
          configurable: !0,
          enumerable: !1,
          value: E0(u),
          writable: !0
        });
      } : Cr;
      function vL(o) {
        return tu(Us(o));
      }
      function Zr(o, u, m) {
        var b = -1, O = o.length;
        u < 0 && (u = -u > O ? 0 : O + u), m = m > O ? O : m, m < 0 && (m += O), O = u > m ? 0 : m - u >>> 0, u >>>= 0;
        for (var F = de(O); ++b < O; )
          F[b] = o[b + u];
        return F;
      }
      function CL(o, u) {
        var m;
        return Si(o, function(b, O, F) {
          return m = u(b, O, F), !m;
        }), !!m;
      }
      function $c(o, u, m) {
        var b = 0, O = o == null ? b : o.length;
        if (typeof u == "number" && u === u && O <= k) {
          for (; b < O; ) {
            var F = b + O >>> 1, Y = o[F];
            Y !== null && !Pr(Y) && (m ? Y <= u : Y < u) ? b = F + 1 : O = F;
          }
          return O;
        }
        return $p(o, u, Cr, m);
      }
      function $p(o, u, m, b) {
        var O = 0, F = o == null ? 0 : o.length;
        if (F === 0)
          return 0;
        u = m(u);
        for (var Y = u !== u, Q = u === null, re = Pr(u), Re = u === n; O < F; ) {
          var Ae = Bc((O + F) / 2), Ie = m(o[Ae]), ze = Ie !== n, Xe = Ie === null, st = Ie === Ie, Tt = Pr(Ie);
          if (Y)
            var ot = b || st;
          else Re ? ot = st && (b || ze) : Q ? ot = st && ze && (b || !Xe) : re ? ot = st && ze && !Xe && (b || !Tt) : Xe || Tt ? ot = !1 : ot = b ? Ie <= u : Ie < u;
          ot ? O = Ae + 1 : F = Ae;
        }
        return nr(F, oe);
      }
      function _b(o, u) {
        for (var m = -1, b = o.length, O = 0, F = []; ++m < b; ) {
          var Y = o[m], Q = u ? u(Y) : Y;
          if (!m || !ma(Q, re)) {
            var re = Q;
            F[O++] = Y === 0 ? 0 : Y;
          }
        }
        return F;
      }
      function mb(o) {
        return typeof o == "number" ? o : Pr(o) ? v : +o;
      }
      function kr(o) {
        if (typeof o == "string")
          return o;
        if (gt(o))
          return pn(o, kr) + "";
        if (Pr(o))
          return $S ? $S.call(o) : "";
        var u = o + "";
        return u == "0" && 1 / o == -ne ? "-0" : u;
      }
      function bi(o, u, m) {
        var b = -1, O = Rc, F = o.length, Y = !0, Q = [], re = Q;
        if (m)
          Y = !1, O = Tp;
        else if (F >= a) {
          var Re = u ? null : kL(o);
          if (Re)
            return Oc(Re);
          Y = !1, O = Ho, re = new Zi();
        } else
          re = u ? [] : Q;
        e:
          for (; ++b < F; ) {
            var Ae = o[b], Ie = u ? u(Ae) : Ae;
            if (Ae = m || Ae !== 0 ? Ae : 0, Y && Ie === Ie) {
              for (var ze = re.length; ze--; )
                if (re[ze] === Ie)
                  continue e;
              u && re.push(Ie), Q.push(Ae);
            } else O(re, Ie, m) || (re !== Q && re.push(Ie), Q.push(Ae));
          }
        return Q;
      }
      function Wp(o, u) {
        return u = Ti(u, o), o = Yb(o, u), o == null || delete o[Aa(Jr(u))];
      }
      function fb(o, u, m, b) {
        return Xo(o, u, m(es(o, u)), b);
      }
      function Wc(o, u, m, b) {
        for (var O = o.length, F = b ? O : -1; (b ? F-- : ++F < O) && u(o[F], F, o); )
          ;
        return m ? Zr(o, b ? 0 : F, b ? F + 1 : O) : Zr(o, b ? F + 1 : 0, b ? O : F);
      }
      function gb(o, u) {
        var m = o;
        return m instanceof Lt && (m = m.value()), yp(u, function(b, O) {
          return O.func.apply(O.thisArg, gi([b], O.args));
        }, m);
      }
      function Kp(o, u, m) {
        var b = o.length;
        if (b < 2)
          return b ? bi(o[0]) : [];
        for (var O = -1, F = de(b); ++O < b; )
          for (var Y = o[O], Q = -1; ++Q < b; )
            Q != O && (F[O] = Ko(F[O] || Y, o[Q], u, m));
        return bi(Zn(F, 1), u, m);
      }
      function hb(o, u, m) {
        for (var b = -1, O = o.length, F = u.length, Y = {}; ++b < O; ) {
          var Q = b < F ? u[b] : n;
          m(Y, o[b], Q);
        }
        return Y;
      }
      function Qp(o) {
        return An(o) ? o : [];
      }
      function jp(o) {
        return typeof o == "function" ? o : Cr;
      }
      function Ti(o, u) {
        return gt(o) ? o : i0(o, u) ? [o] : $b($t(o));
      }
      var RL = Rt;
      function yi(o, u, m) {
        var b = o.length;
        return m = m === n ? b : m, !u && m >= b ? o : Zr(o, u, m);
      }
      var Eb = p6 || function(o) {
        return Xn.clearTimeout(o);
      };
      function Sb(o, u) {
        if (u)
          return o.slice();
        var m = o.length, b = GS ? GS(m) : new o.constructor(m);
        return o.copy(b), b;
      }
      function Xp(o) {
        var u = new o.constructor(o.byteLength);
        return new Lc(u).set(new Lc(o)), u;
      }
      function AL(o, u) {
        var m = u ? Xp(o.buffer) : o.buffer;
        return new o.constructor(m, o.byteOffset, o.byteLength);
      }
      function OL(o) {
        var u = new o.constructor(o.source, zt.exec(o));
        return u.lastIndex = o.lastIndex, u;
      }
      function NL(o) {
        return $o ? Jt($o.call(o)) : {};
      }
      function bb(o, u) {
        var m = u ? Xp(o.buffer) : o.buffer;
        return new o.constructor(m, o.byteOffset, o.length);
      }
      function Tb(o, u) {
        if (o !== u) {
          var m = o !== n, b = o === null, O = o === o, F = Pr(o), Y = u !== n, Q = u === null, re = u === u, Re = Pr(u);
          if (!Q && !Re && !F && o > u || F && Y && re && !Q && !Re || b && Y && re || !m && re || !O)
            return 1;
          if (!b && !F && !Re && o < u || Re && m && O && !b && !F || Q && m && O || !Y && O || !re)
            return -1;
        }
        return 0;
      }
      function IL(o, u, m) {
        for (var b = -1, O = o.criteria, F = u.criteria, Y = O.length, Q = m.length; ++b < Y; ) {
          var re = Tb(O[b], F[b]);
          if (re) {
            if (b >= Q)
              return re;
            var Re = m[b];
            return re * (Re == "desc" ? -1 : 1);
          }
        }
        return o.index - u.index;
      }
      function yb(o, u, m, b) {
        for (var O = -1, F = o.length, Y = m.length, Q = -1, re = u.length, Re = Un(F - Y, 0), Ae = de(re + Re), Ie = !b; ++Q < re; )
          Ae[Q] = u[Q];
        for (; ++O < Y; )
          (Ie || O < F) && (Ae[m[O]] = o[O]);
        for (; Re--; )
          Ae[Q++] = o[O++];
        return Ae;
      }
      function vb(o, u, m, b) {
        for (var O = -1, F = o.length, Y = -1, Q = m.length, re = -1, Re = u.length, Ae = Un(F - Q, 0), Ie = de(Ae + Re), ze = !b; ++O < Ae; )
          Ie[O] = o[O];
        for (var Xe = O; ++re < Re; )
          Ie[Xe + re] = u[re];
        for (; ++Y < Q; )
          (ze || O < F) && (Ie[Xe + m[Y]] = o[O++]);
        return Ie;
      }
      function Tr(o, u) {
        var m = -1, b = o.length;
        for (u || (u = de(b)); ++m < b; )
          u[m] = o[m];
        return u;
      }
      function Ra(o, u, m, b) {
        var O = !m;
        m || (m = {});
        for (var F = -1, Y = u.length; ++F < Y; ) {
          var Q = u[F], re = b ? b(m[Q], o[Q], Q, m, o) : n;
          re === n && (re = o[Q]), O ? Ka(m, Q, re) : Wo(m, Q, re);
        }
        return m;
      }
      function xL(o, u) {
        return Ra(o, a0(o), u);
      }
      function DL(o, u) {
        return Ra(o, Pb(o), u);
      }
      function Kc(o, u) {
        return function(m, b) {
          var O = gt(m) ? Pw : J6, F = u ? u() : {};
          return O(m, o, it(b, 2), F);
        };
      }
      function ks(o) {
        return Rt(function(u, m) {
          var b = -1, O = m.length, F = O > 1 ? m[O - 1] : n, Y = O > 2 ? m[2] : n;
          for (F = o.length > 3 && typeof F == "function" ? (O--, F) : n, Y && pr(m[0], m[1], Y) && (F = O < 3 ? n : F, O = 1), u = Jt(u); ++b < O; ) {
            var Q = m[b];
            Q && o(u, Q, b, F);
          }
          return u;
        });
      }
      function Cb(o, u) {
        return function(m, b) {
          if (m == null)
            return m;
          if (!yr(m))
            return o(m, b);
          for (var O = m.length, F = u ? O : -1, Y = Jt(m); (u ? F-- : ++F < O) && b(Y[F], F, Y) !== !1; )
            ;
          return m;
        };
      }
      function Rb(o) {
        return function(u, m, b) {
          for (var O = -1, F = Jt(u), Y = b(u), Q = Y.length; Q--; ) {
            var re = Y[o ? Q : ++O];
            if (m(F[re], re, F) === !1)
              break;
          }
          return u;
        };
      }
      function wL(o, u, m) {
        var b = u & R, O = Zo(o);
        function F() {
          var Y = this && this !== Xn && this instanceof F ? O : o;
          return Y.apply(b ? m : this, arguments);
        }
        return F;
      }
      function Ab(o) {
        return function(u) {
          u = $t(u);
          var m = Ns(u) ? pa(u) : n, b = m ? m[0] : u.charAt(0), O = m ? yi(m, 1).join("") : u.slice(1);
          return b[o]() + O;
        };
      }
      function Ps(o) {
        return function(u) {
          return yp(CT(vT(u).replace(SS, "")), o, "");
        };
      }
      function Zo(o) {
        return function() {
          var u = arguments;
          switch (u.length) {
            case 0:
              return new o();
            case 1:
              return new o(u[0]);
            case 2:
              return new o(u[0], u[1]);
            case 3:
              return new o(u[0], u[1], u[2]);
            case 4:
              return new o(u[0], u[1], u[2], u[3]);
            case 5:
              return new o(u[0], u[1], u[2], u[3], u[4]);
            case 6:
              return new o(u[0], u[1], u[2], u[3], u[4], u[5]);
            case 7:
              return new o(u[0], u[1], u[2], u[3], u[4], u[5], u[6]);
          }
          var m = Ms(o.prototype), b = o.apply(m, u);
          return En(b) ? b : m;
        };
      }
      function LL(o, u, m) {
        var b = Zo(o);
        function O() {
          for (var F = arguments.length, Y = de(F), Q = F, re = Fs(O); Q--; )
            Y[Q] = arguments[Q];
          var Re = F < 3 && Y[0] !== re && Y[F - 1] !== re ? [] : hi(Y, re);
          if (F -= Re.length, F < m)
            return Db(
              o,
              u,
              Qc,
              O.placeholder,
              n,
              Y,
              Re,
              n,
              n,
              m - F
            );
          var Ae = this && this !== Xn && this instanceof O ? b : o;
          return Lr(Ae, this, Y);
        }
        return O;
      }
      function Ob(o) {
        return function(u, m, b) {
          var O = Jt(u);
          if (!yr(u)) {
            var F = it(m, 3);
            u = $n(u), m = function(Q) {
              return F(O[Q], Q, O);
            };
          }
          var Y = o(u, m, b);
          return Y > -1 ? O[F ? u[Y] : Y] : n;
        };
      }
      function Nb(o) {
        return ja(function(u) {
          var m = u.length, b = m, O = jr.prototype.thru;
          for (o && u.reverse(); b--; ) {
            var F = u[b];
            if (typeof F != "function")
              throw new Qr(s);
            if (O && !Y && Jc(F) == "wrapper")
              var Y = new jr([], !0);
          }
          for (b = Y ? b : m; ++b < m; ) {
            F = u[b];
            var Q = Jc(F), re = Q == "wrapper" ? n0(F) : n;
            re && s0(re[0]) && re[1] == (K | x | D | J) && !re[4].length && re[9] == 1 ? Y = Y[Jc(re[0])].apply(Y, re[3]) : Y = F.length == 1 && s0(F) ? Y[Q]() : Y.thru(F);
          }
          return function() {
            var Re = arguments, Ae = Re[0];
            if (Y && Re.length == 1 && gt(Ae))
              return Y.plant(Ae).value();
            for (var Ie = 0, ze = m ? u[Ie].apply(this, Re) : Ae; ++Ie < m; )
              ze = u[Ie].call(this, ze);
            return ze;
          };
        });
      }
      function Qc(o, u, m, b, O, F, Y, Q, re, Re) {
        var Ae = u & K, Ie = u & R, ze = u & A, Xe = u & (x | P), st = u & X, Tt = ze ? n : Zo(o);
        function ot() {
          for (var Dt = arguments.length, Mt = de(Dt), Fr = Dt; Fr--; )
            Mt[Fr] = arguments[Fr];
          if (Xe)
            var _r = Fs(ot), Br = Vw(Mt, _r);
          if (b && (Mt = yb(Mt, b, O, Xe)), F && (Mt = vb(Mt, F, Y, Xe)), Dt -= Br, Xe && Dt < Re) {
            var On = hi(Mt, _r);
            return Db(
              o,
              u,
              Qc,
              ot.placeholder,
              m,
              Mt,
              On,
              Q,
              re,
              Re - Dt
            );
          }
          var fa = Ie ? m : this, ei = ze ? fa[o] : o;
          return Dt = Mt.length, Q ? Mt = JL(Mt, Q) : st && Dt > 1 && Mt.reverse(), Ae && re < Dt && (Mt.length = re), this && this !== Xn && this instanceof ot && (ei = Tt || Zo(ei)), ei.apply(fa, Mt);
        }
        return ot;
      }
      function Ib(o, u) {
        return function(m, b) {
          return oL(m, o, u(b), {});
        };
      }
      function jc(o, u) {
        return function(m, b) {
          var O;
          if (m === n && b === n)
            return u;
          if (m !== n && (O = m), b !== n) {
            if (O === n)
              return b;
            typeof m == "string" || typeof b == "string" ? (m = kr(m), b = kr(b)) : (m = mb(m), b = mb(b)), O = o(m, b);
          }
          return O;
        };
      }
      function Zp(o) {
        return ja(function(u) {
          return u = pn(u, Mr(it())), Rt(function(m) {
            var b = this;
            return o(u, function(O) {
              return Lr(O, b, m);
            });
          });
        });
      }
      function Xc(o, u) {
        u = u === n ? " " : kr(u);
        var m = u.length;
        if (m < 2)
          return m ? Vp(u, o) : u;
        var b = Vp(u, Fc(o / Is(u)));
        return Ns(u) ? yi(pa(b), 0, o).join("") : b.slice(0, o);
      }
      function ML(o, u, m, b) {
        var O = u & R, F = Zo(o);
        function Y() {
          for (var Q = -1, re = arguments.length, Re = -1, Ae = b.length, Ie = de(Ae + re), ze = this && this !== Xn && this instanceof Y ? F : o; ++Re < Ae; )
            Ie[Re] = b[Re];
          for (; re--; )
            Ie[Re++] = arguments[++Q];
          return Lr(ze, O ? m : this, Ie);
        }
        return Y;
      }
      function xb(o) {
        return function(u, m, b) {
          return b && typeof b != "number" && pr(u, m, b) && (m = b = n), u = Ja(u), m === n ? (m = u, u = 0) : m = Ja(m), b = b === n ? u < m ? 1 : -1 : Ja(b), SL(u, m, b, o);
        };
      }
      function Zc(o) {
        return function(u, m) {
          return typeof u == "string" && typeof m == "string" || (u = ea(u), m = ea(m)), o(u, m);
        };
      }
      function Db(o, u, m, b, O, F, Y, Q, re, Re) {
        var Ae = u & x, Ie = Ae ? Y : n, ze = Ae ? n : Y, Xe = Ae ? F : n, st = Ae ? n : F;
        u |= Ae ? D : L, u &= ~(Ae ? L : D), u & I || (u &= ~(R | A));
        var Tt = [
          o,
          u,
          O,
          Xe,
          Ie,
          st,
          ze,
          Q,
          re,
          Re
        ], ot = m.apply(n, Tt);
        return s0(o) && zb(ot, Tt), ot.placeholder = b, qb(ot, o, u);
      }
      function Jp(o) {
        var u = Bn[o];
        return function(m, b) {
          if (m = ea(m), b = b == null ? 0 : nr(ht(b), 292), b && qS(m)) {
            var O = ($t(m) + "e").split("e"), F = u(O[0] + "e" + (+O[1] + b));
            return O = ($t(F) + "e").split("e"), +(O[0] + "e" + (+O[1] - b));
          }
          return u(m);
        };
      }
      var kL = ws && 1 / Oc(new ws([, -0]))[1] == ne ? function(o) {
        return new ws(o);
      } : T0;
      function wb(o) {
        return function(u) {
          var m = rr(u);
          return m == et ? Ip(u) : m == pt ? Zw(u) : qw(u, o(u));
        };
      }
      function Qa(o, u, m, b, O, F, Y, Q) {
        var re = u & A;
        if (!re && typeof o != "function")
          throw new Qr(s);
        var Re = b ? b.length : 0;
        if (Re || (u &= ~(D | L), b = O = n), Y = Y === n ? Y : Un(ht(Y), 0), Q = Q === n ? Q : ht(Q), Re -= O ? O.length : 0, u & L) {
          var Ae = b, Ie = O;
          b = O = n;
        }
        var ze = re ? n : n0(o), Xe = [
          o,
          u,
          m,
          b,
          O,
          Ae,
          Ie,
          F,
          Y,
          Q
        ];
        if (ze && jL(Xe, ze), o = Xe[0], u = Xe[1], m = Xe[2], b = Xe[3], O = Xe[4], Q = Xe[9] = Xe[9] === n ? re ? 0 : o.length : Un(Xe[9] - Re, 0), !Q && u & (x | P) && (u &= ~(x | P)), !u || u == R)
          var st = wL(o, u, m);
        else u == x || u == P ? st = LL(o, u, Q) : (u == D || u == (R | D)) && !O.length ? st = ML(o, u, m, b) : st = Qc.apply(n, Xe);
        var Tt = ze ? pb : zb;
        return qb(Tt(st, Xe), o, u);
      }
      function Lb(o, u, m, b) {
        return o === n || ma(o, Ds[m]) && !jt.call(b, m) ? u : o;
      }
      function Mb(o, u, m, b, O, F) {
        return En(o) && En(u) && (F.set(u, o), Vc(o, u, n, Mb, F), F.delete(u)), o;
      }
      function PL(o) {
        return tl(o) ? n : o;
      }
      function kb(o, u, m, b, O, F) {
        var Y = m & E, Q = o.length, re = u.length;
        if (Q != re && !(Y && re > Q))
          return !1;
        var Re = F.get(o), Ae = F.get(u);
        if (Re && Ae)
          return Re == u && Ae == o;
        var Ie = -1, ze = !0, Xe = m & T ? new Zi() : n;
        for (F.set(o, u), F.set(u, o); ++Ie < Q; ) {
          var st = o[Ie], Tt = u[Ie];
          if (b)
            var ot = Y ? b(Tt, st, Ie, u, o, F) : b(st, Tt, Ie, o, u, F);
          if (ot !== n) {
            if (ot)
              continue;
            ze = !1;
            break;
          }
          if (Xe) {
            if (!vp(u, function(Dt, Mt) {
              if (!Ho(Xe, Mt) && (st === Dt || O(st, Dt, m, b, F)))
                return Xe.push(Mt);
            })) {
              ze = !1;
              break;
            }
          } else if (!(st === Tt || O(st, Tt, m, b, F))) {
            ze = !1;
            break;
          }
        }
        return F.delete(o), F.delete(u), ze;
      }
      function FL(o, u, m, b, O, F, Y) {
        switch (m) {
          case be:
            if (o.byteLength != u.byteLength || o.byteOffset != u.byteOffset)
              return !1;
            o = o.buffer, u = u.buffer;
          case ue:
            return !(o.byteLength != u.byteLength || !F(new Lc(o), new Lc(u)));
          case ye:
          case Ue:
          case nt:
            return ma(+o, +u);
          case Qe:
            return o.name == u.name && o.message == u.message;
          case Gt:
          case Be:
            return o == u + "";
          case et:
            var Q = Ip;
          case pt:
            var re = b & E;
            if (Q || (Q = Oc), o.size != u.size && !re)
              return !1;
            var Re = Y.get(o);
            if (Re)
              return Re == u;
            b |= T, Y.set(o, u);
            var Ae = kb(Q(o), Q(u), b, O, F, Y);
            return Y.delete(o), Ae;
          case It:
            if ($o)
              return $o.call(o) == $o.call(u);
        }
        return !1;
      }
      function BL(o, u, m, b, O, F) {
        var Y = m & E, Q = e0(o), re = Q.length, Re = e0(u), Ae = Re.length;
        if (re != Ae && !Y)
          return !1;
        for (var Ie = re; Ie--; ) {
          var ze = Q[Ie];
          if (!(Y ? ze in u : jt.call(u, ze)))
            return !1;
        }
        var Xe = F.get(o), st = F.get(u);
        if (Xe && st)
          return Xe == u && st == o;
        var Tt = !0;
        F.set(o, u), F.set(u, o);
        for (var ot = Y; ++Ie < re; ) {
          ze = Q[Ie];
          var Dt = o[ze], Mt = u[ze];
          if (b)
            var Fr = Y ? b(Mt, Dt, ze, u, o, F) : b(Dt, Mt, ze, o, u, F);
          if (!(Fr === n ? Dt === Mt || O(Dt, Mt, m, b, F) : Fr)) {
            Tt = !1;
            break;
          }
          ot || (ot = ze == "constructor");
        }
        if (Tt && !ot) {
          var _r = o.constructor, Br = u.constructor;
          _r != Br && "constructor" in o && "constructor" in u && !(typeof _r == "function" && _r instanceof _r && typeof Br == "function" && Br instanceof Br) && (Tt = !1);
        }
        return F.delete(o), F.delete(u), Tt;
      }
      function ja(o) {
        return l0(Hb(o, n, jb), o + "");
      }
      function e0(o) {
        return tb(o, $n, a0);
      }
      function t0(o) {
        return tb(o, vr, Pb);
      }
      var n0 = Uc ? function(o) {
        return Uc.get(o);
      } : T0;
      function Jc(o) {
        for (var u = o.name + "", m = Ls[u], b = jt.call(Ls, u) ? m.length : 0; b--; ) {
          var O = m[b], F = O.func;
          if (F == null || F == o)
            return O.name;
        }
        return u;
      }
      function Fs(o) {
        var u = jt.call(w, "placeholder") ? w : o;
        return u.placeholder;
      }
      function it() {
        var o = w.iteratee || S0;
        return o = o === S0 ? ab : o, arguments.length ? o(arguments[0], arguments[1]) : o;
      }
      function eu(o, u) {
        var m = o.__data__;
        return $L(u) ? m[typeof u == "string" ? "string" : "hash"] : m.map;
      }
      function r0(o) {
        for (var u = $n(o), m = u.length; m--; ) {
          var b = u[m], O = o[b];
          u[m] = [b, O, Ub(O)];
        }
        return u;
      }
      function ts(o, u) {
        var m = Qw(o, u);
        return rb(m) ? m : n;
      }
      function UL(o) {
        var u = jt.call(o, ji), m = o[ji];
        try {
          o[ji] = n;
          var b = !0;
        } catch {
        }
        var O = Dc.call(o);
        return b && (u ? o[ji] = m : delete o[ji]), O;
      }
      var a0 = Dp ? function(o) {
        return o == null ? [] : (o = Jt(o), fi(Dp(o), function(u) {
          return YS.call(o, u);
        }));
      } : y0, Pb = Dp ? function(o) {
        for (var u = []; o; )
          gi(u, a0(o)), o = Mc(o);
        return u;
      } : y0, rr = dr;
      (wp && rr(new wp(new ArrayBuffer(1))) != be || zo && rr(new zo()) != et || Lp && rr(Lp.resolve()) != _t || ws && rr(new ws()) != pt || qo && rr(new qo()) != j) && (rr = function(o) {
        var u = dr(o), m = u == bt ? o.constructor : n, b = m ? ns(m) : "";
        if (b)
          switch (b) {
            case T6:
              return be;
            case y6:
              return et;
            case v6:
              return _t;
            case C6:
              return pt;
            case R6:
              return j;
          }
        return u;
      });
      function GL(o, u, m) {
        for (var b = -1, O = m.length; ++b < O; ) {
          var F = m[b], Y = F.size;
          switch (F.type) {
            case "drop":
              o += Y;
              break;
            case "dropRight":
              u -= Y;
              break;
            case "take":
              u = nr(u, o + Y);
              break;
            case "takeRight":
              o = Un(o, u - Y);
              break;
          }
        }
        return { start: o, end: u };
      }
      function HL(o) {
        var u = o.match(_c);
        return u ? u[1].split(W) : [];
      }
      function Fb(o, u, m) {
        u = Ti(u, o);
        for (var b = -1, O = u.length, F = !1; ++b < O; ) {
          var Y = Aa(u[b]);
          if (!(F = o != null && m(o, Y)))
            break;
          o = o[Y];
        }
        return F || ++b != O ? F : (O = o == null ? 0 : o.length, !!O && ou(O) && Xa(Y, O) && (gt(o) || rs(o)));
      }
      function YL(o) {
        var u = o.length, m = new o.constructor(u);
        return u && typeof o[0] == "string" && jt.call(o, "index") && (m.index = o.index, m.input = o.input), m;
      }
      function Bb(o) {
        return typeof o.constructor == "function" && !Jo(o) ? Ms(Mc(o)) : {};
      }
      function zL(o, u, m) {
        var b = o.constructor;
        switch (u) {
          case ue:
            return Xp(o);
          case ye:
          case Ue:
            return new b(+o);
          case be:
            return AL(o, m);
          case Ge:
          case Ze:
          case vt:
          case Pt:
          case Ln:
          case Rn:
          case nn:
          case Fn:
          case ut:
            return bb(o, m);
          case et:
            return new b();
          case nt:
          case Be:
            return new b(o);
          case Gt:
            return OL(o);
          case pt:
            return new b();
          case It:
            return NL(o);
        }
      }
      function qL(o, u) {
        var m = u.length;
        if (!m)
          return o;
        var b = m - 1;
        return u[b] = (m > 1 ? "& " : "") + u[b], u = u.join(m > 2 ? ", " : " "), o.replace(pc, `{
/* [wrapped with ` + u + `] */
`);
      }
      function VL(o) {
        return gt(o) || rs(o) || !!(zS && o && o[zS]);
      }
      function Xa(o, u) {
        var m = typeof o;
        return u = u ?? se, !!u && (m == "number" || m != "symbol" && hn.test(o)) && o > -1 && o % 1 == 0 && o < u;
      }
      function pr(o, u, m) {
        if (!En(m))
          return !1;
        var b = typeof u;
        return (b == "number" ? yr(m) && Xa(u, m.length) : b == "string" && u in m) ? ma(m[u], o) : !1;
      }
      function i0(o, u) {
        if (gt(o))
          return !1;
        var m = typeof o;
        return m == "number" || m == "symbol" || m == "boolean" || o == null || Pr(o) ? !0 : Do.test(o) || !xo.test(o) || u != null && o in Jt(u);
      }
      function $L(o) {
        var u = typeof o;
        return u == "string" || u == "number" || u == "symbol" || u == "boolean" ? o !== "__proto__" : o === null;
      }
      function s0(o) {
        var u = Jc(o), m = w[u];
        if (typeof m != "function" || !(u in Lt.prototype))
          return !1;
        if (o === m)
          return !0;
        var b = n0(m);
        return !!b && o === b[0];
      }
      function WL(o) {
        return !!US && US in o;
      }
      var KL = Ic ? Za : v0;
      function Jo(o) {
        var u = o && o.constructor, m = typeof u == "function" && u.prototype || Ds;
        return o === m;
      }
      function Ub(o) {
        return o === o && !En(o);
      }
      function Gb(o, u) {
        return function(m) {
          return m == null ? !1 : m[o] === u && (u !== n || o in Jt(m));
        };
      }
      function QL(o) {
        var u = iu(o, function(b) {
          return m.size === d && m.clear(), b;
        }), m = u.cache;
        return u;
      }
      function jL(o, u) {
        var m = o[1], b = u[1], O = m | b, F = O < (R | A | K), Y = b == K && m == x || b == K && m == J && o[7].length <= u[8] || b == (K | J) && u[7].length <= u[8] && m == x;
        if (!(F || Y))
          return o;
        b & R && (o[2] = u[2], O |= m & R ? 0 : I);
        var Q = u[3];
        if (Q) {
          var re = o[3];
          o[3] = re ? yb(re, Q, u[4]) : Q, o[4] = re ? hi(o[3], p) : u[4];
        }
        return Q = u[5], Q && (re = o[5], o[5] = re ? vb(re, Q, u[6]) : Q, o[6] = re ? hi(o[5], p) : u[6]), Q = u[7], Q && (o[7] = Q), b & K && (o[8] = o[8] == null ? u[8] : nr(o[8], u[8])), o[9] == null && (o[9] = u[9]), o[0] = u[0], o[1] = O, o;
      }
      function XL(o) {
        var u = [];
        if (o != null)
          for (var m in Jt(o))
            u.push(m);
        return u;
      }
      function ZL(o) {
        return Dc.call(o);
      }
      function Hb(o, u, m) {
        return u = Un(u === n ? o.length - 1 : u, 0), function() {
          for (var b = arguments, O = -1, F = Un(b.length - u, 0), Y = de(F); ++O < F; )
            Y[O] = b[u + O];
          O = -1;
          for (var Q = de(u + 1); ++O < u; )
            Q[O] = b[O];
          return Q[u] = m(Y), Lr(o, this, Q);
        };
      }
      function Yb(o, u) {
        return u.length < 2 ? o : es(o, Zr(u, 0, -1));
      }
      function JL(o, u) {
        for (var m = o.length, b = nr(u.length, m), O = Tr(o); b--; ) {
          var F = u[b];
          o[b] = Xa(F, m) ? O[F] : n;
        }
        return o;
      }
      function o0(o, u) {
        if (!(u === "constructor" && typeof o[u] == "function") && u != "__proto__")
          return o[u];
      }
      var zb = Vb(pb), el = m6 || function(o, u) {
        return Xn.setTimeout(o, u);
      }, l0 = Vb(yL);
      function qb(o, u, m) {
        var b = u + "";
        return l0(o, qL(b, e5(HL(b), m)));
      }
      function Vb(o) {
        var u = 0, m = 0;
        return function() {
          var b = E6(), O = ve - (b - m);
          if (m = b, O > 0) {
            if (++u >= ce)
              return arguments[0];
          } else
            u = 0;
          return o.apply(n, arguments);
        };
      }
      function tu(o, u) {
        var m = -1, b = o.length, O = b - 1;
        for (u = u === n ? b : u; ++m < u; ) {
          var F = qp(m, O), Y = o[F];
          o[F] = o[m], o[m] = Y;
        }
        return o.length = u, o;
      }
      var $b = QL(function(o) {
        var u = [];
        return o.charCodeAt(0) === 46 && u.push(""), o.replace(uc, function(m, b, O, F) {
          u.push(O ? F.replace(lt, "$1") : b || m);
        }), u;
      });
      function Aa(o) {
        if (typeof o == "string" || Pr(o))
          return o;
        var u = o + "";
        return u == "0" && 1 / o == -ne ? "-0" : u;
      }
      function ns(o) {
        if (o != null) {
          try {
            return xc.call(o);
          } catch {
          }
          try {
            return o + "";
          } catch {
          }
        }
        return "";
      }
      function e5(o, u) {
        return Kr(me, function(m) {
          var b = "_." + m[0];
          u & m[1] && !Rc(o, b) && o.push(b);
        }), o.sort();
      }
      function Wb(o) {
        if (o instanceof Lt)
          return o.clone();
        var u = new jr(o.__wrapped__, o.__chain__);
        return u.__actions__ = Tr(o.__actions__), u.__index__ = o.__index__, u.__values__ = o.__values__, u;
      }
      function t5(o, u, m) {
        (m ? pr(o, u, m) : u === n) ? u = 1 : u = Un(ht(u), 0);
        var b = o == null ? 0 : o.length;
        if (!b || u < 1)
          return [];
        for (var O = 0, F = 0, Y = de(Fc(b / u)); O < b; )
          Y[F++] = Zr(o, O, O += u);
        return Y;
      }
      function n5(o) {
        for (var u = -1, m = o == null ? 0 : o.length, b = 0, O = []; ++u < m; ) {
          var F = o[u];
          F && (O[b++] = F);
        }
        return O;
      }
      function r5() {
        var o = arguments.length;
        if (!o)
          return [];
        for (var u = de(o - 1), m = arguments[0], b = o; b--; )
          u[b - 1] = arguments[b];
        return gi(gt(m) ? Tr(m) : [m], Zn(u, 1));
      }
      var a5 = Rt(function(o, u) {
        return An(o) ? Ko(o, Zn(u, 1, An, !0)) : [];
      }), i5 = Rt(function(o, u) {
        var m = Jr(u);
        return An(m) && (m = n), An(o) ? Ko(o, Zn(u, 1, An, !0), it(m, 2)) : [];
      }), s5 = Rt(function(o, u) {
        var m = Jr(u);
        return An(m) && (m = n), An(o) ? Ko(o, Zn(u, 1, An, !0), n, m) : [];
      });
      function o5(o, u, m) {
        var b = o == null ? 0 : o.length;
        return b ? (u = m || u === n ? 1 : ht(u), Zr(o, u < 0 ? 0 : u, b)) : [];
      }
      function l5(o, u, m) {
        var b = o == null ? 0 : o.length;
        return b ? (u = m || u === n ? 1 : ht(u), u = b - u, Zr(o, 0, u < 0 ? 0 : u)) : [];
      }
      function c5(o, u) {
        return o && o.length ? Wc(o, it(u, 3), !0, !0) : [];
      }
      function u5(o, u) {
        return o && o.length ? Wc(o, it(u, 3), !0) : [];
      }
      function d5(o, u, m, b) {
        var O = o == null ? 0 : o.length;
        return O ? (m && typeof m != "number" && pr(o, u, m) && (m = 0, b = O), rL(o, u, m, b)) : [];
      }
      function Kb(o, u, m) {
        var b = o == null ? 0 : o.length;
        if (!b)
          return -1;
        var O = m == null ? 0 : ht(m);
        return O < 0 && (O = Un(b + O, 0)), Ac(o, it(u, 3), O);
      }
      function Qb(o, u, m) {
        var b = o == null ? 0 : o.length;
        if (!b)
          return -1;
        var O = b - 1;
        return m !== n && (O = ht(m), O = m < 0 ? Un(b + O, 0) : nr(O, b - 1)), Ac(o, it(u, 3), O, !0);
      }
      function jb(o) {
        var u = o == null ? 0 : o.length;
        return u ? Zn(o, 1) : [];
      }
      function p5(o) {
        var u = o == null ? 0 : o.length;
        return u ? Zn(o, ne) : [];
      }
      function _5(o, u) {
        var m = o == null ? 0 : o.length;
        return m ? (u = u === n ? 1 : ht(u), Zn(o, u)) : [];
      }
      function m5(o) {
        for (var u = -1, m = o == null ? 0 : o.length, b = {}; ++u < m; ) {
          var O = o[u];
          b[O[0]] = O[1];
        }
        return b;
      }
      function Xb(o) {
        return o && o.length ? o[0] : n;
      }
      function f5(o, u, m) {
        var b = o == null ? 0 : o.length;
        if (!b)
          return -1;
        var O = m == null ? 0 : ht(m);
        return O < 0 && (O = Un(b + O, 0)), Os(o, u, O);
      }
      function g5(o) {
        var u = o == null ? 0 : o.length;
        return u ? Zr(o, 0, -1) : [];
      }
      var h5 = Rt(function(o) {
        var u = pn(o, Qp);
        return u.length && u[0] === o[0] ? Up(u) : [];
      }), E5 = Rt(function(o) {
        var u = Jr(o), m = pn(o, Qp);
        return u === Jr(m) ? u = n : m.pop(), m.length && m[0] === o[0] ? Up(m, it(u, 2)) : [];
      }), S5 = Rt(function(o) {
        var u = Jr(o), m = pn(o, Qp);
        return u = typeof u == "function" ? u : n, u && m.pop(), m.length && m[0] === o[0] ? Up(m, n, u) : [];
      });
      function b5(o, u) {
        return o == null ? "" : g6.call(o, u);
      }
      function Jr(o) {
        var u = o == null ? 0 : o.length;
        return u ? o[u - 1] : n;
      }
      function T5(o, u, m) {
        var b = o == null ? 0 : o.length;
        if (!b)
          return -1;
        var O = b;
        return m !== n && (O = ht(m), O = O < 0 ? Un(b + O, 0) : nr(O, b - 1)), u === u ? e6(o, u, O) : Ac(o, DS, O, !0);
      }
      function y5(o, u) {
        return o && o.length ? lb(o, ht(u)) : n;
      }
      var v5 = Rt(Zb);
      function Zb(o, u) {
        return o && o.length && u && u.length ? zp(o, u) : o;
      }
      function C5(o, u, m) {
        return o && o.length && u && u.length ? zp(o, u, it(m, 2)) : o;
      }
      function R5(o, u, m) {
        return o && o.length && u && u.length ? zp(o, u, n, m) : o;
      }
      var A5 = ja(function(o, u) {
        var m = o == null ? 0 : o.length, b = kp(o, u);
        return db(o, pn(u, function(O) {
          return Xa(O, m) ? +O : O;
        }).sort(Tb)), b;
      });
      function O5(o, u) {
        var m = [];
        if (!(o && o.length))
          return m;
        var b = -1, O = [], F = o.length;
        for (u = it(u, 3); ++b < F; ) {
          var Y = o[b];
          u(Y, b, o) && (m.push(Y), O.push(b));
        }
        return db(o, O), m;
      }
      function c0(o) {
        return o == null ? o : b6.call(o);
      }
      function N5(o, u, m) {
        var b = o == null ? 0 : o.length;
        return b ? (m && typeof m != "number" && pr(o, u, m) ? (u = 0, m = b) : (u = u == null ? 0 : ht(u), m = m === n ? b : ht(m)), Zr(o, u, m)) : [];
      }
      function I5(o, u) {
        return $c(o, u);
      }
      function x5(o, u, m) {
        return $p(o, u, it(m, 2));
      }
      function D5(o, u) {
        var m = o == null ? 0 : o.length;
        if (m) {
          var b = $c(o, u);
          if (b < m && ma(o[b], u))
            return b;
        }
        return -1;
      }
      function w5(o, u) {
        return $c(o, u, !0);
      }
      function L5(o, u, m) {
        return $p(o, u, it(m, 2), !0);
      }
      function M5(o, u) {
        var m = o == null ? 0 : o.length;
        if (m) {
          var b = $c(o, u, !0) - 1;
          if (ma(o[b], u))
            return b;
        }
        return -1;
      }
      function k5(o) {
        return o && o.length ? _b(o) : [];
      }
      function P5(o, u) {
        return o && o.length ? _b(o, it(u, 2)) : [];
      }
      function F5(o) {
        var u = o == null ? 0 : o.length;
        return u ? Zr(o, 1, u) : [];
      }
      function B5(o, u, m) {
        return o && o.length ? (u = m || u === n ? 1 : ht(u), Zr(o, 0, u < 0 ? 0 : u)) : [];
      }
      function U5(o, u, m) {
        var b = o == null ? 0 : o.length;
        return b ? (u = m || u === n ? 1 : ht(u), u = b - u, Zr(o, u < 0 ? 0 : u, b)) : [];
      }
      function G5(o, u) {
        return o && o.length ? Wc(o, it(u, 3), !1, !0) : [];
      }
      function H5(o, u) {
        return o && o.length ? Wc(o, it(u, 3)) : [];
      }
      var Y5 = Rt(function(o) {
        return bi(Zn(o, 1, An, !0));
      }), z5 = Rt(function(o) {
        var u = Jr(o);
        return An(u) && (u = n), bi(Zn(o, 1, An, !0), it(u, 2));
      }), q5 = Rt(function(o) {
        var u = Jr(o);
        return u = typeof u == "function" ? u : n, bi(Zn(o, 1, An, !0), n, u);
      });
      function V5(o) {
        return o && o.length ? bi(o) : [];
      }
      function $5(o, u) {
        return o && o.length ? bi(o, it(u, 2)) : [];
      }
      function W5(o, u) {
        return u = typeof u == "function" ? u : n, o && o.length ? bi(o, n, u) : [];
      }
      function u0(o) {
        if (!(o && o.length))
          return [];
        var u = 0;
        return o = fi(o, function(m) {
          if (An(m))
            return u = Un(m.length, u), !0;
        }), Op(u, function(m) {
          return pn(o, Cp(m));
        });
      }
      function Jb(o, u) {
        if (!(o && o.length))
          return [];
        var m = u0(o);
        return u == null ? m : pn(m, function(b) {
          return Lr(u, n, b);
        });
      }
      var K5 = Rt(function(o, u) {
        return An(o) ? Ko(o, u) : [];
      }), Q5 = Rt(function(o) {
        return Kp(fi(o, An));
      }), j5 = Rt(function(o) {
        var u = Jr(o);
        return An(u) && (u = n), Kp(fi(o, An), it(u, 2));
      }), X5 = Rt(function(o) {
        var u = Jr(o);
        return u = typeof u == "function" ? u : n, Kp(fi(o, An), n, u);
      }), Z5 = Rt(u0);
      function J5(o, u) {
        return hb(o || [], u || [], Wo);
      }
      function eM(o, u) {
        return hb(o || [], u || [], Xo);
      }
      var tM = Rt(function(o) {
        var u = o.length, m = u > 1 ? o[u - 1] : n;
        return m = typeof m == "function" ? (o.pop(), m) : n, Jb(o, m);
      });
      function eT(o) {
        var u = w(o);
        return u.__chain__ = !0, u;
      }
      function nM(o, u) {
        return u(o), o;
      }
      function nu(o, u) {
        return u(o);
      }
      var rM = ja(function(o) {
        var u = o.length, m = u ? o[0] : 0, b = this.__wrapped__, O = function(F) {
          return kp(F, o);
        };
        return u > 1 || this.__actions__.length || !(b instanceof Lt) || !Xa(m) ? this.thru(O) : (b = b.slice(m, +m + (u ? 1 : 0)), b.__actions__.push({
          func: nu,
          args: [O],
          thisArg: n
        }), new jr(b, this.__chain__).thru(function(F) {
          return u && !F.length && F.push(n), F;
        }));
      });
      function aM() {
        return eT(this);
      }
      function iM() {
        return new jr(this.value(), this.__chain__);
      }
      function sM() {
        this.__values__ === n && (this.__values__ = mT(this.value()));
        var o = this.__index__ >= this.__values__.length, u = o ? n : this.__values__[this.__index__++];
        return { done: o, value: u };
      }
      function oM() {
        return this;
      }
      function lM(o) {
        for (var u, m = this; m instanceof Hc; ) {
          var b = Wb(m);
          b.__index__ = 0, b.__values__ = n, u ? O.__wrapped__ = b : u = b;
          var O = b;
          m = m.__wrapped__;
        }
        return O.__wrapped__ = o, u;
      }
      function cM() {
        var o = this.__wrapped__;
        if (o instanceof Lt) {
          var u = o;
          return this.__actions__.length && (u = new Lt(this)), u = u.reverse(), u.__actions__.push({
            func: nu,
            args: [c0],
            thisArg: n
          }), new jr(u, this.__chain__);
        }
        return this.thru(c0);
      }
      function uM() {
        return gb(this.__wrapped__, this.__actions__);
      }
      var dM = Kc(function(o, u, m) {
        jt.call(o, m) ? ++o[m] : Ka(o, m, 1);
      });
      function pM(o, u, m) {
        var b = gt(o) ? IS : nL;
        return m && pr(o, u, m) && (u = n), b(o, it(u, 3));
      }
      function _M(o, u) {
        var m = gt(o) ? fi : JS;
        return m(o, it(u, 3));
      }
      var mM = Ob(Kb), fM = Ob(Qb);
      function gM(o, u) {
        return Zn(ru(o, u), 1);
      }
      function hM(o, u) {
        return Zn(ru(o, u), ne);
      }
      function EM(o, u, m) {
        return m = m === n ? 1 : ht(m), Zn(ru(o, u), m);
      }
      function tT(o, u) {
        var m = gt(o) ? Kr : Si;
        return m(o, it(u, 3));
      }
      function nT(o, u) {
        var m = gt(o) ? Fw : ZS;
        return m(o, it(u, 3));
      }
      var SM = Kc(function(o, u, m) {
        jt.call(o, m) ? o[m].push(u) : Ka(o, m, [u]);
      });
      function bM(o, u, m, b) {
        o = yr(o) ? o : Us(o), m = m && !b ? ht(m) : 0;
        var O = o.length;
        return m < 0 && (m = Un(O + m, 0)), lu(o) ? m <= O && o.indexOf(u, m) > -1 : !!O && Os(o, u, m) > -1;
      }
      var TM = Rt(function(o, u, m) {
        var b = -1, O = typeof u == "function", F = yr(o) ? de(o.length) : [];
        return Si(o, function(Y) {
          F[++b] = O ? Lr(u, Y, m) : Qo(Y, u, m);
        }), F;
      }), yM = Kc(function(o, u, m) {
        Ka(o, m, u);
      });
      function ru(o, u) {
        var m = gt(o) ? pn : ib;
        return m(o, it(u, 3));
      }
      function vM(o, u, m, b) {
        return o == null ? [] : (gt(u) || (u = u == null ? [] : [u]), m = b ? n : m, gt(m) || (m = m == null ? [] : [m]), cb(o, u, m));
      }
      var CM = Kc(function(o, u, m) {
        o[m ? 0 : 1].push(u);
      }, function() {
        return [[], []];
      });
      function RM(o, u, m) {
        var b = gt(o) ? yp : LS, O = arguments.length < 3;
        return b(o, it(u, 4), m, O, Si);
      }
      function AM(o, u, m) {
        var b = gt(o) ? Bw : LS, O = arguments.length < 3;
        return b(o, it(u, 4), m, O, ZS);
      }
      function OM(o, u) {
        var m = gt(o) ? fi : JS;
        return m(o, su(it(u, 3)));
      }
      function NM(o) {
        var u = gt(o) ? KS : bL;
        return u(o);
      }
      function IM(o, u, m) {
        (m ? pr(o, u, m) : u === n) ? u = 1 : u = ht(u);
        var b = gt(o) ? X6 : TL;
        return b(o, u);
      }
      function xM(o) {
        var u = gt(o) ? Z6 : vL;
        return u(o);
      }
      function DM(o) {
        if (o == null)
          return 0;
        if (yr(o))
          return lu(o) ? Is(o) : o.length;
        var u = rr(o);
        return u == et || u == pt ? o.size : Hp(o).length;
      }
      function wM(o, u, m) {
        var b = gt(o) ? vp : CL;
        return m && pr(o, u, m) && (u = n), b(o, it(u, 3));
      }
      var LM = Rt(function(o, u) {
        if (o == null)
          return [];
        var m = u.length;
        return m > 1 && pr(o, u[0], u[1]) ? u = [] : m > 2 && pr(u[0], u[1], u[2]) && (u = [u[0]]), cb(o, Zn(u, 1), []);
      }), au = _6 || function() {
        return Xn.Date.now();
      };
      function MM(o, u) {
        if (typeof u != "function")
          throw new Qr(s);
        return o = ht(o), function() {
          if (--o < 1)
            return u.apply(this, arguments);
        };
      }
      function rT(o, u, m) {
        return u = m ? n : u, u = o && u == null ? o.length : u, Qa(o, K, n, n, n, n, u);
      }
      function aT(o, u) {
        var m;
        if (typeof u != "function")
          throw new Qr(s);
        return o = ht(o), function() {
          return --o > 0 && (m = u.apply(this, arguments)), o <= 1 && (u = n), m;
        };
      }
      var d0 = Rt(function(o, u, m) {
        var b = R;
        if (m.length) {
          var O = hi(m, Fs(d0));
          b |= D;
        }
        return Qa(o, b, u, m, O);
      }), iT = Rt(function(o, u, m) {
        var b = R | A;
        if (m.length) {
          var O = hi(m, Fs(iT));
          b |= D;
        }
        return Qa(u, b, o, m, O);
      });
      function sT(o, u, m) {
        u = m ? n : u;
        var b = Qa(o, x, n, n, n, n, n, u);
        return b.placeholder = sT.placeholder, b;
      }
      function oT(o, u, m) {
        u = m ? n : u;
        var b = Qa(o, P, n, n, n, n, n, u);
        return b.placeholder = oT.placeholder, b;
      }
      function lT(o, u, m) {
        var b, O, F, Y, Q, re, Re = 0, Ae = !1, Ie = !1, ze = !0;
        if (typeof o != "function")
          throw new Qr(s);
        u = ea(u) || 0, En(m) && (Ae = !!m.leading, Ie = "maxWait" in m, F = Ie ? Un(ea(m.maxWait) || 0, u) : F, ze = "trailing" in m ? !!m.trailing : ze);
        function Xe(On) {
          var fa = b, ei = O;
          return b = O = n, Re = On, Y = o.apply(ei, fa), Y;
        }
        function st(On) {
          return Re = On, Q = el(Dt, u), Ae ? Xe(On) : Y;
        }
        function Tt(On) {
          var fa = On - re, ei = On - Re, OT = u - fa;
          return Ie ? nr(OT, F - ei) : OT;
        }
        function ot(On) {
          var fa = On - re, ei = On - Re;
          return re === n || fa >= u || fa < 0 || Ie && ei >= F;
        }
        function Dt() {
          var On = au();
          if (ot(On))
            return Mt(On);
          Q = el(Dt, Tt(On));
        }
        function Mt(On) {
          return Q = n, ze && b ? Xe(On) : (b = O = n, Y);
        }
        function Fr() {
          Q !== n && Eb(Q), Re = 0, b = re = O = Q = n;
        }
        function _r() {
          return Q === n ? Y : Mt(au());
        }
        function Br() {
          var On = au(), fa = ot(On);
          if (b = arguments, O = this, re = On, fa) {
            if (Q === n)
              return st(re);
            if (Ie)
              return Eb(Q), Q = el(Dt, u), Xe(re);
          }
          return Q === n && (Q = el(Dt, u)), Y;
        }
        return Br.cancel = Fr, Br.flush = _r, Br;
      }
      var kM = Rt(function(o, u) {
        return XS(o, 1, u);
      }), PM = Rt(function(o, u, m) {
        return XS(o, ea(u) || 0, m);
      });
      function FM(o) {
        return Qa(o, X);
      }
      function iu(o, u) {
        if (typeof o != "function" || u != null && typeof u != "function")
          throw new Qr(s);
        var m = function() {
          var b = arguments, O = u ? u.apply(this, b) : b[0], F = m.cache;
          if (F.has(O))
            return F.get(O);
          var Y = o.apply(this, b);
          return m.cache = F.set(O, Y) || F, Y;
        };
        return m.cache = new (iu.Cache || Wa)(), m;
      }
      iu.Cache = Wa;
      function su(o) {
        if (typeof o != "function")
          throw new Qr(s);
        return function() {
          var u = arguments;
          switch (u.length) {
            case 0:
              return !o.call(this);
            case 1:
              return !o.call(this, u[0]);
            case 2:
              return !o.call(this, u[0], u[1]);
            case 3:
              return !o.call(this, u[0], u[1], u[2]);
          }
          return !o.apply(this, u);
        };
      }
      function BM(o) {
        return aT(2, o);
      }
      var UM = RL(function(o, u) {
        u = u.length == 1 && gt(u[0]) ? pn(u[0], Mr(it())) : pn(Zn(u, 1), Mr(it()));
        var m = u.length;
        return Rt(function(b) {
          for (var O = -1, F = nr(b.length, m); ++O < F; )
            b[O] = u[O].call(this, b[O]);
          return Lr(o, this, b);
        });
      }), p0 = Rt(function(o, u) {
        var m = hi(u, Fs(p0));
        return Qa(o, D, n, u, m);
      }), cT = Rt(function(o, u) {
        var m = hi(u, Fs(cT));
        return Qa(o, L, n, u, m);
      }), GM = ja(function(o, u) {
        return Qa(o, J, n, n, n, u);
      });
      function HM(o, u) {
        if (typeof o != "function")
          throw new Qr(s);
        return u = u === n ? u : ht(u), Rt(o, u);
      }
      function YM(o, u) {
        if (typeof o != "function")
          throw new Qr(s);
        return u = u == null ? 0 : Un(ht(u), 0), Rt(function(m) {
          var b = m[u], O = yi(m, 0, u);
          return b && gi(O, b), Lr(o, this, O);
        });
      }
      function zM(o, u, m) {
        var b = !0, O = !0;
        if (typeof o != "function")
          throw new Qr(s);
        return En(m) && (b = "leading" in m ? !!m.leading : b, O = "trailing" in m ? !!m.trailing : O), lT(o, u, {
          leading: b,
          maxWait: u,
          trailing: O
        });
      }
      function qM(o) {
        return rT(o, 1);
      }
      function VM(o, u) {
        return p0(jp(u), o);
      }
      function $M() {
        if (!arguments.length)
          return [];
        var o = arguments[0];
        return gt(o) ? o : [o];
      }
      function WM(o) {
        return Xr(o, g);
      }
      function KM(o, u) {
        return u = typeof u == "function" ? u : n, Xr(o, g, u);
      }
      function QM(o) {
        return Xr(o, _ | g);
      }
      function jM(o, u) {
        return u = typeof u == "function" ? u : n, Xr(o, _ | g, u);
      }
      function XM(o, u) {
        return u == null || jS(o, u, $n(u));
      }
      function ma(o, u) {
        return o === u || o !== o && u !== u;
      }
      var ZM = Zc(Bp), JM = Zc(function(o, u) {
        return o >= u;
      }), rs = nb(/* @__PURE__ */ function() {
        return arguments;
      }()) ? nb : function(o) {
        return yn(o) && jt.call(o, "callee") && !YS.call(o, "callee");
      }, gt = de.isArray, e8 = vS ? Mr(vS) : lL;
      function yr(o) {
        return o != null && ou(o.length) && !Za(o);
      }
      function An(o) {
        return yn(o) && yr(o);
      }
      function t8(o) {
        return o === !0 || o === !1 || yn(o) && dr(o) == ye;
      }
      var vi = f6 || v0, n8 = CS ? Mr(CS) : cL;
      function r8(o) {
        return yn(o) && o.nodeType === 1 && !tl(o);
      }
      function a8(o) {
        if (o == null)
          return !0;
        if (yr(o) && (gt(o) || typeof o == "string" || typeof o.splice == "function" || vi(o) || Bs(o) || rs(o)))
          return !o.length;
        var u = rr(o);
        if (u == et || u == pt)
          return !o.size;
        if (Jo(o))
          return !Hp(o).length;
        for (var m in o)
          if (jt.call(o, m))
            return !1;
        return !0;
      }
      function i8(o, u) {
        return jo(o, u);
      }
      function s8(o, u, m) {
        m = typeof m == "function" ? m : n;
        var b = m ? m(o, u) : n;
        return b === n ? jo(o, u, n, m) : !!b;
      }
      function _0(o) {
        if (!yn(o))
          return !1;
        var u = dr(o);
        return u == Qe || u == Me || typeof o.message == "string" && typeof o.name == "string" && !tl(o);
      }
      function o8(o) {
        return typeof o == "number" && qS(o);
      }
      function Za(o) {
        if (!En(o))
          return !1;
        var u = dr(o);
        return u == _e || u == je || u == Ne || u == He;
      }
      function uT(o) {
        return typeof o == "number" && o == ht(o);
      }
      function ou(o) {
        return typeof o == "number" && o > -1 && o % 1 == 0 && o <= se;
      }
      function En(o) {
        var u = typeof o;
        return o != null && (u == "object" || u == "function");
      }
      function yn(o) {
        return o != null && typeof o == "object";
      }
      var dT = RS ? Mr(RS) : dL;
      function l8(o, u) {
        return o === u || Gp(o, u, r0(u));
      }
      function c8(o, u, m) {
        return m = typeof m == "function" ? m : n, Gp(o, u, r0(u), m);
      }
      function u8(o) {
        return pT(o) && o != +o;
      }
      function d8(o) {
        if (KL(o))
          throw new ft(i);
        return rb(o);
      }
      function p8(o) {
        return o === null;
      }
      function _8(o) {
        return o == null;
      }
      function pT(o) {
        return typeof o == "number" || yn(o) && dr(o) == nt;
      }
      function tl(o) {
        if (!yn(o) || dr(o) != bt)
          return !1;
        var u = Mc(o);
        if (u === null)
          return !0;
        var m = jt.call(u, "constructor") && u.constructor;
        return typeof m == "function" && m instanceof m && xc.call(m) == c6;
      }
      var m0 = AS ? Mr(AS) : pL;
      function m8(o) {
        return uT(o) && o >= -se && o <= se;
      }
      var _T = OS ? Mr(OS) : _L;
      function lu(o) {
        return typeof o == "string" || !gt(o) && yn(o) && dr(o) == Be;
      }
      function Pr(o) {
        return typeof o == "symbol" || yn(o) && dr(o) == It;
      }
      var Bs = NS ? Mr(NS) : mL;
      function f8(o) {
        return o === n;
      }
      function g8(o) {
        return yn(o) && rr(o) == j;
      }
      function h8(o) {
        return yn(o) && dr(o) == Se;
      }
      var E8 = Zc(Yp), S8 = Zc(function(o, u) {
        return o <= u;
      });
      function mT(o) {
        if (!o)
          return [];
        if (yr(o))
          return lu(o) ? pa(o) : Tr(o);
        if (Yo && o[Yo])
          return Xw(o[Yo]());
        var u = rr(o), m = u == et ? Ip : u == pt ? Oc : Us;
        return m(o);
      }
      function Ja(o) {
        if (!o)
          return o === 0 ? o : 0;
        if (o = ea(o), o === ne || o === -ne) {
          var u = o < 0 ? -1 : 1;
          return u * z;
        }
        return o === o ? o : 0;
      }
      function ht(o) {
        var u = Ja(o), m = u % 1;
        return u === u ? m ? u - m : u : 0;
      }
      function fT(o) {
        return o ? Ji(ht(o), 0, H) : 0;
      }
      function ea(o) {
        if (typeof o == "number")
          return o;
        if (Pr(o))
          return v;
        if (En(o)) {
          var u = typeof o.valueOf == "function" ? o.valueOf() : o;
          o = En(u) ? u + "" : u;
        }
        if (typeof o != "string")
          return o === 0 ? o : +o;
        o = MS(o);
        var m = Ct.test(o);
        return m || dn.test(o) ? Mw(o.slice(2), m ? 2 : 8) : xt.test(o) ? v : +o;
      }
      function gT(o) {
        return Ra(o, vr(o));
      }
      function b8(o) {
        return o ? Ji(ht(o), -se, se) : o === 0 ? o : 0;
      }
      function $t(o) {
        return o == null ? "" : kr(o);
      }
      var T8 = ks(function(o, u) {
        if (Jo(u) || yr(u)) {
          Ra(u, $n(u), o);
          return;
        }
        for (var m in u)
          jt.call(u, m) && Wo(o, m, u[m]);
      }), hT = ks(function(o, u) {
        Ra(u, vr(u), o);
      }), cu = ks(function(o, u, m, b) {
        Ra(u, vr(u), o, b);
      }), y8 = ks(function(o, u, m, b) {
        Ra(u, $n(u), o, b);
      }), v8 = ja(kp);
      function C8(o, u) {
        var m = Ms(o);
        return u == null ? m : QS(m, u);
      }
      var R8 = Rt(function(o, u) {
        o = Jt(o);
        var m = -1, b = u.length, O = b > 2 ? u[2] : n;
        for (O && pr(u[0], u[1], O) && (b = 1); ++m < b; )
          for (var F = u[m], Y = vr(F), Q = -1, re = Y.length; ++Q < re; ) {
            var Re = Y[Q], Ae = o[Re];
            (Ae === n || ma(Ae, Ds[Re]) && !jt.call(o, Re)) && (o[Re] = F[Re]);
          }
        return o;
      }), A8 = Rt(function(o) {
        return o.push(n, Mb), Lr(ET, n, o);
      });
      function O8(o, u) {
        return xS(o, it(u, 3), Ca);
      }
      function N8(o, u) {
        return xS(o, it(u, 3), Fp);
      }
      function I8(o, u) {
        return o == null ? o : Pp(o, it(u, 3), vr);
      }
      function x8(o, u) {
        return o == null ? o : eb(o, it(u, 3), vr);
      }
      function D8(o, u) {
        return o && Ca(o, it(u, 3));
      }
      function w8(o, u) {
        return o && Fp(o, it(u, 3));
      }
      function L8(o) {
        return o == null ? [] : qc(o, $n(o));
      }
      function M8(o) {
        return o == null ? [] : qc(o, vr(o));
      }
      function f0(o, u, m) {
        var b = o == null ? n : es(o, u);
        return b === n ? m : b;
      }
      function k8(o, u) {
        return o != null && Fb(o, u, aL);
      }
      function g0(o, u) {
        return o != null && Fb(o, u, iL);
      }
      var P8 = Ib(function(o, u, m) {
        u != null && typeof u.toString != "function" && (u = Dc.call(u)), o[u] = m;
      }, E0(Cr)), F8 = Ib(function(o, u, m) {
        u != null && typeof u.toString != "function" && (u = Dc.call(u)), jt.call(o, u) ? o[u].push(m) : o[u] = [m];
      }, it), B8 = Rt(Qo);
      function $n(o) {
        return yr(o) ? WS(o) : Hp(o);
      }
      function vr(o) {
        return yr(o) ? WS(o, !0) : fL(o);
      }
      function U8(o, u) {
        var m = {};
        return u = it(u, 3), Ca(o, function(b, O, F) {
          Ka(m, u(b, O, F), b);
        }), m;
      }
      function G8(o, u) {
        var m = {};
        return u = it(u, 3), Ca(o, function(b, O, F) {
          Ka(m, O, u(b, O, F));
        }), m;
      }
      var H8 = ks(function(o, u, m) {
        Vc(o, u, m);
      }), ET = ks(function(o, u, m, b) {
        Vc(o, u, m, b);
      }), Y8 = ja(function(o, u) {
        var m = {};
        if (o == null)
          return m;
        var b = !1;
        u = pn(u, function(F) {
          return F = Ti(F, o), b || (b = F.length > 1), F;
        }), Ra(o, t0(o), m), b && (m = Xr(m, _ | f | g, PL));
        for (var O = u.length; O--; )
          Wp(m, u[O]);
        return m;
      });
      function z8(o, u) {
        return ST(o, su(it(u)));
      }
      var q8 = ja(function(o, u) {
        return o == null ? {} : hL(o, u);
      });
      function ST(o, u) {
        if (o == null)
          return {};
        var m = pn(t0(o), function(b) {
          return [b];
        });
        return u = it(u), ub(o, m, function(b, O) {
          return u(b, O[0]);
        });
      }
      function V8(o, u, m) {
        u = Ti(u, o);
        var b = -1, O = u.length;
        for (O || (O = 1, o = n); ++b < O; ) {
          var F = o == null ? n : o[Aa(u[b])];
          F === n && (b = O, F = m), o = Za(F) ? F.call(o) : F;
        }
        return o;
      }
      function $8(o, u, m) {
        return o == null ? o : Xo(o, u, m);
      }
      function W8(o, u, m, b) {
        return b = typeof b == "function" ? b : n, o == null ? o : Xo(o, u, m, b);
      }
      var bT = wb($n), TT = wb(vr);
      function K8(o, u, m) {
        var b = gt(o), O = b || vi(o) || Bs(o);
        if (u = it(u, 4), m == null) {
          var F = o && o.constructor;
          O ? m = b ? new F() : [] : En(o) ? m = Za(F) ? Ms(Mc(o)) : {} : m = {};
        }
        return (O ? Kr : Ca)(o, function(Y, Q, re) {
          return u(m, Y, Q, re);
        }), m;
      }
      function Q8(o, u) {
        return o == null ? !0 : Wp(o, u);
      }
      function j8(o, u, m) {
        return o == null ? o : fb(o, u, jp(m));
      }
      function X8(o, u, m, b) {
        return b = typeof b == "function" ? b : n, o == null ? o : fb(o, u, jp(m), b);
      }
      function Us(o) {
        return o == null ? [] : Np(o, $n(o));
      }
      function Z8(o) {
        return o == null ? [] : Np(o, vr(o));
      }
      function J8(o, u, m) {
        return m === n && (m = u, u = n), m !== n && (m = ea(m), m = m === m ? m : 0), u !== n && (u = ea(u), u = u === u ? u : 0), Ji(ea(o), u, m);
      }
      function ek(o, u, m) {
        return u = Ja(u), m === n ? (m = u, u = 0) : m = Ja(m), o = ea(o), sL(o, u, m);
      }
      function tk(o, u, m) {
        if (m && typeof m != "boolean" && pr(o, u, m) && (u = m = n), m === n && (typeof u == "boolean" ? (m = u, u = n) : typeof o == "boolean" && (m = o, o = n)), o === n && u === n ? (o = 0, u = 1) : (o = Ja(o), u === n ? (u = o, o = 0) : u = Ja(u)), o > u) {
          var b = o;
          o = u, u = b;
        }
        if (m || o % 1 || u % 1) {
          var O = VS();
          return nr(o + O * (u - o + Lw("1e-" + ((O + "").length - 1))), u);
        }
        return qp(o, u);
      }
      var nk = Ps(function(o, u, m) {
        return u = u.toLowerCase(), o + (m ? yT(u) : u);
      });
      function yT(o) {
        return h0($t(o).toLowerCase());
      }
      function vT(o) {
        return o = $t(o), o && o.replace(cr, $w).replace(bS, "");
      }
      function rk(o, u, m) {
        o = $t(o), u = kr(u);
        var b = o.length;
        m = m === n ? b : Ji(ht(m), 0, b);
        var O = m;
        return m -= u.length, m >= 0 && o.slice(m, O) == u;
      }
      function ak(o) {
        return o = $t(o), o && Oo.test(o) ? o.replace(Ki, Ww) : o;
      }
      function ik(o) {
        return o = $t(o), o && wo.test(o) ? o.replace(Cs, "\\$&") : o;
      }
      var sk = Ps(function(o, u, m) {
        return o + (m ? "-" : "") + u.toLowerCase();
      }), ok = Ps(function(o, u, m) {
        return o + (m ? " " : "") + u.toLowerCase();
      }), lk = Ab("toLowerCase");
      function ck(o, u, m) {
        o = $t(o), u = ht(u);
        var b = u ? Is(o) : 0;
        if (!u || b >= u)
          return o;
        var O = (u - b) / 2;
        return Xc(Bc(O), m) + o + Xc(Fc(O), m);
      }
      function uk(o, u, m) {
        o = $t(o), u = ht(u);
        var b = u ? Is(o) : 0;
        return u && b < u ? o + Xc(u - b, m) : o;
      }
      function dk(o, u, m) {
        o = $t(o), u = ht(u);
        var b = u ? Is(o) : 0;
        return u && b < u ? Xc(u - b, m) + o : o;
      }
      function pk(o, u, m) {
        return m || u == null ? u = 0 : u && (u = +u), S6($t(o).replace(Rs, ""), u || 0);
      }
      function _k(o, u, m) {
        return (m ? pr(o, u, m) : u === n) ? u = 1 : u = ht(u), Vp($t(o), u);
      }
      function mk() {
        var o = arguments, u = $t(o[0]);
        return o.length < 3 ? u : u.replace(o[1], o[2]);
      }
      var fk = Ps(function(o, u, m) {
        return o + (m ? "_" : "") + u.toLowerCase();
      });
      function gk(o, u, m) {
        return m && typeof m != "number" && pr(o, u, m) && (u = m = n), m = m === n ? H : m >>> 0, m ? (o = $t(o), o && (typeof u == "string" || u != null && !m0(u)) && (u = kr(u), !u && Ns(o)) ? yi(pa(o), 0, m) : o.split(u, m)) : [];
      }
      var hk = Ps(function(o, u, m) {
        return o + (m ? " " : "") + h0(u);
      });
      function Ek(o, u, m) {
        return o = $t(o), m = m == null ? 0 : Ji(ht(m), 0, o.length), u = kr(u), o.slice(m, m + u.length) == u;
      }
      function Sk(o, u, m) {
        var b = w.templateSettings;
        m && pr(o, u, m) && (u = n), o = $t(o), u = cu({}, u, b, Lb);
        var O = cu({}, u.imports, b.imports, Lb), F = $n(O), Y = Np(O, F), Q, re, Re = 0, Ae = u.interpolate || $r, Ie = "__p += '", ze = xp(
          (u.escape || $r).source + "|" + Ae.source + "|" + (Ae === Io ? Ft : $r).source + "|" + (u.evaluate || $r).source + "|$",
          "g"
        ), Xe = "//# sourceURL=" + (jt.call(u, "sourceURL") ? (u.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++Nw + "]") + `
`;
        o.replace(ze, function(ot, Dt, Mt, Fr, _r, Br) {
          return Mt || (Mt = Fr), Ie += o.slice(Re, Br).replace(Lo, Kw), Dt && (Q = !0, Ie += `' +
__e(` + Dt + `) +
'`), _r && (re = !0, Ie += `';
` + _r + `;
__p += '`), Mt && (Ie += `' +
((__t = (` + Mt + `)) == null ? '' : __t) +
'`), Re = Br + ot.length, ot;
        }), Ie += `';
`;
        var st = jt.call(u, "variable") && u.variable;
        if (!st)
          Ie = `with (obj) {
` + Ie + `
}
`;
        else if (qe.test(st))
          throw new ft(l);
        Ie = (re ? Ie.replace(wr, "") : Ie).replace(br, "$1").replace(Wi, "$1;"), Ie = "function(" + (st || "obj") + `) {
` + (st ? "" : `obj || (obj = {});
`) + "var __t, __p = ''" + (Q ? ", __e = _.escape" : "") + (re ? `, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
` : `;
`) + Ie + `return __p
}`;
        var Tt = RT(function() {
          return qt(F, Xe + "return " + Ie).apply(n, Y);
        });
        if (Tt.source = Ie, _0(Tt))
          throw Tt;
        return Tt;
      }
      function bk(o) {
        return $t(o).toLowerCase();
      }
      function Tk(o) {
        return $t(o).toUpperCase();
      }
      function yk(o, u, m) {
        if (o = $t(o), o && (m || u === n))
          return MS(o);
        if (!o || !(u = kr(u)))
          return o;
        var b = pa(o), O = pa(u), F = kS(b, O), Y = PS(b, O) + 1;
        return yi(b, F, Y).join("");
      }
      function vk(o, u, m) {
        if (o = $t(o), o && (m || u === n))
          return o.slice(0, BS(o) + 1);
        if (!o || !(u = kr(u)))
          return o;
        var b = pa(o), O = PS(b, pa(u)) + 1;
        return yi(b, 0, O).join("");
      }
      function Ck(o, u, m) {
        if (o = $t(o), o && (m || u === n))
          return o.replace(Rs, "");
        if (!o || !(u = kr(u)))
          return o;
        var b = pa(o), O = kS(b, pa(u));
        return yi(b, O).join("");
      }
      function Rk(o, u) {
        var m = $, b = ae;
        if (En(u)) {
          var O = "separator" in u ? u.separator : O;
          m = "length" in u ? ht(u.length) : m, b = "omission" in u ? kr(u.omission) : b;
        }
        o = $t(o);
        var F = o.length;
        if (Ns(o)) {
          var Y = pa(o);
          F = Y.length;
        }
        if (m >= F)
          return o;
        var Q = m - Is(b);
        if (Q < 1)
          return b;
        var re = Y ? yi(Y, 0, Q).join("") : o.slice(0, Q);
        if (O === n)
          return re + b;
        if (Y && (Q += re.length - Q), m0(O)) {
          if (o.slice(Q).search(O)) {
            var Re, Ae = re;
            for (O.global || (O = xp(O.source, $t(zt.exec(O)) + "g")), O.lastIndex = 0; Re = O.exec(Ae); )
              var Ie = Re.index;
            re = re.slice(0, Ie === n ? Q : Ie);
          }
        } else if (o.indexOf(kr(O), Q) != Q) {
          var ze = re.lastIndexOf(O);
          ze > -1 && (re = re.slice(0, ze));
        }
        return re + b;
      }
      function Ak(o) {
        return o = $t(o), o && vs.test(o) ? o.replace(va, t6) : o;
      }
      var Ok = Ps(function(o, u, m) {
        return o + (m ? " " : "") + u.toUpperCase();
      }), h0 = Ab("toUpperCase");
      function CT(o, u, m) {
        return o = $t(o), u = m ? n : u, u === n ? jw(o) ? a6(o) : Hw(o) : o.match(u) || [];
      }
      var RT = Rt(function(o, u) {
        try {
          return Lr(o, n, u);
        } catch (m) {
          return _0(m) ? m : new ft(m);
        }
      }), Nk = ja(function(o, u) {
        return Kr(u, function(m) {
          m = Aa(m), Ka(o, m, d0(o[m], o));
        }), o;
      });
      function Ik(o) {
        var u = o == null ? 0 : o.length, m = it();
        return o = u ? pn(o, function(b) {
          if (typeof b[1] != "function")
            throw new Qr(s);
          return [m(b[0]), b[1]];
        }) : [], Rt(function(b) {
          for (var O = -1; ++O < u; ) {
            var F = o[O];
            if (Lr(F[0], this, b))
              return Lr(F[1], this, b);
          }
        });
      }
      function xk(o) {
        return tL(Xr(o, _));
      }
      function E0(o) {
        return function() {
          return o;
        };
      }
      function Dk(o, u) {
        return o == null || o !== o ? u : o;
      }
      var wk = Nb(), Lk = Nb(!0);
      function Cr(o) {
        return o;
      }
      function S0(o) {
        return ab(typeof o == "function" ? o : Xr(o, _));
      }
      function Mk(o) {
        return sb(Xr(o, _));
      }
      function kk(o, u) {
        return ob(o, Xr(u, _));
      }
      var Pk = Rt(function(o, u) {
        return function(m) {
          return Qo(m, o, u);
        };
      }), Fk = Rt(function(o, u) {
        return function(m) {
          return Qo(o, m, u);
        };
      });
      function b0(o, u, m) {
        var b = $n(u), O = qc(u, b);
        m == null && !(En(u) && (O.length || !b.length)) && (m = u, u = o, o = this, O = qc(u, $n(u)));
        var F = !(En(m) && "chain" in m) || !!m.chain, Y = Za(o);
        return Kr(O, function(Q) {
          var re = u[Q];
          o[Q] = re, Y && (o.prototype[Q] = function() {
            var Re = this.__chain__;
            if (F || Re) {
              var Ae = o(this.__wrapped__), Ie = Ae.__actions__ = Tr(this.__actions__);
              return Ie.push({ func: re, args: arguments, thisArg: o }), Ae.__chain__ = Re, Ae;
            }
            return re.apply(o, gi([this.value()], arguments));
          });
        }), o;
      }
      function Bk() {
        return Xn._ === this && (Xn._ = u6), this;
      }
      function T0() {
      }
      function Uk(o) {
        return o = ht(o), Rt(function(u) {
          return lb(u, o);
        });
      }
      var Gk = Zp(pn), Hk = Zp(IS), Yk = Zp(vp);
      function AT(o) {
        return i0(o) ? Cp(Aa(o)) : EL(o);
      }
      function zk(o) {
        return function(u) {
          return o == null ? n : es(o, u);
        };
      }
      var qk = xb(), Vk = xb(!0);
      function y0() {
        return [];
      }
      function v0() {
        return !1;
      }
      function $k() {
        return {};
      }
      function Wk() {
        return "";
      }
      function Kk() {
        return !0;
      }
      function Qk(o, u) {
        if (o = ht(o), o < 1 || o > se)
          return [];
        var m = H, b = nr(o, H);
        u = it(u), o -= H;
        for (var O = Op(b, u); ++m < o; )
          u(m);
        return O;
      }
      function jk(o) {
        return gt(o) ? pn(o, Aa) : Pr(o) ? [o] : Tr($b($t(o)));
      }
      function Xk(o) {
        var u = ++l6;
        return $t(o) + u;
      }
      var Zk = jc(function(o, u) {
        return o + u;
      }, 0), Jk = Jp("ceil"), eP = jc(function(o, u) {
        return o / u;
      }, 1), tP = Jp("floor");
      function nP(o) {
        return o && o.length ? zc(o, Cr, Bp) : n;
      }
      function rP(o, u) {
        return o && o.length ? zc(o, it(u, 2), Bp) : n;
      }
      function aP(o) {
        return wS(o, Cr);
      }
      function iP(o, u) {
        return wS(o, it(u, 2));
      }
      function sP(o) {
        return o && o.length ? zc(o, Cr, Yp) : n;
      }
      function oP(o, u) {
        return o && o.length ? zc(o, it(u, 2), Yp) : n;
      }
      var lP = jc(function(o, u) {
        return o * u;
      }, 1), cP = Jp("round"), uP = jc(function(o, u) {
        return o - u;
      }, 0);
      function dP(o) {
        return o && o.length ? Ap(o, Cr) : 0;
      }
      function pP(o, u) {
        return o && o.length ? Ap(o, it(u, 2)) : 0;
      }
      return w.after = MM, w.ary = rT, w.assign = T8, w.assignIn = hT, w.assignInWith = cu, w.assignWith = y8, w.at = v8, w.before = aT, w.bind = d0, w.bindAll = Nk, w.bindKey = iT, w.castArray = $M, w.chain = eT, w.chunk = t5, w.compact = n5, w.concat = r5, w.cond = Ik, w.conforms = xk, w.constant = E0, w.countBy = dM, w.create = C8, w.curry = sT, w.curryRight = oT, w.debounce = lT, w.defaults = R8, w.defaultsDeep = A8, w.defer = kM, w.delay = PM, w.difference = a5, w.differenceBy = i5, w.differenceWith = s5, w.drop = o5, w.dropRight = l5, w.dropRightWhile = c5, w.dropWhile = u5, w.fill = d5, w.filter = _M, w.flatMap = gM, w.flatMapDeep = hM, w.flatMapDepth = EM, w.flatten = jb, w.flattenDeep = p5, w.flattenDepth = _5, w.flip = FM, w.flow = wk, w.flowRight = Lk, w.fromPairs = m5, w.functions = L8, w.functionsIn = M8, w.groupBy = SM, w.initial = g5, w.intersection = h5, w.intersectionBy = E5, w.intersectionWith = S5, w.invert = P8, w.invertBy = F8, w.invokeMap = TM, w.iteratee = S0, w.keyBy = yM, w.keys = $n, w.keysIn = vr, w.map = ru, w.mapKeys = U8, w.mapValues = G8, w.matches = Mk, w.matchesProperty = kk, w.memoize = iu, w.merge = H8, w.mergeWith = ET, w.method = Pk, w.methodOf = Fk, w.mixin = b0, w.negate = su, w.nthArg = Uk, w.omit = Y8, w.omitBy = z8, w.once = BM, w.orderBy = vM, w.over = Gk, w.overArgs = UM, w.overEvery = Hk, w.overSome = Yk, w.partial = p0, w.partialRight = cT, w.partition = CM, w.pick = q8, w.pickBy = ST, w.property = AT, w.propertyOf = zk, w.pull = v5, w.pullAll = Zb, w.pullAllBy = C5, w.pullAllWith = R5, w.pullAt = A5, w.range = qk, w.rangeRight = Vk, w.rearg = GM, w.reject = OM, w.remove = O5, w.rest = HM, w.reverse = c0, w.sampleSize = IM, w.set = $8, w.setWith = W8, w.shuffle = xM, w.slice = N5, w.sortBy = LM, w.sortedUniq = k5, w.sortedUniqBy = P5, w.split = gk, w.spread = YM, w.tail = F5, w.take = B5, w.takeRight = U5, w.takeRightWhile = G5, w.takeWhile = H5, w.tap = nM, w.throttle = zM, w.thru = nu, w.toArray = mT, w.toPairs = bT, w.toPairsIn = TT, w.toPath = jk, w.toPlainObject = gT, w.transform = K8, w.unary = qM, w.union = Y5, w.unionBy = z5, w.unionWith = q5, w.uniq = V5, w.uniqBy = $5, w.uniqWith = W5, w.unset = Q8, w.unzip = u0, w.unzipWith = Jb, w.update = j8, w.updateWith = X8, w.values = Us, w.valuesIn = Z8, w.without = K5, w.words = CT, w.wrap = VM, w.xor = Q5, w.xorBy = j5, w.xorWith = X5, w.zip = Z5, w.zipObject = J5, w.zipObjectDeep = eM, w.zipWith = tM, w.entries = bT, w.entriesIn = TT, w.extend = hT, w.extendWith = cu, b0(w, w), w.add = Zk, w.attempt = RT, w.camelCase = nk, w.capitalize = yT, w.ceil = Jk, w.clamp = J8, w.clone = WM, w.cloneDeep = QM, w.cloneDeepWith = jM, w.cloneWith = KM, w.conformsTo = XM, w.deburr = vT, w.defaultTo = Dk, w.divide = eP, w.endsWith = rk, w.eq = ma, w.escape = ak, w.escapeRegExp = ik, w.every = pM, w.find = mM, w.findIndex = Kb, w.findKey = O8, w.findLast = fM, w.findLastIndex = Qb, w.findLastKey = N8, w.floor = tP, w.forEach = tT, w.forEachRight = nT, w.forIn = I8, w.forInRight = x8, w.forOwn = D8, w.forOwnRight = w8, w.get = f0, w.gt = ZM, w.gte = JM, w.has = k8, w.hasIn = g0, w.head = Xb, w.identity = Cr, w.includes = bM, w.indexOf = f5, w.inRange = ek, w.invoke = B8, w.isArguments = rs, w.isArray = gt, w.isArrayBuffer = e8, w.isArrayLike = yr, w.isArrayLikeObject = An, w.isBoolean = t8, w.isBuffer = vi, w.isDate = n8, w.isElement = r8, w.isEmpty = a8, w.isEqual = i8, w.isEqualWith = s8, w.isError = _0, w.isFinite = o8, w.isFunction = Za, w.isInteger = uT, w.isLength = ou, w.isMap = dT, w.isMatch = l8, w.isMatchWith = c8, w.isNaN = u8, w.isNative = d8, w.isNil = _8, w.isNull = p8, w.isNumber = pT, w.isObject = En, w.isObjectLike = yn, w.isPlainObject = tl, w.isRegExp = m0, w.isSafeInteger = m8, w.isSet = _T, w.isString = lu, w.isSymbol = Pr, w.isTypedArray = Bs, w.isUndefined = f8, w.isWeakMap = g8, w.isWeakSet = h8, w.join = b5, w.kebabCase = sk, w.last = Jr, w.lastIndexOf = T5, w.lowerCase = ok, w.lowerFirst = lk, w.lt = E8, w.lte = S8, w.max = nP, w.maxBy = rP, w.mean = aP, w.meanBy = iP, w.min = sP, w.minBy = oP, w.stubArray = y0, w.stubFalse = v0, w.stubObject = $k, w.stubString = Wk, w.stubTrue = Kk, w.multiply = lP, w.nth = y5, w.noConflict = Bk, w.noop = T0, w.now = au, w.pad = ck, w.padEnd = uk, w.padStart = dk, w.parseInt = pk, w.random = tk, w.reduce = RM, w.reduceRight = AM, w.repeat = _k, w.replace = mk, w.result = V8, w.round = cP, w.runInContext = te, w.sample = NM, w.size = DM, w.snakeCase = fk, w.some = wM, w.sortedIndex = I5, w.sortedIndexBy = x5, w.sortedIndexOf = D5, w.sortedLastIndex = w5, w.sortedLastIndexBy = L5, w.sortedLastIndexOf = M5, w.startCase = hk, w.startsWith = Ek, w.subtract = uP, w.sum = dP, w.sumBy = pP, w.template = Sk, w.times = Qk, w.toFinite = Ja, w.toInteger = ht, w.toLength = fT, w.toLower = bk, w.toNumber = ea, w.toSafeInteger = b8, w.toString = $t, w.toUpper = Tk, w.trim = yk, w.trimEnd = vk, w.trimStart = Ck, w.truncate = Rk, w.unescape = Ak, w.uniqueId = Xk, w.upperCase = Ok, w.upperFirst = h0, w.each = tT, w.eachRight = nT, w.first = Xb, b0(w, function() {
        var o = {};
        return Ca(w, function(u, m) {
          jt.call(w.prototype, m) || (o[m] = u);
        }), o;
      }(), { chain: !1 }), w.VERSION = r, Kr(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(o) {
        w[o].placeholder = w;
      }), Kr(["drop", "take"], function(o, u) {
        Lt.prototype[o] = function(m) {
          m = m === n ? 1 : Un(ht(m), 0);
          var b = this.__filtered__ && !u ? new Lt(this) : this.clone();
          return b.__filtered__ ? b.__takeCount__ = nr(m, b.__takeCount__) : b.__views__.push({
            size: nr(m, H),
            type: o + (b.__dir__ < 0 ? "Right" : "")
          }), b;
        }, Lt.prototype[o + "Right"] = function(m) {
          return this.reverse()[o](m).reverse();
        };
      }), Kr(["filter", "map", "takeWhile"], function(o, u) {
        var m = u + 1, b = m == ge || m == Fe;
        Lt.prototype[o] = function(O) {
          var F = this.clone();
          return F.__iteratees__.push({
            iteratee: it(O, 3),
            type: m
          }), F.__filtered__ = F.__filtered__ || b, F;
        };
      }), Kr(["head", "last"], function(o, u) {
        var m = "take" + (u ? "Right" : "");
        Lt.prototype[o] = function() {
          return this[m](1).value()[0];
        };
      }), Kr(["initial", "tail"], function(o, u) {
        var m = "drop" + (u ? "" : "Right");
        Lt.prototype[o] = function() {
          return this.__filtered__ ? new Lt(this) : this[m](1);
        };
      }), Lt.prototype.compact = function() {
        return this.filter(Cr);
      }, Lt.prototype.find = function(o) {
        return this.filter(o).head();
      }, Lt.prototype.findLast = function(o) {
        return this.reverse().find(o);
      }, Lt.prototype.invokeMap = Rt(function(o, u) {
        return typeof o == "function" ? new Lt(this) : this.map(function(m) {
          return Qo(m, o, u);
        });
      }), Lt.prototype.reject = function(o) {
        return this.filter(su(it(o)));
      }, Lt.prototype.slice = function(o, u) {
        o = ht(o);
        var m = this;
        return m.__filtered__ && (o > 0 || u < 0) ? new Lt(m) : (o < 0 ? m = m.takeRight(-o) : o && (m = m.drop(o)), u !== n && (u = ht(u), m = u < 0 ? m.dropRight(-u) : m.take(u - o)), m);
      }, Lt.prototype.takeRightWhile = function(o) {
        return this.reverse().takeWhile(o).reverse();
      }, Lt.prototype.toArray = function() {
        return this.take(H);
      }, Ca(Lt.prototype, function(o, u) {
        var m = /^(?:filter|find|map|reject)|While$/.test(u), b = /^(?:head|last)$/.test(u), O = w[b ? "take" + (u == "last" ? "Right" : "") : u], F = b || /^find/.test(u);
        O && (w.prototype[u] = function() {
          var Y = this.__wrapped__, Q = b ? [1] : arguments, re = Y instanceof Lt, Re = Q[0], Ae = re || gt(Y), Ie = function(Dt) {
            var Mt = O.apply(w, gi([Dt], Q));
            return b && ze ? Mt[0] : Mt;
          };
          Ae && m && typeof Re == "function" && Re.length != 1 && (re = Ae = !1);
          var ze = this.__chain__, Xe = !!this.__actions__.length, st = F && !ze, Tt = re && !Xe;
          if (!F && Ae) {
            Y = Tt ? Y : new Lt(this);
            var ot = o.apply(Y, Q);
            return ot.__actions__.push({ func: nu, args: [Ie], thisArg: n }), new jr(ot, ze);
          }
          return st && Tt ? o.apply(this, Q) : (ot = this.thru(Ie), st ? b ? ot.value()[0] : ot.value() : ot);
        });
      }), Kr(["pop", "push", "shift", "sort", "splice", "unshift"], function(o) {
        var u = Nc[o], m = /^(?:push|sort|unshift)$/.test(o) ? "tap" : "thru", b = /^(?:pop|shift)$/.test(o);
        w.prototype[o] = function() {
          var O = arguments;
          if (b && !this.__chain__) {
            var F = this.value();
            return u.apply(gt(F) ? F : [], O);
          }
          return this[m](function(Y) {
            return u.apply(gt(Y) ? Y : [], O);
          });
        };
      }), Ca(Lt.prototype, function(o, u) {
        var m = w[u];
        if (m) {
          var b = m.name + "";
          jt.call(Ls, b) || (Ls[b] = []), Ls[b].push({ name: u, func: m });
        }
      }), Ls[Qc(n, A).name] = [{
        name: "wrapper",
        func: n
      }], Lt.prototype.clone = A6, Lt.prototype.reverse = O6, Lt.prototype.value = N6, w.prototype.at = rM, w.prototype.chain = aM, w.prototype.commit = iM, w.prototype.next = sM, w.prototype.plant = lM, w.prototype.reverse = cM, w.prototype.toJSON = w.prototype.valueOf = w.prototype.value = uM, w.prototype.first = w.prototype.head, Yo && (w.prototype[Yo] = oM), w;
    }, xs = i6();
    Qi ? ((Qi.exports = xs)._ = xs, Sp._ = xs) : Xn._ = xs;
  }).call(Qn);
})(Ku, Ku.exports);
var lo = Ku.exports;
let uu;
const S7 = new Uint8Array(16);
function b7() {
  if (!uu && (uu = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !uu))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return uu(S7);
}
const tr = [];
for (let t = 0; t < 256; ++t)
  tr.push((t + 256).toString(16).slice(1));
function T7(t, e = 0) {
  return (tr[t[e + 0]] + tr[t[e + 1]] + tr[t[e + 2]] + tr[t[e + 3]] + "-" + tr[t[e + 4]] + tr[t[e + 5]] + "-" + tr[t[e + 6]] + tr[t[e + 7]] + "-" + tr[t[e + 8]] + tr[t[e + 9]] + "-" + tr[t[e + 10]] + tr[t[e + 11]] + tr[t[e + 12]] + tr[t[e + 13]] + tr[t[e + 14]] + tr[t[e + 15]]).toLowerCase();
}
const y7 = typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto), MT = {
  randomUUID: y7
};
function ms(t, e, n) {
  if (MT.randomUUID && !e && !t)
    return MT.randomUUID();
  t = t || {};
  const r = t.random || (t.rng || b7)();
  return r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, T7(r);
}
function ph(t) {
  this.message = t;
}
ph.prototype = new Error(), ph.prototype.name = "InvalidCharacterError";
var kT = typeof window < "u" && window.atob && window.atob.bind(window) || function(t) {
  var e = String(t).replace(/=+$/, "");
  if (e.length % 4 == 1) throw new ph("'atob' failed: The string to be decoded is not correctly encoded.");
  for (var n, r, a = 0, i = 0, s = ""; r = e.charAt(i++); ~r && (n = a % 4 ? 64 * n + r : r, a++ % 4) ? s += String.fromCharCode(255 & n >> (-2 * a & 6)) : 0) r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(r);
  return s;
};
function v7(t) {
  var e = t.replace(/-/g, "+").replace(/_/g, "/");
  switch (e.length % 4) {
    case 0:
      break;
    case 2:
      e += "==";
      break;
    case 3:
      e += "=";
      break;
    default:
      throw "Illegal base64url string!";
  }
  try {
    return function(n) {
      return decodeURIComponent(kT(n).replace(/(.)/g, function(r, a) {
        var i = a.charCodeAt(0).toString(16).toUpperCase();
        return i.length < 2 && (i = "0" + i), "%" + i;
      }));
    }(e);
  } catch {
    return kT(e);
  }
}
function Qu(t) {
  this.message = t;
}
function C7(t, e) {
  if (typeof t != "string") throw new Qu("Invalid token specified");
  var n = (e = e || {}).header === !0 ? 0 : 1;
  try {
    return JSON.parse(v7(t.split(".")[n]));
  } catch (r) {
    throw new Qu("Invalid token specified: " + r.message);
  }
}
Qu.prototype = new Error(), Qu.prototype.name = "InvalidTokenError";
var _h = { exports: {} }, C0 = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var PT;
function R7() {
  if (PT) return C0;
  PT = 1;
  var t = $e;
  function e(_, f) {
    return _ === f && (_ !== 0 || 1 / _ === 1 / f) || _ !== _ && f !== f;
  }
  var n = typeof Object.is == "function" ? Object.is : e, r = t.useState, a = t.useEffect, i = t.useLayoutEffect, s = t.useDebugValue;
  function l(_, f) {
    var g = f(), E = r({ inst: { value: g, getSnapshot: f } }), T = E[0].inst, R = E[1];
    return i(function() {
      T.value = g, T.getSnapshot = f, c(T) && R({ inst: T });
    }, [_, g, f]), a(function() {
      return c(T) && R({ inst: T }), _(function() {
        c(T) && R({ inst: T });
      });
    }, [_]), s(g), g;
  }
  function c(_) {
    var f = _.getSnapshot;
    _ = _.value;
    try {
      var g = f();
      return !n(_, g);
    } catch {
      return !0;
    }
  }
  function d(_, f) {
    return f();
  }
  var p = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? d : l;
  return C0.useSyncExternalStore = t.useSyncExternalStore !== void 0 ? t.useSyncExternalStore : p, C0;
}
var R0 = {};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var FT;
function A7() {
  return FT || (FT = 1, process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var t = $e, e = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function n(x) {
      {
        for (var P = arguments.length, D = new Array(P > 1 ? P - 1 : 0), L = 1; L < P; L++)
          D[L - 1] = arguments[L];
        r("error", x, D);
      }
    }
    function r(x, P, D) {
      {
        var L = e.ReactDebugCurrentFrame, K = L.getStackAddendum();
        K !== "" && (P += "%s", D = D.concat([K]));
        var J = D.map(function(X) {
          return String(X);
        });
        J.unshift("Warning: " + P), Function.prototype.apply.call(console[x], console, J);
      }
    }
    function a(x, P) {
      return x === P && (x !== 0 || 1 / x === 1 / P) || x !== x && P !== P;
    }
    var i = typeof Object.is == "function" ? Object.is : a, s = t.useState, l = t.useEffect, c = t.useLayoutEffect, d = t.useDebugValue, p = !1, _ = !1;
    function f(x, P, D) {
      p || t.startTransition !== void 0 && (p = !0, n("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var L = P();
      if (!_) {
        var K = P();
        i(L, K) || (n("The result of getSnapshot should be cached to avoid an infinite loop"), _ = !0);
      }
      var J = s({
        inst: {
          value: L,
          getSnapshot: P
        }
      }), X = J[0].inst, $ = J[1];
      return c(function() {
        X.value = L, X.getSnapshot = P, g(X) && $({
          inst: X
        });
      }, [x, L, P]), l(function() {
        g(X) && $({
          inst: X
        });
        var ae = function() {
          g(X) && $({
            inst: X
          });
        };
        return x(ae);
      }, [x]), d(L), L;
    }
    function g(x) {
      var P = x.getSnapshot, D = x.value;
      try {
        var L = P();
        return !i(D, L);
      } catch {
        return !0;
      }
    }
    function E(x, P, D) {
      return P();
    }
    var T = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", R = !T, A = R ? E : f, I = t.useSyncExternalStore !== void 0 ? t.useSyncExternalStore : A;
    R0.useSyncExternalStore = I, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), R0;
}
process.env.NODE_ENV === "production" ? _h.exports = R7() : _h.exports = A7();
var O7 = _h.exports;
const Ii = () => {
}, Ir = (
  /*#__NOINLINE__*/
  Ii()
), A0 = Object, Ht = (t) => t === Ir, Da = (t) => typeof t == "function", Fi = (t, e) => ({
  ...t,
  ...e
}), N7 = (t) => Da(t.then), du = /* @__PURE__ */ new WeakMap();
let I7 = 0;
const Il = (t) => {
  const e = typeof t, n = t && t.constructor, r = n == Date;
  let a, i;
  if (A0(t) === t && !r && n != RegExp) {
    if (a = du.get(t), a) return a;
    if (a = ++I7 + "~", du.set(t, a), n == Array) {
      for (a = "@", i = 0; i < t.length; i++)
        a += Il(t[i]) + ",";
      du.set(t, a);
    }
    if (n == A0) {
      a = "#";
      const s = A0.keys(t).sort();
      for (; !Ht(i = s.pop()); )
        Ht(t[i]) || (a += i + ":" + Il(t[i]) + ",");
      du.set(t, a);
    }
  } else
    a = r ? t.toJSON() : e == "symbol" ? t.toString() : e == "string" ? JSON.stringify(t) : "" + t;
  return a;
}, ii = /* @__PURE__ */ new WeakMap(), O0 = {}, pu = {}, vE = "undefined", yd = typeof window != vE, mh = typeof document != vE, x7 = () => yd && typeof window.requestAnimationFrame != vE, L2 = (t, e) => {
  const n = ii.get(t);
  return [
    // Getter
    () => !Ht(e) && t.get(e) || O0,
    // Setter
    (r) => {
      if (!Ht(e)) {
        const a = t.get(e);
        e in pu || (pu[e] = a), n[5](e, Fi(a, r), a || O0);
      }
    },
    // Subscriber
    n[6],
    // Get server cache snapshot
    () => !Ht(e) && e in pu ? pu[e] : !Ht(e) && t.get(e) || O0
  ];
};
let fh = !0;
const D7 = () => fh, [gh, hh] = yd && window.addEventListener ? [
  window.addEventListener.bind(window),
  window.removeEventListener.bind(window)
] : [
  Ii,
  Ii
], w7 = () => {
  const t = mh && document.visibilityState;
  return Ht(t) || t !== "hidden";
}, L7 = (t) => (mh && document.addEventListener("visibilitychange", t), gh("focus", t), () => {
  mh && document.removeEventListener("visibilitychange", t), hh("focus", t);
}), M7 = (t) => {
  const e = () => {
    fh = !0, t();
  }, n = () => {
    fh = !1;
  };
  return gh("online", e), gh("offline", n), () => {
    hh("online", e), hh("offline", n);
  };
}, k7 = {
  isOnline: D7,
  isVisible: w7
}, P7 = {
  initFocus: L7,
  initReconnect: M7
}, BT = !$e.useId, xl = !yd || "Deno" in window, F7 = (t) => x7() ? window.requestAnimationFrame(t) : setTimeout(t, 1), N0 = xl ? wn : S2, I0 = typeof navigator < "u" && navigator.connection, UT = !xl && I0 && ([
  "slow-2g",
  "2g"
].includes(I0.effectiveType) || I0.saveData), CE = (t) => {
  if (Da(t))
    try {
      t = t();
    } catch {
      t = "";
    }
  const e = t;
  return t = typeof t == "string" ? t : (Array.isArray(t) ? t.length : t) ? Il(t) : "", [
    t,
    e
  ];
};
let B7 = 0;
const Eh = () => ++B7, M2 = 0, k2 = 1, P2 = 2, U7 = 3;
var al = {
  __proto__: null,
  ERROR_REVALIDATE_EVENT: U7,
  FOCUS_EVENT: M2,
  MUTATE_EVENT: P2,
  RECONNECT_EVENT: k2
};
async function F2(...t) {
  const [e, n, r, a] = t, i = Fi({
    populateCache: !0,
    throwOnError: !0
  }, typeof a == "boolean" ? {
    revalidate: a
  } : a || {});
  let s = i.populateCache;
  const l = i.rollbackOnError;
  let c = i.optimisticData;
  const d = (f) => typeof l == "function" ? l(f) : l !== !1, p = i.throwOnError;
  if (Da(n)) {
    const f = n, g = [], E = e.keys();
    for (const T of E)
      // Skip the special useSWRInfinite and useSWRSubscription keys.
      !/^\$(inf|sub)\$/.test(T) && f(e.get(T)._k) && g.push(T);
    return Promise.all(g.map(_));
  }
  return _(n);
  async function _(f) {
    const [g] = CE(f);
    if (!g) return;
    const [E, T] = L2(e, g), [R, A, I, x] = ii.get(e), P = () => {
      const ve = R[g];
      return (Da(i.revalidate) ? i.revalidate(E().data, f) : i.revalidate !== !1) && (delete I[g], delete x[g], ve && ve[0]) ? ve[0](P2).then(() => E().data) : E().data;
    };
    if (t.length < 3)
      return P();
    let D = r, L;
    const K = Eh();
    A[g] = [
      K,
      0
    ];
    const J = !Ht(c), X = E(), $ = X.data, ae = X._c, ce = Ht(ae) ? $ : ae;
    if (J && (c = Da(c) ? c(ce, $) : c, T({
      data: c,
      _c: ce
    })), Da(D))
      try {
        D = D(ce);
      } catch (ve) {
        L = ve;
      }
    if (D && N7(D))
      if (D = await D.catch((ve) => {
        L = ve;
      }), K !== A[g][0]) {
        if (L) throw L;
        return D;
      } else L && J && d(L) && (s = !0, T({
        data: ce,
        _c: Ir
      }));
    if (s && !L)
      if (Da(s)) {
        const ve = s(D, ce);
        T({
          data: ve,
          error: Ir,
          _c: Ir
        });
      } else
        T({
          data: D,
          error: Ir,
          _c: Ir
        });
    if (A[g][1] = Eh(), Promise.resolve(P()).then(() => {
      T({
        _c: Ir
      });
    }), L) {
      if (p) throw L;
      return;
    }
    return D;
  }
}
const GT = (t, e) => {
  for (const n in t)
    t[n][0] && t[n][0](e);
}, G7 = (t, e) => {
  if (!ii.has(t)) {
    const n = Fi(P7, e), r = {}, a = F2.bind(Ir, t);
    let i = Ii;
    const s = {}, l = (p, _) => {
      const f = s[p] || [];
      return s[p] = f, f.push(_), () => f.splice(f.indexOf(_), 1);
    }, c = (p, _, f) => {
      t.set(p, _);
      const g = s[p];
      if (g)
        for (const E of g)
          E(_, f);
    }, d = () => {
      if (!ii.has(t) && (ii.set(t, [
        r,
        {},
        {},
        {},
        a,
        c,
        l
      ]), !xl)) {
        const p = n.initFocus(setTimeout.bind(Ir, GT.bind(Ir, r, M2))), _ = n.initReconnect(setTimeout.bind(Ir, GT.bind(Ir, r, k2)));
        i = () => {
          p && p(), _ && _(), ii.delete(t);
        };
      }
    };
    return d(), [
      t,
      a,
      d,
      i
    ];
  }
  return [
    t,
    ii.get(t)[4]
  ];
}, H7 = (t, e, n, r, a) => {
  const i = n.errorRetryCount, s = a.retryCount, l = ~~((Math.random() + 0.5) * (1 << (s < 8 ? s : 8))) * n.errorRetryInterval;
  !Ht(i) && s > i || setTimeout(r, l, a);
}, Y7 = (t, e) => Il(t) == Il(e), [B2, z7] = G7(/* @__PURE__ */ new Map()), q7 = Fi(
  {
    // events
    onLoadingSlow: Ii,
    onSuccess: Ii,
    onError: Ii,
    onErrorRetry: H7,
    onDiscarded: Ii,
    // switches
    revalidateOnFocus: !0,
    revalidateOnReconnect: !0,
    revalidateIfStale: !0,
    shouldRetryOnError: !0,
    // timeouts
    errorRetryInterval: UT ? 1e4 : 5e3,
    focusThrottleInterval: 5 * 1e3,
    dedupingInterval: 2 * 1e3,
    loadingTimeout: UT ? 5e3 : 3e3,
    // providers
    compare: Y7,
    isPaused: () => !1,
    cache: B2,
    mutate: z7,
    fallback: {}
  },
  // use web preset by default
  k7
), V7 = (t, e) => {
  const n = Fi(t, e);
  if (e) {
    const { use: r, fallback: a } = t, { use: i, fallback: s } = e;
    r && i && (n.use = r.concat(i)), a && s && (n.fallback = Fi(a, s));
  }
  return n;
}, $7 = so({}), W7 = "$inf$", U2 = yd && window.__SWR_DEVTOOLS_USE__, K7 = U2 ? window.__SWR_DEVTOOLS_USE__ : [], Q7 = () => {
  U2 && (window.__SWR_DEVTOOLS_REACT__ = $e);
}, j7 = (t) => Da(t[1]) ? [
  t[0],
  t[1],
  t[2] || {}
] : [
  t[0],
  null,
  (t[1] === null ? t[2] : t[1]) || {}
], X7 = () => Fi(q7, qn($7)), Z7 = (t) => (e, n, r) => t(e, n && ((...i) => {
  const [s] = CE(e), [, , , l] = ii.get(B2);
  if (s.startsWith(W7))
    return n(...i);
  const c = l[s];
  return Ht(c) ? n(...i) : (delete l[s], c);
}), r), J7 = K7.concat(Z7), e9 = (t) => function(...n) {
  const r = X7(), [a, i, s] = j7(n), l = V7(r, s);
  let c = t;
  const { use: d } = l, p = (d || []).concat(J7);
  for (let _ = p.length; _--; )
    c = p[_](c);
  return c(a, i || l.fetcher || null, l);
}, t9 = (t, e, n) => {
  const r = e[t] || (e[t] = []);
  return r.push(n), () => {
    const a = r.indexOf(n);
    a >= 0 && (r[a] = r[r.length - 1], r.pop());
  };
};
Q7();
const HT = $e.use || ((t) => {
  if (t.status === "pending")
    throw t;
  if (t.status === "fulfilled")
    return t.value;
  throw t.status === "rejected" ? t.reason : (t.status = "pending", t.then((e) => {
    t.status = "fulfilled", t.value = e;
  }, (e) => {
    t.status = "rejected", t.reason = e;
  }), t);
}), x0 = {
  dedupe: !0
}, n9 = (t, e, n) => {
  const { cache: r, compare: a, suspense: i, fallbackData: s, revalidateOnMount: l, revalidateIfStale: c, refreshInterval: d, refreshWhenHidden: p, refreshWhenOffline: _, keepPreviousData: f } = n, [g, E, T, R] = ii.get(r), [A, I] = CE(t), x = un(!1), P = un(!1), D = un(A), L = un(e), K = un(n), J = () => K.current, X = () => J().isVisible() && J().isOnline(), [$, ae, ce, ve] = L2(r, A), ge = un({}).current, fe = Ht(s) ? n.fallback[A] : s, Fe = (_e, je) => {
    for (const et in ge) {
      const nt = et;
      if (nt === "data") {
        if (!a(_e[nt], je[nt]) && (!Ht(_e[nt]) || !a(Ce, je[nt])))
          return !1;
      } else if (je[nt] !== _e[nt])
        return !1;
    }
    return !0;
  }, ne = Cn(() => {
    const _e = !A || !e ? !1 : Ht(l) ? J().isPaused() || i ? !1 : Ht(c) ? !0 : c : l, je = (He) => {
      const Gt = Fi(He);
      return delete Gt._k, _e ? {
        isValidating: !0,
        isLoading: !0,
        ...Gt
      } : Gt;
    }, et = $(), nt = ve(), mt = je(et), bt = et === nt ? mt : je(nt);
    let _t = mt;
    return [
      () => {
        const He = je($());
        return Fe(He, _t) ? (_t.data = He.data, _t.isLoading = He.isLoading, _t.isValidating = He.isValidating, _t.error = He.error, _t) : (_t = He, He);
      },
      () => bt
    ];
  }, [
    r,
    A
  ]), se = O7.useSyncExternalStore(dt(
    (_e) => ce(A, (je, et) => {
      Fe(et, je) || _e();
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      r,
      A
    ]
  ), ne[0], ne[1]), z = !x.current, v = g[A] && g[A].length > 0, H = se.data, oe = Ht(H) ? fe : H, k = se.error, me = un(oe), Ce = f ? Ht(H) ? me.current : H : oe, he = v && !Ht(k) ? !1 : z && !Ht(l) ? l : J().isPaused() ? !1 : i ? Ht(oe) ? !1 : c : Ht(oe) || c, Ne = !!(A && e && z && he), ye = Ht(se.isValidating) ? Ne : se.isValidating, Ue = Ht(se.isLoading) ? Ne : se.isLoading, Me = dt(
    async (_e) => {
      const je = L.current;
      if (!A || !je || P.current || J().isPaused())
        return !1;
      let et, nt, mt = !0;
      const bt = _e || {}, _t = !T[A] || !bt.dedupe, He = () => BT ? !P.current && A === D.current && x.current : A === D.current, Gt = {
        isValidating: !1,
        isLoading: !1
      }, pt = () => {
        ae(Gt);
      }, Be = () => {
        const Oe = T[A];
        Oe && Oe[1] === nt && delete T[A];
      }, It = {
        isValidating: !0
      };
      Ht($().data) && (It.isLoading = !0);
      try {
        if (_t && (ae(It), n.loadingTimeout && Ht($().data) && setTimeout(() => {
          mt && He() && J().onLoadingSlow(A, n);
        }, n.loadingTimeout), T[A] = [
          je(I),
          Eh()
        ]), [et, nt] = T[A], et = await et, _t && setTimeout(Be, n.dedupingInterval), !T[A] || T[A][1] !== nt)
          return _t && He() && J().onDiscarded(A), !1;
        Gt.error = Ir;
        const Oe = E[A];
        if (!Ht(Oe) && // case 1
        (nt <= Oe[0] || // case 2
        nt <= Oe[1] || // case 3
        Oe[1] === 0))
          return pt(), _t && He() && J().onDiscarded(A), !1;
        const j = $().data;
        Gt.data = a(j, et) ? j : et, _t && He() && J().onSuccess(et, A, n);
      } catch (Oe) {
        Be();
        const j = J(), { shouldRetryOnError: Se } = j;
        j.isPaused() || (Gt.error = Oe, _t && He() && (j.onError(Oe, A, j), (Se === !0 || Da(Se) && Se(Oe)) && (!J().revalidateOnFocus || !J().revalidateOnReconnect || X()) && j.onErrorRetry(Oe, A, j, (ue) => {
          const be = g[A];
          be && be[0] && be[0](al.ERROR_REVALIDATE_EVENT, ue);
        }, {
          retryCount: (bt.retryCount || 0) + 1,
          dedupe: !0
        })));
      }
      return mt = !1, pt(), !0;
    },
    // `setState` is immutable, and `eventsCallback`, `fnArg`, and
    // `keyValidating` are depending on `key`, so we can exclude them from
    // the deps array.
    //
    // FIXME:
    // `fn` and `config` might be changed during the lifecycle,
    // but they might be changed every render like this.
    // `useSWR('key', () => fetch('/api/'), { suspense: true })`
    // So we omit the values from the deps array
    // even though it might cause unexpected behaviors.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      A,
      r
    ]
  ), Qe = dt(
    // Use callback to make sure `keyRef.current` returns latest result every time
    (..._e) => F2(r, D.current, ..._e),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  if (N0(() => {
    L.current = e, K.current = n, Ht(H) || (me.current = H);
  }), N0(() => {
    if (!A) return;
    const _e = Me.bind(Ir, x0);
    let je = 0;
    const nt = t9(A, g, (mt, bt = {}) => {
      if (mt == al.FOCUS_EVENT) {
        const _t = Date.now();
        J().revalidateOnFocus && _t > je && X() && (je = _t + J().focusThrottleInterval, _e());
      } else if (mt == al.RECONNECT_EVENT)
        J().revalidateOnReconnect && X() && _e();
      else {
        if (mt == al.MUTATE_EVENT)
          return Me();
        if (mt == al.ERROR_REVALIDATE_EVENT)
          return Me(bt);
      }
    });
    return P.current = !1, D.current = A, x.current = !0, ae({
      _k: I
    }), he && (Ht(oe) || xl ? _e() : F7(_e)), () => {
      P.current = !0, nt();
    };
  }, [
    A
  ]), N0(() => {
    let _e;
    function je() {
      const nt = Da(d) ? d($().data) : d;
      nt && _e !== -1 && (_e = setTimeout(et, nt));
    }
    function et() {
      !$().error && (p || J().isVisible()) && (_ || J().isOnline()) ? Me(x0).then(je) : je();
    }
    return je(), () => {
      _e && (clearTimeout(_e), _e = -1);
    };
  }, [
    d,
    p,
    _,
    A
  ]), _P(Ce), i && Ht(oe) && A) {
    if (!BT && xl)
      throw new Error("Fallback data is required when using suspense in SSR.");
    L.current = e, K.current = n, P.current = !1;
    const _e = R[A];
    if (!Ht(_e)) {
      const je = Qe(_e);
      HT(je);
    }
    if (Ht(k)) {
      const je = Me(x0);
      Ht(Ce) || (je.status = "fulfilled", je.value = !0), HT(je);
    } else
      throw k;
  }
  return {
    mutate: Qe,
    get data() {
      return ge.data = !0, Ce;
    },
    get error() {
      return ge.error = !0, k;
    },
    get isValidating() {
      return ge.isValidating = !0, ye;
    },
    get isLoading() {
      return ge.isLoading = !0, Ue;
    }
  };
}, RE = e9(n9), Ua = /* @__PURE__ */ Object.create(null);
Ua.open = "0";
Ua.close = "1";
Ua.ping = "2";
Ua.pong = "3";
Ua.message = "4";
Ua.upgrade = "5";
Ua.noop = "6";
const Pu = /* @__PURE__ */ Object.create(null);
Object.keys(Ua).forEach((t) => {
  Pu[Ua[t]] = t;
});
const Sh = { type: "error", data: "parser error" }, G2 = typeof Blob == "function" || typeof Blob < "u" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]", H2 = typeof ArrayBuffer == "function", Y2 = (t) => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(t) : t && t.buffer instanceof ArrayBuffer, AE = ({ type: t, data: e }, n, r) => G2 && e instanceof Blob ? n ? r(e) : YT(e, r) : H2 && (e instanceof ArrayBuffer || Y2(e)) ? n ? r(e) : YT(new Blob([e]), r) : r(Ua[t] + (e || "")), YT = (t, e) => {
  const n = new FileReader();
  return n.onload = function() {
    const r = n.result.split(",")[1];
    e("b" + (r || ""));
  }, n.readAsDataURL(t);
};
function zT(t) {
  return t instanceof Uint8Array ? t : t instanceof ArrayBuffer ? new Uint8Array(t) : new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
}
let D0;
function r9(t, e) {
  if (G2 && t.data instanceof Blob)
    return t.data.arrayBuffer().then(zT).then(e);
  if (H2 && (t.data instanceof ArrayBuffer || Y2(t.data)))
    return e(zT(t.data));
  AE(t, !1, (n) => {
    D0 || (D0 = new TextEncoder()), e(D0.encode(n));
  });
}
const qT = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", _l = typeof Uint8Array > "u" ? [] : new Uint8Array(256);
for (let t = 0; t < qT.length; t++)
  _l[qT.charCodeAt(t)] = t;
const a9 = (t) => {
  let e = t.length * 0.75, n = t.length, r, a = 0, i, s, l, c;
  t[t.length - 1] === "=" && (e--, t[t.length - 2] === "=" && e--);
  const d = new ArrayBuffer(e), p = new Uint8Array(d);
  for (r = 0; r < n; r += 4)
    i = _l[t.charCodeAt(r)], s = _l[t.charCodeAt(r + 1)], l = _l[t.charCodeAt(r + 2)], c = _l[t.charCodeAt(r + 3)], p[a++] = i << 2 | s >> 4, p[a++] = (s & 15) << 4 | l >> 2, p[a++] = (l & 3) << 6 | c & 63;
  return d;
}, i9 = typeof ArrayBuffer == "function", OE = (t, e) => {
  if (typeof t != "string")
    return {
      type: "message",
      data: z2(t, e)
    };
  const n = t.charAt(0);
  return n === "b" ? {
    type: "message",
    data: s9(t.substring(1), e)
  } : Pu[n] ? t.length > 1 ? {
    type: Pu[n],
    data: t.substring(1)
  } : {
    type: Pu[n]
  } : Sh;
}, s9 = (t, e) => {
  if (i9) {
    const n = a9(t);
    return z2(n, e);
  } else
    return { base64: !0, data: t };
}, z2 = (t, e) => {
  switch (e) {
    case "blob":
      return t instanceof Blob ? t : new Blob([t]);
    case "arraybuffer":
    default:
      return t instanceof ArrayBuffer ? t : t.buffer;
  }
}, q2 = "", o9 = (t, e) => {
  const n = t.length, r = new Array(n);
  let a = 0;
  t.forEach((i, s) => {
    AE(i, !1, (l) => {
      r[s] = l, ++a === n && e(r.join(q2));
    });
  });
}, l9 = (t, e) => {
  const n = t.split(q2), r = [];
  for (let a = 0; a < n.length; a++) {
    const i = OE(n[a], e);
    if (r.push(i), i.type === "error")
      break;
  }
  return r;
};
function c9() {
  return new TransformStream({
    transform(t, e) {
      r9(t, (n) => {
        const r = n.length;
        let a;
        if (r < 126)
          a = new Uint8Array(1), new DataView(a.buffer).setUint8(0, r);
        else if (r < 65536) {
          a = new Uint8Array(3);
          const i = new DataView(a.buffer);
          i.setUint8(0, 126), i.setUint16(1, r);
        } else {
          a = new Uint8Array(9);
          const i = new DataView(a.buffer);
          i.setUint8(0, 127), i.setBigUint64(1, BigInt(r));
        }
        t.data && typeof t.data != "string" && (a[0] |= 128), e.enqueue(a), e.enqueue(n);
      });
    }
  });
}
let w0;
function _u(t) {
  return t.reduce((e, n) => e + n.length, 0);
}
function mu(t, e) {
  if (t[0].length === e)
    return t.shift();
  const n = new Uint8Array(e);
  let r = 0;
  for (let a = 0; a < e; a++)
    n[a] = t[0][r++], r === t[0].length && (t.shift(), r = 0);
  return t.length && r < t[0].length && (t[0] = t[0].slice(r)), n;
}
function u9(t, e) {
  w0 || (w0 = new TextDecoder());
  const n = [];
  let r = 0, a = -1, i = !1;
  return new TransformStream({
    transform(s, l) {
      for (n.push(s); ; ) {
        if (r === 0) {
          if (_u(n) < 1)
            break;
          const c = mu(n, 1);
          i = (c[0] & 128) === 128, a = c[0] & 127, a < 126 ? r = 3 : a === 126 ? r = 1 : r = 2;
        } else if (r === 1) {
          if (_u(n) < 2)
            break;
          const c = mu(n, 2);
          a = new DataView(c.buffer, c.byteOffset, c.length).getUint16(0), r = 3;
        } else if (r === 2) {
          if (_u(n) < 8)
            break;
          const c = mu(n, 8), d = new DataView(c.buffer, c.byteOffset, c.length), p = d.getUint32(0);
          if (p > Math.pow(2, 21) - 1) {
            l.enqueue(Sh);
            break;
          }
          a = p * Math.pow(2, 32) + d.getUint32(4), r = 3;
        } else {
          if (_u(n) < a)
            break;
          const c = mu(n, a);
          l.enqueue(OE(i ? c : w0.decode(c), e)), r = 0;
        }
        if (a === 0 || a > t) {
          l.enqueue(Sh);
          break;
        }
      }
    }
  });
}
const V2 = 4;
function kn(t) {
  if (t) return d9(t);
}
function d9(t) {
  for (var e in kn.prototype)
    t[e] = kn.prototype[e];
  return t;
}
kn.prototype.on = kn.prototype.addEventListener = function(t, e) {
  return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
};
kn.prototype.once = function(t, e) {
  function n() {
    this.off(t, n), e.apply(this, arguments);
  }
  return n.fn = e, this.on(t, n), this;
};
kn.prototype.off = kn.prototype.removeListener = kn.prototype.removeAllListeners = kn.prototype.removeEventListener = function(t, e) {
  if (this._callbacks = this._callbacks || {}, arguments.length == 0)
    return this._callbacks = {}, this;
  var n = this._callbacks["$" + t];
  if (!n) return this;
  if (arguments.length == 1)
    return delete this._callbacks["$" + t], this;
  for (var r, a = 0; a < n.length; a++)
    if (r = n[a], r === e || r.fn === e) {
      n.splice(a, 1);
      break;
    }
  return n.length === 0 && delete this._callbacks["$" + t], this;
};
kn.prototype.emit = function(t) {
  this._callbacks = this._callbacks || {};
  for (var e = new Array(arguments.length - 1), n = this._callbacks["$" + t], r = 1; r < arguments.length; r++)
    e[r - 1] = arguments[r];
  if (n) {
    n = n.slice(0);
    for (var r = 0, a = n.length; r < a; ++r)
      n[r].apply(this, e);
  }
  return this;
};
kn.prototype.emitReserved = kn.prototype.emit;
kn.prototype.listeners = function(t) {
  return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];
};
kn.prototype.hasListeners = function(t) {
  return !!this.listeners(t).length;
};
const vd = typeof Promise == "function" && typeof Promise.resolve == "function" ? (e) => Promise.resolve().then(e) : (e, n) => n(e, 0), na = typeof self < "u" ? self : typeof window < "u" ? window : Function("return this")(), p9 = "arraybuffer";
function $2(t, ...e) {
  return e.reduce((n, r) => (t.hasOwnProperty(r) && (n[r] = t[r]), n), {});
}
const _9 = na.setTimeout, m9 = na.clearTimeout;
function Cd(t, e) {
  e.useNativeTimers ? (t.setTimeoutFn = _9.bind(na), t.clearTimeoutFn = m9.bind(na)) : (t.setTimeoutFn = na.setTimeout.bind(na), t.clearTimeoutFn = na.clearTimeout.bind(na));
}
const f9 = 1.33;
function g9(t) {
  return typeof t == "string" ? h9(t) : Math.ceil((t.byteLength || t.size) * f9);
}
function h9(t) {
  let e = 0, n = 0;
  for (let r = 0, a = t.length; r < a; r++)
    e = t.charCodeAt(r), e < 128 ? n += 1 : e < 2048 ? n += 2 : e < 55296 || e >= 57344 ? n += 3 : (r++, n += 4);
  return n;
}
function W2() {
  return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
}
function E9(t) {
  let e = "";
  for (let n in t)
    t.hasOwnProperty(n) && (e.length && (e += "&"), e += encodeURIComponent(n) + "=" + encodeURIComponent(t[n]));
  return e;
}
function S9(t) {
  let e = {}, n = t.split("&");
  for (let r = 0, a = n.length; r < a; r++) {
    let i = n[r].split("=");
    e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);
  }
  return e;
}
class b9 extends Error {
  constructor(e, n, r) {
    super(e), this.description = n, this.context = r, this.type = "TransportError";
  }
}
class NE extends kn {
  /**
   * Transport abstract constructor.
   *
   * @param {Object} opts - options
   * @protected
   */
  constructor(e) {
    super(), this.writable = !1, Cd(this, e), this.opts = e, this.query = e.query, this.socket = e.socket, this.supportsBinary = !e.forceBase64;
  }
  /**
   * Emits an error.
   *
   * @param {String} reason
   * @param description
   * @param context - the error context
   * @return {Transport} for chaining
   * @protected
   */
  onError(e, n, r) {
    return super.emitReserved("error", new b9(e, n, r)), this;
  }
  /**
   * Opens the transport.
   */
  open() {
    return this.readyState = "opening", this.doOpen(), this;
  }
  /**
   * Closes the transport.
   */
  close() {
    return (this.readyState === "opening" || this.readyState === "open") && (this.doClose(), this.onClose()), this;
  }
  /**
   * Sends multiple packets.
   *
   * @param {Array} packets
   */
  send(e) {
    this.readyState === "open" && this.write(e);
  }
  /**
   * Called upon open
   *
   * @protected
   */
  onOpen() {
    this.readyState = "open", this.writable = !0, super.emitReserved("open");
  }
  /**
   * Called with data.
   *
   * @param {String} data
   * @protected
   */
  onData(e) {
    const n = OE(e, this.socket.binaryType);
    this.onPacket(n);
  }
  /**
   * Called with a decoded packet.
   *
   * @protected
   */
  onPacket(e) {
    super.emitReserved("packet", e);
  }
  /**
   * Called upon close.
   *
   * @protected
   */
  onClose(e) {
    this.readyState = "closed", super.emitReserved("close", e);
  }
  /**
   * Pauses the transport, in order not to lose packets during an upgrade.
   *
   * @param onPause
   */
  pause(e) {
  }
  createUri(e, n = {}) {
    return e + "://" + this._hostname() + this._port() + this.opts.path + this._query(n);
  }
  _hostname() {
    const e = this.opts.hostname;
    return e.indexOf(":") === -1 ? e : "[" + e + "]";
  }
  _port() {
    return this.opts.port && (this.opts.secure && +(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80) ? ":" + this.opts.port : "";
  }
  _query(e) {
    const n = E9(e);
    return n.length ? "?" + n : "";
  }
}
class T9 extends NE {
  constructor() {
    super(...arguments), this._polling = !1;
  }
  get name() {
    return "polling";
  }
  /**
   * Opens the socket (triggers polling). We write a PING message to determine
   * when the transport is open.
   *
   * @protected
   */
  doOpen() {
    this._poll();
  }
  /**
   * Pauses polling.
   *
   * @param {Function} onPause - callback upon buffers are flushed and transport is paused
   * @package
   */
  pause(e) {
    this.readyState = "pausing";
    const n = () => {
      this.readyState = "paused", e();
    };
    if (this._polling || !this.writable) {
      let r = 0;
      this._polling && (r++, this.once("pollComplete", function() {
        --r || n();
      })), this.writable || (r++, this.once("drain", function() {
        --r || n();
      }));
    } else
      n();
  }
  /**
   * Starts polling cycle.
   *
   * @private
   */
  _poll() {
    this._polling = !0, this.doPoll(), this.emitReserved("poll");
  }
  /**
   * Overloads onData to detect payloads.
   *
   * @protected
   */
  onData(e) {
    const n = (r) => {
      if (this.readyState === "opening" && r.type === "open" && this.onOpen(), r.type === "close")
        return this.onClose({ description: "transport closed by the server" }), !1;
      this.onPacket(r);
    };
    l9(e, this.socket.binaryType).forEach(n), this.readyState !== "closed" && (this._polling = !1, this.emitReserved("pollComplete"), this.readyState === "open" && this._poll());
  }
  /**
   * For polling, send a close packet.
   *
   * @protected
   */
  doClose() {
    const e = () => {
      this.write([{ type: "close" }]);
    };
    this.readyState === "open" ? e() : this.once("open", e);
  }
  /**
   * Writes a packets payload.
   *
   * @param {Array} packets - data packets
   * @protected
   */
  write(e) {
    this.writable = !1, o9(e, (n) => {
      this.doWrite(n, () => {
        this.writable = !0, this.emitReserved("drain");
      });
    });
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    const e = this.opts.secure ? "https" : "http", n = this.query || {};
    return this.opts.timestampRequests !== !1 && (n[this.opts.timestampParam] = W2()), !this.supportsBinary && !n.sid && (n.b64 = 1), this.createUri(e, n);
  }
}
let K2 = !1;
try {
  K2 = typeof XMLHttpRequest < "u" && "withCredentials" in new XMLHttpRequest();
} catch {
}
const y9 = K2;
function v9() {
}
class C9 extends T9 {
  /**
   * XHR Polling constructor.
   *
   * @param {Object} opts
   * @package
   */
  constructor(e) {
    if (super(e), typeof location < "u") {
      const n = location.protocol === "https:";
      let r = location.port;
      r || (r = n ? "443" : "80"), this.xd = typeof location < "u" && e.hostname !== location.hostname || r !== e.port;
    }
  }
  /**
   * Sends data.
   *
   * @param {String} data to send.
   * @param {Function} called upon flush.
   * @private
   */
  doWrite(e, n) {
    const r = this.request({
      method: "POST",
      data: e
    });
    r.on("success", n), r.on("error", (a, i) => {
      this.onError("xhr post error", a, i);
    });
  }
  /**
   * Starts a poll cycle.
   *
   * @private
   */
  doPoll() {
    const e = this.request();
    e.on("data", this.onData.bind(this)), e.on("error", (n, r) => {
      this.onError("xhr poll error", n, r);
    }), this.pollXhr = e;
  }
}
class Ba extends kn {
  /**
   * Request constructor
   *
   * @param {Object} options
   * @package
   */
  constructor(e, n, r) {
    super(), this.createRequest = e, Cd(this, r), this._opts = r, this._method = r.method || "GET", this._uri = n, this._data = r.data !== void 0 ? r.data : null, this._create();
  }
  /**
   * Creates the XHR object and sends the request.
   *
   * @private
   */
  _create() {
    var e;
    const n = $2(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
    n.xdomain = !!this._opts.xd;
    const r = this._xhr = this.createRequest(n);
    try {
      r.open(this._method, this._uri, !0);
      try {
        if (this._opts.extraHeaders) {
          r.setDisableHeaderCheck && r.setDisableHeaderCheck(!0);
          for (let a in this._opts.extraHeaders)
            this._opts.extraHeaders.hasOwnProperty(a) && r.setRequestHeader(a, this._opts.extraHeaders[a]);
        }
      } catch {
      }
      if (this._method === "POST")
        try {
          r.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
        } catch {
        }
      try {
        r.setRequestHeader("Accept", "*/*");
      } catch {
      }
      (e = this._opts.cookieJar) === null || e === void 0 || e.addCookies(r), "withCredentials" in r && (r.withCredentials = this._opts.withCredentials), this._opts.requestTimeout && (r.timeout = this._opts.requestTimeout), r.onreadystatechange = () => {
        var a;
        r.readyState === 3 && ((a = this._opts.cookieJar) === null || a === void 0 || a.parseCookies(
          // @ts-ignore
          r.getResponseHeader("set-cookie")
        )), r.readyState === 4 && (r.status === 200 || r.status === 1223 ? this._onLoad() : this.setTimeoutFn(() => {
          this._onError(typeof r.status == "number" ? r.status : 0);
        }, 0));
      }, r.send(this._data);
    } catch (a) {
      this.setTimeoutFn(() => {
        this._onError(a);
      }, 0);
      return;
    }
    typeof document < "u" && (this._index = Ba.requestsCount++, Ba.requests[this._index] = this);
  }
  /**
   * Called upon error.
   *
   * @private
   */
  _onError(e) {
    this.emitReserved("error", e, this._xhr), this._cleanup(!0);
  }
  /**
   * Cleans up house.
   *
   * @private
   */
  _cleanup(e) {
    if (!(typeof this._xhr > "u" || this._xhr === null)) {
      if (this._xhr.onreadystatechange = v9, e)
        try {
          this._xhr.abort();
        } catch {
        }
      typeof document < "u" && delete Ba.requests[this._index], this._xhr = null;
    }
  }
  /**
   * Called upon load.
   *
   * @private
   */
  _onLoad() {
    const e = this._xhr.responseText;
    e !== null && (this.emitReserved("data", e), this.emitReserved("success"), this._cleanup());
  }
  /**
   * Aborts the request.
   *
   * @package
   */
  abort() {
    this._cleanup();
  }
}
Ba.requestsCount = 0;
Ba.requests = {};
if (typeof document < "u") {
  if (typeof attachEvent == "function")
    attachEvent("onunload", VT);
  else if (typeof addEventListener == "function") {
    const t = "onpagehide" in na ? "pagehide" : "unload";
    addEventListener(t, VT, !1);
  }
}
function VT() {
  for (let t in Ba.requests)
    Ba.requests.hasOwnProperty(t) && Ba.requests[t].abort();
}
const R9 = function() {
  const t = Q2({
    xdomain: !1
  });
  return t && t.responseType !== null;
}();
class A9 extends C9 {
  constructor(e) {
    super(e);
    const n = e && e.forceBase64;
    this.supportsBinary = R9 && !n;
  }
  request(e = {}) {
    return Object.assign(e, { xd: this.xd }, this.opts), new Ba(Q2, this.uri(), e);
  }
}
function Q2(t) {
  const e = t.xdomain;
  try {
    if (typeof XMLHttpRequest < "u" && (!e || y9))
      return new XMLHttpRequest();
  } catch {
  }
  if (!e)
    try {
      return new na[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch {
    }
}
const j2 = typeof navigator < "u" && typeof navigator.product == "string" && navigator.product.toLowerCase() === "reactnative";
class O9 extends NE {
  get name() {
    return "websocket";
  }
  doOpen() {
    const e = this.uri(), n = this.opts.protocols, r = j2 ? {} : $2(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
    this.opts.extraHeaders && (r.headers = this.opts.extraHeaders);
    try {
      this.ws = this.createSocket(e, n, r);
    } catch (a) {
      return this.emitReserved("error", a);
    }
    this.ws.binaryType = this.socket.binaryType, this.addEventListeners();
  }
  /**
   * Adds event listeners to the socket
   *
   * @private
   */
  addEventListeners() {
    this.ws.onopen = () => {
      this.opts.autoUnref && this.ws._socket.unref(), this.onOpen();
    }, this.ws.onclose = (e) => this.onClose({
      description: "websocket connection closed",
      context: e
    }), this.ws.onmessage = (e) => this.onData(e.data), this.ws.onerror = (e) => this.onError("websocket error", e);
  }
  write(e) {
    this.writable = !1;
    for (let n = 0; n < e.length; n++) {
      const r = e[n], a = n === e.length - 1;
      AE(r, this.supportsBinary, (i) => {
        try {
          this.doWrite(r, i);
        } catch {
        }
        a && vd(() => {
          this.writable = !0, this.emitReserved("drain");
        }, this.setTimeoutFn);
      });
    }
  }
  doClose() {
    typeof this.ws < "u" && (this.ws.onerror = () => {
    }, this.ws.close(), this.ws = null);
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    const e = this.opts.secure ? "wss" : "ws", n = this.query || {};
    return this.opts.timestampRequests && (n[this.opts.timestampParam] = W2()), this.supportsBinary || (n.b64 = 1), this.createUri(e, n);
  }
}
const L0 = na.WebSocket || na.MozWebSocket;
class N9 extends O9 {
  createSocket(e, n, r) {
    return j2 ? new L0(e, n, r) : n ? new L0(e, n) : new L0(e);
  }
  doWrite(e, n) {
    this.ws.send(n);
  }
}
class I9 extends NE {
  get name() {
    return "webtransport";
  }
  doOpen() {
    try {
      this._transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
    } catch (e) {
      return this.emitReserved("error", e);
    }
    this._transport.closed.then(() => {
      this.onClose();
    }).catch((e) => {
      this.onError("webtransport error", e);
    }), this._transport.ready.then(() => {
      this._transport.createBidirectionalStream().then((e) => {
        const n = u9(Number.MAX_SAFE_INTEGER, this.socket.binaryType), r = e.readable.pipeThrough(n).getReader(), a = c9();
        a.readable.pipeTo(e.writable), this._writer = a.writable.getWriter();
        const i = () => {
          r.read().then(({ done: l, value: c }) => {
            l || (this.onPacket(c), i());
          }).catch((l) => {
          });
        };
        i();
        const s = { type: "open" };
        this.query.sid && (s.data = `{"sid":"${this.query.sid}"}`), this._writer.write(s).then(() => this.onOpen());
      });
    });
  }
  write(e) {
    this.writable = !1;
    for (let n = 0; n < e.length; n++) {
      const r = e[n], a = n === e.length - 1;
      this._writer.write(r).then(() => {
        a && vd(() => {
          this.writable = !0, this.emitReserved("drain");
        }, this.setTimeoutFn);
      });
    }
  }
  doClose() {
    var e;
    (e = this._transport) === null || e === void 0 || e.close();
  }
}
const x9 = {
  websocket: N9,
  webtransport: I9,
  polling: A9
}, D9 = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/, w9 = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
];
function bh(t) {
  if (t.length > 8e3)
    throw "URI too long";
  const e = t, n = t.indexOf("["), r = t.indexOf("]");
  n != -1 && r != -1 && (t = t.substring(0, n) + t.substring(n, r).replace(/:/g, ";") + t.substring(r, t.length));
  let a = D9.exec(t || ""), i = {}, s = 14;
  for (; s--; )
    i[w9[s]] = a[s] || "";
  return n != -1 && r != -1 && (i.source = e, i.host = i.host.substring(1, i.host.length - 1).replace(/;/g, ":"), i.authority = i.authority.replace("[", "").replace("]", "").replace(/;/g, ":"), i.ipv6uri = !0), i.pathNames = L9(i, i.path), i.queryKey = M9(i, i.query), i;
}
function L9(t, e) {
  const n = /\/{2,9}/g, r = e.replace(n, "/").split("/");
  return (e.slice(0, 1) == "/" || e.length === 0) && r.splice(0, 1), e.slice(-1) == "/" && r.splice(r.length - 1, 1), r;
}
function M9(t, e) {
  const n = {};
  return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function(r, a, i) {
    a && (n[a] = i);
  }), n;
}
const Th = typeof addEventListener == "function" && typeof removeEventListener == "function", Fu = [];
Th && addEventListener("offline", () => {
  Fu.forEach((t) => t());
}, !1);
class Mi extends kn {
  /**
   * Socket constructor.
   *
   * @param {String|Object} uri - uri or options
   * @param {Object} opts - options
   */
  constructor(e, n) {
    if (super(), this.binaryType = p9, this.writeBuffer = [], this._prevBufferLen = 0, this._pingInterval = -1, this._pingTimeout = -1, this._maxPayload = -1, this._pingTimeoutTime = 1 / 0, e && typeof e == "object" && (n = e, e = null), e) {
      const r = bh(e);
      n.hostname = r.host, n.secure = r.protocol === "https" || r.protocol === "wss", n.port = r.port, r.query && (n.query = r.query);
    } else n.host && (n.hostname = bh(n.host).host);
    Cd(this, n), this.secure = n.secure != null ? n.secure : typeof location < "u" && location.protocol === "https:", n.hostname && !n.port && (n.port = this.secure ? "443" : "80"), this.hostname = n.hostname || (typeof location < "u" ? location.hostname : "localhost"), this.port = n.port || (typeof location < "u" && location.port ? location.port : this.secure ? "443" : "80"), this.transports = [], this._transportsByName = {}, n.transports.forEach((r) => {
      const a = r.prototype.name;
      this.transports.push(a), this._transportsByName[a] = r;
    }), this.opts = Object.assign({
      path: "/engine.io",
      agent: !1,
      withCredentials: !1,
      upgrade: !0,
      timestampParam: "t",
      rememberUpgrade: !1,
      addTrailingSlash: !0,
      rejectUnauthorized: !0,
      perMessageDeflate: {
        threshold: 1024
      },
      transportOptions: {},
      closeOnBeforeunload: !1
    }, n), this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : ""), typeof this.opts.query == "string" && (this.opts.query = S9(this.opts.query)), Th && (this.opts.closeOnBeforeunload && (this._beforeunloadEventListener = () => {
      this.transport && (this.transport.removeAllListeners(), this.transport.close());
    }, addEventListener("beforeunload", this._beforeunloadEventListener, !1)), this.hostname !== "localhost" && (this._offlineEventListener = () => {
      this._onClose("transport close", {
        description: "network connection lost"
      });
    }, Fu.push(this._offlineEventListener))), this.opts.withCredentials && (this._cookieJar = void 0), this._open();
  }
  /**
   * Creates transport of the given type.
   *
   * @param {String} name - transport name
   * @return {Transport}
   * @private
   */
  createTransport(e) {
    const n = Object.assign({}, this.opts.query);
    n.EIO = V2, n.transport = e, this.id && (n.sid = this.id);
    const r = Object.assign({}, this.opts, {
      query: n,
      socket: this,
      hostname: this.hostname,
      secure: this.secure,
      port: this.port
    }, this.opts.transportOptions[e]);
    return new this._transportsByName[e](r);
  }
  /**
   * Initializes transport to use and starts probe.
   *
   * @private
   */
  _open() {
    if (this.transports.length === 0) {
      this.setTimeoutFn(() => {
        this.emitReserved("error", "No transports available");
      }, 0);
      return;
    }
    const e = this.opts.rememberUpgrade && Mi.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1 ? "websocket" : this.transports[0];
    this.readyState = "opening";
    const n = this.createTransport(e);
    n.open(), this.setTransport(n);
  }
  /**
   * Sets the current transport. Disables the existing one (if any).
   *
   * @private
   */
  setTransport(e) {
    this.transport && this.transport.removeAllListeners(), this.transport = e, e.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", (n) => this._onClose("transport close", n));
  }
  /**
   * Called when connection is deemed open.
   *
   * @private
   */
  onOpen() {
    this.readyState = "open", Mi.priorWebsocketSuccess = this.transport.name === "websocket", this.emitReserved("open"), this.flush();
  }
  /**
   * Handles a packet.
   *
   * @private
   */
  _onPacket(e) {
    if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing")
      switch (this.emitReserved("packet", e), this.emitReserved("heartbeat"), e.type) {
        case "open":
          this.onHandshake(JSON.parse(e.data));
          break;
        case "ping":
          this._sendPacket("pong"), this.emitReserved("ping"), this.emitReserved("pong"), this._resetPingTimeout();
          break;
        case "error":
          const n = new Error("server error");
          n.code = e.data, this._onError(n);
          break;
        case "message":
          this.emitReserved("data", e.data), this.emitReserved("message", e.data);
          break;
      }
  }
  /**
   * Called upon handshake completion.
   *
   * @param {Object} data - handshake obj
   * @private
   */
  onHandshake(e) {
    this.emitReserved("handshake", e), this.id = e.sid, this.transport.query.sid = e.sid, this._pingInterval = e.pingInterval, this._pingTimeout = e.pingTimeout, this._maxPayload = e.maxPayload, this.onOpen(), this.readyState !== "closed" && this._resetPingTimeout();
  }
  /**
   * Sets and resets ping timeout timer based on server pings.
   *
   * @private
   */
  _resetPingTimeout() {
    this.clearTimeoutFn(this._pingTimeoutTimer);
    const e = this._pingInterval + this._pingTimeout;
    this._pingTimeoutTime = Date.now() + e, this._pingTimeoutTimer = this.setTimeoutFn(() => {
      this._onClose("ping timeout");
    }, e), this.opts.autoUnref && this._pingTimeoutTimer.unref();
  }
  /**
   * Called on `drain` event
   *
   * @private
   */
  _onDrain() {
    this.writeBuffer.splice(0, this._prevBufferLen), this._prevBufferLen = 0, this.writeBuffer.length === 0 ? this.emitReserved("drain") : this.flush();
  }
  /**
   * Flush write buffers.
   *
   * @private
   */
  flush() {
    if (this.readyState !== "closed" && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
      const e = this._getWritablePackets();
      this.transport.send(e), this._prevBufferLen = e.length, this.emitReserved("flush");
    }
  }
  /**
   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
   * long-polling)
   *
   * @private
   */
  _getWritablePackets() {
    if (!(this._maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1))
      return this.writeBuffer;
    let n = 1;
    for (let r = 0; r < this.writeBuffer.length; r++) {
      const a = this.writeBuffer[r].data;
      if (a && (n += g9(a)), r > 0 && n > this._maxPayload)
        return this.writeBuffer.slice(0, r);
      n += 2;
    }
    return this.writeBuffer;
  }
  /**
   * Checks whether the heartbeat timer has expired but the socket has not yet been notified.
   *
   * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the
   * `write()` method then the message would not be buffered by the Socket.IO client.
   *
   * @return {boolean}
   * @private
   */
  /* private */
  _hasPingExpired() {
    if (!this._pingTimeoutTime)
      return !0;
    const e = Date.now() > this._pingTimeoutTime;
    return e && (this._pingTimeoutTime = 0, vd(() => {
      this._onClose("ping timeout");
    }, this.setTimeoutFn)), e;
  }
  /**
   * Sends a message.
   *
   * @param {String} msg - message.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @return {Socket} for chaining.
   */
  write(e, n, r) {
    return this._sendPacket("message", e, n, r), this;
  }
  /**
   * Sends a message. Alias of {@link Socket#write}.
   *
   * @param {String} msg - message.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @return {Socket} for chaining.
   */
  send(e, n, r) {
    return this._sendPacket("message", e, n, r), this;
  }
  /**
   * Sends a packet.
   *
   * @param {String} type: packet type.
   * @param {String} data.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @private
   */
  _sendPacket(e, n, r, a) {
    if (typeof n == "function" && (a = n, n = void 0), typeof r == "function" && (a = r, r = null), this.readyState === "closing" || this.readyState === "closed")
      return;
    r = r || {}, r.compress = r.compress !== !1;
    const i = {
      type: e,
      data: n,
      options: r
    };
    this.emitReserved("packetCreate", i), this.writeBuffer.push(i), a && this.once("flush", a), this.flush();
  }
  /**
   * Closes the connection.
   */
  close() {
    const e = () => {
      this._onClose("forced close"), this.transport.close();
    }, n = () => {
      this.off("upgrade", n), this.off("upgradeError", n), e();
    }, r = () => {
      this.once("upgrade", n), this.once("upgradeError", n);
    };
    return (this.readyState === "opening" || this.readyState === "open") && (this.readyState = "closing", this.writeBuffer.length ? this.once("drain", () => {
      this.upgrading ? r() : e();
    }) : this.upgrading ? r() : e()), this;
  }
  /**
   * Called upon transport error
   *
   * @private
   */
  _onError(e) {
    if (Mi.priorWebsocketSuccess = !1, this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === "opening")
      return this.transports.shift(), this._open();
    this.emitReserved("error", e), this._onClose("transport error", e);
  }
  /**
   * Called upon transport close.
   *
   * @private
   */
  _onClose(e, n) {
    if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
      if (this.clearTimeoutFn(this._pingTimeoutTimer), this.transport.removeAllListeners("close"), this.transport.close(), this.transport.removeAllListeners(), Th && (this._beforeunloadEventListener && removeEventListener("beforeunload", this._beforeunloadEventListener, !1), this._offlineEventListener)) {
        const r = Fu.indexOf(this._offlineEventListener);
        r !== -1 && Fu.splice(r, 1);
      }
      this.readyState = "closed", this.id = null, this.emitReserved("close", e, n), this.writeBuffer = [], this._prevBufferLen = 0;
    }
  }
}
Mi.protocol = V2;
class k9 extends Mi {
  constructor() {
    super(...arguments), this._upgrades = [];
  }
  onOpen() {
    if (super.onOpen(), this.readyState === "open" && this.opts.upgrade)
      for (let e = 0; e < this._upgrades.length; e++)
        this._probe(this._upgrades[e]);
  }
  /**
   * Probes a transport.
   *
   * @param {String} name - transport name
   * @private
   */
  _probe(e) {
    let n = this.createTransport(e), r = !1;
    Mi.priorWebsocketSuccess = !1;
    const a = () => {
      r || (n.send([{ type: "ping", data: "probe" }]), n.once("packet", (_) => {
        if (!r)
          if (_.type === "pong" && _.data === "probe") {
            if (this.upgrading = !0, this.emitReserved("upgrading", n), !n)
              return;
            Mi.priorWebsocketSuccess = n.name === "websocket", this.transport.pause(() => {
              r || this.readyState !== "closed" && (p(), this.setTransport(n), n.send([{ type: "upgrade" }]), this.emitReserved("upgrade", n), n = null, this.upgrading = !1, this.flush());
            });
          } else {
            const f = new Error("probe error");
            f.transport = n.name, this.emitReserved("upgradeError", f);
          }
      }));
    };
    function i() {
      r || (r = !0, p(), n.close(), n = null);
    }
    const s = (_) => {
      const f = new Error("probe error: " + _);
      f.transport = n.name, i(), this.emitReserved("upgradeError", f);
    };
    function l() {
      s("transport closed");
    }
    function c() {
      s("socket closed");
    }
    function d(_) {
      n && _.name !== n.name && i();
    }
    const p = () => {
      n.removeListener("open", a), n.removeListener("error", s), n.removeListener("close", l), this.off("close", c), this.off("upgrading", d);
    };
    n.once("open", a), n.once("error", s), n.once("close", l), this.once("close", c), this.once("upgrading", d), this._upgrades.indexOf("webtransport") !== -1 && e !== "webtransport" ? this.setTimeoutFn(() => {
      r || n.open();
    }, 200) : n.open();
  }
  onHandshake(e) {
    this._upgrades = this._filterUpgrades(e.upgrades), super.onHandshake(e);
  }
  /**
   * Filters upgrades, returning only those matching client transports.
   *
   * @param {Array} upgrades - server upgrades
   * @private
   */
  _filterUpgrades(e) {
    const n = [];
    for (let r = 0; r < e.length; r++)
      ~this.transports.indexOf(e[r]) && n.push(e[r]);
    return n;
  }
}
let P9 = class extends k9 {
  constructor(e, n = {}) {
    const r = typeof e == "object" ? e : n;
    (!r.transports || r.transports && typeof r.transports[0] == "string") && (r.transports = (r.transports || ["polling", "websocket", "webtransport"]).map((a) => x9[a]).filter((a) => !!a)), super(e, r);
  }
};
function F9(t, e = "", n) {
  let r = t;
  n = n || typeof location < "u" && location, t == null && (t = n.protocol + "//" + n.host), typeof t == "string" && (t.charAt(0) === "/" && (t.charAt(1) === "/" ? t = n.protocol + t : t = n.host + t), /^(https?|wss?):\/\//.test(t) || (typeof n < "u" ? t = n.protocol + "//" + t : t = "https://" + t), r = bh(t)), r.port || (/^(http|ws)$/.test(r.protocol) ? r.port = "80" : /^(http|ws)s$/.test(r.protocol) && (r.port = "443")), r.path = r.path || "/";
  const i = r.host.indexOf(":") !== -1 ? "[" + r.host + "]" : r.host;
  return r.id = r.protocol + "://" + i + ":" + r.port + e, r.href = r.protocol + "://" + i + (n && n.port === r.port ? "" : ":" + r.port), r;
}
const B9 = typeof ArrayBuffer == "function", U9 = (t) => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(t) : t.buffer instanceof ArrayBuffer, X2 = Object.prototype.toString, G9 = typeof Blob == "function" || typeof Blob < "u" && X2.call(Blob) === "[object BlobConstructor]", H9 = typeof File == "function" || typeof File < "u" && X2.call(File) === "[object FileConstructor]";
function IE(t) {
  return B9 && (t instanceof ArrayBuffer || U9(t)) || G9 && t instanceof Blob || H9 && t instanceof File;
}
function Bu(t, e) {
  if (!t || typeof t != "object")
    return !1;
  if (Array.isArray(t)) {
    for (let n = 0, r = t.length; n < r; n++)
      if (Bu(t[n]))
        return !0;
    return !1;
  }
  if (IE(t))
    return !0;
  if (t.toJSON && typeof t.toJSON == "function" && arguments.length === 1)
    return Bu(t.toJSON(), !0);
  for (const n in t)
    if (Object.prototype.hasOwnProperty.call(t, n) && Bu(t[n]))
      return !0;
  return !1;
}
function Y9(t) {
  const e = [], n = t.data, r = t;
  return r.data = yh(n, e), r.attachments = e.length, { packet: r, buffers: e };
}
function yh(t, e) {
  if (!t)
    return t;
  if (IE(t)) {
    const n = { _placeholder: !0, num: e.length };
    return e.push(t), n;
  } else if (Array.isArray(t)) {
    const n = new Array(t.length);
    for (let r = 0; r < t.length; r++)
      n[r] = yh(t[r], e);
    return n;
  } else if (typeof t == "object" && !(t instanceof Date)) {
    const n = {};
    for (const r in t)
      Object.prototype.hasOwnProperty.call(t, r) && (n[r] = yh(t[r], e));
    return n;
  }
  return t;
}
function z9(t, e) {
  return t.data = vh(t.data, e), delete t.attachments, t;
}
function vh(t, e) {
  if (!t)
    return t;
  if (t && t._placeholder === !0) {
    if (typeof t.num == "number" && t.num >= 0 && t.num < e.length)
      return e[t.num];
    throw new Error("illegal attachments");
  } else if (Array.isArray(t))
    for (let n = 0; n < t.length; n++)
      t[n] = vh(t[n], e);
  else if (typeof t == "object")
    for (const n in t)
      Object.prototype.hasOwnProperty.call(t, n) && (t[n] = vh(t[n], e));
  return t;
}
const q9 = [
  "connect",
  "connect_error",
  "disconnect",
  "disconnecting",
  "newListener",
  "removeListener"
  // used by the Node.js EventEmitter
], V9 = 5;
var kt;
(function(t) {
  t[t.CONNECT = 0] = "CONNECT", t[t.DISCONNECT = 1] = "DISCONNECT", t[t.EVENT = 2] = "EVENT", t[t.ACK = 3] = "ACK", t[t.CONNECT_ERROR = 4] = "CONNECT_ERROR", t[t.BINARY_EVENT = 5] = "BINARY_EVENT", t[t.BINARY_ACK = 6] = "BINARY_ACK";
})(kt || (kt = {}));
class $9 {
  /**
   * Encoder constructor
   *
   * @param {function} replacer - custom replacer to pass down to JSON.parse
   */
  constructor(e) {
    this.replacer = e;
  }
  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   */
  encode(e) {
    return (e.type === kt.EVENT || e.type === kt.ACK) && Bu(e) ? this.encodeAsBinary({
      type: e.type === kt.EVENT ? kt.BINARY_EVENT : kt.BINARY_ACK,
      nsp: e.nsp,
      data: e.data,
      id: e.id
    }) : [this.encodeAsString(e)];
  }
  /**
   * Encode packet as string.
   */
  encodeAsString(e) {
    let n = "" + e.type;
    return (e.type === kt.BINARY_EVENT || e.type === kt.BINARY_ACK) && (n += e.attachments + "-"), e.nsp && e.nsp !== "/" && (n += e.nsp + ","), e.id != null && (n += e.id), e.data != null && (n += JSON.stringify(e.data, this.replacer)), n;
  }
  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   */
  encodeAsBinary(e) {
    const n = Y9(e), r = this.encodeAsString(n.packet), a = n.buffers;
    return a.unshift(r), a;
  }
}
function $T(t) {
  return Object.prototype.toString.call(t) === "[object Object]";
}
class xE extends kn {
  /**
   * Decoder constructor
   *
   * @param {function} reviver - custom reviver to pass down to JSON.stringify
   */
  constructor(e) {
    super(), this.reviver = e;
  }
  /**
   * Decodes an encoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   */
  add(e) {
    let n;
    if (typeof e == "string") {
      if (this.reconstructor)
        throw new Error("got plaintext data when reconstructing a packet");
      n = this.decodeString(e);
      const r = n.type === kt.BINARY_EVENT;
      r || n.type === kt.BINARY_ACK ? (n.type = r ? kt.EVENT : kt.ACK, this.reconstructor = new W9(n), n.attachments === 0 && super.emitReserved("decoded", n)) : super.emitReserved("decoded", n);
    } else if (IE(e) || e.base64)
      if (this.reconstructor)
        n = this.reconstructor.takeBinaryData(e), n && (this.reconstructor = null, super.emitReserved("decoded", n));
      else
        throw new Error("got binary data when not reconstructing a packet");
    else
      throw new Error("Unknown type: " + e);
  }
  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   */
  decodeString(e) {
    let n = 0;
    const r = {
      type: Number(e.charAt(0))
    };
    if (kt[r.type] === void 0)
      throw new Error("unknown packet type " + r.type);
    if (r.type === kt.BINARY_EVENT || r.type === kt.BINARY_ACK) {
      const i = n + 1;
      for (; e.charAt(++n) !== "-" && n != e.length; )
        ;
      const s = e.substring(i, n);
      if (s != Number(s) || e.charAt(n) !== "-")
        throw new Error("Illegal attachments");
      r.attachments = Number(s);
    }
    if (e.charAt(n + 1) === "/") {
      const i = n + 1;
      for (; ++n && !(e.charAt(n) === "," || n === e.length); )
        ;
      r.nsp = e.substring(i, n);
    } else
      r.nsp = "/";
    const a = e.charAt(n + 1);
    if (a !== "" && Number(a) == a) {
      const i = n + 1;
      for (; ++n; ) {
        const s = e.charAt(n);
        if (s == null || Number(s) != s) {
          --n;
          break;
        }
        if (n === e.length)
          break;
      }
      r.id = Number(e.substring(i, n + 1));
    }
    if (e.charAt(++n)) {
      const i = this.tryParse(e.substr(n));
      if (xE.isPayloadValid(r.type, i))
        r.data = i;
      else
        throw new Error("invalid payload");
    }
    return r;
  }
  tryParse(e) {
    try {
      return JSON.parse(e, this.reviver);
    } catch {
      return !1;
    }
  }
  static isPayloadValid(e, n) {
    switch (e) {
      case kt.CONNECT:
        return $T(n);
      case kt.DISCONNECT:
        return n === void 0;
      case kt.CONNECT_ERROR:
        return typeof n == "string" || $T(n);
      case kt.EVENT:
      case kt.BINARY_EVENT:
        return Array.isArray(n) && (typeof n[0] == "number" || typeof n[0] == "string" && q9.indexOf(n[0]) === -1);
      case kt.ACK:
      case kt.BINARY_ACK:
        return Array.isArray(n);
    }
  }
  /**
   * Deallocates a parser's resources
   */
  destroy() {
    this.reconstructor && (this.reconstructor.finishedReconstruction(), this.reconstructor = null);
  }
}
class W9 {
  constructor(e) {
    this.packet = e, this.buffers = [], this.reconPack = e;
  }
  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   */
  takeBinaryData(e) {
    if (this.buffers.push(e), this.buffers.length === this.reconPack.attachments) {
      const n = z9(this.reconPack, this.buffers);
      return this.finishedReconstruction(), n;
    }
    return null;
  }
  /**
   * Cleans up binary packet reconstruction variables.
   */
  finishedReconstruction() {
    this.reconPack = null, this.buffers = [];
  }
}
const K9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Decoder: xE,
  Encoder: $9,
  get PacketType() {
    return kt;
  },
  protocol: V9
}, Symbol.toStringTag, { value: "Module" }));
function ga(t, e, n) {
  return t.on(e, n), function() {
    t.off(e, n);
  };
}
const Q9 = Object.freeze({
  connect: 1,
  connect_error: 1,
  disconnect: 1,
  disconnecting: 1,
  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
  newListener: 1,
  removeListener: 1
});
class Z2 extends kn {
  /**
   * `Socket` constructor.
   */
  constructor(e, n, r) {
    super(), this.connected = !1, this.recovered = !1, this.receiveBuffer = [], this.sendBuffer = [], this._queue = [], this._queueSeq = 0, this.ids = 0, this.acks = {}, this.flags = {}, this.io = e, this.nsp = n, r && r.auth && (this.auth = r.auth), this._opts = Object.assign({}, r), this.io._autoConnect && this.open();
  }
  /**
   * Whether the socket is currently disconnected
   *
   * @example
   * const socket = io();
   *
   * socket.on("connect", () => {
   *   console.log(socket.disconnected); // false
   * });
   *
   * socket.on("disconnect", () => {
   *   console.log(socket.disconnected); // true
   * });
   */
  get disconnected() {
    return !this.connected;
  }
  /**
   * Subscribe to open, close and packet events
   *
   * @private
   */
  subEvents() {
    if (this.subs)
      return;
    const e = this.io;
    this.subs = [
      ga(e, "open", this.onopen.bind(this)),
      ga(e, "packet", this.onpacket.bind(this)),
      ga(e, "error", this.onerror.bind(this)),
      ga(e, "close", this.onclose.bind(this))
    ];
  }
  /**
   * Whether the Socket will try to reconnect when its Manager connects or reconnects.
   *
   * @example
   * const socket = io();
   *
   * console.log(socket.active); // true
   *
   * socket.on("disconnect", (reason) => {
   *   if (reason === "io server disconnect") {
   *     // the disconnection was initiated by the server, you need to manually reconnect
   *     console.log(socket.active); // false
   *   }
   *   // else the socket will automatically try to reconnect
   *   console.log(socket.active); // true
   * });
   */
  get active() {
    return !!this.subs;
  }
  /**
   * "Opens" the socket.
   *
   * @example
   * const socket = io({
   *   autoConnect: false
   * });
   *
   * socket.connect();
   */
  connect() {
    return this.connected ? this : (this.subEvents(), this.io._reconnecting || this.io.open(), this.io._readyState === "open" && this.onopen(), this);
  }
  /**
   * Alias for {@link connect()}.
   */
  open() {
    return this.connect();
  }
  /**
   * Sends a `message` event.
   *
   * This method mimics the WebSocket.send() method.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
   *
   * @example
   * socket.send("hello");
   *
   * // this is equivalent to
   * socket.emit("message", "hello");
   *
   * @return self
   */
  send(...e) {
    return e.unshift("message"), this.emit.apply(this, e), this;
  }
  /**
   * Override `emit`.
   * If the event is in `events`, it's emitted normally.
   *
   * @example
   * socket.emit("hello", "world");
   *
   * // all serializable datastructures are supported (no need to call JSON.stringify)
   * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
   *
   * // with an acknowledgement from the server
   * socket.emit("hello", "world", (val) => {
   *   // ...
   * });
   *
   * @return self
   */
  emit(e, ...n) {
    var r, a, i;
    if (Q9.hasOwnProperty(e))
      throw new Error('"' + e.toString() + '" is a reserved event name');
    if (n.unshift(e), this._opts.retries && !this.flags.fromQueue && !this.flags.volatile)
      return this._addToQueue(n), this;
    const s = {
      type: kt.EVENT,
      data: n
    };
    if (s.options = {}, s.options.compress = this.flags.compress !== !1, typeof n[n.length - 1] == "function") {
      const p = this.ids++, _ = n.pop();
      this._registerAckCallback(p, _), s.id = p;
    }
    const l = (a = (r = this.io.engine) === null || r === void 0 ? void 0 : r.transport) === null || a === void 0 ? void 0 : a.writable, c = this.connected && !(!((i = this.io.engine) === null || i === void 0) && i._hasPingExpired());
    return this.flags.volatile && !l || (c ? (this.notifyOutgoingListeners(s), this.packet(s)) : this.sendBuffer.push(s)), this.flags = {}, this;
  }
  /**
   * @private
   */
  _registerAckCallback(e, n) {
    var r;
    const a = (r = this.flags.timeout) !== null && r !== void 0 ? r : this._opts.ackTimeout;
    if (a === void 0) {
      this.acks[e] = n;
      return;
    }
    const i = this.io.setTimeoutFn(() => {
      delete this.acks[e];
      for (let l = 0; l < this.sendBuffer.length; l++)
        this.sendBuffer[l].id === e && this.sendBuffer.splice(l, 1);
      n.call(this, new Error("operation has timed out"));
    }, a), s = (...l) => {
      this.io.clearTimeoutFn(i), n.apply(this, l);
    };
    s.withError = !0, this.acks[e] = s;
  }
  /**
   * Emits an event and waits for an acknowledgement
   *
   * @example
   * // without timeout
   * const response = await socket.emitWithAck("hello", "world");
   *
   * // with a specific timeout
   * try {
   *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
   * } catch (err) {
   *   // the server did not acknowledge the event in the given delay
   * }
   *
   * @return a Promise that will be fulfilled when the server acknowledges the event
   */
  emitWithAck(e, ...n) {
    return new Promise((r, a) => {
      const i = (s, l) => s ? a(s) : r(l);
      i.withError = !0, n.push(i), this.emit(e, ...n);
    });
  }
  /**
   * Add the packet to the queue.
   * @param args
   * @private
   */
  _addToQueue(e) {
    let n;
    typeof e[e.length - 1] == "function" && (n = e.pop());
    const r = {
      id: this._queueSeq++,
      tryCount: 0,
      pending: !1,
      args: e,
      flags: Object.assign({ fromQueue: !0 }, this.flags)
    };
    e.push((a, ...i) => r !== this._queue[0] ? void 0 : (a !== null ? r.tryCount > this._opts.retries && (this._queue.shift(), n && n(a)) : (this._queue.shift(), n && n(null, ...i)), r.pending = !1, this._drainQueue())), this._queue.push(r), this._drainQueue();
  }
  /**
   * Send the first packet of the queue, and wait for an acknowledgement from the server.
   * @param force - whether to resend a packet that has not been acknowledged yet
   *
   * @private
   */
  _drainQueue(e = !1) {
    if (!this.connected || this._queue.length === 0)
      return;
    const n = this._queue[0];
    n.pending && !e || (n.pending = !0, n.tryCount++, this.flags = n.flags, this.emit.apply(this, n.args));
  }
  /**
   * Sends a packet.
   *
   * @param packet
   * @private
   */
  packet(e) {
    e.nsp = this.nsp, this.io._packet(e);
  }
  /**
   * Called upon engine `open`.
   *
   * @private
   */
  onopen() {
    typeof this.auth == "function" ? this.auth((e) => {
      this._sendConnectPacket(e);
    }) : this._sendConnectPacket(this.auth);
  }
  /**
   * Sends a CONNECT packet to initiate the Socket.IO session.
   *
   * @param data
   * @private
   */
  _sendConnectPacket(e) {
    this.packet({
      type: kt.CONNECT,
      data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, e) : e
    });
  }
  /**
   * Called upon engine or manager `error`.
   *
   * @param err
   * @private
   */
  onerror(e) {
    this.connected || this.emitReserved("connect_error", e);
  }
  /**
   * Called upon engine `close`.
   *
   * @param reason
   * @param description
   * @private
   */
  onclose(e, n) {
    this.connected = !1, delete this.id, this.emitReserved("disconnect", e, n), this._clearAcks();
  }
  /**
   * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
   * the server.
   *
   * @private
   */
  _clearAcks() {
    Object.keys(this.acks).forEach((e) => {
      if (!this.sendBuffer.some((r) => String(r.id) === e)) {
        const r = this.acks[e];
        delete this.acks[e], r.withError && r.call(this, new Error("socket has been disconnected"));
      }
    });
  }
  /**
   * Called with socket packet.
   *
   * @param packet
   * @private
   */
  onpacket(e) {
    if (e.nsp === this.nsp)
      switch (e.type) {
        case kt.CONNECT:
          e.data && e.data.sid ? this.onconnect(e.data.sid, e.data.pid) : this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          break;
        case kt.EVENT:
        case kt.BINARY_EVENT:
          this.onevent(e);
          break;
        case kt.ACK:
        case kt.BINARY_ACK:
          this.onack(e);
          break;
        case kt.DISCONNECT:
          this.ondisconnect();
          break;
        case kt.CONNECT_ERROR:
          this.destroy();
          const r = new Error(e.data.message);
          r.data = e.data.data, this.emitReserved("connect_error", r);
          break;
      }
  }
  /**
   * Called upon a server event.
   *
   * @param packet
   * @private
   */
  onevent(e) {
    const n = e.data || [];
    e.id != null && n.push(this.ack(e.id)), this.connected ? this.emitEvent(n) : this.receiveBuffer.push(Object.freeze(n));
  }
  emitEvent(e) {
    if (this._anyListeners && this._anyListeners.length) {
      const n = this._anyListeners.slice();
      for (const r of n)
        r.apply(this, e);
    }
    super.emit.apply(this, e), this._pid && e.length && typeof e[e.length - 1] == "string" && (this._lastOffset = e[e.length - 1]);
  }
  /**
   * Produces an ack callback to emit with an event.
   *
   * @private
   */
  ack(e) {
    const n = this;
    let r = !1;
    return function(...a) {
      r || (r = !0, n.packet({
        type: kt.ACK,
        id: e,
        data: a
      }));
    };
  }
  /**
   * Called upon a server acknowledgement.
   *
   * @param packet
   * @private
   */
  onack(e) {
    const n = this.acks[e.id];
    typeof n == "function" && (delete this.acks[e.id], n.withError && e.data.unshift(null), n.apply(this, e.data));
  }
  /**
   * Called upon server connect.
   *
   * @private
   */
  onconnect(e, n) {
    this.id = e, this.recovered = n && this._pid === n, this._pid = n, this.connected = !0, this.emitBuffered(), this.emitReserved("connect"), this._drainQueue(!0);
  }
  /**
   * Emit buffered events (received and emitted).
   *
   * @private
   */
  emitBuffered() {
    this.receiveBuffer.forEach((e) => this.emitEvent(e)), this.receiveBuffer = [], this.sendBuffer.forEach((e) => {
      this.notifyOutgoingListeners(e), this.packet(e);
    }), this.sendBuffer = [];
  }
  /**
   * Called upon server disconnect.
   *
   * @private
   */
  ondisconnect() {
    this.destroy(), this.onclose("io server disconnect");
  }
  /**
   * Called upon forced client/server side disconnections,
   * this method ensures the manager stops tracking us and
   * that reconnections don't get triggered for this.
   *
   * @private
   */
  destroy() {
    this.subs && (this.subs.forEach((e) => e()), this.subs = void 0), this.io._destroy(this);
  }
  /**
   * Disconnects the socket manually. In that case, the socket will not try to reconnect.
   *
   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
   *
   * @example
   * const socket = io();
   *
   * socket.on("disconnect", (reason) => {
   *   // console.log(reason); prints "io client disconnect"
   * });
   *
   * socket.disconnect();
   *
   * @return self
   */
  disconnect() {
    return this.connected && this.packet({ type: kt.DISCONNECT }), this.destroy(), this.connected && this.onclose("io client disconnect"), this;
  }
  /**
   * Alias for {@link disconnect()}.
   *
   * @return self
   */
  close() {
    return this.disconnect();
  }
  /**
   * Sets the compress flag.
   *
   * @example
   * socket.compress(false).emit("hello");
   *
   * @param compress - if `true`, compresses the sending data
   * @return self
   */
  compress(e) {
    return this.flags.compress = e, this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
   * ready to send messages.
   *
   * @example
   * socket.volatile.emit("hello"); // the server may or may not receive it
   *
   * @returns self
   */
  get volatile() {
    return this.flags.volatile = !0, this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
   * given number of milliseconds have elapsed without an acknowledgement from the server:
   *
   * @example
   * socket.timeout(5000).emit("my-event", (err) => {
   *   if (err) {
   *     // the server did not acknowledge the event in the given delay
   *   }
   * });
   *
   * @returns self
   */
  timeout(e) {
    return this.flags.timeout = e, this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * @example
   * socket.onAny((event, ...args) => {
   *   console.log(`got ${event}`);
   * });
   *
   * @param listener
   */
  onAny(e) {
    return this._anyListeners = this._anyListeners || [], this._anyListeners.push(e), this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * @example
   * socket.prependAny((event, ...args) => {
   *   console.log(`got event ${event}`);
   * });
   *
   * @param listener
   */
  prependAny(e) {
    return this._anyListeners = this._anyListeners || [], this._anyListeners.unshift(e), this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`got event ${event}`);
   * }
   *
   * socket.onAny(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAny(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAny();
   *
   * @param listener
   */
  offAny(e) {
    if (!this._anyListeners)
      return this;
    if (e) {
      const n = this._anyListeners;
      for (let r = 0; r < n.length; r++)
        if (e === n[r])
          return n.splice(r, 1), this;
    } else
      this._anyListeners = [];
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAny() {
    return this._anyListeners || [];
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.onAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  onAnyOutgoing(e) {
    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.push(e), this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.prependAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  prependAnyOutgoing(e) {
    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.unshift(e), this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`sent event ${event}`);
   * }
   *
   * socket.onAnyOutgoing(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAnyOutgoing(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAnyOutgoing();
   *
   * @param [listener] - the catch-all listener (optional)
   */
  offAnyOutgoing(e) {
    if (!this._anyOutgoingListeners)
      return this;
    if (e) {
      const n = this._anyOutgoingListeners;
      for (let r = 0; r < n.length; r++)
        if (e === n[r])
          return n.splice(r, 1), this;
    } else
      this._anyOutgoingListeners = [];
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAnyOutgoing() {
    return this._anyOutgoingListeners || [];
  }
  /**
   * Notify the listeners for each packet sent
   *
   * @param packet
   *
   * @private
   */
  notifyOutgoingListeners(e) {
    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
      const n = this._anyOutgoingListeners.slice();
      for (const r of n)
        r.apply(this, e.data);
    }
  }
}
function co(t) {
  t = t || {}, this.ms = t.min || 100, this.max = t.max || 1e4, this.factor = t.factor || 2, this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0, this.attempts = 0;
}
co.prototype.duration = function() {
  var t = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var e = Math.random(), n = Math.floor(e * this.jitter * t);
    t = Math.floor(e * 10) & 1 ? t + n : t - n;
  }
  return Math.min(t, this.max) | 0;
};
co.prototype.reset = function() {
  this.attempts = 0;
};
co.prototype.setMin = function(t) {
  this.ms = t;
};
co.prototype.setMax = function(t) {
  this.max = t;
};
co.prototype.setJitter = function(t) {
  this.jitter = t;
};
class Ch extends kn {
  constructor(e, n) {
    var r;
    super(), this.nsps = {}, this.subs = [], e && typeof e == "object" && (n = e, e = void 0), n = n || {}, n.path = n.path || "/socket.io", this.opts = n, Cd(this, n), this.reconnection(n.reconnection !== !1), this.reconnectionAttempts(n.reconnectionAttempts || 1 / 0), this.reconnectionDelay(n.reconnectionDelay || 1e3), this.reconnectionDelayMax(n.reconnectionDelayMax || 5e3), this.randomizationFactor((r = n.randomizationFactor) !== null && r !== void 0 ? r : 0.5), this.backoff = new co({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    }), this.timeout(n.timeout == null ? 2e4 : n.timeout), this._readyState = "closed", this.uri = e;
    const a = n.parser || K9;
    this.encoder = new a.Encoder(), this.decoder = new a.Decoder(), this._autoConnect = n.autoConnect !== !1, this._autoConnect && this.open();
  }
  reconnection(e) {
    return arguments.length ? (this._reconnection = !!e, e || (this.skipReconnect = !0), this) : this._reconnection;
  }
  reconnectionAttempts(e) {
    return e === void 0 ? this._reconnectionAttempts : (this._reconnectionAttempts = e, this);
  }
  reconnectionDelay(e) {
    var n;
    return e === void 0 ? this._reconnectionDelay : (this._reconnectionDelay = e, (n = this.backoff) === null || n === void 0 || n.setMin(e), this);
  }
  randomizationFactor(e) {
    var n;
    return e === void 0 ? this._randomizationFactor : (this._randomizationFactor = e, (n = this.backoff) === null || n === void 0 || n.setJitter(e), this);
  }
  reconnectionDelayMax(e) {
    var n;
    return e === void 0 ? this._reconnectionDelayMax : (this._reconnectionDelayMax = e, (n = this.backoff) === null || n === void 0 || n.setMax(e), this);
  }
  timeout(e) {
    return arguments.length ? (this._timeout = e, this) : this._timeout;
  }
  /**
   * Starts trying to reconnect if reconnection is enabled and we have not
   * started reconnecting yet
   *
   * @private
   */
  maybeReconnectOnOpen() {
    !this._reconnecting && this._reconnection && this.backoff.attempts === 0 && this.reconnect();
  }
  /**
   * Sets the current transport `socket`.
   *
   * @param {Function} fn - optional, callback
   * @return self
   * @public
   */
  open(e) {
    if (~this._readyState.indexOf("open"))
      return this;
    this.engine = new P9(this.uri, this.opts);
    const n = this.engine, r = this;
    this._readyState = "opening", this.skipReconnect = !1;
    const a = ga(n, "open", function() {
      r.onopen(), e && e();
    }), i = (l) => {
      this.cleanup(), this._readyState = "closed", this.emitReserved("error", l), e ? e(l) : this.maybeReconnectOnOpen();
    }, s = ga(n, "error", i);
    if (this._timeout !== !1) {
      const l = this._timeout, c = this.setTimeoutFn(() => {
        a(), i(new Error("timeout")), n.close();
      }, l);
      this.opts.autoUnref && c.unref(), this.subs.push(() => {
        this.clearTimeoutFn(c);
      });
    }
    return this.subs.push(a), this.subs.push(s), this;
  }
  /**
   * Alias for open()
   *
   * @return self
   * @public
   */
  connect(e) {
    return this.open(e);
  }
  /**
   * Called upon transport open.
   *
   * @private
   */
  onopen() {
    this.cleanup(), this._readyState = "open", this.emitReserved("open");
    const e = this.engine;
    this.subs.push(
      ga(e, "ping", this.onping.bind(this)),
      ga(e, "data", this.ondata.bind(this)),
      ga(e, "error", this.onerror.bind(this)),
      ga(e, "close", this.onclose.bind(this)),
      // @ts-ignore
      ga(this.decoder, "decoded", this.ondecoded.bind(this))
    );
  }
  /**
   * Called upon a ping.
   *
   * @private
   */
  onping() {
    this.emitReserved("ping");
  }
  /**
   * Called with data.
   *
   * @private
   */
  ondata(e) {
    try {
      this.decoder.add(e);
    } catch (n) {
      this.onclose("parse error", n);
    }
  }
  /**
   * Called when parser fully decodes a packet.
   *
   * @private
   */
  ondecoded(e) {
    vd(() => {
      this.emitReserved("packet", e);
    }, this.setTimeoutFn);
  }
  /**
   * Called upon socket error.
   *
   * @private
   */
  onerror(e) {
    this.emitReserved("error", e);
  }
  /**
   * Creates a new socket for the given `nsp`.
   *
   * @return {Socket}
   * @public
   */
  socket(e, n) {
    let r = this.nsps[e];
    return r ? this._autoConnect && !r.active && r.connect() : (r = new Z2(this, e, n), this.nsps[e] = r), r;
  }
  /**
   * Called upon a socket close.
   *
   * @param socket
   * @private
   */
  _destroy(e) {
    const n = Object.keys(this.nsps);
    for (const r of n)
      if (this.nsps[r].active)
        return;
    this._close();
  }
  /**
   * Writes a packet.
   *
   * @param packet
   * @private
   */
  _packet(e) {
    const n = this.encoder.encode(e);
    for (let r = 0; r < n.length; r++)
      this.engine.write(n[r], e.options);
  }
  /**
   * Clean up transport subscriptions and packet buffer.
   *
   * @private
   */
  cleanup() {
    this.subs.forEach((e) => e()), this.subs.length = 0, this.decoder.destroy();
  }
  /**
   * Close the current socket.
   *
   * @private
   */
  _close() {
    this.skipReconnect = !0, this._reconnecting = !1, this.onclose("forced close");
  }
  /**
   * Alias for close()
   *
   * @private
   */
  disconnect() {
    return this._close();
  }
  /**
   * Called when:
   *
   * - the low-level engine is closed
   * - the parser encountered a badly formatted packet
   * - all sockets are disconnected
   *
   * @private
   */
  onclose(e, n) {
    var r;
    this.cleanup(), (r = this.engine) === null || r === void 0 || r.close(), this.backoff.reset(), this._readyState = "closed", this.emitReserved("close", e, n), this._reconnection && !this.skipReconnect && this.reconnect();
  }
  /**
   * Attempt a reconnection.
   *
   * @private
   */
  reconnect() {
    if (this._reconnecting || this.skipReconnect)
      return this;
    const e = this;
    if (this.backoff.attempts >= this._reconnectionAttempts)
      this.backoff.reset(), this.emitReserved("reconnect_failed"), this._reconnecting = !1;
    else {
      const n = this.backoff.duration();
      this._reconnecting = !0;
      const r = this.setTimeoutFn(() => {
        e.skipReconnect || (this.emitReserved("reconnect_attempt", e.backoff.attempts), !e.skipReconnect && e.open((a) => {
          a ? (e._reconnecting = !1, e.reconnect(), this.emitReserved("reconnect_error", a)) : e.onreconnect();
        }));
      }, n);
      this.opts.autoUnref && r.unref(), this.subs.push(() => {
        this.clearTimeoutFn(r);
      });
    }
  }
  /**
   * Called upon successful reconnect.
   *
   * @private
   */
  onreconnect() {
    const e = this.backoff.attempts;
    this._reconnecting = !1, this.backoff.reset(), this.emitReserved("reconnect", e);
  }
}
const il = {};
function Uu(t, e) {
  typeof t == "object" && (e = t, t = void 0), e = e || {};
  const n = F9(t, e.path || "/socket.io"), r = n.source, a = n.id, i = n.path, s = il[a] && i in il[a].nsps, l = e.forceNew || e["force new connection"] || e.multiplex === !1 || s;
  let c;
  return l ? c = new Ch(r, e) : (il[a] || (il[a] = new Ch(r, e)), c = il[a]), n.query && !e.query && (e.query = n.queryKey), c.socket(n.path, e);
}
Object.assign(Uu, {
  Manager: Ch,
  Socket: Z2,
  io: Uu,
  connect: Uu
});
var j9 = (t) => {
  let e = {}, n = /* @__PURE__ */ new Date(), r = /* @__PURE__ */ new Date();
  r.setDate(n.getDate() - 1);
  let a = /* @__PURE__ */ new Date();
  a.setDate(n.getDate() - 7);
  let i = /* @__PURE__ */ new Date();
  return i.setDate(n.getDate() - 30), t.forEach((s) => {
    let l = new Date(s.createdAt), c = l.toDateString() === n.toDateString(), d = l.toDateString() === r.toDateString(), p = l >= a, _ = l >= i, f;
    c ? f = "Today" : d ? f = "Yesterday" : p ? f = "Previous 7 days" : _ ? f = "Previous 30 days" : f = l.toLocaleString("default", { month: "long", year: "numeric" }).split(" ").slice(0, 1).join(" "), e[f] || (e[f] = []), e[f].push(s);
  }), e;
}, WT = [4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91, 6271.93, 6644.88, 7040, 7458.62, 7902.13], X9 = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"], ki = [], DE = [];
for (let t = 1; t <= 8; t++) for (let e = 0; e < WT.length; e++) {
  let n = WT[e];
  ki.push(n / Math.pow(2, 8 - t)), DE.push(X9[e] + t);
}
var ju = [32, 2e3], KT = ki.filter((t, e) => ki[e] > ju[0] && ki[e] < ju[1]), Z9 = DE.filter((t, e) => ki[e] > ju[0] && ki[e] < ju[1]), wE = class J2 {
  static getFrequencies(e, n, r, a = "frequency", i = -100, s = -30) {
    r || (r = new Float32Array(e.frequencyBinCount), e.getFloatFrequencyData(r));
    let l = n / 2, c = 1 / r.length * l, d, p, _;
    if (a === "music" || a === "voice") {
      let g = a === "voice" ? KT : ki, E = Array(g.length).fill(i);
      for (let T = 0; T < r.length; T++) {
        let R = T * c, A = r[T];
        for (let I = g.length - 1; I >= 0; I--) if (R > g[I]) {
          E[I] = Math.max(E[I], A);
          break;
        }
      }
      d = E, p = a === "voice" ? KT : ki, _ = a === "voice" ? Z9 : DE;
    } else d = Array.from(r), p = d.map((g, E) => c * E), _ = p.map((g) => `${g.toFixed(2)} Hz`);
    let f = d.map((g) => Math.max(0, Math.min((g - i) / (s - i), 1)));
    return { values: new Float32Array(f), frequencies: p, labels: _ };
  }
  constructor(e, n = null) {
    if (this.fftResults = [], n) {
      let { length: r, sampleRate: a } = n, i = new OfflineAudioContext({ length: r, sampleRate: a }), s = i.createBufferSource();
      s.buffer = n;
      let l = i.createAnalyser();
      l.fftSize = 8192, l.smoothingTimeConstant = 0.1, s.connect(l);
      let c = 1 / 60, d = r / a, p = (_) => {
        let f = c * _;
        f < d && i.suspend(f).then(() => {
          let g = new Float32Array(l.frequencyBinCount);
          l.getFloatFrequencyData(g), this.fftResults.push(g), p(_ + 1);
        }), _ === 1 ? i.startRendering() : i.resume();
      };
      s.start(0), p(1), this.audio = e, this.context = i, this.analyser = l, this.sampleRate = a, this.audioBuffer = n;
    } else {
      let r = new AudioContext(), a = r.createMediaElementSource(e), i = r.createAnalyser();
      i.fftSize = 8192, i.smoothingTimeConstant = 0.1, a.connect(i), i.connect(r.destination), this.audio = e, this.context = r, this.analyser = i, this.sampleRate = this.context.sampleRate, this.audioBuffer = null;
    }
  }
  getFrequencies(e = "frequency", n = -100, r = -30) {
    let a = null;
    if (this.audioBuffer && this.fftResults.length) {
      let i = this.audio.currentTime / this.audio.duration, s = Math.min(i * this.fftResults.length | 0, this.fftResults.length - 1);
      a = this.fftResults[s];
    }
    return J2.getFrequencies(this.analyser, this.sampleRate, a, e, n, r);
  }
  async resumeIfSuspended() {
    return this.context.state === "suspended" && await this.context.resume(), !0;
  }
};
globalThis.AudioAnalysis = wE;
var os = class {
  static floatTo16BitPCM(e) {
    let n = new ArrayBuffer(e.length * 2), r = new DataView(n), a = 0;
    for (let i = 0; i < e.length; i++, a += 2) {
      let s = Math.max(-1, Math.min(1, e[i]));
      r.setInt16(a, s < 0 ? s * 32768 : s * 32767, !0);
    }
    return n;
  }
  static mergeBuffers(e, n) {
    let r = new Uint8Array(e.byteLength + n.byteLength);
    return r.set(new Uint8Array(e), 0), r.set(new Uint8Array(n), e.byteLength), r.buffer;
  }
  _packData(e, n) {
    return [new Uint8Array([n, n >> 8]), new Uint8Array([n, n >> 8, n >> 16, n >> 24])][e];
  }
  pack(e, n) {
    if (n?.bitsPerSample) if (n?.channels) {
      if (!n?.data) throw new Error('Missing "data"');
    } else throw new Error('Missing "channels"');
    else throw new Error('Missing "bitsPerSample"');
    let { bitsPerSample: r, channels: a, data: i } = n, s = ["RIFF", this._packData(1, 52), "WAVE", "fmt ", this._packData(1, 16), this._packData(0, 1), this._packData(0, a.length), this._packData(1, e), this._packData(1, e * a.length * r / 8), this._packData(0, a.length * r / 8), this._packData(0, r), "data", this._packData(1, a[0].length * a.length * r / 8), i], l = new Blob(s, { type: "audio/mpeg" }), c = URL.createObjectURL(l);
    return { blob: l, url: c, channelCount: a.length, sampleRate: e, duration: i.byteLength / (a.length * e * 2) };
  }
};
globalThis.WavPacker = os;
var J9 = `
class AudioProcessor extends AudioWorkletProcessor {

  constructor() {
    super();
    this.port.onmessage = this.receive.bind(this);
    this.initialize();
  }

  initialize() {
    this.foundAudio = false;
    this.recording = false;
    this.chunks = [];
  }

  /**
   * Concatenates sampled chunks into channels
   * Format is chunk[Left[], Right[]]
   */
  readChannelData(chunks, channel = -1, maxChannels = 9) {
    let channelLimit;
    if (channel !== -1) {
      if (chunks[0] && chunks[0].length - 1 < channel) {
        throw new Error(
          \`Channel \${channel} out of range: max \${chunks[0].length}\`
        );
      }
      channelLimit = channel + 1;
    } else {
      channel = 0;
      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);
    }
    const channels = [];
    for (let n = channel; n < channelLimit; n++) {
      const length = chunks.reduce((sum, chunk) => {
        return sum + chunk[n].length;
      }, 0);
      const buffers = chunks.map((chunk) => chunk[n]);
      const result = new Float32Array(length);
      let offset = 0;
      for (let i = 0; i < buffers.length; i++) {
        result.set(buffers[i], offset);
        offset += buffers[i].length;
      }
      channels[n] = result;
    }
    return channels;
  }

  /**
   * Combines parallel audio data into correct format,
   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]
   */
  formatAudioData(channels) {
    if (channels.length === 1) {
      // Simple case is only one channel
      const float32Array = channels[0].slice();
      const meanValues = channels[0].slice();
      return { float32Array, meanValues };
    } else {
      const float32Array = new Float32Array(
        channels[0].length * channels.length
      );
      const meanValues = new Float32Array(channels[0].length);
      for (let i = 0; i < channels[0].length; i++) {
        const offset = i * channels.length;
        let meanValue = 0;
        for (let n = 0; n < channels.length; n++) {
          float32Array[offset + n] = channels[n][i];
          meanValue += channels[n][i];
        }
        meanValues[i] = meanValue / channels.length;
      }
      return { float32Array, meanValues };
    }
  }

  /**
   * Converts 32-bit float data to 16-bit integers
   */
  floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i = 0; i < float32Array.length; i++, offset += 2) {
      let s = Math.max(-1, Math.min(1, float32Array[i]));
      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);
    }
    return buffer;
  }

  /**
   * Retrieves the most recent amplitude values from the audio stream
   * @param {number} channel
   */
  getValues(channel = -1) {
    const channels = this.readChannelData(this.chunks, channel);
    const { meanValues } = this.formatAudioData(channels);
    return { meanValues, channels };
  }

  /**
   * Exports chunks as an audio/wav file
   */
  export() {
    const channels = this.readChannelData(this.chunks);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const audioData = this.floatTo16BitPCM(float32Array);
    return {
      meanValues: meanValues,
      audio: {
        bitsPerSample: 16,
        channels: channels,
        data: audioData,
      },
    };
  }

  receive(e) {
    const { event, id } = e.data;
    let receiptData = {};
    switch (event) {
      case 'start':
        this.recording = true;
        break;
      case 'stop':
        this.recording = false;
        break;
      case 'clear':
        this.initialize();
        break;
      case 'export':
        receiptData = this.export();
        break;
      case 'read':
        receiptData = this.getValues();
        break;
      default:
        break;
    }
    // Always send back receipt
    this.port.postMessage({ event: 'receipt', id, data: receiptData });
  }

  sendChunk(chunk) {
    const channels = this.readChannelData([chunk]);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const rawAudioData = this.floatTo16BitPCM(float32Array);
    const monoAudioData = this.floatTo16BitPCM(meanValues);
    this.port.postMessage({
      event: 'chunk',
      data: {
        mono: monoAudioData,
        raw: rawAudioData,
      },
    });
  }

  process(inputList, outputList, parameters) {
    // Copy input to output (e.g. speakers)
    // Note that this creates choppy sounds with Mac products
    const sourceLimit = Math.min(inputList.length, outputList.length);
    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {
      const input = inputList[inputNum];
      const output = outputList[inputNum];
      const channelCount = Math.min(input.length, output.length);
      for (let channelNum = 0; channelNum < channelCount; channelNum++) {
        input[channelNum].forEach((sample, i) => {
          output[channelNum][i] = sample;
        });
      }
    }
    const inputs = inputList[0];
    // There's latency at the beginning of a stream before recording starts
    // Make sure we actually receive audio data before we start storing chunks
    let sliceIndex = 0;
    if (!this.foundAudio) {
      for (const channel of inputs) {
        sliceIndex = 0; // reset for each channel
        if (this.foundAudio) {
          break;
        }
        if (channel) {
          for (const value of channel) {
            if (value !== 0) {
              // find only one non-zero entry in any channel
              this.foundAudio = true;
              break;
            } else {
              sliceIndex++;
            }
          }
        }
      }
    }
    if (inputs && inputs[0] && this.foundAudio && this.recording) {
      // We need to copy the TypedArray, because the \`process\`
      // internals will reuse the same buffer to hold each input
      const chunk = inputs.map((input) => input.slice(sliceIndex));
      this.chunks.push(chunk);
      this.sendChunk(chunk);
    }
    return true;
  }
}

registerProcessor('audio_processor', AudioProcessor);
`, eF = new Blob([J9], { type: "application/javascript" }), tF = URL.createObjectURL(eF), nF = tF, eI = class {
  constructor({ sampleRate: t = 24e3, outputToSpeakers: e = !1, debug: n = !1 } = {}) {
    this.scriptSrc = nF, this.sampleRate = t, this.outputToSpeakers = e, this.debug = !!n, this._deviceChangeCallback = null, this._devices = [], this.stream = null, this.processor = null, this.source = null, this.node = null, this.recording = !1, this._lastEventId = 0, this.eventReceipts = {}, this.eventTimeout = 5e3, this._chunkProcessor = () => {
    }, this._chunkProcessorSize = void 0, this._chunkProcessorBuffer = { raw: new ArrayBuffer(0), mono: new ArrayBuffer(0) };
  }
  static async decode(t, e = 24e3, n = -1) {
    let r = new AudioContext({ sampleRate: e }), a, i;
    if (t instanceof Blob) {
      if (n !== -1) throw new Error('Can not specify "fromSampleRate" when reading from Blob');
      i = t, a = await i.arrayBuffer();
    } else if (t instanceof ArrayBuffer) {
      if (n !== -1) throw new Error('Can not specify "fromSampleRate" when reading from ArrayBuffer');
      a = t, i = new Blob([a], { type: "audio/wav" });
    } else {
      let d, p;
      if (t instanceof Int16Array) {
        p = t, d = new Float32Array(t.length);
        for (let f = 0; f < t.length; f++) d[f] = t[f] / 32768;
      } else if (t instanceof Float32Array) d = t;
      else if (t instanceof Array) d = new Float32Array(t);
      else throw new Error('"audioData" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>');
      if (n === -1) throw new Error('Must specify "fromSampleRate" when reading from Float32Array, In16Array or Array');
      if (n < 3e3) throw new Error('Minimum "fromSampleRate" is 3000 (3kHz)');
      p || (p = os.floatTo16BitPCM(d));
      let _ = { bitsPerSample: 16, channels: [d], data: p };
      i = new os().pack(n, _).blob, a = await i.arrayBuffer();
    }
    let s = await r.decodeAudioData(a), l = s.getChannelData(0), c = URL.createObjectURL(i);
    return { blob: i, url: c, values: l, audioBuffer: s };
  }
  log() {
    return this.debug && this.log(...arguments), !0;
  }
  getSampleRate() {
    return this.sampleRate;
  }
  getStatus() {
    return this.processor ? this.recording ? "recording" : "paused" : "ended";
  }
  async _event(t, e = {}, n = null) {
    if (n = n || this.processor, !n) throw new Error("Can not send events without recording first");
    let r = { event: t, id: this._lastEventId++, data: e };
    n.port.postMessage(r);
    let a = (/* @__PURE__ */ new Date()).valueOf();
    for (; !this.eventReceipts[r.id]; ) {
      if ((/* @__PURE__ */ new Date()).valueOf() - a > this.eventTimeout) throw new Error(`Timeout waiting for "${t}" event`);
      await new Promise((s) => setTimeout(() => s(!0), 1));
    }
    let i = this.eventReceipts[r.id];
    return delete this.eventReceipts[r.id], i;
  }
  listenForDeviceChange(t) {
    if (t === null && this._deviceChangeCallback) navigator.mediaDevices.removeEventListener("devicechange", this._deviceChangeCallback), this._deviceChangeCallback = null;
    else if (t !== null) {
      let e = 0, n = [], r = (i) => i.map((s) => s.deviceId).sort().join(","), a = async () => {
        let i = ++e, s = await this.listDevices();
        i === e && r(n) !== r(s) && (n = s, t(s.slice()));
      };
      navigator.mediaDevices.addEventListener("devicechange", a), a(), this._deviceChangeCallback = a;
    }
    return !0;
  }
  async requestPermission() {
    let t = await navigator.permissions.query({ name: "microphone" });
    if (t.state === "denied") window.alert("You must grant microphone access to use this feature.");
    else if (t.state === "prompt") try {
      (await navigator.mediaDevices.getUserMedia({ audio: !0 })).getTracks().forEach((e) => e.stop());
    } catch {
      window.alert("You must grant microphone access to use this feature.");
    }
    return !0;
  }
  async listDevices() {
    if (!navigator.mediaDevices || !("enumerateDevices" in navigator.mediaDevices)) throw new Error("Could not request user devices");
    await this.requestPermission();
    let t = (await navigator.mediaDevices.enumerateDevices()).filter((r) => r.kind === "audioinput"), e = t.findIndex((r) => r.deviceId === "default"), n = [];
    if (e !== -1) {
      let r = t.splice(e, 1)[0], a = t.findIndex((i) => i.groupId === r.groupId);
      a !== -1 && (r = t.splice(a, 1)[0]), r.default = !0, n.push(r);
    }
    return n.concat(t);
  }
  async begin(t) {
    if (this.processor) throw new Error("Already connected: please call .end() to start a new session");
    if (!navigator.mediaDevices || !("getUserMedia" in navigator.mediaDevices)) throw new Error("Could not request user media");
    try {
      let s = { audio: !0 };
      t && (s.audio = { deviceId: { exact: t } }), this.stream = await navigator.mediaDevices.getUserMedia(s);
    } catch {
      throw new Error("Could not start media stream");
    }
    let e = new AudioContext({ sampleRate: this.sampleRate }), n = e.createMediaStreamSource(this.stream);
    try {
      await e.audioWorklet.addModule(this.scriptSrc);
    } catch (s) {
      throw console.error(s), new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    let r = new AudioWorkletNode(e, "audio_processor");
    r.port.onmessage = (s) => {
      let { event: l, id: c, data: d } = s.data;
      if (l === "receipt") this.eventReceipts[c] = d;
      else if (l === "chunk") if (this._chunkProcessorSize) {
        let p = this._chunkProcessorBuffer;
        this._chunkProcessorBuffer = { raw: os.mergeBuffers(p.raw, d.raw), mono: os.mergeBuffers(p.mono, d.mono) }, this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize && (this._chunkProcessor(this._chunkProcessorBuffer), this._chunkProcessorBuffer = { raw: new ArrayBuffer(0), mono: new ArrayBuffer(0) });
      } else this._chunkProcessor(d);
    };
    let a = n.connect(r), i = e.createAnalyser();
    return i.fftSize = 8192, i.smoothingTimeConstant = 0.1, a.connect(i), this.outputToSpeakers && (console.warn(`Warning: Output to speakers may affect sound quality,
especially due to system audio feedback preventative measures.
use only for debugging`), i.connect(e.destination)), this.source = n, this.node = a, this.analyser = i, this.processor = r, !0;
  }
  getFrequencies(t = "frequency", e = -100, n = -30) {
    if (!this.processor) throw new Error("Session ended: please call .begin() first");
    return wE.getFrequencies(this.analyser, this.sampleRate, null, t, e, n);
  }
  async pause() {
    if (this.processor) {
      if (!this.recording) throw new Error("Already paused: please call .record() first");
    } else throw new Error("Session ended: please call .begin() first");
    return this._chunkProcessorBuffer.raw.byteLength && this._chunkProcessor(this._chunkProcessorBuffer), this.log("Pausing ..."), await this._event("stop"), this.recording = !1, !0;
  }
  async record(t = () => {
  }, e = 8192) {
    if (this.processor) {
      if (this.recording) throw new Error("Already recording: please call .pause() first");
      if (typeof t != "function") throw new Error("chunkProcessor must be a function");
    } else throw new Error("Session ended: please call .begin() first");
    return this._chunkProcessor = t, this._chunkProcessorSize = e, this._chunkProcessorBuffer = { raw: new ArrayBuffer(0), mono: new ArrayBuffer(0) }, this.log("Recording ..."), await this._event("start"), this.recording = !0, !0;
  }
  async clear() {
    if (!this.processor) throw new Error("Session ended: please call .begin() first");
    return await this._event("clear"), !0;
  }
  async read() {
    if (!this.processor) throw new Error("Session ended: please call .begin() first");
    return this.log("Reading ..."), await this._event("read");
  }
  async save(t = !1) {
    if (!this.processor) throw new Error("Session ended: please call .begin() first");
    if (!t && this.recording) throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");
    this.log("Exporting ...");
    let e = await this._event("export");
    return new os().pack(this.sampleRate, e.audio);
  }
  async end() {
    if (!this.processor) throw new Error("Session ended: please call .begin() first");
    let t = this.processor;
    this.log("Stopping ..."), await this._event("stop"), this.recording = !1, this.stream.getTracks().forEach((n) => n.stop()), this.log("Exporting ...");
    let e = await this._event("export", {}, t);
    return this.processor.disconnect(), this.source.disconnect(), this.node.disconnect(), this.analyser.disconnect(), this.stream = null, this.processor = null, this.source = null, this.node = null, new os().pack(this.sampleRate, e.audio);
  }
  async quit() {
    return this.listenForDeviceChange(null), this.processor && await this.end(), !0;
  }
};
globalThis.WavRecorder = eI;
var rF = `
class StreamProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
    this.hasStarted = false;
    this.hasInterrupted = false;
    this.outputBuffers = [];
    this.bufferLength = 128;
    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };
    this.writeOffset = 0;
    this.trackSampleOffsets = {};
    this.port.onmessage = (event) => {
      if (event.data) {
        const payload = event.data;
        if (payload.event === 'write') {
          const int16Array = payload.buffer;
          const float32Array = new Float32Array(int16Array.length);
          for (let i = 0; i < int16Array.length; i++) {
            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32
          }
          this.writeData(float32Array, payload.trackId);
        } else if (
          payload.event === 'offset' ||
          payload.event === 'interrupt'
        ) {
          const requestId = payload.requestId;
          const trackId = this.write.trackId;
          const offset = this.trackSampleOffsets[trackId] || 0;
          this.port.postMessage({
            event: 'offset',
            requestId,
            trackId,
            offset,
          });
          if (payload.event === 'interrupt') {
            this.hasInterrupted = true;
          }
        } else {
          throw new Error(\`Unhandled event "\${payload.event}"\`);
        }
      }
    };
  }

  writeData(float32Array, trackId = null) {
    let { buffer } = this.write;
    let offset = this.writeOffset;
    for (let i = 0; i < float32Array.length; i++) {
      buffer[offset++] = float32Array[i];
      if (offset >= buffer.length) {
        this.outputBuffers.push(this.write);
        this.write = { buffer: new Float32Array(this.bufferLength), trackId };
        buffer = this.write.buffer;
        offset = 0;
      }
    }
    this.writeOffset = offset;
    return true;
  }

  process(inputs, outputs, parameters) {
    const output = outputs[0];
    const outputChannelData = output[0];
    const outputBuffers = this.outputBuffers;
    if (this.hasInterrupted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else if (outputBuffers.length) {
      this.hasStarted = true;
      const { buffer, trackId } = outputBuffers.shift();
      for (let i = 0; i < outputChannelData.length; i++) {
        outputChannelData[i] = buffer[i] || 0;
      }
      if (trackId) {
        this.trackSampleOffsets[trackId] =
          this.trackSampleOffsets[trackId] || 0;
        this.trackSampleOffsets[trackId] += buffer.length;
      }
      return true;
    } else if (this.hasStarted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else {
      return true;
    }
  }
}

registerProcessor('stream_processor', StreamProcessor);
`, aF = new Blob([rF], { type: "application/javascript" }), iF = URL.createObjectURL(aF), sF = iF, tI = class {
  constructor({ sampleRate: t = 24e3, onStop: e } = {}) {
    this.scriptSrc = sF, this.onStop = e, this.sampleRate = t, this.context = null, this.stream = null, this.analyser = null, this.trackSampleOffsets = {}, this.interruptedTrackIds = {};
  }
  async connect() {
    this.context = new AudioContext({ sampleRate: this.sampleRate }), this.context.state === "suspended" && await this.context.resume();
    try {
      await this.context.audioWorklet.addModule(this.scriptSrc);
    } catch (e) {
      throw console.error(e), new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    let t = this.context.createAnalyser();
    return t.fftSize = 8192, t.smoothingTimeConstant = 0.1, this.analyser = t, !0;
  }
  getFrequencies(t = "frequency", e = -100, n = -30) {
    if (!this.analyser) throw new Error("Not connected, please call .connect() first");
    return wE.getFrequencies(this.analyser, this.sampleRate, null, t, e, n);
  }
  _start() {
    let t = new AudioWorkletNode(this.context, "stream_processor");
    return t.connect(this.context.destination), t.port.onmessage = (e) => {
      let { event: n } = e.data;
      if (n === "stop") this.onStop?.(), t.disconnect(), this.stream = null;
      else if (n === "offset") {
        let { requestId: r, trackId: a, offset: i } = e.data, s = i / this.sampleRate;
        this.trackSampleOffsets[r] = { trackId: a, offset: i, currentTime: s };
      }
    }, this.analyser.disconnect(), t.connect(this.analyser), this.stream = t, !0;
  }
  add16BitPCM(t, e = "default") {
    if (typeof e != "string") throw new Error("trackId must be a string");
    if (this.interruptedTrackIds[e]) return;
    this.stream || this._start();
    let n;
    if (t instanceof Int16Array) n = t;
    else if (t instanceof ArrayBuffer) n = new Int16Array(t);
    else throw new Error("argument must be Int16Array or ArrayBuffer");
    return this.stream.port.postMessage({ event: "write", buffer: n, trackId: e }), n;
  }
  async getTrackSampleOffset(t = !1) {
    if (!this.stream) return null;
    let e = crypto.randomUUID();
    this.stream.port.postMessage({ event: t ? "interrupt" : "offset", requestId: e });
    let n;
    for (; !n; ) n = this.trackSampleOffsets[e], await new Promise((a) => setTimeout(() => a(), 1));
    let { trackId: r } = n;
    return t && r && (this.interruptedTrackIds[r] = !0), n;
  }
  async interrupt() {
    return this.getTrackSampleOffset(!0);
  }
};
globalThis.WavStreamPlayer = tI;
var nI = Vt({ key: "ThreadIdToResume", default: void 0 }), oF = Vt({ key: "ChatProfile", default: void 0 }), QT = Vt({ key: "SessionId", default: ms() }), Rh = T2({ key: "SessionIdSelector", get: ({ get: t }) => t(QT), set: ({ set: t }, e) => t(QT, e instanceof yP ? ms() : e) }), LE = Vt({ key: "Session", dangerouslyAllowMutability: !0, default: void 0 }), ME = Vt({ key: "Actions", default: [] }), Vl = Vt({ key: "Messages", dangerouslyAllowMutability: !0, default: [] }), rI = Vt({ key: "TokenCount", default: 0 }), kE = Vt({ key: "Loading", default: !1 }), PE = Vt({ key: "AskUser", default: void 0 }), aI = Vt({ key: "WavRecorder", dangerouslyAllowMutability: !0, default: new eI() }), iI = Vt({ key: "WavStreamPlayer", dangerouslyAllowMutability: !0, default: new tI() }), sI = Vt({ key: "AudioConnection", default: "off" }), oI = Vt({ key: "isAiSpeaking", default: !1 }), lI = Vt({ key: "CallFn", default: void 0 }), Rd = Vt({ key: "ChatSettings", default: [] }), cI = T2({ key: "ChatSettingsValue/Default", get: ({ get: t }) => t(Rd).reduce((e, n) => (e[n.id] = n.initial, e), {}) }), FE = Vt({ key: "ChatSettingsValue", default: cI }), BE = Vt({ key: "DisplayElements", default: [] }), UE = Vt({ key: "TasklistElements", default: [] }), Ad = Vt({ key: "FirstUserInteraction", default: void 0 }), Od = Vt({ key: "AccessToken", default: void 0 }), lF = Vt({ key: "User", default: null }), cF = Vt({ key: "ChainlitConfig", default: void 0 }), uF = Vt({ key: "AuthConfig", default: void 0 }), uI = Vt({ key: "ThreadHistory", default: { threads: void 0, currentThreadId: void 0, timeGroupedThreads: void 0, pageInfo: void 0 }, effects: [({ setSelf: t, onSet: e }) => {
  e((n, r) => {
    let a = n?.timeGroupedThreads;
    n?.threads && !lo.isEqual(n.threads, r?.timeGroupedThreads) && (a = j9(n.threads)), t({ ...n, timeGroupedThreads: a });
  });
}] }), dI = Vt({ key: "SideView", default: void 0 }), GE = Vt({ key: "CurrentThreadId", default: void 0 }), uo = () => {
  let t = Qt(kE), e = Qt(BE), n = Qt(UE), r = Qt(ME), a = Qt(LE), i = Qt(PE), s = Qt(lI), l = Qt(Rd), c = Qt(FE), d = Qt(cI), p = a?.socket.connected && !a?.error, _ = !p || t || i?.spec.type === "file" || i?.spec.type === "action";
  return { actions: r, askUser: i, callFn: s, chatSettingsDefaultValue: d, chatSettingsInputs: l, chatSettingsValue: c, connected: p, disabled: _, elements: e, error: a?.error, loading: t, tasklists: n };
}, js = (t, e) => Nd(t, e.id) ? Dl(t, e.id, e) : "parentId" in e && e.parentId ? _I(t, e.parentId, e) : "indent" in e && e.indent && e.indent > 0 ? pI(t, e.indent, e) : [...t, e], pI = (t, e, n, r = 0) => {
  let a = [...t];
  if (a.length === 0) return [...a, n];
  {
    let i = a.length - 1, s = a[i];
    return s.steps = s.steps || [], r + 1 === e ? (s.steps = [...s.steps, n], a[i] = { ...s }, a) : (s.steps = pI(s.steps, e, n, r + 1), a[i] = { ...s }, a);
  }
}, _I = (t, e, n) => {
  let r = [...t];
  for (let a = 0; a < r.length; a++) {
    let i = r[a];
    lo.isEqual(i.id, e) ? (i.steps = i.steps ? [...i.steps, n] : [n], r[a] = { ...i }) : Nd(r, e) && i.steps && (i.steps = _I(i.steps, e, n), r[a] = { ...i });
  }
  return r;
}, mI = (t, e) => {
  for (let n of t) {
    if (lo.isEqual(n.id, e)) return n;
    if (n.steps && n.steps.length > 0) {
      let r = mI(n.steps, e);
      if (r) return r;
    }
  }
}, Nd = (t, e) => mI(t, e) !== void 0, Dl = (t, e, n) => {
  let r = [...t];
  for (let a = 0; a < r.length; a++) {
    let i = r[a];
    lo.isEqual(i.id, e) ? r[a] = { steps: i.steps, ...n } : Nd(r, e) && i.steps && (i.steps = Dl(i.steps, e, n), r[a] = { ...i });
  }
  return r;
}, fI = (t, e) => {
  let n = [...t];
  for (let r = 0; r < n.length; r++) {
    let a = n[r];
    a.id === e ? n = [...n.slice(0, r), ...n.slice(r + 1)] : Nd(n, e) && a.steps && (a.steps = fI(a.steps, e), n[r] = { ...a });
  }
  return n;
}, gI = (t, e, n, r, a) => {
  let i = [...t];
  for (let s = 0; s < i.length; s++) {
    let l = i[s];
    lo.isEqual(l.id, e) ? ("content" in l && l.content !== void 0 ? r ? l.content = n : l.content += n : a ? "input" in l && l.input !== void 0 && (r ? l.input = n : l.input += n) : "output" in l && l.output !== void 0 && (r ? l.output = n : l.output += n), i[s] = { ...l }) : l.steps && (l.steps = gI(l.steps, e, n, r, a), i[s] = { ...l });
  }
  return i;
}, HE = "token";
function jT() {
  try {
    return localStorage.getItem(HE);
  } catch {
    return;
  }
}
function dF(t) {
  try {
    return localStorage.setItem(HE, t);
  } catch {
    return;
  }
}
function hI() {
  try {
    return localStorage.removeItem(HE);
  } catch {
    return;
  }
}
var pF = async (t, e, n) => (await t.get(e, n))?.json();
function EI(t, { token: e, ...n } = {}) {
  let r = qn(Yi), a = Qt(Od);
  a = e || a;
  let i = Cn(() => ([l, c]) => pF(r, l, c), [r]), s = Cn(() => t ? [t, a] : null, [t, a]);
  return RE(s, i, n);
}
var Id = () => {
  let t = qn(Yi), [e, n] = Pa(uF), [r, a] = Pa(lF), { data: i, isLoading: s } = EI(e ? null : "/auth/config"), [l, c] = Pa(Od), d = Yt(uI);
  wn(() => {
    i && n(i);
  }, [i, n]);
  let p = !!(!s && e), _ = async (E = !1) => {
    await t.logout(), a(null), hI(), c(""), d(void 0), E && window.location.reload();
  }, f = (E) => {
    if (!E) {
      _();
      return;
    }
    try {
      let { exp: T, ...R } = C7(E);
      dF(E), c(`Bearer ${E}`), a(R);
    } catch (T) {
      console.error("Invalid token, clearing token from local storage", "error:", T), _();
    }
  };
  wn(() => {
    if (!r && jT()) {
      f(jT());
      return;
    }
  }, []);
  let g = !!l;
  return e && !e.requireLogin ? { authConfig: e, user: null, isReady: p, isAuthenticated: !0, accessToken: "", logout: () => {
  }, setAccessToken: () => {
  } } : { data: e, user: r, isAuthenticated: g, isReady: p, accessToken: l, logout: _, setAccessToken: f };
}, XT = class extends Error {
  constructor(e, n) {
    super(e), this.detail = n;
  }
  toString() {
    return this.detail ? `${this.message}: ${this.detail}` : this.message;
  }
}, _F = class {
  constructor(e, n, r, a) {
    this.httpEndpoint = e, this.type = n, this.on401 = r, this.onError = a;
  }
  buildEndpoint(e) {
    return this.httpEndpoint.endsWith("/") ? `${this.httpEndpoint.slice(0, -1)}${e}` : `${this.httpEndpoint}${e}`;
  }
  checkToken(e) {
    let n = "Bearer ";
    return e.startsWith(n) ? e : n + e;
  }
  async fetch(e, n, r, a, i) {
    try {
      let s = {};
      r && (s.Authorization = this.checkToken(r));
      let l;
      a instanceof FormData ? l = a : (s["Content-Type"] = "application/json", l = a ? JSON.stringify(a) : null);
      let c = await fetch(this.buildEndpoint(n), { method: e, headers: s, signal: i, body: l });
      if (!c.ok) {
        let d = await c.json();
        throw c.status === 401 && this.on401 && (hI(), this.on401()), new XT(c.statusText, d.detail);
      }
      return c;
    } catch (s) {
      throw s instanceof XT && this.onError && this.onError(s), console.error(s), s;
    }
  }
  async get(e, n) {
    return await this.fetch("GET", e, n);
  }
  async post(e, n, r, a) {
    return await this.fetch("POST", e, r, n, a);
  }
  async put(e, n, r) {
    return await this.fetch("PUT", e, r, n);
  }
  async patch(e, n, r) {
    return await this.fetch("PATCH", e, r, n);
  }
  async delete(e, n, r) {
    return await this.fetch("DELETE", e, r, n);
  }
}, mF = class extends _F {
  async headerAuth() {
    return (await this.post("/auth/header", {})).json();
  }
  async passwordAuth(t) {
    return (await this.post("/login", t)).json();
  }
  async logout() {
    return (await this.post("/logout", {})).json();
  }
  async setFeedback(t, e) {
    return (await this.put("/feedback", { feedback: t }, e)).json();
  }
  async deleteFeedback(t, e) {
    return (await this.delete("/feedback", { feedbackId: t }, e)).json();
  }
  async listThreads(t, e, n) {
    return (await this.post("/project/threads", { pagination: t, filter: e }, n)).json();
  }
  async deleteThread(t, e) {
    return (await this.delete("/project/thread", { threadId: t }, e)).json();
  }
  uploadFile(t, e, n, r) {
    let a = new XMLHttpRequest(), i = new Promise((s, l) => {
      let c = new FormData();
      c.append("file", t), a.open("POST", this.buildEndpoint(`/project/file?session_id=${n}`), !0), r && a.setRequestHeader("Authorization", this.checkToken(r)), a.upload.onprogress = function(d) {
        if (d.lengthComputable) {
          let p = d.loaded / d.total * 100;
          e(p);
        }
      }, a.onload = function() {
        if (a.status === 200) {
          let d = JSON.parse(a.responseText);
          s(d);
        } else l("Upload failed");
      }, a.onerror = function() {
        l("Upload error");
      }, a.send(c);
    });
    return { xhr: a, promise: i };
  }
  getElementUrl(t, e) {
    let n = `?session_id=${e}`;
    return this.buildEndpoint(`/project/file/${t}${n}`);
  }
  getLogoEndpoint(t) {
    return this.buildEndpoint(`/logo?theme=${t}`);
  }
  getOAuthEndpoint(t) {
    return this.buildEndpoint(`/auth/oauth/${t}`);
  }
}, Yi = so(new mF("http://localhost:8000", "webapp")), zi = () => {
  let t = qn(Yi), e = Qt(Od), n = Qt(LE), r = Qt(PE), a = Qt(Rh), i = ku(Rd), s = ku(Rh), l = ku(FE), c = Yt(Ad), d = Yt(kE), p = Yt(Vl), _ = Yt(BE), f = Yt(UE), g = Yt(ME), E = Yt(rI), T = Yt(nI), R = Yt(dI), A = Yt(GE), I = dt(() => {
    n?.socket.emit("clear_session"), n?.socket.disconnect(), T(void 0), s(), c(void 0), p([]), _([]), f([]), g([]), E(0), i(), l(), R(void 0), A(void 0);
  }, [n]), x = dt((ce, ve = []) => {
    ce.id || (ce.id = ms()), ce.createdAt || (ce.createdAt = (/* @__PURE__ */ new Date()).toISOString()), p((ge) => js(ge, ce)), n?.socket.emit("client_message", { message: ce, fileReferences: ve });
  }, [n?.socket]), P = dt((ce) => {
    n?.socket.emit("edit_message", { message: ce });
  }, [n?.socket]), D = dt(() => {
    n?.socket.emit("audio_start");
  }, [n?.socket]), L = dt((ce, ve, ge, fe) => {
    n?.socket.emit("audio_chunk", { isStart: ce, mimeType: ve, elapsedTime: ge, data: fe });
  }, [n?.socket]), K = dt(() => {
    n?.socket.emit("audio_end");
  }, [n?.socket]), J = dt((ce) => {
    r && (p((ve) => js(ve, ce)), r.callback(ce));
  }, [r]), X = dt((ce) => {
    n?.socket.emit("chat_settings_change", ce);
  }, [n?.socket]), $ = dt(() => {
    p((ce) => ce.map((ve) => (ve.streaming = !1, ve))), d(!1), n?.socket.emit("stop");
  }, [n?.socket]), ae = dt((ce) => {
    let ve = n?.socket;
    if (!ve) return;
    let ge = new Promise((fe, Fe) => {
      ve.once("action_response", (ne) => {
        ne.status ? fe(ne) : Fe(ne);
      });
    });
    return ve.emit("action_call", ce), ge;
  }, [n?.socket]);
  return { uploadFile: dt((ce, ve) => t.uploadFile(ce, ve, a, e), [a, e]), callAction: ae, clear: I, replyMessage: J, sendMessage: x, editMessage: P, startAudioStream: D, sendAudioChunk: L, endAudioStream: K, stopTask: $, setIdToResume: T, updateChatSettings: X };
}, po = () => {
  let t = Qt(Vl), e = Qt(Ad);
  return { threadId: Qt(GE), messages: t, firstInteraction: e };
}, xd = () => {
  let t = qn(Yi), e = Qt(Rh), [n, r] = Pa(LE), a = Yt(oI), i = Yt(sI), s = ku(FE), l = Yt(Ad), c = Yt(kE), d = Qt(iI), p = Qt(aI), _ = Yt(Vl), f = Yt(PE), g = Yt(lI), E = Yt(BE), T = Yt(UE), R = Yt(ME), A = Yt(Rd), I = Yt(rI), [x, P] = Pa(oF), D = Qt(nI), [L, K] = Pa(GE);
  wn(() => {
    n?.socket && (n.socket.io.opts.extraHeaders["X-Chainlit-Thread-Id"] = L || "");
  }, [L]);
  let J = dt(({ userEnv: ae, accessToken: ce }) => {
    let { protocol: ve, host: ge, pathname: fe } = new URL(t.httpEndpoint), Fe = `${ve}//${ge}`, ne = fe && fe !== "/" ? `${fe}/ws/socket.io` : "/ws/socket.io", se = Uu(Fe, { path: ne, extraHeaders: { Authorization: ce || "", "X-Chainlit-Client-Type": t.type, "X-Chainlit-Session-Id": e, "X-Chainlit-Thread-Id": D || "", "user-env": JSON.stringify(ae), "X-Chainlit-Chat-Profile": x ? encodeURIComponent(x) : "" } });
    r((z) => (z?.socket?.removeAllListeners(), z?.socket?.close(), { socket: se })), se.on("connect", () => {
      se.emit("connection_successful"), r((z) => ({ ...z, error: !1 }));
    }), se.on("connect_error", (z) => {
      r((v) => ({ ...v, error: !0 }));
    }), se.on("task_start", () => {
      c(!0);
    }), se.on("task_end", () => {
      c(!1);
    }), se.on("reload", () => {
      se.emit("clear_session"), window.location.reload();
    }), se.on("audio_connection", async (z) => {
      if (z === "on") {
        let v = !0, H = Date.now(), oe = "pcm16";
        await p.begin(), await d.connect(), await p.record(async (k) => {
          let me = Date.now() - H;
          se.emit("audio_chunk", { isStart: v, mimeType: oe, elapsedTime: me, data: k.mono }), v = !1;
        }), d.onStop = () => a(!1);
      } else await p.end(), await d.interrupt();
      i(z);
    }), se.on("audio_chunk", (z) => {
      d.add16BitPCM(z.data, z.track), a(!0);
    }), se.on("audio_interrupt", () => {
      d.interrupt();
    }), se.on("resume_thread", (z) => {
      let v = [];
      for (let oe of z.steps) v = js(v, oe);
      z.metadata?.chat_profile && P(z.metadata?.chat_profile), _(v);
      let H = z.elements || [];
      T(H.filter((oe) => oe.type === "tasklist")), E(H.filter((oe) => ["avatar", "tasklist"].indexOf(oe.type) === -1));
    }), se.on("new_message", (z) => {
      _((v) => js(v, z));
    }), se.on("first_interaction", (z) => {
      l(z.interaction), K(z.thread_id);
    }), se.on("update_message", (z) => {
      _((v) => Dl(v, z.id, z));
    }), se.on("delete_message", (z) => {
      _((v) => fI(v, z.id));
    }), se.on("stream_start", (z) => {
      _((v) => js(v, z));
    }), se.on("stream_token", ({ id: z, token: v, isSequence: H, isInput: oe }) => {
      _((k) => gI(k, z, v, H, oe));
    }), se.on("ask", ({ msg: z, spec: v }, H) => {
      f({ spec: v, callback: H }), _((oe) => js(oe, z)), c(!1);
    }), se.on("ask_timeout", () => {
      f(void 0), c(!1);
    }), se.on("clear_ask", () => {
      f(void 0);
    }), se.on("call_fn", ({ name: z, args: v }, H) => {
      g({ name: z, args: v, callback: H });
    }), se.on("clear_call_fn", () => {
      g(void 0);
    }), se.on("call_fn_timeout", () => {
      g(void 0);
    }), se.on("chat_settings", (z) => {
      A(z), s();
    }), se.on("element", (z) => {
      !z.url && z.chainlitKey && (z.url = t.getElementUrl(z.chainlitKey, e)), z.type === "tasklist" ? T((v) => {
        let H = v.findIndex((oe) => oe.id === z.id);
        return H === -1 ? [...v, z] : [...v.slice(0, H), z, ...v.slice(H + 1)];
      }) : E((v) => {
        let H = v.findIndex((oe) => oe.id === z.id);
        return H === -1 ? [...v, z] : [...v.slice(0, H), z, ...v.slice(H + 1)];
      });
    }), se.on("remove_element", (z) => {
      E((v) => v.filter((H) => H.id !== z.id)), T((v) => v.filter((H) => H.id !== z.id));
    }), se.on("action", (z) => {
      R((v) => [...v, z]);
    }), se.on("remove_action", (z) => {
      R((v) => {
        let H = v.findIndex((oe) => oe.id === z.id);
        return H === -1 ? v : [...v.slice(0, H), ...v.slice(H + 1)];
      });
    }), se.on("token_usage", (z) => {
      I((v) => v + z);
    });
  }, [r, e, x]), X = dt(lo.debounce(J, 200), [J]), $ = dt(() => {
    n?.socket && (n.socket.removeAllListeners(), n.socket.close());
  }, [n]);
  return { connect: X, disconnect: $, session: n, sessionId: e, chatProfile: x, idToResume: D, setChatProfile: P };
}, YE = () => {
  let [t, e] = Pa(sI), n = Qt(aI), r = Qt(iI), a = Qt(oI), { startAudioStream: i, endAudioStream: s } = zi(), l = dt(async () => {
    e("connecting"), await i();
  }, [i]), c = dt(async () => {
    e("off"), await n.end(), await r.interrupt(), await s();
  }, [s, n, r]);
  return { startConversation: l, endConversation: c, audioConnection: t, isAiSpeaking: a, wavRecorder: n, wavStreamPlayer: r };
}, ua = (t) => {
  let [e, n] = Pa(cF), { isAuthenticated: r } = Id(), a = navigator.language || "en-US", { data: i, error: s, isLoading: l } = EI(!e && r ? `/project/settings?language=${a}` : null, { token: t });
  return wn(() => {
    i && n(i);
  }, [i, n]), { config: e, error: s, isLoading: l, language: a };
}, M0 = /* @__PURE__ */ new WeakMap(), fF = (t, e, n = !1, r = !1) => {
  let a, i, s;
  if (r && (i = e.toString(), s = n.toString(), a = M0.has(t) ? M0.get(t) : {}, M0.set(t, a), a[i] = a[i] || {}, a[i][s])) return a[i][s];
  let l = t.length, c = new Array(e);
  if (e <= l) {
    c.fill(0);
    let d = new Array(e).fill(0);
    for (let p = 0; p < l; p++) {
      let _ = Math.floor(p * (e / l));
      n ? c[_] = Math.max(c[_], Math.abs(t[p])) : c[_] += Math.abs(t[p]), d[_]++;
    }
    if (!n) for (let p = 0; p < c.length; p++) c[p] = c[p] / d[p];
  } else for (let d = 0; d < e; d++) {
    let p = d * (l - 1) / (e - 1), _ = Math.floor(p), f = Math.ceil(p), g = p - _;
    f >= l ? c[d] = t[l - 1] : c[d] = t[_] * (1 - g) + t[f] * g;
  }
  return r && (a[i][s] = c), c;
}, gF = { drawBars: (t, e, n, r, a, i = 0, s = 0, l = 0, c = !1) => {
  i = Math.floor(Math.min(i, (n - l) / (Math.max(s, 1) + l))), i || (i = Math.floor((n - l) / (Math.max(s, 1) + l))), s || (s = (n - l) / i - l);
  let d = fF(e, i, !0);
  for (let p = 0; p < i; p++) {
    let _ = Math.abs(d[p]), f = Math.max(1, _ * r), g = l + p * (s + l), E = c ? (r - f) / 2 : r - f, T = Math.min(s / 2, f / 2);
    t.fillStyle = a, t.beginPath(), t.moveTo(g + T, E), t.lineTo(g + s - T, E), t.arcTo(g + s, E, g + s, E + T, T), t.lineTo(g + s, E + f - T), t.arcTo(g + s, E + f, g + s - T, E + f, T), t.lineTo(g + T, E + f), t.arcTo(g, E + f, g, E + f - T, T), t.lineTo(g, E + T), t.arcTo(g, E, g + T, E, T), t.closePath(), t.fill();
  }
} }, Ah = { exports: {} }, fu = { exports: {} }, Wt = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ZT;
function hF() {
  if (ZT) return Wt;
  ZT = 1;
  var t = typeof Symbol == "function" && Symbol.for, e = t ? Symbol.for("react.element") : 60103, n = t ? Symbol.for("react.portal") : 60106, r = t ? Symbol.for("react.fragment") : 60107, a = t ? Symbol.for("react.strict_mode") : 60108, i = t ? Symbol.for("react.profiler") : 60114, s = t ? Symbol.for("react.provider") : 60109, l = t ? Symbol.for("react.context") : 60110, c = t ? Symbol.for("react.async_mode") : 60111, d = t ? Symbol.for("react.concurrent_mode") : 60111, p = t ? Symbol.for("react.forward_ref") : 60112, _ = t ? Symbol.for("react.suspense") : 60113, f = t ? Symbol.for("react.suspense_list") : 60120, g = t ? Symbol.for("react.memo") : 60115, E = t ? Symbol.for("react.lazy") : 60116, T = t ? Symbol.for("react.block") : 60121, R = t ? Symbol.for("react.fundamental") : 60117, A = t ? Symbol.for("react.responder") : 60118, I = t ? Symbol.for("react.scope") : 60119;
  function x(D) {
    if (typeof D == "object" && D !== null) {
      var L = D.$$typeof;
      switch (L) {
        case e:
          switch (D = D.type, D) {
            case c:
            case d:
            case r:
            case i:
            case a:
            case _:
              return D;
            default:
              switch (D = D && D.$$typeof, D) {
                case l:
                case p:
                case E:
                case g:
                case s:
                  return D;
                default:
                  return L;
              }
          }
        case n:
          return L;
      }
    }
  }
  function P(D) {
    return x(D) === d;
  }
  return Wt.AsyncMode = c, Wt.ConcurrentMode = d, Wt.ContextConsumer = l, Wt.ContextProvider = s, Wt.Element = e, Wt.ForwardRef = p, Wt.Fragment = r, Wt.Lazy = E, Wt.Memo = g, Wt.Portal = n, Wt.Profiler = i, Wt.StrictMode = a, Wt.Suspense = _, Wt.isAsyncMode = function(D) {
    return P(D) || x(D) === c;
  }, Wt.isConcurrentMode = P, Wt.isContextConsumer = function(D) {
    return x(D) === l;
  }, Wt.isContextProvider = function(D) {
    return x(D) === s;
  }, Wt.isElement = function(D) {
    return typeof D == "object" && D !== null && D.$$typeof === e;
  }, Wt.isForwardRef = function(D) {
    return x(D) === p;
  }, Wt.isFragment = function(D) {
    return x(D) === r;
  }, Wt.isLazy = function(D) {
    return x(D) === E;
  }, Wt.isMemo = function(D) {
    return x(D) === g;
  }, Wt.isPortal = function(D) {
    return x(D) === n;
  }, Wt.isProfiler = function(D) {
    return x(D) === i;
  }, Wt.isStrictMode = function(D) {
    return x(D) === a;
  }, Wt.isSuspense = function(D) {
    return x(D) === _;
  }, Wt.isValidElementType = function(D) {
    return typeof D == "string" || typeof D == "function" || D === r || D === d || D === i || D === a || D === _ || D === f || typeof D == "object" && D !== null && (D.$$typeof === E || D.$$typeof === g || D.$$typeof === s || D.$$typeof === l || D.$$typeof === p || D.$$typeof === R || D.$$typeof === A || D.$$typeof === I || D.$$typeof === T);
  }, Wt.typeOf = x, Wt;
}
var Kt = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var JT;
function EF() {
  return JT || (JT = 1, process.env.NODE_ENV !== "production" && function() {
    var t = typeof Symbol == "function" && Symbol.for, e = t ? Symbol.for("react.element") : 60103, n = t ? Symbol.for("react.portal") : 60106, r = t ? Symbol.for("react.fragment") : 60107, a = t ? Symbol.for("react.strict_mode") : 60108, i = t ? Symbol.for("react.profiler") : 60114, s = t ? Symbol.for("react.provider") : 60109, l = t ? Symbol.for("react.context") : 60110, c = t ? Symbol.for("react.async_mode") : 60111, d = t ? Symbol.for("react.concurrent_mode") : 60111, p = t ? Symbol.for("react.forward_ref") : 60112, _ = t ? Symbol.for("react.suspense") : 60113, f = t ? Symbol.for("react.suspense_list") : 60120, g = t ? Symbol.for("react.memo") : 60115, E = t ? Symbol.for("react.lazy") : 60116, T = t ? Symbol.for("react.block") : 60121, R = t ? Symbol.for("react.fundamental") : 60117, A = t ? Symbol.for("react.responder") : 60118, I = t ? Symbol.for("react.scope") : 60119;
    function x(_e) {
      return typeof _e == "string" || typeof _e == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      _e === r || _e === d || _e === i || _e === a || _e === _ || _e === f || typeof _e == "object" && _e !== null && (_e.$$typeof === E || _e.$$typeof === g || _e.$$typeof === s || _e.$$typeof === l || _e.$$typeof === p || _e.$$typeof === R || _e.$$typeof === A || _e.$$typeof === I || _e.$$typeof === T);
    }
    function P(_e) {
      if (typeof _e == "object" && _e !== null) {
        var je = _e.$$typeof;
        switch (je) {
          case e:
            var et = _e.type;
            switch (et) {
              case c:
              case d:
              case r:
              case i:
              case a:
              case _:
                return et;
              default:
                var nt = et && et.$$typeof;
                switch (nt) {
                  case l:
                  case p:
                  case E:
                  case g:
                  case s:
                    return nt;
                  default:
                    return je;
                }
            }
          case n:
            return je;
        }
      }
    }
    var D = c, L = d, K = l, J = s, X = e, $ = p, ae = r, ce = E, ve = g, ge = n, fe = i, Fe = a, ne = _, se = !1;
    function z(_e) {
      return se || (se = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), v(_e) || P(_e) === c;
    }
    function v(_e) {
      return P(_e) === d;
    }
    function H(_e) {
      return P(_e) === l;
    }
    function oe(_e) {
      return P(_e) === s;
    }
    function k(_e) {
      return typeof _e == "object" && _e !== null && _e.$$typeof === e;
    }
    function me(_e) {
      return P(_e) === p;
    }
    function Ce(_e) {
      return P(_e) === r;
    }
    function he(_e) {
      return P(_e) === E;
    }
    function Ne(_e) {
      return P(_e) === g;
    }
    function ye(_e) {
      return P(_e) === n;
    }
    function Ue(_e) {
      return P(_e) === i;
    }
    function Me(_e) {
      return P(_e) === a;
    }
    function Qe(_e) {
      return P(_e) === _;
    }
    Kt.AsyncMode = D, Kt.ConcurrentMode = L, Kt.ContextConsumer = K, Kt.ContextProvider = J, Kt.Element = X, Kt.ForwardRef = $, Kt.Fragment = ae, Kt.Lazy = ce, Kt.Memo = ve, Kt.Portal = ge, Kt.Profiler = fe, Kt.StrictMode = Fe, Kt.Suspense = ne, Kt.isAsyncMode = z, Kt.isConcurrentMode = v, Kt.isContextConsumer = H, Kt.isContextProvider = oe, Kt.isElement = k, Kt.isForwardRef = me, Kt.isFragment = Ce, Kt.isLazy = he, Kt.isMemo = Ne, Kt.isPortal = ye, Kt.isProfiler = Ue, Kt.isStrictMode = Me, Kt.isSuspense = Qe, Kt.isValidElementType = x, Kt.typeOf = P;
  }()), Kt;
}
var ey;
function SI() {
  return ey || (ey = 1, process.env.NODE_ENV === "production" ? fu.exports = hF() : fu.exports = EF()), fu.exports;
}
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var k0, ty;
function SF() {
  if (ty) return k0;
  ty = 1;
  var t = Object.getOwnPropertySymbols, e = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable;
  function r(i) {
    if (i == null)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(i);
  }
  function a() {
    try {
      if (!Object.assign)
        return !1;
      var i = new String("abc");
      if (i[5] = "de", Object.getOwnPropertyNames(i)[0] === "5")
        return !1;
      for (var s = {}, l = 0; l < 10; l++)
        s["_" + String.fromCharCode(l)] = l;
      var c = Object.getOwnPropertyNames(s).map(function(p) {
        return s[p];
      });
      if (c.join("") !== "0123456789")
        return !1;
      var d = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(p) {
        d[p] = p;
      }), Object.keys(Object.assign({}, d)).join("") === "abcdefghijklmnopqrst";
    } catch {
      return !1;
    }
  }
  return k0 = a() ? Object.assign : function(i, s) {
    for (var l, c = r(i), d, p = 1; p < arguments.length; p++) {
      l = Object(arguments[p]);
      for (var _ in l)
        e.call(l, _) && (c[_] = l[_]);
      if (t) {
        d = t(l);
        for (var f = 0; f < d.length; f++)
          n.call(l, d[f]) && (c[d[f]] = l[d[f]]);
      }
    }
    return c;
  }, k0;
}
var P0, ny;
function zE() {
  if (ny) return P0;
  ny = 1;
  var t = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  return P0 = t, P0;
}
var F0, ry;
function bI() {
  return ry || (ry = 1, F0 = Function.call.bind(Object.prototype.hasOwnProperty)), F0;
}
var B0, ay;
function bF() {
  if (ay) return B0;
  ay = 1;
  var t = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    var e = zE(), n = {}, r = bI();
    t = function(i) {
      var s = "Warning: " + i;
      typeof console < "u" && console.error(s);
      try {
        throw new Error(s);
      } catch {
      }
    };
  }
  function a(i, s, l, c, d) {
    if (process.env.NODE_ENV !== "production") {
      for (var p in i)
        if (r(i, p)) {
          var _;
          try {
            if (typeof i[p] != "function") {
              var f = Error(
                (c || "React class") + ": " + l + " type `" + p + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof i[p] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              throw f.name = "Invariant Violation", f;
            }
            _ = i[p](s, p, c, l, null, e);
          } catch (E) {
            _ = E;
          }
          if (_ && !(_ instanceof Error) && t(
            (c || "React class") + ": type specification of " + l + " `" + p + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof _ + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
          ), _ instanceof Error && !(_.message in n)) {
            n[_.message] = !0;
            var g = d ? d() : "";
            t(
              "Failed " + l + " type: " + _.message + (g ?? "")
            );
          }
        }
    }
  }
  return a.resetWarningCache = function() {
    process.env.NODE_ENV !== "production" && (n = {});
  }, B0 = a, B0;
}
var U0, iy;
function TF() {
  if (iy) return U0;
  iy = 1;
  var t = SI(), e = SF(), n = zE(), r = bI(), a = bF(), i = function() {
  };
  process.env.NODE_ENV !== "production" && (i = function(l) {
    var c = "Warning: " + l;
    typeof console < "u" && console.error(c);
    try {
      throw new Error(c);
    } catch {
    }
  });
  function s() {
    return null;
  }
  return U0 = function(l, c) {
    var d = typeof Symbol == "function" && Symbol.iterator, p = "@@iterator";
    function _(v) {
      var H = v && (d && v[d] || v[p]);
      if (typeof H == "function")
        return H;
    }
    var f = "<<anonymous>>", g = {
      array: A("array"),
      bigint: A("bigint"),
      bool: A("boolean"),
      func: A("function"),
      number: A("number"),
      object: A("object"),
      string: A("string"),
      symbol: A("symbol"),
      any: I(),
      arrayOf: x,
      element: P(),
      elementType: D(),
      instanceOf: L,
      node: $(),
      objectOf: J,
      oneOf: K,
      oneOfType: X,
      shape: ce,
      exact: ve
    };
    function E(v, H) {
      return v === H ? v !== 0 || 1 / v === 1 / H : v !== v && H !== H;
    }
    function T(v, H) {
      this.message = v, this.data = H && typeof H == "object" ? H : {}, this.stack = "";
    }
    T.prototype = Error.prototype;
    function R(v) {
      if (process.env.NODE_ENV !== "production")
        var H = {}, oe = 0;
      function k(Ce, he, Ne, ye, Ue, Me, Qe) {
        if (ye = ye || f, Me = Me || Ne, Qe !== n) {
          if (c) {
            var _e = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            throw _e.name = "Invariant Violation", _e;
          } else if (process.env.NODE_ENV !== "production" && typeof console < "u") {
            var je = ye + ":" + Ne;
            !H[je] && // Avoid spamming the console because they are often not actionable except for lib authors
            oe < 3 && (i(
              "You are manually calling a React.PropTypes validation function for the `" + Me + "` prop on `" + ye + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
            ), H[je] = !0, oe++);
          }
        }
        return he[Ne] == null ? Ce ? he[Ne] === null ? new T("The " + Ue + " `" + Me + "` is marked as required " + ("in `" + ye + "`, but its value is `null`.")) : new T("The " + Ue + " `" + Me + "` is marked as required in " + ("`" + ye + "`, but its value is `undefined`.")) : null : v(he, Ne, ye, Ue, Me);
      }
      var me = k.bind(null, !1);
      return me.isRequired = k.bind(null, !0), me;
    }
    function A(v) {
      function H(oe, k, me, Ce, he, Ne) {
        var ye = oe[k], Ue = Fe(ye);
        if (Ue !== v) {
          var Me = ne(ye);
          return new T(
            "Invalid " + Ce + " `" + he + "` of type " + ("`" + Me + "` supplied to `" + me + "`, expected ") + ("`" + v + "`."),
            { expectedType: v }
          );
        }
        return null;
      }
      return R(H);
    }
    function I() {
      return R(s);
    }
    function x(v) {
      function H(oe, k, me, Ce, he) {
        if (typeof v != "function")
          return new T("Property `" + he + "` of component `" + me + "` has invalid PropType notation inside arrayOf.");
        var Ne = oe[k];
        if (!Array.isArray(Ne)) {
          var ye = Fe(Ne);
          return new T("Invalid " + Ce + " `" + he + "` of type " + ("`" + ye + "` supplied to `" + me + "`, expected an array."));
        }
        for (var Ue = 0; Ue < Ne.length; Ue++) {
          var Me = v(Ne, Ue, me, Ce, he + "[" + Ue + "]", n);
          if (Me instanceof Error)
            return Me;
        }
        return null;
      }
      return R(H);
    }
    function P() {
      function v(H, oe, k, me, Ce) {
        var he = H[oe];
        if (!l(he)) {
          var Ne = Fe(he);
          return new T("Invalid " + me + " `" + Ce + "` of type " + ("`" + Ne + "` supplied to `" + k + "`, expected a single ReactElement."));
        }
        return null;
      }
      return R(v);
    }
    function D() {
      function v(H, oe, k, me, Ce) {
        var he = H[oe];
        if (!t.isValidElementType(he)) {
          var Ne = Fe(he);
          return new T("Invalid " + me + " `" + Ce + "` of type " + ("`" + Ne + "` supplied to `" + k + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return R(v);
    }
    function L(v) {
      function H(oe, k, me, Ce, he) {
        if (!(oe[k] instanceof v)) {
          var Ne = v.name || f, ye = z(oe[k]);
          return new T("Invalid " + Ce + " `" + he + "` of type " + ("`" + ye + "` supplied to `" + me + "`, expected ") + ("instance of `" + Ne + "`."));
        }
        return null;
      }
      return R(H);
    }
    function K(v) {
      if (!Array.isArray(v))
        return process.env.NODE_ENV !== "production" && (arguments.length > 1 ? i(
          "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
        ) : i("Invalid argument supplied to oneOf, expected an array.")), s;
      function H(oe, k, me, Ce, he) {
        for (var Ne = oe[k], ye = 0; ye < v.length; ye++)
          if (E(Ne, v[ye]))
            return null;
        var Ue = JSON.stringify(v, function(Qe, _e) {
          var je = ne(_e);
          return je === "symbol" ? String(_e) : _e;
        });
        return new T("Invalid " + Ce + " `" + he + "` of value `" + String(Ne) + "` " + ("supplied to `" + me + "`, expected one of " + Ue + "."));
      }
      return R(H);
    }
    function J(v) {
      function H(oe, k, me, Ce, he) {
        if (typeof v != "function")
          return new T("Property `" + he + "` of component `" + me + "` has invalid PropType notation inside objectOf.");
        var Ne = oe[k], ye = Fe(Ne);
        if (ye !== "object")
          return new T("Invalid " + Ce + " `" + he + "` of type " + ("`" + ye + "` supplied to `" + me + "`, expected an object."));
        for (var Ue in Ne)
          if (r(Ne, Ue)) {
            var Me = v(Ne, Ue, me, Ce, he + "." + Ue, n);
            if (Me instanceof Error)
              return Me;
          }
        return null;
      }
      return R(H);
    }
    function X(v) {
      if (!Array.isArray(v))
        return process.env.NODE_ENV !== "production" && i("Invalid argument supplied to oneOfType, expected an instance of array."), s;
      for (var H = 0; H < v.length; H++) {
        var oe = v[H];
        if (typeof oe != "function")
          return i(
            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + se(oe) + " at index " + H + "."
          ), s;
      }
      function k(me, Ce, he, Ne, ye) {
        for (var Ue = [], Me = 0; Me < v.length; Me++) {
          var Qe = v[Me], _e = Qe(me, Ce, he, Ne, ye, n);
          if (_e == null)
            return null;
          _e.data && r(_e.data, "expectedType") && Ue.push(_e.data.expectedType);
        }
        var je = Ue.length > 0 ? ", expected one of type [" + Ue.join(", ") + "]" : "";
        return new T("Invalid " + Ne + " `" + ye + "` supplied to " + ("`" + he + "`" + je + "."));
      }
      return R(k);
    }
    function $() {
      function v(H, oe, k, me, Ce) {
        return ge(H[oe]) ? null : new T("Invalid " + me + " `" + Ce + "` supplied to " + ("`" + k + "`, expected a ReactNode."));
      }
      return R(v);
    }
    function ae(v, H, oe, k, me) {
      return new T(
        (v || "React class") + ": " + H + " type `" + oe + "." + k + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + me + "`."
      );
    }
    function ce(v) {
      function H(oe, k, me, Ce, he) {
        var Ne = oe[k], ye = Fe(Ne);
        if (ye !== "object")
          return new T("Invalid " + Ce + " `" + he + "` of type `" + ye + "` " + ("supplied to `" + me + "`, expected `object`."));
        for (var Ue in v) {
          var Me = v[Ue];
          if (typeof Me != "function")
            return ae(me, Ce, he, Ue, ne(Me));
          var Qe = Me(Ne, Ue, me, Ce, he + "." + Ue, n);
          if (Qe)
            return Qe;
        }
        return null;
      }
      return R(H);
    }
    function ve(v) {
      function H(oe, k, me, Ce, he) {
        var Ne = oe[k], ye = Fe(Ne);
        if (ye !== "object")
          return new T("Invalid " + Ce + " `" + he + "` of type `" + ye + "` " + ("supplied to `" + me + "`, expected `object`."));
        var Ue = e({}, oe[k], v);
        for (var Me in Ue) {
          var Qe = v[Me];
          if (r(v, Me) && typeof Qe != "function")
            return ae(me, Ce, he, Me, ne(Qe));
          if (!Qe)
            return new T(
              "Invalid " + Ce + " `" + he + "` key `" + Me + "` supplied to `" + me + "`.\nBad object: " + JSON.stringify(oe[k], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(v), null, "  ")
            );
          var _e = Qe(Ne, Me, me, Ce, he + "." + Me, n);
          if (_e)
            return _e;
        }
        return null;
      }
      return R(H);
    }
    function ge(v) {
      switch (typeof v) {
        case "number":
        case "string":
        case "undefined":
          return !0;
        case "boolean":
          return !v;
        case "object":
          if (Array.isArray(v))
            return v.every(ge);
          if (v === null || l(v))
            return !0;
          var H = _(v);
          if (H) {
            var oe = H.call(v), k;
            if (H !== v.entries) {
              for (; !(k = oe.next()).done; )
                if (!ge(k.value))
                  return !1;
            } else
              for (; !(k = oe.next()).done; ) {
                var me = k.value;
                if (me && !ge(me[1]))
                  return !1;
              }
          } else
            return !1;
          return !0;
        default:
          return !1;
      }
    }
    function fe(v, H) {
      return v === "symbol" ? !0 : H ? H["@@toStringTag"] === "Symbol" || typeof Symbol == "function" && H instanceof Symbol : !1;
    }
    function Fe(v) {
      var H = typeof v;
      return Array.isArray(v) ? "array" : v instanceof RegExp ? "object" : fe(H, v) ? "symbol" : H;
    }
    function ne(v) {
      if (typeof v > "u" || v === null)
        return "" + v;
      var H = Fe(v);
      if (H === "object") {
        if (v instanceof Date)
          return "date";
        if (v instanceof RegExp)
          return "regexp";
      }
      return H;
    }
    function se(v) {
      var H = ne(v);
      switch (H) {
        case "array":
        case "object":
          return "an " + H;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + H;
        default:
          return H;
      }
    }
    function z(v) {
      return !v.constructor || !v.constructor.name ? f : v.constructor.name;
    }
    return g.checkPropTypes = a, g.resetWarningCache = a.resetWarningCache, g.PropTypes = g, g;
  }, U0;
}
var G0, sy;
function yF() {
  if (sy) return G0;
  sy = 1;
  var t = zE();
  function e() {
  }
  function n() {
  }
  return n.resetWarningCache = e, G0 = function() {
    function r(s, l, c, d, p, _) {
      if (_ !== t) {
        var f = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        throw f.name = "Invariant Violation", f;
      }
    }
    r.isRequired = r;
    function a() {
      return r;
    }
    var i = {
      array: r,
      bigint: r,
      bool: r,
      func: r,
      number: r,
      object: r,
      string: r,
      symbol: r,
      any: r,
      arrayOf: a,
      element: r,
      elementType: r,
      instanceOf: a,
      node: r,
      objectOf: a,
      oneOf: a,
      oneOfType: a,
      shape: a,
      exact: a,
      checkPropTypes: n,
      resetWarningCache: e
    };
    return i.PropTypes = i, i;
  }, G0;
}
if (process.env.NODE_ENV !== "production") {
  var vF = SI(), CF = !0;
  Ah.exports = TF()(vF.isElement, CF);
} else
  Ah.exports = yF()();
var TI = Ah.exports;
const At = /* @__PURE__ */ oo(TI);
function _o(t, e, n, r) {
  function a(i) {
    return i instanceof n ? i : new n(function(s) {
      s(i);
    });
  }
  return new (n || (n = Promise))(function(i, s) {
    function l(p) {
      try {
        d(r.next(p));
      } catch (_) {
        s(_);
      }
    }
    function c(p) {
      try {
        d(r.throw(p));
      } catch (_) {
        s(_);
      }
    }
    function d(p) {
      p.done ? i(p.value) : a(p.value).then(l, c);
    }
    d((r = r.apply(t, e || [])).next());
  });
}
function mo(t, e) {
  var n = { label: 0, sent: function() {
    if (i[0] & 1) throw i[1];
    return i[1];
  }, trys: [], ops: [] }, r, a, i, s;
  return s = { next: l(0), throw: l(1), return: l(2) }, typeof Symbol == "function" && (s[Symbol.iterator] = function() {
    return this;
  }), s;
  function l(d) {
    return function(p) {
      return c([d, p]);
    };
  }
  function c(d) {
    if (r) throw new TypeError("Generator is already executing.");
    for (; s && (s = 0, d[0] && (n = 0)), n; ) try {
      if (r = 1, a && (i = d[0] & 2 ? a.return : d[0] ? a.throw || ((i = a.return) && i.call(a), 0) : a.next) && !(i = i.call(a, d[1])).done) return i;
      switch (a = 0, i && (d = [d[0] & 2, i.value]), d[0]) {
        case 0:
        case 1:
          i = d;
          break;
        case 4:
          return n.label++, { value: d[1], done: !1 };
        case 5:
          n.label++, a = d[1], d = [0];
          continue;
        case 7:
          d = n.ops.pop(), n.trys.pop();
          continue;
        default:
          if (i = n.trys, !(i = i.length > 0 && i[i.length - 1]) && (d[0] === 6 || d[0] === 2)) {
            n = 0;
            continue;
          }
          if (d[0] === 3 && (!i || d[1] > i[0] && d[1] < i[3])) {
            n.label = d[1];
            break;
          }
          if (d[0] === 6 && n.label < i[1]) {
            n.label = i[1], i = d;
            break;
          }
          if (i && n.label < i[2]) {
            n.label = i[2], n.ops.push(d);
            break;
          }
          i[2] && n.ops.pop(), n.trys.pop();
          continue;
      }
      d = e.call(t, n);
    } catch (p) {
      d = [6, p], a = 0;
    } finally {
      r = i = 0;
    }
    if (d[0] & 5) throw d[1];
    return { value: d[0] ? d[1] : void 0, done: !0 };
  }
}
function oy(t, e) {
  var n = typeof Symbol == "function" && t[Symbol.iterator];
  if (!n) return t;
  var r = n.call(t), a, i = [], s;
  try {
    for (; (e === void 0 || e-- > 0) && !(a = r.next()).done; ) i.push(a.value);
  } catch (l) {
    s = { error: l };
  } finally {
    try {
      a && !a.done && (n = r.return) && n.call(r);
    } finally {
      if (s) throw s.error;
    }
  }
  return i;
}
function ly(t, e, n) {
  if (n || arguments.length === 2) for (var r = 0, a = e.length, i; r < a; r++)
    (i || !(r in e)) && (i || (i = Array.prototype.slice.call(e, 0, r)), i[r] = e[r]);
  return t.concat(i || Array.prototype.slice.call(e));
}
var RF = /* @__PURE__ */ new Map([
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
  ["aac", "audio/aac"],
  ["abw", "application/x-abiword"],
  ["arc", "application/x-freearc"],
  ["avif", "image/avif"],
  ["avi", "video/x-msvideo"],
  ["azw", "application/vnd.amazon.ebook"],
  ["bin", "application/octet-stream"],
  ["bmp", "image/bmp"],
  ["bz", "application/x-bzip"],
  ["bz2", "application/x-bzip2"],
  ["cda", "application/x-cdf"],
  ["csh", "application/x-csh"],
  ["css", "text/css"],
  ["csv", "text/csv"],
  ["doc", "application/msword"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
  ["eot", "application/vnd.ms-fontobject"],
  ["epub", "application/epub+zip"],
  ["gz", "application/gzip"],
  ["gif", "image/gif"],
  ["heic", "image/heic"],
  ["heif", "image/heif"],
  ["htm", "text/html"],
  ["html", "text/html"],
  ["ico", "image/vnd.microsoft.icon"],
  ["ics", "text/calendar"],
  ["jar", "application/java-archive"],
  ["jpeg", "image/jpeg"],
  ["jpg", "image/jpeg"],
  ["js", "text/javascript"],
  ["json", "application/json"],
  ["jsonld", "application/ld+json"],
  ["mid", "audio/midi"],
  ["midi", "audio/midi"],
  ["mjs", "text/javascript"],
  ["mp3", "audio/mpeg"],
  ["mp4", "video/mp4"],
  ["mpeg", "video/mpeg"],
  ["mpkg", "application/vnd.apple.installer+xml"],
  ["odp", "application/vnd.oasis.opendocument.presentation"],
  ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
  ["odt", "application/vnd.oasis.opendocument.text"],
  ["oga", "audio/ogg"],
  ["ogv", "video/ogg"],
  ["ogx", "application/ogg"],
  ["opus", "audio/opus"],
  ["otf", "font/otf"],
  ["png", "image/png"],
  ["pdf", "application/pdf"],
  ["php", "application/x-httpd-php"],
  ["ppt", "application/vnd.ms-powerpoint"],
  ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
  ["rar", "application/vnd.rar"],
  ["rtf", "application/rtf"],
  ["sh", "application/x-sh"],
  ["svg", "image/svg+xml"],
  ["swf", "application/x-shockwave-flash"],
  ["tar", "application/x-tar"],
  ["tif", "image/tiff"],
  ["tiff", "image/tiff"],
  ["ts", "video/mp2t"],
  ["ttf", "font/ttf"],
  ["txt", "text/plain"],
  ["vsd", "application/vnd.visio"],
  ["wav", "audio/wav"],
  ["weba", "audio/webm"],
  ["webm", "video/webm"],
  ["webp", "image/webp"],
  ["woff", "font/woff"],
  ["woff2", "font/woff2"],
  ["xhtml", "application/xhtml+xml"],
  ["xls", "application/vnd.ms-excel"],
  ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  ["xml", "application/xml"],
  ["xul", "application/vnd.mozilla.xul+xml"],
  ["zip", "application/zip"],
  ["7z", "application/x-7z-compressed"],
  // Others
  ["mkv", "video/x-matroska"],
  ["mov", "video/quicktime"],
  ["msg", "application/vnd.ms-outlook"]
]);
function $l(t, e) {
  var n = AF(t);
  if (typeof n.path != "string") {
    var r = t.webkitRelativePath;
    Object.defineProperty(n, "path", {
      value: typeof e == "string" ? e : typeof r == "string" && r.length > 0 ? r : t.name,
      writable: !1,
      configurable: !1,
      enumerable: !0
    });
  }
  return n;
}
function AF(t) {
  var e = t.name, n = e && e.lastIndexOf(".") !== -1;
  if (n && !t.type) {
    var r = e.split(".").pop().toLowerCase(), a = RF.get(r);
    a && Object.defineProperty(t, "type", {
      value: a,
      writable: !1,
      configurable: !1,
      enumerable: !0
    });
  }
  return t;
}
var OF = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  "Thumbs.db"
  // Windows
];
function NF(t) {
  return _o(this, void 0, void 0, function() {
    return mo(this, function(e) {
      return Xu(t) && IF(t.dataTransfer) ? [2, LF(t.dataTransfer, t.type)] : xF(t) ? [2, DF(t)] : Array.isArray(t) && t.every(function(n) {
        return "getFile" in n && typeof n.getFile == "function";
      }) ? [2, wF(t)] : [2, []];
    });
  });
}
function IF(t) {
  return Xu(t);
}
function xF(t) {
  return Xu(t) && Xu(t.target);
}
function Xu(t) {
  return typeof t == "object" && t !== null;
}
function DF(t) {
  return Oh(t.target.files).map(function(e) {
    return $l(e);
  });
}
function wF(t) {
  return _o(this, void 0, void 0, function() {
    var e;
    return mo(this, function(n) {
      switch (n.label) {
        case 0:
          return [4, Promise.all(t.map(function(r) {
            return r.getFile();
          }))];
        case 1:
          return e = n.sent(), [2, e.map(function(r) {
            return $l(r);
          })];
      }
    });
  });
}
function LF(t, e) {
  return _o(this, void 0, void 0, function() {
    var n, r;
    return mo(this, function(a) {
      switch (a.label) {
        case 0:
          return t.items ? (n = Oh(t.items).filter(function(i) {
            return i.kind === "file";
          }), e !== "drop" ? [2, n] : [4, Promise.all(n.map(MF))]) : [3, 2];
        case 1:
          return r = a.sent(), [2, cy(yI(r))];
        case 2:
          return [2, cy(Oh(t.files).map(function(i) {
            return $l(i);
          }))];
      }
    });
  });
}
function cy(t) {
  return t.filter(function(e) {
    return OF.indexOf(e.name) === -1;
  });
}
function Oh(t) {
  if (t === null)
    return [];
  for (var e = [], n = 0; n < t.length; n++) {
    var r = t[n];
    e.push(r);
  }
  return e;
}
function MF(t) {
  if (typeof t.webkitGetAsEntry != "function")
    return uy(t);
  var e = t.webkitGetAsEntry();
  return e && e.isDirectory ? vI(e) : uy(t);
}
function yI(t) {
  return t.reduce(function(e, n) {
    return ly(ly([], oy(e), !1), oy(Array.isArray(n) ? yI(n) : [n]), !1);
  }, []);
}
function uy(t) {
  var e = t.getAsFile();
  if (!e)
    return Promise.reject("".concat(t, " is not a File"));
  var n = $l(e);
  return Promise.resolve(n);
}
function kF(t) {
  return _o(this, void 0, void 0, function() {
    return mo(this, function(e) {
      return [2, t.isDirectory ? vI(t) : PF(t)];
    });
  });
}
function vI(t) {
  var e = t.createReader();
  return new Promise(function(n, r) {
    var a = [];
    function i() {
      var s = this;
      e.readEntries(function(l) {
        return _o(s, void 0, void 0, function() {
          var c, d, p;
          return mo(this, function(_) {
            switch (_.label) {
              case 0:
                if (l.length) return [3, 5];
                _.label = 1;
              case 1:
                return _.trys.push([1, 3, , 4]), [4, Promise.all(a)];
              case 2:
                return c = _.sent(), n(c), [3, 4];
              case 3:
                return d = _.sent(), r(d), [3, 4];
              case 4:
                return [3, 6];
              case 5:
                p = Promise.all(l.map(kF)), a.push(p), i(), _.label = 6;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, function(l) {
        r(l);
      });
    }
    i();
  });
}
function PF(t) {
  return _o(this, void 0, void 0, function() {
    return mo(this, function(e) {
      return [2, new Promise(function(n, r) {
        t.file(function(a) {
          var i = $l(a, t.fullPath);
          n(i);
        }, function(a) {
          r(a);
        });
      })];
    });
  });
}
var FF = function(t, e) {
  if (t && e) {
    var n = Array.isArray(e) ? e : e.split(","), r = t.name || "", a = (t.type || "").toLowerCase(), i = a.replace(/\/.*$/, "");
    return n.some(function(s) {
      var l = s.trim().toLowerCase();
      return l.charAt(0) === "." ? r.toLowerCase().endsWith(l) : l.endsWith("/*") ? i === l.replace(/\/.*$/, "") : a === l;
    });
  }
  return !0;
};
function dy(t) {
  return GF(t) || UF(t) || RI(t) || BF();
}
function BF() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function UF(t) {
  if (typeof Symbol < "u" && t[Symbol.iterator] != null || t["@@iterator"] != null) return Array.from(t);
}
function GF(t) {
  if (Array.isArray(t)) return Nh(t);
}
function py(t, e) {
  var n = Object.keys(t);
  if (Object.getOwnPropertySymbols) {
    var r = Object.getOwnPropertySymbols(t);
    e && (r = r.filter(function(a) {
      return Object.getOwnPropertyDescriptor(t, a).enumerable;
    })), n.push.apply(n, r);
  }
  return n;
}
function _y(t) {
  for (var e = 1; e < arguments.length; e++) {
    var n = arguments[e] != null ? arguments[e] : {};
    e % 2 ? py(Object(n), !0).forEach(function(r) {
      CI(t, r, n[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : py(Object(n)).forEach(function(r) {
      Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(n, r));
    });
  }
  return t;
}
function CI(t, e, n) {
  return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function wl(t, e) {
  return zF(t) || YF(t, e) || RI(t, e) || HF();
}
function HF() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function RI(t, e) {
  if (t) {
    if (typeof t == "string") return Nh(t, e);
    var n = Object.prototype.toString.call(t).slice(8, -1);
    if (n === "Object" && t.constructor && (n = t.constructor.name), n === "Map" || n === "Set") return Array.from(t);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Nh(t, e);
  }
}
function Nh(t, e) {
  (e == null || e > t.length) && (e = t.length);
  for (var n = 0, r = new Array(e); n < e; n++)
    r[n] = t[n];
  return r;
}
function YF(t, e) {
  var n = t == null ? null : typeof Symbol < "u" && t[Symbol.iterator] || t["@@iterator"];
  if (n != null) {
    var r = [], a = !0, i = !1, s, l;
    try {
      for (n = n.call(t); !(a = (s = n.next()).done) && (r.push(s.value), !(e && r.length === e)); a = !0)
        ;
    } catch (c) {
      i = !0, l = c;
    } finally {
      try {
        !a && n.return != null && n.return();
      } finally {
        if (i) throw l;
      }
    }
    return r;
  }
}
function zF(t) {
  if (Array.isArray(t)) return t;
}
var qF = "file-invalid-type", VF = "file-too-large", $F = "file-too-small", WF = "too-many-files", KF = function(e) {
  e = Array.isArray(e) && e.length === 1 ? e[0] : e;
  var n = Array.isArray(e) ? "one of ".concat(e.join(", ")) : e;
  return {
    code: qF,
    message: "File type must be ".concat(n)
  };
}, my = function(e) {
  return {
    code: VF,
    message: "File is larger than ".concat(e, " ").concat(e === 1 ? "byte" : "bytes")
  };
}, fy = function(e) {
  return {
    code: $F,
    message: "File is smaller than ".concat(e, " ").concat(e === 1 ? "byte" : "bytes")
  };
}, QF = {
  code: WF,
  message: "Too many files"
};
function AI(t, e) {
  var n = t.type === "application/x-moz-file" || FF(t, e);
  return [n, n ? null : KF(e)];
}
function OI(t, e, n) {
  if (cs(t.size))
    if (cs(e) && cs(n)) {
      if (t.size > n) return [!1, my(n)];
      if (t.size < e) return [!1, fy(e)];
    } else {
      if (cs(e) && t.size < e) return [!1, fy(e)];
      if (cs(n) && t.size > n) return [!1, my(n)];
    }
  return [!0, null];
}
function cs(t) {
  return t != null;
}
function jF(t) {
  var e = t.files, n = t.accept, r = t.minSize, a = t.maxSize, i = t.multiple, s = t.maxFiles, l = t.validator;
  return !i && e.length > 1 || i && s >= 1 && e.length > s ? !1 : e.every(function(c) {
    var d = AI(c, n), p = wl(d, 1), _ = p[0], f = OI(c, r, a), g = wl(f, 1), E = g[0], T = l ? l(c) : null;
    return _ && E && !T;
  });
}
function Zu(t) {
  return typeof t.isPropagationStopped == "function" ? t.isPropagationStopped() : typeof t.cancelBubble < "u" ? t.cancelBubble : !1;
}
function gu(t) {
  return t.dataTransfer ? Array.prototype.some.call(t.dataTransfer.types, function(e) {
    return e === "Files" || e === "application/x-moz-file";
  }) : !!t.target && !!t.target.files;
}
function gy(t) {
  t.preventDefault();
}
function XF(t) {
  return t.indexOf("MSIE") !== -1 || t.indexOf("Trident/") !== -1;
}
function ZF(t) {
  return t.indexOf("Edge/") !== -1;
}
function JF() {
  var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return XF(t) || ZF(t);
}
function Oa() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  return function(r) {
    for (var a = arguments.length, i = new Array(a > 1 ? a - 1 : 0), s = 1; s < a; s++)
      i[s - 1] = arguments[s];
    return e.some(function(l) {
      return !Zu(r) && l && l.apply(void 0, [r].concat(i)), Zu(r);
    });
  };
}
function eB() {
  return "showOpenFilePicker" in window;
}
function tB(t) {
  if (cs(t)) {
    var e = Object.entries(t).filter(function(n) {
      var r = wl(n, 2), a = r[0], i = r[1], s = !0;
      return NI(a) || (console.warn('Skipped "'.concat(a, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.')), s = !1), (!Array.isArray(i) || !i.every(II)) && (console.warn('Skipped "'.concat(a, '" because an invalid file extension was provided.')), s = !1), s;
    }).reduce(function(n, r) {
      var a = wl(r, 2), i = a[0], s = a[1];
      return _y(_y({}, n), {}, CI({}, i, s));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: e
    }];
  }
  return t;
}
function nB(t) {
  if (cs(t))
    return Object.entries(t).reduce(function(e, n) {
      var r = wl(n, 2), a = r[0], i = r[1];
      return [].concat(dy(e), [a], dy(i));
    }, []).filter(function(e) {
      return NI(e) || II(e);
    }).join(",");
}
function rB(t) {
  return t instanceof DOMException && (t.name === "AbortError" || t.code === t.ABORT_ERR);
}
function aB(t) {
  return t instanceof DOMException && (t.name === "SecurityError" || t.code === t.SECURITY_ERR);
}
function NI(t) {
  return t === "audio/*" || t === "video/*" || t === "image/*" || t === "text/*" || /\w+\/[-+.\w]+/g.test(t);
}
function II(t) {
  return /^.*\.[\w]+$/.test(t);
}
var iB = ["children"], sB = ["open"], oB = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"], lB = ["refKey", "onChange", "onClick"];
function cB(t) {
  return pB(t) || dB(t) || xI(t) || uB();
}
function uB() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function dB(t) {
  if (typeof Symbol < "u" && t[Symbol.iterator] != null || t["@@iterator"] != null) return Array.from(t);
}
function pB(t) {
  if (Array.isArray(t)) return Ih(t);
}
function H0(t, e) {
  return fB(t) || mB(t, e) || xI(t, e) || _B();
}
function _B() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function xI(t, e) {
  if (t) {
    if (typeof t == "string") return Ih(t, e);
    var n = Object.prototype.toString.call(t).slice(8, -1);
    if (n === "Object" && t.constructor && (n = t.constructor.name), n === "Map" || n === "Set") return Array.from(t);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Ih(t, e);
  }
}
function Ih(t, e) {
  (e == null || e > t.length) && (e = t.length);
  for (var n = 0, r = new Array(e); n < e; n++)
    r[n] = t[n];
  return r;
}
function mB(t, e) {
  var n = t == null ? null : typeof Symbol < "u" && t[Symbol.iterator] || t["@@iterator"];
  if (n != null) {
    var r = [], a = !0, i = !1, s, l;
    try {
      for (n = n.call(t); !(a = (s = n.next()).done) && (r.push(s.value), !(e && r.length === e)); a = !0)
        ;
    } catch (c) {
      i = !0, l = c;
    } finally {
      try {
        !a && n.return != null && n.return();
      } finally {
        if (i) throw l;
      }
    }
    return r;
  }
}
function fB(t) {
  if (Array.isArray(t)) return t;
}
function hy(t, e) {
  var n = Object.keys(t);
  if (Object.getOwnPropertySymbols) {
    var r = Object.getOwnPropertySymbols(t);
    e && (r = r.filter(function(a) {
      return Object.getOwnPropertyDescriptor(t, a).enumerable;
    })), n.push.apply(n, r);
  }
  return n;
}
function bn(t) {
  for (var e = 1; e < arguments.length; e++) {
    var n = arguments[e] != null ? arguments[e] : {};
    e % 2 ? hy(Object(n), !0).forEach(function(r) {
      xh(t, r, n[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : hy(Object(n)).forEach(function(r) {
      Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(n, r));
    });
  }
  return t;
}
function xh(t, e, n) {
  return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Ju(t, e) {
  if (t == null) return {};
  var n = gB(t, e), r, a;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(t);
    for (a = 0; a < i.length; a++)
      r = i[a], !(e.indexOf(r) >= 0) && Object.prototype.propertyIsEnumerable.call(t, r) && (n[r] = t[r]);
  }
  return n;
}
function gB(t, e) {
  if (t == null) return {};
  var n = {}, r = Object.keys(t), a, i;
  for (i = 0; i < r.length; i++)
    a = r[i], !(e.indexOf(a) >= 0) && (n[a] = t[a]);
  return n;
}
var qE = /* @__PURE__ */ fP(function(t, e) {
  var n = t.children, r = Ju(t, iB), a = wI(r), i = a.open, s = Ju(a, sB);
  return gP(e, function() {
    return {
      open: i
    };
  }, [i]), /* @__PURE__ */ $e.createElement(hP, null, n(bn(bn({}, s), {}, {
    open: i
  })));
});
qE.displayName = "Dropzone";
var DI = {
  disabled: !1,
  getFilesFromEvent: NF,
  maxSize: 1 / 0,
  minSize: 0,
  multiple: !0,
  maxFiles: 0,
  preventDropOnDocument: !0,
  noClick: !1,
  noKeyboard: !1,
  noDrag: !1,
  noDragEventsBubbling: !1,
  validator: null,
  useFsAccessApi: !0,
  autoFocus: !1
};
qE.defaultProps = DI;
qE.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */
  children: At.func,
  /**
   * Set accepted file types.
   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
   */
  accept: At.objectOf(At.arrayOf(At.string)),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: At.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: At.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: At.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: At.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: At.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: At.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: At.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: At.number,
  /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */
  maxFiles: At.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: At.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: At.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: At.func,
  /**
   * Cb for when opening the file dialog
   */
  onFileDialogOpen: At.func,
  /**
   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
   * to open the file picker instead of using an `<input type="file">` click event.
   */
  useFsAccessApi: At.bool,
  /**
   * Set to true to focus the root element on render
   */
  autoFocus: At.bool,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: At.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: At.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: At.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: At.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: At.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: At.func,
  /**
   * Cb for when there's some error from any of the promises.
   *
   * @param {Error} error
   */
  onError: At.func,
  /**
   * Custom validation function. It must return null if there's no errors.
   * @param {File} file
   * @returns {FileError|FileError[]|null}
   */
  validator: At.func
};
var Dh = {
  isFocused: !1,
  isFileDialogActive: !1,
  isDragActive: !1,
  isDragAccept: !1,
  isDragReject: !1,
  acceptedFiles: [],
  fileRejections: []
};
function wI() {
  var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = bn(bn({}, DI), t), n = e.accept, r = e.disabled, a = e.getFilesFromEvent, i = e.maxSize, s = e.minSize, l = e.multiple, c = e.maxFiles, d = e.onDragEnter, p = e.onDragLeave, _ = e.onDragOver, f = e.onDrop, g = e.onDropAccepted, E = e.onDropRejected, T = e.onFileDialogCancel, R = e.onFileDialogOpen, A = e.useFsAccessApi, I = e.autoFocus, x = e.preventDropOnDocument, P = e.noClick, D = e.noKeyboard, L = e.noDrag, K = e.noDragEventsBubbling, J = e.onError, X = e.validator, $ = Cn(function() {
    return nB(n);
  }, [n]), ae = Cn(function() {
    return tB(n);
  }, [n]), ce = Cn(function() {
    return typeof R == "function" ? R : Ey;
  }, [R]), ve = Cn(function() {
    return typeof T == "function" ? T : Ey;
  }, [T]), ge = un(null), fe = un(null), Fe = mP(hB, Dh), ne = H0(Fe, 2), se = ne[0], z = ne[1], v = se.isFocused, H = se.isFileDialogActive, oe = un(typeof window < "u" && window.isSecureContext && A && eB()), k = function() {
    !oe.current && H && setTimeout(function() {
      if (fe.current) {
        var j = fe.current.files;
        j.length || (z({
          type: "closeDialog"
        }), ve());
      }
    }, 300);
  };
  wn(function() {
    return window.addEventListener("focus", k, !1), function() {
      window.removeEventListener("focus", k, !1);
    };
  }, [fe, H, ve, oe]);
  var me = un([]), Ce = function(j) {
    ge.current && ge.current.contains(j.target) || (j.preventDefault(), me.current = []);
  };
  wn(function() {
    return x && (document.addEventListener("dragover", gy, !1), document.addEventListener("drop", Ce, !1)), function() {
      x && (document.removeEventListener("dragover", gy), document.removeEventListener("drop", Ce));
    };
  }, [ge, x]), wn(function() {
    return !r && I && ge.current && ge.current.focus(), function() {
    };
  }, [ge, I, r]);
  var he = dt(function(Oe) {
    J ? J(Oe) : console.error(Oe);
  }, [J]), Ne = dt(function(Oe) {
    Oe.preventDefault(), Oe.persist(), Gt(Oe), me.current = [].concat(cB(me.current), [Oe.target]), gu(Oe) && Promise.resolve(a(Oe)).then(function(j) {
      if (!(Zu(Oe) && !K)) {
        var Se = j.length, ue = Se > 0 && jF({
          files: j,
          accept: $,
          minSize: s,
          maxSize: i,
          multiple: l,
          maxFiles: c,
          validator: X
        }), be = Se > 0 && !ue;
        z({
          isDragAccept: ue,
          isDragReject: be,
          isDragActive: !0,
          type: "setDraggedFiles"
        }), d && d(Oe);
      }
    }).catch(function(j) {
      return he(j);
    });
  }, [a, d, he, K, $, s, i, l, c, X]), ye = dt(function(Oe) {
    Oe.preventDefault(), Oe.persist(), Gt(Oe);
    var j = gu(Oe);
    if (j && Oe.dataTransfer)
      try {
        Oe.dataTransfer.dropEffect = "copy";
      } catch {
      }
    return j && _ && _(Oe), !1;
  }, [_, K]), Ue = dt(function(Oe) {
    Oe.preventDefault(), Oe.persist(), Gt(Oe);
    var j = me.current.filter(function(ue) {
      return ge.current && ge.current.contains(ue);
    }), Se = j.indexOf(Oe.target);
    Se !== -1 && j.splice(Se, 1), me.current = j, !(j.length > 0) && (z({
      type: "setDraggedFiles",
      isDragActive: !1,
      isDragAccept: !1,
      isDragReject: !1
    }), gu(Oe) && p && p(Oe));
  }, [ge, p, K]), Me = dt(function(Oe, j) {
    var Se = [], ue = [];
    Oe.forEach(function(be) {
      var Ge = AI(be, $), Ze = H0(Ge, 2), vt = Ze[0], Pt = Ze[1], Ln = OI(be, s, i), Rn = H0(Ln, 2), nn = Rn[0], Fn = Rn[1], ut = X ? X(be) : null;
      if (vt && nn && !ut)
        Se.push(be);
      else {
        var wr = [Pt, Fn];
        ut && (wr = wr.concat(ut)), ue.push({
          file: be,
          errors: wr.filter(function(br) {
            return br;
          })
        });
      }
    }), (!l && Se.length > 1 || l && c >= 1 && Se.length > c) && (Se.forEach(function(be) {
      ue.push({
        file: be,
        errors: [QF]
      });
    }), Se.splice(0)), z({
      acceptedFiles: Se,
      fileRejections: ue,
      type: "setFiles"
    }), f && f(Se, ue, j), ue.length > 0 && E && E(ue, j), Se.length > 0 && g && g(Se, j);
  }, [z, l, $, s, i, c, f, g, E, X]), Qe = dt(function(Oe) {
    Oe.preventDefault(), Oe.persist(), Gt(Oe), me.current = [], gu(Oe) && Promise.resolve(a(Oe)).then(function(j) {
      Zu(Oe) && !K || Me(j, Oe);
    }).catch(function(j) {
      return he(j);
    }), z({
      type: "reset"
    });
  }, [a, Me, he, K]), _e = dt(function() {
    if (oe.current) {
      z({
        type: "openDialog"
      }), ce();
      var Oe = {
        multiple: l,
        types: ae
      };
      window.showOpenFilePicker(Oe).then(function(j) {
        return a(j);
      }).then(function(j) {
        Me(j, null), z({
          type: "closeDialog"
        });
      }).catch(function(j) {
        rB(j) ? (ve(j), z({
          type: "closeDialog"
        })) : aB(j) ? (oe.current = !1, fe.current ? (fe.current.value = null, fe.current.click()) : he(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."))) : he(j);
      });
      return;
    }
    fe.current && (z({
      type: "openDialog"
    }), ce(), fe.current.value = null, fe.current.click());
  }, [z, ce, ve, A, Me, he, ae, l]), je = dt(function(Oe) {
    !ge.current || !ge.current.isEqualNode(Oe.target) || (Oe.key === " " || Oe.key === "Enter" || Oe.keyCode === 32 || Oe.keyCode === 13) && (Oe.preventDefault(), _e());
  }, [ge, _e]), et = dt(function() {
    z({
      type: "focus"
    });
  }, []), nt = dt(function() {
    z({
      type: "blur"
    });
  }, []), mt = dt(function() {
    P || (JF() ? setTimeout(_e, 0) : _e());
  }, [P, _e]), bt = function(j) {
    return r ? null : j;
  }, _t = function(j) {
    return D ? null : bt(j);
  }, He = function(j) {
    return L ? null : bt(j);
  }, Gt = function(j) {
    K && j.stopPropagation();
  }, pt = Cn(function() {
    return function() {
      var Oe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, j = Oe.refKey, Se = j === void 0 ? "ref" : j, ue = Oe.role, be = Oe.onKeyDown, Ge = Oe.onFocus, Ze = Oe.onBlur, vt = Oe.onClick, Pt = Oe.onDragEnter, Ln = Oe.onDragOver, Rn = Oe.onDragLeave, nn = Oe.onDrop, Fn = Ju(Oe, oB);
      return bn(bn(xh({
        onKeyDown: _t(Oa(be, je)),
        onFocus: _t(Oa(Ge, et)),
        onBlur: _t(Oa(Ze, nt)),
        onClick: bt(Oa(vt, mt)),
        onDragEnter: He(Oa(Pt, Ne)),
        onDragOver: He(Oa(Ln, ye)),
        onDragLeave: He(Oa(Rn, Ue)),
        onDrop: He(Oa(nn, Qe)),
        role: typeof ue == "string" && ue !== "" ? ue : "presentation"
      }, Se, ge), !r && !D ? {
        tabIndex: 0
      } : {}), Fn);
    };
  }, [ge, je, et, nt, mt, Ne, ye, Ue, Qe, D, L, r]), Be = dt(function(Oe) {
    Oe.stopPropagation();
  }, []), It = Cn(function() {
    return function() {
      var Oe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, j = Oe.refKey, Se = j === void 0 ? "ref" : j, ue = Oe.onChange, be = Oe.onClick, Ge = Ju(Oe, lB), Ze = xh({
        accept: $,
        multiple: l,
        type: "file",
        style: {
          display: "none"
        },
        onChange: bt(Oa(ue, Qe)),
        onClick: bt(Oa(be, Be)),
        tabIndex: -1
      }, Se, fe);
      return bn(bn({}, Ze), Ge);
    };
  }, [fe, n, l, Qe, r]);
  return bn(bn({}, se), {}, {
    isFocused: v && !r,
    getRootProps: pt,
    getInputProps: It,
    rootRef: ge,
    inputRef: fe,
    open: bt(_e)
  });
}
function hB(t, e) {
  switch (e.type) {
    case "focus":
      return bn(bn({}, t), {}, {
        isFocused: !0
      });
    case "blur":
      return bn(bn({}, t), {}, {
        isFocused: !1
      });
    case "openDialog":
      return bn(bn({}, Dh), {}, {
        isFileDialogActive: !0
      });
    case "closeDialog":
      return bn(bn({}, t), {}, {
        isFileDialogActive: !1
      });
    case "setDraggedFiles":
      return bn(bn({}, t), {}, {
        isDragActive: e.isDragActive,
        isDragAccept: e.isDragAccept,
        isDragReject: e.isDragReject
      });
    case "setFiles":
      return bn(bn({}, t), {}, {
        acceptedFiles: e.acceptedFiles,
        fileRejections: e.fileRejections
      });
    case "reset":
      return bn({}, Dh);
    default:
      return t;
  }
}
function Ey() {
}
const VE = ({ onError: t, onResolved: e, options: n, spec: r }) => {
  const a = dt(
    (p, _) => {
      if (_.length > 0 && (_[0].errors[0].code === "file-too-large" ? t && t(`File is larger than ${r.max_size_mb} MB`) : t && t(_[0].errors[0].message)), !!p.length)
        return e(p);
    },
    [r]
  );
  let i = {};
  const s = r.accept;
  Array.isArray(s) ? s.forEach((p) => {
    typeof p == "string" && (i[p] = []);
  }) : typeof s == "object" && (i = s);
  const { getRootProps: l, getInputProps: c, isDragActive: d } = wI({
    onDrop: a,
    maxFiles: r.max_files || void 0,
    accept: i,
    maxSize: (r.max_size_mb || 2) * 1e6,
    ...n
  });
  return { getInputProps: c, getRootProps: l, isDragActive: d };
}, EB = ({
  askUser: t,
  uploadFile: e,
  onError: n
}) => {
  const [r, a] = Hn([]), i = r.some((_) => !_.uploaded), s = r.reduce(
    (_, f) => _ + f.progress / r.length,
    0
  ), l = (_) => {
    if (i) return;
    const f = [], g = _.map((E, T) => {
      const { xhr: R, promise: A } = e(E, (I) => {
        a(
          (x) => x.map((P, D) => D === T ? { ...P, progress: I } : P)
        );
      });
      return f.push(A), { progress: 0, uploaded: !1, cancel: () => R.abort() };
    });
    Promise.all(f).then((E) => t.callback(E)).catch((E) => {
      n(`Failed to upload: ${E.message}`), a((T) => (T.forEach((R) => R.cancel()), []));
    }), a(g);
  }, c = VE({
    spec: t.spec,
    onResolved: l,
    onError: (_) => n(_)
  });
  if (!c) return null;
  const { getRootProps: d, getInputProps: p } = c;
  return /* @__PURE__ */ C.jsxs(
    fn,
    {
      sx: {
        width: "100%",
        borderRadius: 1,
        backgroundColor: (_) => _.palette.background.paper,
        boxSizing: "border-box",
        mt: 1
      },
      direction: "row",
      alignItems: "center",
      padding: 2,
      ...d({ className: "dropzone" }),
      children: [
        /* @__PURE__ */ C.jsx("input", { id: "ask-button-input", ...p() }),
        /* @__PURE__ */ C.jsxs(fn, { children: [
          /* @__PURE__ */ C.jsx(_s, { color: "text.primary", children: "Drag and drop files here" }),
          /* @__PURE__ */ C.jsxs(_s, { variant: "caption", color: "text.secondary", children: [
            "Limit ",
            t.spec.max_size_mb,
            "mb."
          ] })
        ] }),
        /* @__PURE__ */ C.jsx(
          Td,
          {
            id: i ? "ask-upload-button-loading" : "ask-upload-button",
            disabled: i,
            sx: { ml: "auto !important", textTransform: "capitalize" },
            variant: "contained",
            children: i ? /* @__PURE__ */ C.jsx(y2, { variant: "determinate", value: s, size: 20 }) : "Browse Files"
          }
        )
      ]
    }
  );
}, SB = ({ onError: t }) => {
  const e = qn(Hi);
  return e.askUser?.spec.type !== "file" || !e?.uploadFile ? null : /* @__PURE__ */ C.jsx(
    EB,
    {
      onError: t,
      uploadFile: e.uploadFile,
      askUser: e.askUser
    }
  );
}, bB = ({ author: t, hide: e }) => {
  const n = qn(Yi), { chatProfile: r } = xd(), { config: a } = ua(), i = Cn(() => a?.chatProfiles.find((l) => l.name === r), [a, r]), s = Cn(() => (!t || t === a?.ui.name) && i?.icon ? i.icon : n?.buildEndpoint(`/avatars/${t || "default"}`), [n, i, a, t]);
  return /* @__PURE__ */ C.jsx("span", { className: "message-avatar", children: /* @__PURE__ */ C.jsx(Nl, { title: t, children: /* @__PURE__ */ C.jsx(
    PP,
    {
      sx: {
        width: "1.6rem",
        height: "1.6rem",
        bgcolor: "transparent"
      },
      src: e ? void 0 : s
    }
  ) }) });
}, LI = ({ action: t, margin: e, onClick: n }) => {
  const { askUser: r, loading: a } = qn(Hi), i = r?.spec.type === "action", s = i && !r?.spec.keys?.includes(t.id), l = () => {
    i ? r?.callback(t) : (t.onClick(), n?.());
  };
  return /* @__PURE__ */ C.jsx(ba, { title: t.description, placement: "top", children: /* @__PURE__ */ C.jsx("span", { children: /* @__PURE__ */ C.jsx(
    Td,
    {
      size: "small",
      variant: "outlined",
      sx: {
        textTransform: "none",
        margin: e
      },
      id: t.id,
      onClick: l,
      disabled: a || s,
      children: t.label || t.name
    }
  ) }) });
}, Sy = "16px", TB = ({ actions: t }) => {
  const [e, n] = Hn(null);
  return /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
    /* @__PURE__ */ C.jsx(ba, { title: "More Actions", children: /* @__PURE__ */ C.jsx(
      zr,
      {
        id: "actions-drawer-button",
        onClick: (r) => n(r.currentTarget),
        children: /* @__PURE__ */ C.jsx(FP, { sx: { width: Sy, height: Sy } })
      }
    ) }),
    /* @__PURE__ */ C.jsx(
      BP,
      {
        id: "actions-menu",
        anchorEl: e,
        open: !!e,
        onClose: () => n(null),
        sx: { marginTop: 1 },
        slotProps: {
          paper: {
            sx: {
              boxShadow: (r) => r.palette.mode === "light" ? "0px 2px 4px 0px #0000000D" : "0px 10px 10px 0px #0000000D"
            }
          }
        },
        children: /* @__PURE__ */ C.jsx(fn, { direction: "column", paddingX: 2, gap: 1, children: t.map((r) => /* @__PURE__ */ C.jsx(
          LI,
          {
            onClick: () => n(null),
            action: r,
            margin: 0
          },
          r.id
        )) })
      }
    )
  ] });
}, by = ({ message: t, actions: e }) => {
  const n = e.filter((s) => s.forId ? s.forId === t.id : !0), r = n.filter((s) => !s.collapsed), a = n.filter((s) => s.collapsed);
  return !(r.length || a.length) || t.streaming ? null : /* @__PURE__ */ C.jsx(
    fn,
    {
      direction: "row",
      spacing: 1,
      alignItems: "start",
      justifyContent: "space-between",
      width: "100%",
      children: /* @__PURE__ */ C.jsxs(Zt, { id: "actions-list", children: [
        r.map((s) => /* @__PURE__ */ C.jsx(
          LI,
          {
            action: s,
            margin: "2px 8px 6px 0"
          },
          s.id
        )),
        a.length ? /* @__PURE__ */ C.jsx(TB, { actions: a }) : null
      ] })
    }
  );
}, Ty = "#FFFFFF", Bt = {
  50: "#FAFAFA",
  100: "#F5F5F5",
  200: "#EEEEEE",
  300: "#E0E0E0",
  400: "#BDBDBD",
  500: "#9E9E9E",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  850: "#303030",
  900: "#212121"
}, yB = {
  50: "#FEEDEF",
  100: "#FCD1D7",
  200: "#FBA3B1",
  300: "#F9748F",
  400: "#F05579",
  500: "#F51762",
  600: "#DA0054",
  700: "#B90A47",
  800: "#980039",
  900: "#79002C"
}, MI = {
  50: "#E6F5EE",
  100: "#CDEADE",
  200: "#9ED6BE",
  300: "#72C29E",
  400: "#4AAE80",
  500: "#20A56D",
  600: "#258A59",
  700: "#21794E",
  800: "#1D6844",
  900: "#19583A"
};
var vB = function(t, e, n, r) {
  function a(i) {
    return i instanceof n ? i : new n(function(s) {
      s(i);
    });
  }
  return new (n || (n = Promise))(function(i, s) {
    function l(p) {
      try {
        d(r.next(p));
      } catch (_) {
        s(_);
      }
    }
    function c(p) {
      try {
        d(r.throw(p));
      } catch (_) {
        s(_);
      }
    }
    function d(p) {
      p.done ? i(p.value) : a(p.value).then(l, c);
    }
    d((r = r.apply(t, e || [])).next());
  });
};
function CB() {
  const [t, e] = Hn(null);
  return [t, (r) => vB(this, void 0, void 0, function* () {
    if (!navigator?.clipboard)
      return console.warn("Clipboard not supported"), !1;
    try {
      return yield navigator.clipboard.writeText(r), e(r), !0;
    } catch (a) {
      return console.warn("Copy failed", a), e(null), !1;
    }
  })];
}
function RB(t) {
  const [e, n] = Hn(!!t), r = dt(() => n((a) => !a), []);
  return [e, r, n];
}
const AB = (t) => /* @__PURE__ */ C.jsxs(
  xr,
  {
    ...t,
    style: {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      fill: "none",
      stroke: "currentColor"
    },
    viewBox: "0 0 24 24",
    children: [
      /* @__PURE__ */ C.jsx("rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2" }),
      /* @__PURE__ */ C.jsx("path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" })
    ]
  }
), kI = ({ value: t, edge: e }) => {
  const [n, r] = Hn(!1), [a, i] = CB(), s = () => {
    i(t).then(() => {
      r(!0);
    }).catch((c) => console.log("An error occurred while copying: ", c));
  }, l = () => {
    r(!1);
  };
  return /* @__PURE__ */ C.jsx(
    ba,
    {
      title: n ? "Copied to clipboard!" : "Copy",
      onClose: l,
      sx: { zIndex: 2 },
      children: /* @__PURE__ */ C.jsx(zr, { color: "inherit", edge: e, onClick: s, children: /* @__PURE__ */ C.jsx(AB, { sx: { height: 16, width: 16 } }) })
    }
  );
}, $E = () => bE().palette.mode === "dark", OB = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsxs(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "m8 2 1.88 1.88" }),
      /* @__PURE__ */ C.jsx("path", { d: "M14.12 3.88 16 2" }),
      /* @__PURE__ */ C.jsx("path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1" }),
      /* @__PURE__ */ C.jsx("path", { d: "M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6" }),
      /* @__PURE__ */ C.jsx("path", { d: "M12 20v-9" }),
      /* @__PURE__ */ C.jsx("path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5" }),
      /* @__PURE__ */ C.jsx("path", { d: "M6 13H2" }),
      /* @__PURE__ */ C.jsx("path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4" }),
      /* @__PURE__ */ C.jsx("path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4" }),
      /* @__PURE__ */ C.jsx("path", { d: "M22 13h-4" }),
      /* @__PURE__ */ C.jsx("path", { d: "M17.2 17c2.1.1 3.8 1.9 3.8 4" }),
      " "
    ]
  }
) }), NB = ({ step: t, debugUrl: e }) => {
  let n = t.id;
  n.startsWith("wrap_") && (n = n.replace("wrap_", ""));
  const r = e.replace("[thread_id]", t.threadId).replace("[step_id]", n);
  return /* @__PURE__ */ C.jsx(ba, { title: "Debug in Literal AI", children: /* @__PURE__ */ C.jsx(
    zr,
    {
      color: "inherit",
      className: "debug-button",
      href: r,
      target: "_blank",
      children: /* @__PURE__ */ C.jsx(OB, { sx: { width: "18px", height: "18px" } })
    }
  ) });
}, IB = ({ actions: t, content: e, title: n, ...r }) => /* @__PURE__ */ C.jsx(
  UP,
  {
    ...r,
    fullWidth: !0,
    sx: {
      border: (a) => a.palette.mode === "dark" ? `1px solid ${zP[800]}` : null,
      borderRadius: 1
    },
    children: /* @__PURE__ */ C.jsxs(Zt, { bgcolor: "background.paper", children: [
      n ? /* @__PURE__ */ C.jsx(YP, { children: /* @__PURE__ */ C.jsx(C.Fragment, { children: n }) }) : null,
      e ? /* @__PURE__ */ C.jsx(HP, { children: e }) : null,
      t ? /* @__PURE__ */ C.jsx(GP, { sx: { padding: (a) => a.spacing(0, 3, 2) }, children: /* @__PURE__ */ C.jsx(C.Fragment, { children: t }) }) : null
    ] })
  }
);
function PI({
  children: t,
  ...e
}) {
  const n = A2();
  return /* @__PURE__ */ C.jsx("span", { style: { color: n.palette.text.primary }, children: /* @__PURE__ */ C.jsx(
    Td,
    {
      color: n.palette.mode === "dark" ? "inherit" : "primary",
      ...e,
      children: t
    }
  ) });
}
const xB = ({
  count: t,
  inputProps: e
}) => {
  const n = bE();
  return t ? e ? (() => {
    const i = (s) => {
      const l = t.toString();
      let c = l.length * 8 + (s ? 22 : 0);
      return (l.includes(".") || l.includes(",")) && (c -= 6), `${c}px`;
    };
    return e ? /* @__PURE__ */ C.jsx(
      TE,
      {
        id: e.id,
        inputProps: {
          type: "number",
          max: e.max,
          min: e.min,
          step: e.step || 1,
          sx: {
            width: i(),
            padding: (s) => s.spacing(0.5, 1),
            fontSize: "12px",
            fontWeight: 600,
            color: "text.secondary",
            MozAppearance: "textfield",
            "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button": {
              display: "none"
            },
            "&:focus": {
              width: i(!0),
              MozAppearance: "auto",
              "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button": {
                display: "flex"
              }
            }
          }
        },
        sx: {
          borderRadius: "6px",
          backgroundColor: (s) => s.palette.mode === "light" ? "grey.100" : "grey.800",
          "& fieldset": { border: "none" }
        },
        value: t,
        onChange: e.onChange
      }
    ) : null;
  })() : /* @__PURE__ */ C.jsx(
    Zt,
    {
      display: "flex",
      alignItems: "center",
      className: "notification-count",
      sx: {
        borderRadius: "6px",
        padding: "4px 8px",
        backgroundColor: n.palette.mode === "light" ? "grey.100" : "grey.800"
      },
      children: /* @__PURE__ */ C.jsx(
        _s,
        {
          className: "notification-count",
          color: "text.secondary",
          sx: {
            fontSize: "12px",
            fontWeight: 600
          },
          children: t
        }
      )
    }
  ) : null;
}, DB = ({
  id: t,
  label: e,
  tooltip: n,
  notificationsProps: r
}) => /* @__PURE__ */ C.jsxs(Zt, { display: "flex", justifyContent: "space-between", width: "100%", children: [
  /* @__PURE__ */ C.jsxs(Zt, { display: "flex", gap: 0.5, alignItems: "center", children: [
    /* @__PURE__ */ C.jsx(
      KP,
      {
        htmlFor: t,
        sx: {
          fontWeight: 600,
          fontSize: "12px",
          color: "grey.500"
        },
        children: e
      }
    ),
    n ? /* @__PURE__ */ C.jsx(ba, { title: n, children: /* @__PURE__ */ C.jsx(WP, { sx: { fontSize: 12, color: "grey.600" } }) }) : null
  ] }),
  r ? /* @__PURE__ */ C.jsx(xB, { ...r }) : null
] }), wB = (t) => {
  const {
    children: e,
    description: n,
    hasError: r,
    id: a,
    label: i,
    notificationsProps: s,
    tooltip: l,
    sx: c
  } = t;
  return /* @__PURE__ */ C.jsxs(fn, { sx: c, gap: 0.5, children: [
    i ? /* @__PURE__ */ C.jsx(
      DB,
      {
        id: a,
        label: i,
        tooltip: l,
        notificationsProps: s
      }
    ) : null,
    /* @__PURE__ */ C.jsxs(VP, { error: r, fullWidth: !0, children: [
      e,
      n ? /* @__PURE__ */ C.jsx($P, { children: n }) : null
    ] })
  ] });
};
O2(qP)(({ theme: t }) => {
  const e = t.palette.mode === "light";
  return {
    width: "calc(100% - 18px)",
    marginLeft: "8px",
    color: Bt[e ? 300 : 850],
    height: 3,
    "& .MuiSlider-track": {
      border: "none",
      color: Bt[500]
    },
    "& .MuiSlider-thumb": {
      height: 15,
      width: 15,
      backgroundColor: e ? Bt[600] : "white",
      border: `4px solid ${e ? Bt[300] : Bt[800]}`,
      "&:focus, &:hover, &.Mui-active, &.Mui-focusVisible": {
        boxShadow: "inherit"
      },
      "&:before": {
        display: "none"
      }
    },
    "& .MuiSlider-valueLabel": {
      lineHeight: 1.2,
      fontSize: 12,
      background: "unset",
      padding: 0,
      width: 32,
      height: 32,
      borderRadius: "50% 50% 50% 0",
      backgroundColor: "#52af77",
      transformOrigin: "bottom left",
      transform: "translate(50%, -100%) rotate(-45deg) scale(0)",
      "&:before": { display: "none" },
      "&.MuiSlider-valueLabelOpen": {
        transform: "translate(50%, -100%) rotate(-45deg) scale(1)"
      },
      "& > *": {
        transform: "rotate(45deg)"
      }
    }
  };
});
O2((t) => /* @__PURE__ */ C.jsx(QP, { focusVisibleClassName: ".Mui-focusVisible", disableRipple: !0, ...t }))(({ theme: t }) => {
  const e = t.palette.mode === "dark";
  return {
    width: 40,
    height: 24,
    padding: 0,
    "& .MuiSwitch-switchBase": {
      margin: 0,
      padding: "4px",
      transitionDuration: "300ms",
      "&.Mui-checked": {
        transform: "translateX(16px)",
        color: "#fff",
        "& + .MuiSwitch-track": {
          backgroundColor: MI[500],
          opacity: 1,
          border: 0
        },
        "&.Mui-disabled + .MuiSwitch-track": {
          opacity: 0.5
        }
      },
      "&.Mui-disabled .MuiSwitch-thumb": {
        color: e ? t.palette.grey[600] : t.palette.grey[100]
      },
      "&.Mui-disabled + .MuiSwitch-track": {
        opacity: e ? 0.3 : 0.7
      }
    },
    "& .MuiSwitch-thumb": {
      boxSizing: "border-box",
      width: 16,
      height: 16,
      boxShadow: "unset"
    },
    "& .MuiSwitch-track": {
      borderRadius: 26 / 2,
      backgroundColor: t.palette.grey[400],
      opacity: 1,
      transition: t.transitions.create(["background-color"], {
        duration: 500
      })
    }
  };
});
const Ll = {
  enter: "Enter",
  backspace: "Backspace"
}, LB = {
  ime: 229
}, MB = ql(N2)(({ theme: t, size: e }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${e === "small" ? "26px" : "32px"};


    &[aria-disabled="true"] > svg {
      color: ${t.palette.action.disabled};
      cursor: default;
    }

    &.MuiChipsInput-Chip-Editing {
      background-color: ${t.palette.primary.light};
      color: ${t.palette.primary.contrastText};
    }
  `), kB = {
  ChipStyled: MB
}, yy = (t) => {
  const {
    className: e,
    index: n,
    onDelete: r,
    disabled: a,
    onEdit: i,
    isEditing: s,
    disableEdition: l,
    ...c
  } = t, d = (f) => {
    f.key === Ll.enter && r(n);
  }, p = (f) => {
    f?.preventDefault?.(), f?.stopPropagation?.(), r(n);
  }, _ = (f) => {
    f.target.textContent === c.label && (a || i(n));
  };
  return /* @__PURE__ */ C.jsx(kB.ChipStyled, {
    className: `MuiChipsInput-Chip ${s ? "MuiChipsInput-Chip-Editing" : ""} ${e || ""}`,
    onKeyDown: d,
    disabled: a,
    onDoubleClick: l ? void 0 : _,
    tabIndex: a ? -1 : 0,
    "aria-disabled": a,
    onDelete: p,
    ...c
  });
};
function PB(t) {
  return typeof t == "boolean";
}
function FB(t) {
  return typeof t == "object" && !Array.isArray(t) && t !== null;
}
function BB(t, e) {
  typeof e == "function" ? e(t) : e && FB(e) && "current" in e && (e.current = t);
}
const UB = ql("div")`
  top: 50%;
  transform: translateY(-50%);
  right: 10px;
  position: absolute;
`, GB = ql(TE)((t) => `
    max-width: 100%;

    .MuiInputBase-root {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      row-gap: 5px;
      padding-top: ${t.size === "small" ? "5px" : "9px"};
      padding-right: ${t.InputProps?.endAdornment ? "30px" : "9px"};
      padding-bottom: ${t.size === "small" ? "5px" : "9px"};
      padding-left: 10px;

      input {
        min-width: 30px;
        width: auto;
        flex-grow: 1;
        text-overflow: ellipsis;
        padding: ${t.size === "small" ? "3.5px 4px" : "7.5px 4px"};
        align-self: center;
      }
    }
  `), HB = ql(N2)(({ theme: t, size: e }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${e === "small" ? "26px" : "32px"};

    &[aria-disabled="true"] > svg.MuiChip-deleteIcon {
      color: ${t.palette.action.disabled};
      cursor: default;
    }
  `), vy = {
  ChipStyled: HB,
  TextFieldStyled: GB,
  EndAdornmentClose: UB
}, FI = $e.forwardRef((t, e) => {
  const {
    chips: n,
    onAddChip: r,
    onEditChip: a,
    onDeleteChip: i,
    onDeleteAllChips: s,
    InputProps: l,
    onInputChange: c,
    disabled: d,
    clearInputOnBlur: p,
    validate: _,
    error: f,
    helperText: g,
    hideClearAll: E,
    inputProps: T,
    size: R,
    disableDeleteOnBackspace: A,
    disableEdition: I,
    className: x,
    renderChip: P,
    addOnWhichKey: D,
    onFocus: L,
    inputValue: K,
    ...J
  } = t, [X, $] = $e.useState(""), [ae, ce] = $e.useState(""), ve = $e.useRef(null), ge = $e.useRef(!1), fe = $e.useRef(typeof K == "string"), [Fe, ne] = $e.useState(null), {
    onKeyDown: se,
    ...z
  } = T || {}, {
    inputRef: v,
    ...H
  } = l || {}, oe = () => {
    ce("");
  }, k = fe.current, me = k ? K : X, Ce = (Be) => {
    c?.(Be), k || $(Be);
  }, he = (Be) => {
    Ce(n[Be]), ne(Be), oe();
  }, Ne = () => {
    ne(null);
  }, ye = () => {
    oe(), Ce("");
  }, Ue = (Be) => {
    Ce(Be.target.value);
  }, Me = () => {
    !ge.current || (Fe !== null ? (Ne(), ye()) : p && ye(), ge.current = !1);
  }, Qe = (Be) => {
    ve.current = Be, e && BB(Be, e);
  }, _e = (Be, It) => (Oe) => {
    if (typeof _ == "function") {
      const j = _(Be);
      if (j === !1) {
        It.preventDefault();
        return;
      }
      if (!PB(j) && j.isError) {
        It.preventDefault(), ce(j.textError);
        return;
      }
    }
    Oe();
  }, je = (Be, It, Oe) => {
    _e(Be, Oe)(() => {
      a?.(Be, It), Ne(), ye();
    });
  }, et = (Be, It) => {
    _e(Be, It)(() => {
      r?.(me.trim()), ye();
    });
  }, nt = (Be, It) => It === LB.ime ? !1 : D ? Array.isArray(D) ? D.some((Oe) => Oe === Be) : D === Be : Be === Ll.enter, mt = (Be) => {
    const It = nt(Be.key, Be.keyCode), Oe = Be.key === Ll.backspace, j = me.trim();
    if (Be.code === "Tab") {
      Me();
      return;
    }
    if (It && Be.preventDefault(), me.length > 0 && It)
      j.length === 0 ? ye() : Fe !== null ? je(j, Fe, Be) : et(j, Be);
    else if (Oe && me.length === 0 && n.length > 0 && !A) {
      const Se = n.length - 1;
      i?.(Se), Fe === Se && Ne();
    }
    se?.(Be);
  }, bt = (Be) => {
    Be.preventDefault(), L?.(Be), ge.current = !0;
  }, _t = (Be) => {
    Be.preventDefault(), !E && !d && (s?.(), ye(), Ne());
  }, He = (Be) => {
    Be === Fe ? (ye(), Ne()) : he(Be), ve.current?.focus();
  }, Gt = (Be) => {
    d || (i?.(Be), Fe !== null && (Ne(), ye()));
  }, pt = n.length > 0;
  return /* @__PURE__ */ C.jsx(jP, {
    onClickAway: Me,
    children: /* @__PURE__ */ C.jsx(vy.TextFieldStyled, {
      value: me,
      onChange: Ue,
      ref: e,
      className: `MuiChipsInput-TextField ${x || ""}`,
      size: R,
      placeholder: "Type and press enter",
      onFocus: bt,
      inputProps: {
        onKeyDown: mt,
        ...z
      },
      disabled: d,
      error: !!ae || f,
      helperText: ae || g,
      InputProps: {
        inputRef: Qe,
        startAdornment: pt ? n.map((Be, It) => {
          const Oe = `chip-${It}`, j = {
            index: It,
            onEdit: He,
            label: Be,
            title: Be,
            isEditing: It === Fe,
            size: R,
            disabled: d,
            disableEdition: I,
            onDelete: Gt
          };
          return P ? P(yy, Oe, j) : /* @__PURE__ */ EP(yy, {
            ...j,
            key: Oe
          });
        }) : null,
        endAdornment: E ? null : /* @__PURE__ */ C.jsx(vy.EndAdornmentClose, {
          style: {
            visibility: pt ? "visible" : "hidden"
          },
          children: /* @__PURE__ */ C.jsx(zr, {
            "aria-label": "Clear",
            title: "Clear",
            disabled: d,
            size: "small",
            onClick: _t,
            children: /* @__PURE__ */ C.jsx(uh, {
              fontSize: "small"
            })
          })
        }),
        ...H
      },
      ...J
    })
  });
});
FI.defaultProps = {
  onInputChange: () => {
  },
  clearInputOnBlur: !1,
  hideClearAll: !1,
  disableDeleteOnBackspace: !1,
  disableEdition: !1,
  addOnWhichKey: Ll.enter,
  onDeleteChip: () => {
  },
  onAddChip: () => {
  },
  inputValue: void 0,
  onEditChip: () => {
  },
  renderChip: void 0,
  onDeleteAllChips: () => {
  },
  validate: () => !0
};
function YB(t, e) {
  return [...t, e];
}
function zB(t, e) {
  return t.filter((n, r) => e !== r);
}
function qB(t, e, n) {
  return t.map((r, a) => e === a ? n : r);
}
const VB = $e.forwardRef((t, e) => {
  const {
    value: n,
    onChange: r,
    onAddChip: a,
    onInputChange: i,
    onDeleteChip: s,
    disabled: l,
    validate: c,
    clearInputOnBlur: d,
    hideClearAll: p,
    disableDeleteOnBackspace: _,
    onEditChip: f,
    renderChip: g,
    disableEdition: E,
    addOnWhichKey: T,
    inputValue: R,
    ...A
  } = t;
  return /* @__PURE__ */ C.jsx(FI, {
    chips: n,
    onAddChip: (I) => {
      if (l)
        return;
      const x = YB(n, I), P = x.length - 1;
      a?.(I, P), r?.(x);
    },
    onInputChange: i,
    disableDeleteOnBackspace: _,
    onDeleteChip: (I) => {
      if (l)
        return;
      const x = n[I];
      r?.(zB(n, I)), s?.(x, I);
    },
    onEditChip: (I, x) => {
      l || E || (r?.(qB(n, x, I)), f?.(I, x));
    },
    renderChip: g,
    onDeleteAllChips: () => {
      r?.([]);
    },
    clearInputOnBlur: d,
    disabled: l,
    disableEdition: E,
    validate: c,
    inputValue: R,
    hideClearAll: p,
    addOnWhichKey: T,
    ...A,
    ref: e
  });
});
VB.defaultProps = {
  value: [],
  onChange: () => {
  },
  onAddChip: () => {
  },
  onDeleteChip: () => {
  },
  onInputChange: () => {
  },
  onEditChip: () => {
  },
  addOnWhichKey: Ll.enter,
  clearInputOnBlur: !1,
  disableEdition: !1,
  hideClearAll: !1,
  disableDeleteOnBackspace: !1,
  validate: () => !0
};
const $B = ({
  description: t,
  disabled: e,
  hasError: n,
  id: r,
  label: a,
  size: i = "small",
  tooltip: s,
  multiline: l,
  endAdornment: c,
  ...d
}) => /* @__PURE__ */ C.jsx(
  wB,
  {
    description: t,
    hasError: n,
    id: r,
    label: a,
    tooltip: s,
    children: /* @__PURE__ */ C.jsx(
      TE,
      {
        disabled: e,
        InputProps: { endAdornment: c },
        inputProps: {
          ...d,
          id: r,
          name: r,
          sx: {
            height: i === "small" ? "7px" : "15px",
            minHeight: l ? "100px" : "auto"
          }
        },
        fullWidth: !0,
        multiline: l,
        sx: {
          fontSize: "14px",
          fontWeight: 400,
          my: 0.5
        }
      }
    )
  }
), BI = {
  fontFamily: ["Inter", "sans-serif"].join(",")
}, UI = {
  MuiButton: {
    defaultProps: {
      disableElevation: !0,
      disableRipple: !0,
      sx: {
        textTransform: "none"
      }
    }
  },
  MuiLink: {
    defaultProps: {
      fontWeight: 500
    }
  },
  MuiFormHelperText: {
    defaultProps: {
      sx: {
        m: 0,
        fontWeight: 400,
        color: Bt[500]
      }
    }
  },
  MuiTooltip: {
    styleOverrides: {
      tooltip: {
        backgroundColor: "black"
      }
    }
  }
}, GI = {
  borderRadius: 8
};
I2({
  typography: BI,
  components: UI,
  shape: GI,
  palette: {
    primary: {
      main: Bt[900]
    }
  }
});
I2({
  typography: BI,
  components: UI,
  shape: GI,
  palette: {
    primary: {
      main: Bt[200]
    }
  }
});
const WB = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsxs(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z" }),
      " "
    ]
  }
) }), KB = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsxs(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M17 14V2" }),
      /* @__PURE__ */ C.jsx("path", { d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z" })
    ]
  }
) }), QB = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsxs(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M7 10v12" }),
      /* @__PURE__ */ C.jsx("path", { d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z" }),
      " "
    ]
  }
) }), jB = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsxs(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M17 14V2" }),
      /* @__PURE__ */ C.jsx("path", { d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z" })
    ]
  }
) }), XB = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsxs(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M7 10v12" }),
      /* @__PURE__ */ C.jsx("path", { d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z" }),
      " "
    ]
  }
) }), Cy = "16px", ZB = ({ message: t }) => {
  const e = ua(), { onFeedbackUpdated: n, onFeedbackDeleted: r } = qn(Hi), [a, i] = Hn(), [s, l] = Hn(), c = Qt(Ad), { idToResume: d } = xd(), [p, _] = Hn(t.feedback?.value), [f, g] = Hn(t.feedback?.comment);
  if (!e.config?.dataPersistence)
    return null;
  const E = p === 0 ? jB : KB, T = p === 1 ? XB : QB, R = (L, K) => {
    L === void 0 ? r && t.feedback?.id && r(
      t,
      () => {
        _(void 0), g(void 0);
      },
      t.feedback.id
    ) : n && n(
      t,
      () => {
        _(L), g(K);
      },
      {
        ...t.feedback || {},
        forId: t.id,
        threadId: t.threadId,
        value: L,
        comment: K
      }
    );
  }, A = (L) => {
    p === L ? R(void 0) : i(L);
  }, I = c || d, P = !!t.streaming || !I, D = Cn(() => {
    const L = {
      width: Cy,
      height: Cy
    }, K = [
      () => /* @__PURE__ */ C.jsx(ba, { title: "Helpful", children: /* @__PURE__ */ C.jsx("span", { children: /* @__PURE__ */ C.jsx(
        zr,
        {
          color: "inherit",
          disabled: P,
          className: `positive-feedback-${p === 1 ? "on" : "off"}`,
          onClick: () => {
            A(1);
          },
          children: /* @__PURE__ */ C.jsx(T, { sx: L })
        }
      ) }) }),
      () => /* @__PURE__ */ C.jsx(ba, { title: "Not helpful", children: /* @__PURE__ */ C.jsx("span", { children: /* @__PURE__ */ C.jsx(
        zr,
        {
          color: "inherit",
          disabled: P,
          className: `negative-feedback-${p === 0 ? "on" : "off"}`,
          onClick: () => {
            A(0);
          },
          children: /* @__PURE__ */ C.jsx(E, { sx: L })
        }
      ) }) })
    ];
    return f && K.push(() => /* @__PURE__ */ C.jsx(ba, { title: "Feedback", children: /* @__PURE__ */ C.jsx("span", { children: /* @__PURE__ */ C.jsx(
      zr,
      {
        color: "inherit",
        disabled: P,
        onClick: () => {
          i(p), l(f);
        },
        className: "feedback-comment-edit",
        children: /* @__PURE__ */ C.jsx(WB, { sx: L })
      }
    ) }) })), K;
  }, [p, f, P]);
  return /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
    /* @__PURE__ */ C.jsx(fn, { direction: "row", children: D.map((L, K) => /* @__PURE__ */ C.jsx(L, {}, `feedback-button-${K}`)) }),
    /* @__PURE__ */ C.jsx(
      IB,
      {
        maxWidth: "xs",
        onClose: () => {
          i(void 0);
        },
        open: a !== void 0,
        title: /* @__PURE__ */ C.jsxs(fn, { direction: "row", alignItems: "center", gap: 2, children: [
          a === 0 ? /* @__PURE__ */ C.jsx(E, {}) : /* @__PURE__ */ C.jsx(T, {}),
          "Add a comment"
        ] }),
        content: /* @__PURE__ */ C.jsx(
          $B,
          {
            id: "feedbackDescription",
            value: s,
            multiline: !0,
            size: "medium",
            onChange: (L) => {
              L.target.value === "" ? l(void 0) : l(L.target.value);
            }
          }
        ),
        actions: /* @__PURE__ */ C.jsx(
          PI,
          {
            id: "feedbackSubmit",
            type: "submit",
            variant: "outlined",
            onClick: () => {
              a != null && R(a, s), i(void 0), l(void 0);
            },
            autoFocus: !0,
            children: "Submit feedback"
          }
        )
      }
    )
  ] });
}, Ry = ({ message: t, run: e }) => {
  const n = $E(), { config: r } = ua(), { firstInteraction: a } = po(), i = t.type === "user_message", s = t.waitForAnswer, c = !!t.output && !i && !s, d = !!r?.debugUrl && !!t.threadId && !!a;
  return !(c || d) || t.streaming ? null : /* @__PURE__ */ C.jsxs(
    fn,
    {
      sx: { marginLeft: "-8px !important" },
      alignItems: "center",
      direction: "row",
      color: n ? Bt[400] : Bt[600],
      children: [
        c ? /* @__PURE__ */ C.jsx(kI, { value: t.output }) : null,
        e ? /* @__PURE__ */ C.jsx(ZB, { message: e }) : null,
        d ? /* @__PURE__ */ C.jsx(NB, { debugUrl: r.debugUrl, step: t }) : null
      ]
    }
  );
}, Ay = (t, e) => !e || !t ? !1 : e === t.toString(), JB = (t) => t.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), Oy = ({
  elements: t,
  content: e,
  id: n,
  language: r
}) => {
  const a = t.map((d) => JB(d.name));
  a.sort((d, p) => p.length - d.length);
  const i = a.length ? new RegExp(`(${a.join("|")})`, "g") : void 0;
  let s = e ? e.trim() : "";
  const l = t.filter(
    (d) => Ay(n, d?.forId) && d.display === "inline"
  ), c = [];
  if (i && (s = s.replaceAll(i, (d) => {
    const p = t.find((g) => {
      const E = g.name === d, T = Ay(n, g?.forId);
      return E && T;
    }), _ = !!p, f = p?.display === "inline";
    return _ ? f ? (l.indexOf(p) === -1 && l.push(p), d) : (c.push(p), `[${d}](${d.replaceAll(" ", "_")})`) : d;
  })), r && s) {
    const d = `\`\`\`${r}`;
    s.startsWith("```") || (s = `${d}
${s}
\`\`\``);
  }
  return {
    preparedContent: s,
    inlinedElements: l,
    refElements: c
  };
}, WE = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsx(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: /* @__PURE__ */ C.jsx("path", { d: "m6 9 6 6 6-6" })
  }
) }), HI = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsx(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: /* @__PURE__ */ C.jsx("path", { d: "m18 15-6-6-6 6" })
  }
) }), eU = ({
  children: t,
  defaultExpandAll: e = !1
}) => {
  const [n, r] = RB(e), a = /* @__PURE__ */ C.jsxs(
    Zt,
    {
      height: n ? "auto" : 200,
      position: "relative",
      overflow: "hidden",
      children: [
        /* @__PURE__ */ C.jsx(
          Zt,
          {
            position: n ? "relative" : "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            children: t
          }
        ),
        !n && /* @__PURE__ */ C.jsx(
          Zt,
          {
            position: "absolute",
            bottom: 0,
            left: 0,
            right: 0,
            height: 40,
            sx: {
              background: (i) => `linear-gradient(to bottom, rgba(255,255,255,0) 0%, ${i.palette.background.default} 100%)`,
              pointerEvents: "none"
            }
          }
        )
      ]
    }
  );
  return /* @__PURE__ */ C.jsxs(Zt, { children: [
    /* @__PURE__ */ C.jsx(ZP, { in: n, collapsedSize: 200, timeout: 0, children: a }),
    /* @__PURE__ */ C.jsx(fn, { direction: "row", justifyContent: "end", children: /* @__PURE__ */ C.jsx(ba, { title: n ? "Collapse" : "Expand", children: /* @__PURE__ */ C.jsx(zr, { onClick: r, children: n ? /* @__PURE__ */ C.jsx(HI, {}) : /* @__PURE__ */ C.jsx(WE, {}) }) }) })
  ] });
}, tU = ({ element: t }) => {
  const e = bE();
  return t.url ? /* @__PURE__ */ C.jsxs(Zt, { className: `${t.display}-audio`, children: [
    /* @__PURE__ */ C.jsx(
      Sa,
      {
        sx: {
          fontSize: "14px",
          lineHeight: 1.72,
          color: e.palette.mode === "dark" ? Bt[300] : Bt[700],
          marginBottom: e.spacing(0.5)
        },
        children: t.name
      }
    ),
    /* @__PURE__ */ C.jsx("audio", { controls: !0, src: t.url, autoPlay: t.autoPlay })
  ] }) : null;
}, nU = ({ items: t }) => /* @__PURE__ */ C.jsx(fn, { spacing: 1, children: t.map((e, n) => /* @__PURE__ */ C.jsx(Zt, { pt: 0.5, children: /* @__PURE__ */ C.jsx(tU, { element: e }) }, n)) }), rU = async (t) => {
  const e = await fetch(t);
  if (!e.ok)
    throw new Error("Network response was not ok");
  const n = e.headers.get("content-type");
  return n && n.includes("application/json") ? e.json() : e.text();
}, KE = (t) => RE(t, rU), aU = ({ element: t }) => {
  const { data: e } = KE(t.url || null), n = !e;
  let r = [], a = [];
  if (!n) {
    const { index: i, columns: s, data: l } = JSON.parse(e);
    r = s.map((c) => ({
      field: c,
      minWidth: 150
    })), a = l.map((c, d) => {
      const p = { id: i[d] };
      return s.forEach((_, f) => {
        p[_] = c[f];
      }), p;
    });
  }
  return /* @__PURE__ */ C.jsx(
    JP,
    {
      sx: {
        bgcolor: "background.paper"
      },
      loading: n,
      rows: a,
      columns: r,
      initialState: {
        pagination: {
          paginationModel: {
            pageSize: 10
          }
        }
      },
      pageSizeOptions: [10, 50, 100]
    }
  );
}, iU = ({ items: t }) => /* @__PURE__ */ C.jsx(fn, { spacing: 1, children: t.map((e, n) => /* @__PURE__ */ C.jsx(
  "div",
  {
    style: {
      height: 450,
      maxWidth: "fit-content"
    },
    children: /* @__PURE__ */ C.jsx(aU, { element: e })
  },
  n
)) });
var sU = { grad: 0.9, turn: 360, rad: 360 / (2 * Math.PI) }, ti = function(t) {
  return typeof t == "string" ? t.length > 0 : typeof t == "number";
}, Kn = function(t, e, n) {
  return e === void 0 && (e = 0), n === void 0 && (n = Math.pow(10, e)), Math.round(n * t) / n + 0;
}, ia = function(t, e, n) {
  return e === void 0 && (e = 0), n === void 0 && (n = 1), t > n ? n : t > e ? t : e;
}, YI = function(t) {
  return (t = isFinite(t) ? t % 360 : 0) > 0 ? t : t + 360;
}, Ny = function(t) {
  return { r: ia(t.r, 0, 255), g: ia(t.g, 0, 255), b: ia(t.b, 0, 255), a: ia(t.a) };
}, Y0 = function(t) {
  return { r: Kn(t.r), g: Kn(t.g), b: Kn(t.b), a: Kn(t.a, 3) };
}, oU = /^#([0-9a-f]{3,8})$/i, hu = function(t) {
  var e = t.toString(16);
  return e.length < 2 ? "0" + e : e;
}, zI = function(t) {
  var e = t.r, n = t.g, r = t.b, a = t.a, i = Math.max(e, n, r), s = i - Math.min(e, n, r), l = s ? i === e ? (n - r) / s : i === n ? 2 + (r - e) / s : 4 + (e - n) / s : 0;
  return { h: 60 * (l < 0 ? l + 6 : l), s: i ? s / i * 100 : 0, v: i / 255 * 100, a };
}, qI = function(t) {
  var e = t.h, n = t.s, r = t.v, a = t.a;
  e = e / 360 * 6, n /= 100, r /= 100;
  var i = Math.floor(e), s = r * (1 - n), l = r * (1 - (e - i) * n), c = r * (1 - (1 - e + i) * n), d = i % 6;
  return { r: 255 * [r, l, s, s, c, r][d], g: 255 * [c, r, r, l, s, s][d], b: 255 * [s, s, c, r, r, l][d], a };
}, Iy = function(t) {
  return { h: YI(t.h), s: ia(t.s, 0, 100), l: ia(t.l, 0, 100), a: ia(t.a) };
}, xy = function(t) {
  return { h: Kn(t.h), s: Kn(t.s), l: Kn(t.l), a: Kn(t.a, 3) };
}, Dy = function(t) {
  return qI((n = (e = t).s, { h: e.h, s: (n *= ((r = e.l) < 50 ? r : 100 - r) / 100) > 0 ? 2 * n / (r + n) * 100 : 0, v: r + n, a: e.a }));
  var e, n, r;
}, hl = function(t) {
  return { h: (e = zI(t)).h, s: (a = (200 - (n = e.s)) * (r = e.v) / 100) > 0 && a < 200 ? n * r / 100 / (a <= 100 ? a : 200 - a) * 100 : 0, l: a / 2, a: e.a };
  var e, n, r, a;
}, lU = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, cU = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, uU = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, dU = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, wh = { string: [[function(t) {
  var e = oU.exec(t);
  return e ? (t = e[1]).length <= 4 ? { r: parseInt(t[0] + t[0], 16), g: parseInt(t[1] + t[1], 16), b: parseInt(t[2] + t[2], 16), a: t.length === 4 ? Kn(parseInt(t[3] + t[3], 16) / 255, 2) : 1 } : t.length === 6 || t.length === 8 ? { r: parseInt(t.substr(0, 2), 16), g: parseInt(t.substr(2, 2), 16), b: parseInt(t.substr(4, 2), 16), a: t.length === 8 ? Kn(parseInt(t.substr(6, 2), 16) / 255, 2) : 1 } : null : null;
}, "hex"], [function(t) {
  var e = uU.exec(t) || dU.exec(t);
  return e ? e[2] !== e[4] || e[4] !== e[6] ? null : Ny({ r: Number(e[1]) / (e[2] ? 100 / 255 : 1), g: Number(e[3]) / (e[4] ? 100 / 255 : 1), b: Number(e[5]) / (e[6] ? 100 / 255 : 1), a: e[7] === void 0 ? 1 : Number(e[7]) / (e[8] ? 100 : 1) }) : null;
}, "rgb"], [function(t) {
  var e = lU.exec(t) || cU.exec(t);
  if (!e) return null;
  var n, r, a = Iy({ h: (n = e[1], r = e[2], r === void 0 && (r = "deg"), Number(n) * (sU[r] || 1)), s: Number(e[3]), l: Number(e[4]), a: e[5] === void 0 ? 1 : Number(e[5]) / (e[6] ? 100 : 1) });
  return Dy(a);
}, "hsl"]], object: [[function(t) {
  var e = t.r, n = t.g, r = t.b, a = t.a, i = a === void 0 ? 1 : a;
  return ti(e) && ti(n) && ti(r) ? Ny({ r: Number(e), g: Number(n), b: Number(r), a: Number(i) }) : null;
}, "rgb"], [function(t) {
  var e = t.h, n = t.s, r = t.l, a = t.a, i = a === void 0 ? 1 : a;
  if (!ti(e) || !ti(n) || !ti(r)) return null;
  var s = Iy({ h: Number(e), s: Number(n), l: Number(r), a: Number(i) });
  return Dy(s);
}, "hsl"], [function(t) {
  var e = t.h, n = t.s, r = t.v, a = t.a, i = a === void 0 ? 1 : a;
  if (!ti(e) || !ti(n) || !ti(r)) return null;
  var s = function(l) {
    return { h: YI(l.h), s: ia(l.s, 0, 100), v: ia(l.v, 0, 100), a: ia(l.a) };
  }({ h: Number(e), s: Number(n), v: Number(r), a: Number(i) });
  return qI(s);
}, "hsv"]] }, wy = function(t, e) {
  for (var n = 0; n < e.length; n++) {
    var r = e[n][0](t);
    if (r) return [r, e[n][1]];
  }
  return [null, void 0];
}, pU = function(t) {
  return typeof t == "string" ? wy(t.trim(), wh.string) : typeof t == "object" && t !== null ? wy(t, wh.object) : [null, void 0];
}, z0 = function(t, e) {
  var n = hl(t);
  return { h: n.h, s: ia(n.s + 100 * e, 0, 100), l: n.l, a: n.a };
}, q0 = function(t) {
  return (299 * t.r + 587 * t.g + 114 * t.b) / 1e3 / 255;
}, Ly = function(t, e) {
  var n = hl(t);
  return { h: n.h, s: n.s, l: ia(n.l + 100 * e, 0, 100), a: n.a };
}, Lh = function() {
  function t(e) {
    this.parsed = pU(e)[0], this.rgba = this.parsed || { r: 0, g: 0, b: 0, a: 1 };
  }
  return t.prototype.isValid = function() {
    return this.parsed !== null;
  }, t.prototype.brightness = function() {
    return Kn(q0(this.rgba), 2);
  }, t.prototype.isDark = function() {
    return q0(this.rgba) < 0.5;
  }, t.prototype.isLight = function() {
    return q0(this.rgba) >= 0.5;
  }, t.prototype.toHex = function() {
    return e = Y0(this.rgba), n = e.r, r = e.g, a = e.b, s = (i = e.a) < 1 ? hu(Kn(255 * i)) : "", "#" + hu(n) + hu(r) + hu(a) + s;
    var e, n, r, a, i, s;
  }, t.prototype.toRgb = function() {
    return Y0(this.rgba);
  }, t.prototype.toRgbString = function() {
    return e = Y0(this.rgba), n = e.r, r = e.g, a = e.b, (i = e.a) < 1 ? "rgba(" + n + ", " + r + ", " + a + ", " + i + ")" : "rgb(" + n + ", " + r + ", " + a + ")";
    var e, n, r, a, i;
  }, t.prototype.toHsl = function() {
    return xy(hl(this.rgba));
  }, t.prototype.toHslString = function() {
    return e = xy(hl(this.rgba)), n = e.h, r = e.s, a = e.l, (i = e.a) < 1 ? "hsla(" + n + ", " + r + "%, " + a + "%, " + i + ")" : "hsl(" + n + ", " + r + "%, " + a + "%)";
    var e, n, r, a, i;
  }, t.prototype.toHsv = function() {
    return e = zI(this.rgba), { h: Kn(e.h), s: Kn(e.s), v: Kn(e.v), a: Kn(e.a, 3) };
    var e;
  }, t.prototype.invert = function() {
    return ta({ r: 255 - (e = this.rgba).r, g: 255 - e.g, b: 255 - e.b, a: e.a });
    var e;
  }, t.prototype.saturate = function(e) {
    return e === void 0 && (e = 0.1), ta(z0(this.rgba, e));
  }, t.prototype.desaturate = function(e) {
    return e === void 0 && (e = 0.1), ta(z0(this.rgba, -e));
  }, t.prototype.grayscale = function() {
    return ta(z0(this.rgba, -1));
  }, t.prototype.lighten = function(e) {
    return e === void 0 && (e = 0.1), ta(Ly(this.rgba, e));
  }, t.prototype.darken = function(e) {
    return e === void 0 && (e = 0.1), ta(Ly(this.rgba, -e));
  }, t.prototype.rotate = function(e) {
    return e === void 0 && (e = 15), this.hue(this.hue() + e);
  }, t.prototype.alpha = function(e) {
    return typeof e == "number" ? ta({ r: (n = this.rgba).r, g: n.g, b: n.b, a: e }) : Kn(this.rgba.a, 3);
    var n;
  }, t.prototype.hue = function(e) {
    var n = hl(this.rgba);
    return typeof e == "number" ? ta({ h: e, s: n.s, l: n.l, a: n.a }) : Kn(n.h);
  }, t.prototype.isEqual = function(e) {
    return this.toHex() === ta(e).toHex();
  }, t;
}(), ta = function(t) {
  return t instanceof Lh ? t : new Lh(t);
}, My = [], _U = function(t) {
  t.forEach(function(e) {
    My.indexOf(e) < 0 && (e(Lh, wh), My.push(e));
  });
};
function mU(t, e) {
  var n = { white: "#ffffff", bisque: "#ffe4c4", blue: "#0000ff", cadetblue: "#5f9ea0", chartreuse: "#7fff00", chocolate: "#d2691e", coral: "#ff7f50", antiquewhite: "#faebd7", aqua: "#00ffff", azure: "#f0ffff", whitesmoke: "#f5f5f5", papayawhip: "#ffefd5", plum: "#dda0dd", blanchedalmond: "#ffebcd", black: "#000000", gold: "#ffd700", goldenrod: "#daa520", gainsboro: "#dcdcdc", cornsilk: "#fff8dc", cornflowerblue: "#6495ed", burlywood: "#deb887", aquamarine: "#7fffd4", beige: "#f5f5dc", crimson: "#dc143c", cyan: "#00ffff", darkblue: "#00008b", darkcyan: "#008b8b", darkgoldenrod: "#b8860b", darkkhaki: "#bdb76b", darkgray: "#a9a9a9", darkgreen: "#006400", darkgrey: "#a9a9a9", peachpuff: "#ffdab9", darkmagenta: "#8b008b", darkred: "#8b0000", darkorchid: "#9932cc", darkorange: "#ff8c00", darkslateblue: "#483d8b", gray: "#808080", darkslategray: "#2f4f4f", darkslategrey: "#2f4f4f", deeppink: "#ff1493", deepskyblue: "#00bfff", wheat: "#f5deb3", firebrick: "#b22222", floralwhite: "#fffaf0", ghostwhite: "#f8f8ff", darkviolet: "#9400d3", magenta: "#ff00ff", green: "#008000", dodgerblue: "#1e90ff", grey: "#808080", honeydew: "#f0fff0", hotpink: "#ff69b4", blueviolet: "#8a2be2", forestgreen: "#228b22", lawngreen: "#7cfc00", indianred: "#cd5c5c", indigo: "#4b0082", fuchsia: "#ff00ff", brown: "#a52a2a", maroon: "#800000", mediumblue: "#0000cd", lightcoral: "#f08080", darkturquoise: "#00ced1", lightcyan: "#e0ffff", ivory: "#fffff0", lightyellow: "#ffffe0", lightsalmon: "#ffa07a", lightseagreen: "#20b2aa", linen: "#faf0e6", mediumaquamarine: "#66cdaa", lemonchiffon: "#fffacd", lime: "#00ff00", khaki: "#f0e68c", mediumseagreen: "#3cb371", limegreen: "#32cd32", mediumspringgreen: "#00fa9a", lightskyblue: "#87cefa", lightblue: "#add8e6", midnightblue: "#191970", lightpink: "#ffb6c1", mistyrose: "#ffe4e1", moccasin: "#ffe4b5", mintcream: "#f5fffa", lightslategray: "#778899", lightslategrey: "#778899", navajowhite: "#ffdead", navy: "#000080", mediumvioletred: "#c71585", powderblue: "#b0e0e6", palegoldenrod: "#eee8aa", oldlace: "#fdf5e6", paleturquoise: "#afeeee", mediumturquoise: "#48d1cc", mediumorchid: "#ba55d3", rebeccapurple: "#663399", lightsteelblue: "#b0c4de", mediumslateblue: "#7b68ee", thistle: "#d8bfd8", tan: "#d2b48c", orchid: "#da70d6", mediumpurple: "#9370db", purple: "#800080", pink: "#ffc0cb", skyblue: "#87ceeb", springgreen: "#00ff7f", palegreen: "#98fb98", red: "#ff0000", yellow: "#ffff00", slateblue: "#6a5acd", lavenderblush: "#fff0f5", peru: "#cd853f", palevioletred: "#db7093", violet: "#ee82ee", teal: "#008080", slategray: "#708090", slategrey: "#708090", aliceblue: "#f0f8ff", darkseagreen: "#8fbc8f", darkolivegreen: "#556b2f", greenyellow: "#adff2f", seagreen: "#2e8b57", seashell: "#fff5ee", tomato: "#ff6347", silver: "#c0c0c0", sienna: "#a0522d", lavender: "#e6e6fa", lightgreen: "#90ee90", orange: "#ffa500", orangered: "#ff4500", steelblue: "#4682b4", royalblue: "#4169e1", turquoise: "#40e0d0", yellowgreen: "#9acd32", salmon: "#fa8072", saddlebrown: "#8b4513", sandybrown: "#f4a460", rosybrown: "#bc8f8f", darksalmon: "#e9967a", lightgoldenrodyellow: "#fafad2", snow: "#fffafa", lightgrey: "#d3d3d3", lightgray: "#d3d3d3", dimgray: "#696969", dimgrey: "#696969", olivedrab: "#6b8e23", olive: "#808000" }, r = {};
  for (var a in n) r[n[a]] = a;
  var i = {};
  t.prototype.toName = function(s) {
    if (!(this.rgba.a || this.rgba.r || this.rgba.g || this.rgba.b)) return "transparent";
    var l, c, d = r[this.toHex()];
    if (d) return d;
    if (s?.closest) {
      var p = this.toRgb(), _ = 1 / 0, f = "black";
      if (!i.length) for (var g in n) i[g] = new t(n[g]).toRgb();
      for (var E in n) {
        var T = (l = p, c = i[E], Math.pow(l.r - c.r, 2) + Math.pow(l.g - c.g, 2) + Math.pow(l.b - c.b, 2));
        T < _ && (_ = T, f = E);
      }
      return f;
    }
  }, e.string.push([function(s) {
    var l = s.toLowerCase(), c = l === "transparent" ? "#0000" : n[l];
    return c ? new t(c).toRgb() : null;
  }, "name"]);
}
var fU = 1 / 0, gU = "[object Symbol]", hU = typeof Qn == "object" && Qn && Qn.Object === Object && Qn, EU = typeof self == "object" && self && self.Object === Object && self, SU = hU || EU || Function("return this")(), bU = Object.prototype, TU = 0, yU = bU.toString, ky = SU.Symbol, Py = ky ? ky.prototype : void 0, Fy = Py ? Py.toString : void 0;
function vU(t) {
  if (typeof t == "string")
    return t;
  if (RU(t))
    return Fy ? Fy.call(t) : "";
  var e = t + "";
  return e == "0" && 1 / t == -fU ? "-0" : e;
}
function CU(t) {
  return !!t && typeof t == "object";
}
function RU(t) {
  return typeof t == "symbol" || CU(t) && yU.call(t) == gU;
}
function AU(t) {
  return t == null ? "" : vU(t);
}
function OU(t) {
  var e = ++TU;
  return AU(t) + e;
}
var NU = OU;
const IU = /* @__PURE__ */ oo(NU);
var xU = {
  "3d": /* @__PURE__ */ $e.createElement("path", {
    d: "M18 14.625V3.375L9 0 0 3.375v11.25L9 18l9-3.375zM9 2.136l5.918 2.22-5.98 2.242-5.919-2.22L9 2.137zM2 13.239V5.065l6.438 2.414v8.174L2 13.24zM9.438 15.7L16 13.239V5.018l-6.563 2.46V15.7z",
    transform: "translate(15 10)",
    fillRule: "evenodd"
  }),
  acrobat: /* @__PURE__ */ $e.createElement("path", {
    d: "M10.15 1.095C9.938.33 9.42-.051 8.984.005c-.528.068-1.09.382-1.314.876-.63 1.416.685 5.582.887 6.279-1.28 3.863-5.66 11.5-7.806 12.017-.045-.505.225-1.965 3.055-3.785.146-.157.315-.348.393-.472-2.392 1.168-5.492 3.044-3.628 4.448.102.079.259.146.439.213 1.426.528 3.425-1.201 5.435-5.121 2.213-.73 3.999-1.28 6.526-1.662 2.762 1.875 4.616 2.257 5.874 1.774.348-.135.898-.573 1.055-1.145-1.022 1.258-3.414.382-5.323-.82 1.763-.191 3.582-.303 4.369-.056 1 .314.965.808.954.876.079-.27.191-.708-.022-1.056-.842-1.37-4.706-.573-6.11-.427-2.212-1.336-3.74-3.717-4.358-5.436.573-2.212 1.19-3.818.742-5.413zm-.954 4.638C8.826 4.42 8.309 1.5 9.14.556c1.628.932.618 3.144.056 5.177zm3.044 6.514c-2.134.393-3.583.944-5.66 1.764.617-1.202 1.785-4.268 2.346-6.29.787 1.573 1.741 3.111 3.314 4.526z",
    transform: "translate(14 9)",
    fillRule: "evenodd"
  }),
  android: /* @__PURE__ */ $e.createElement("path", {
    d: "M17.6,9.48l1.84-3.18c0.16-0.31,0.04-0.69-0.26-0.85c-0.29-0.15-0.65-0.06-0.83,0.22l-1.88,3.24 c-2.86-1.21-6.08-1.21-8.94,0L5.65,5.67c-0.19-0.29-0.58-0.38-0.87-0.2C4.5,5.65,4.41,6.01,4.56,6.3L6.4,9.48 C3.3,11.25,1.28,14.44,1,18h22C22.72,14.44,20.7,11.25,17.6,9.48z M7,15.25c-0.69,0-1.25-0.56-1.25-1.25 c0-0.69,0.56-1.25,1.25-1.25S8.25,13.31,8.25,14C8.25,14.69,7.69,15.25,7,15.25z M17,15.25c-0.69,0-1.25-0.56-1.25-1.25 c0-0.69,0.56-1.25,1.25-1.25s1.25,0.56,1.25,1.25C18.25,14.69,17.69,15.25,17,15.25z",
    transform: "translate(12 8)"
  }),
  audio: /* @__PURE__ */ $e.createElement("path", {
    d: "M.25 4.75v4.5h3L7 13V1L3.25 4.75h-3zM10.375 7A3.375 3.375 0 0 0 8.5 3.977v6.037A3.355 3.355 0 0 0 10.375 7zM8.5.421v1.545A5.254 5.254 0 0 1 12.25 7a5.254 5.254 0 0 1-3.75 5.032v1.545A6.747 6.747 0 0 0 13.75 7 6.747 6.747 0 0 0 8.5.421z",
    transform: "translate(17 12)",
    fillRule: "evenodd"
  }),
  binary: /* @__PURE__ */ $e.createElement("path", {
    d: "M2.338 6.112c1.192 0 1.928-1.072 1.928-2.68 0-1.56-.576-2.504-1.8-2.504C1.274.928.538 2 .538 3.608c0 1.56.576 2.504 1.8 2.504zM1.61 3.408c0-1.008.24-1.568.776-1.568.376 0 .616.336.728.888l-1.504.776v-.096zM2.418 5.2c-.368 0-.608-.32-.72-.856l1.496-.768v.056c0 1.008-.24 1.568-.776 1.568zm7.03.8l.088-.944H8.36V.896L7.272.984v.592l-1.184.112.024.824h1.16v2.544h-1.32V6zm5.199 0l.088-.944h-1.176V.896L12.47.984v.592l-1.184.112.024.824h1.16v2.544h-1.32V6zM4.25 14l.088-.944H3.162v-4.16l-1.088.088v.592L.89 9.688l.024.824h1.16v2.544H.754V14zm5.198 0l.088-.944H8.36v-4.16l-1.088.088v.592l-1.184.112.024.824h1.16v2.544h-1.32V14zm3.287.112c1.192 0 1.928-1.072 1.928-2.68 0-1.56-.576-2.504-1.8-2.504-1.192 0-1.928 1.072-1.928 2.68 0 1.56.576 2.504 1.8 2.504zm-.728-2.704c0-1.008.24-1.568.776-1.568.376 0 .616.336.728.888l-1.504.776v-.096zm.808 1.792c-.368 0-.608-.32-.72-.856l1.496-.768v.056c0 1.008-.24 1.568-.776 1.568z",
    transform: "translate(16 11)",
    fillRule: "evenodd"
  }),
  code: /* @__PURE__ */ $e.createElement("path", {
    d: "M4.078 13.67c-1.875-.527-2.812-1.738-2.812-3.634V9.49C1.266 8.437.844 7.911 0 7.911V6.138c.844 0 1.266-.529 1.266-1.586v-.64c.015-.938.257-1.696.726-2.274C2.466 1.06 3.162.64 4.078.38l.492 1.375c-.656.25-.997.95-1.023 2.102v.695c0 1.167-.482 1.99-1.445 2.469.963.479 1.445 1.304 1.445 2.476v.688c.026 1.15.367 1.851 1.023 2.101l-.492 1.383zm7.844 0c1.875-.527 2.812-1.738 2.812-3.634V9.49c0-1.052.422-1.578 1.266-1.578V6.138c-.844 0-1.266-.529-1.266-1.586v-.64c-.015-.938-.257-1.696-.726-2.274-.474-.578-1.17-.998-2.086-1.258l-.492 1.375c.656.25.997.95 1.023 2.102v.695c0 1.167.482 1.99 1.445 2.469-.963.479-1.445 1.304-1.445 2.476v.688c-.026 1.15-.367 1.851-1.023 2.101l.492 1.383z",
    transform: "translate(16 13)",
    fillRule: "evenodd"
  }),
  code2: /* @__PURE__ */ $e.createElement("path", {
    d: "M7.4 10.6L2.8 6l4.6-4.6L6 0 0 6l6 6 1.4-1.4zm5.2 0L17.2 6l-4.6-4.6L14 0l6 6-6 6-1.4-1.4z",
    transform: "translate(14 14)",
    fillRule: "evenodd"
  }),
  compressed: /* @__PURE__ */ $e.createElement("path", {
    d: "M.25 0A.25.25 0 0 0 0 .25v1.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 2 1.75V.25A.25.25 0 0 0 1.75 0H.25zM1 17a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1H1zm0 4v3h2v-3H1zM2 2.25A.25.25 0 0 1 2.25 2h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5A.25.25 0 0 1 2 3.75v-1.5zM.25 4a.25.25 0 0 0-.25.25v1.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 2 5.75v-1.5A.25.25 0 0 0 1.75 4H.25zM2 6.25A.25.25 0 0 1 2.25 6h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5A.25.25 0 0 1 2 7.75v-1.5zM.25 8a.25.25 0 0 0-.25.25v1.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 2 9.75v-1.5A.25.25 0 0 0 1.75 8H.25zM2 10.25a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5zM.25 12a.25.25 0 0 0-.25.25v1.5c0 .138.112.25.25.25h1.5a.25.25 0 0 0 .25-.25v-1.5a.25.25 0 0 0-.25-.25H.25zM2 14.25a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5z",
    transform: "translate(15 1)",
    fillRule: "evenodd"
  }),
  document: /* @__PURE__ */ $e.createElement("path", {
    d: "M12 4H0v2h12V4zM0 10h18V8H0v2zM0 0v2h18V0H0z",
    transform: "translate(15 15)",
    fillRule: "evenodd"
  }),
  drive: /* @__PURE__ */ $e.createElement("path", {
    d: "M2.199.289A.5.5 0 0 1 2.652 0h8.696a.5.5 0 0 1 .453.289l1.867 4a.5.5 0 0 1-.453.711H.785a.5.5 0 0 1-.453-.711l1.867-4zM13 6H1a.752.752 0 0 0-.75.75v4.5c0 .412.338.75.75.75h12c.412 0 .75-.338.75-.75v-4.5A.752.752 0 0 0 13 6zm-9.75 4.5c-.825 0-1.5-.675-1.5-1.5s.675-1.5 1.5-1.5 1.5.675 1.5 1.5-.675 1.5-1.5 1.5z",
    transform: "translate(17 13)",
    fillRule: "evenodd"
  }),
  font: /* @__PURE__ */ $e.createElement("path", {
    d: "M3.722 8.702l-.686 1.89c-.053.14-.094.28-.123.421-.03.135-.044.252-.044.352 0 .304.097.527.29.668.2.14.501.21.905.21h.414V13H.083v-.756h.343c.176 0 .325-.018.448-.053a.81.81 0 0 0 .334-.22c.1-.105.193-.249.281-.43.094-.182.197-.416.308-.704L5.787.15h1.406l4.07 11.136c.07.187.14.343.21.466.077.123.165.222.264.298.1.07.214.12.343.15.129.03.281.044.457.044h.237V13H7.826v-.756h.413c.72 0 1.081-.287 1.081-.862 0-.1-.014-.202-.044-.307a3.274 3.274 0 0 0-.105-.36l-.72-2.013H3.72zM7.009 4.65c-.188-.533-.36-1.031-.519-1.494a15.92 15.92 0 0 1-.378-1.354 7.12 7.12 0 0 1-.15.633 16.95 16.95 0 0 1-.395 1.283c-.082.229-.175.484-.28.765L4.063 7.796h4.061L7.009 4.65zm8.411 5.74c0 .562.117.984.351 1.265.24.275.61.413 1.108.413.363 0 .691-.059.984-.176.3-.117.551-.284.756-.5.211-.218.372-.481.483-.792.112-.31.168-.656.168-1.037V8.104l-1.152.053c-.51.023-.937.088-1.283.193-.34.1-.615.243-.826.43a1.546 1.546 0 0 0-.457.678c-.088.27-.132.58-.132.931zm2.18-6.32c-.346 0-.627.05-.844.15a1.182 1.182 0 0 0-.501.404 1.594 1.594 0 0 0-.237.624c-.041.24-.062.5-.062.782-.498 0-.879-.085-1.143-.255-.257-.17-.386-.463-.386-.879 0-.31.085-.574.255-.79.17-.218.401-.393.694-.528.299-.14.644-.243 1.037-.308a7.76 7.76 0 0 1 1.257-.097c.55 0 1.031.056 1.441.167.41.106.753.282 1.029.528.275.246.48.568.615.967.14.392.21.876.21 1.45v4.667c0 .252.021.46.062.624a.928.928 0 0 0 .194.395c.088.1.202.17.343.211.146.041.319.062.518.062h.053V13H19.7l-.281-1.547h-.15c-.187.252-.369.483-.544.694-.176.211-.37.393-.58.545-.211.152-.452.27-.721.352a3.053 3.053 0 0 1-.958.131c-.399 0-.77-.058-1.116-.175a2.369 2.369 0 0 1-.888-.519 2.516 2.516 0 0 1-.58-.896c-.14-.364-.211-.791-.211-1.284 0-.955.34-1.664 1.02-2.127.68-.462 1.707-.714 3.084-.755l1.495-.053V6.285a6.93 6.93 0 0 0-.053-.888 1.778 1.778 0 0 0-.229-.703 1.14 1.14 0 0 0-.51-.457c-.216-.111-.51-.167-.878-.167z",
    transform: "translate(13 12)",
    fillRule: "evenodd"
  }),
  image: /* @__PURE__ */ $e.createElement("path", {
    d: "M13 0L9.25 5l2.85 3.8-1.6 1.2C8.81 7.75 6 4 6 4l-6 8h22L13 0z",
    transform: "translate(13 14)",
    fillRule: "evenodd"
  }),
  presentation: /* @__PURE__ */ $e.createElement("path", {
    d: "M2 4H0v10c0 1.1.9 2 2 2h14v-2H2V4zm16-4H6C4.9 0 4 .9 4 2v8c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm0 10H6V2h12v8z",
    transform: "matrix(-1 0 0 1 34 12)",
    fillRule: "evenodd"
  }),
  settings: /* @__PURE__ */ $e.createElement("path", {
    d: "M13.572 8.735c.03-.24.053-.48.053-.735s-.023-.495-.053-.735l1.583-1.237a.378.378 0 0 0 .09-.48l-1.5-2.595a.377.377 0 0 0-.457-.165l-1.868.75a5.48 5.48 0 0 0-1.268-.735L9.868.815A.366.366 0 0 0 9.5.5h-3a.366.366 0 0 0-.367.315l-.285 1.988a5.762 5.762 0 0 0-1.268.735l-1.868-.75a.366.366 0 0 0-.457.165l-1.5 2.595a.37.37 0 0 0 .09.48l1.583 1.237c-.03.24-.053.488-.053.735 0 .248.022.495.053.735L.845 9.973a.378.378 0 0 0-.09.48l1.5 2.595c.09.165.292.225.458.165l1.867-.75c.39.3.81.547 1.268.735l.285 1.987c.022.18.18.315.367.315h3a.366.366 0 0 0 .367-.315l.285-1.988a5.762 5.762 0 0 0 1.268-.734l1.867.75c.173.067.368 0 .458-.165l1.5-2.595a.378.378 0 0 0-.09-.48l-1.582-1.238zM8 10.625A2.628 2.628 0 0 1 5.375 8 2.628 2.628 0 0 1 8 5.375 2.628 2.628 0 0 1 10.625 8 2.628 2.628 0 0 1 8 10.625z",
    transform: "translate(16 11)",
    fillRule: "evenodd"
  }),
  spreadsheet: /* @__PURE__ */ $e.createElement("path", {
    d: "M0 8h6V5H0v3zm0 5h6v-3H0v3zM0 3h6V0H0v3zm8 5h12V5H8v3zm0 5h12v-3H8v3zM8 0v3h12V0H8z",
    transform: "translate(14 14)",
    fillRule: "evenodd"
  }),
  vector: /* @__PURE__ */ $e.createElement("path", {
    d: "M14.5 2V1a1 1 0 0 0-1-1h-3a1 1 0 0 0-1 1v1H3.937a2 2 0 1 0 0 1h3.936A9 9 0 0 0 3 11v1h2v-1a7.003 7.003 0 0 1 4.594-6.576A1 1 0 0 0 10.5 5h3a1 1 0 0 0 .906-.576A7.003 7.003 0 0 1 19 11v1h2v-1a9 9 0 0 0-4.873-8h3.936a2 2 0 1 0 0-1H14.5zm-1-1h-3v3h3V1zM2 1.5a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm19 1a1 1 0 1 0 2 0 1 1 0 0 0-2 0z",
    transform: "translate(12 14)",
    fillRule: "evenodd"
  }),
  video: /* @__PURE__ */ $e.createElement("path", {
    d: "M10.75 3.875V1.25A.752.752 0 0 0 10 .5H1a.752.752 0 0 0-.75.75v7.5c0 .412.338.75.75.75h9c.412 0 .75-.338.75-.75V6.125l3 3V.875l-3 3z",
    transform: "translate(17 14)"
  })
};
_U([mU]);
var DU = {
  /** Color of icon background */
  color: At.string,
  /** Text to display in label */
  extension: At.string,
  /** Displays the corner fold */
  fold: At.bool,
  /** Color of the corner fold */
  foldColor: At.string,
  /** Color of file type icon */
  glyphColor: At.string,
  /** Color of page gradient */
  gradientColor: At.string,
  /** Opacity of page gradient */
  gradientOpacity: At.number,
  /** Color of label */
  labelColor: At.string,
  /** Color of label text */
  labelTextColor: At.string,
  /** Displays the label in all caps */
  labelUppercase: At.bool,
  /** Corner radius of the file icon */
  radius: At.number,
  /** Type of glyph icon to display */
  type: At.oneOf(["3d", "acrobat", "android", "audio", "binary", "code", "code2", "compressed", "document", "drive", "font", "image", "presentation", "settings", "spreadsheet", "vector", "video"])
}, ed = {
  WIDTH: 40,
  HEIGHT: 48
}, Xt = {
  WIDTH: ed.WIDTH,
  HEIGHT: ed.HEIGHT,
  X_OFFSET: 0
}, ni = {
  HEIGHT: 12
}, By = 14, VI = function(e) {
  var n = e.color, r = n === void 0 ? "whitesmoke" : n, a = e.extension, i = e.fold, s = i === void 0 ? !0 : i, l = e.foldColor, c = e.glyphColor, d = e.gradientColor, p = d === void 0 ? "white" : d, _ = e.gradientOpacity, f = _ === void 0 ? 0.25 : _, g = e.labelColor, E = e.labelTextColor, T = E === void 0 ? "white" : E, R = e.labelUppercase, A = R === void 0 ? !1 : R, I = e.radius, x = I === void 0 ? 4 : I, P = e.type, D = IU();
  return /* @__PURE__ */ $e.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 " + ed.WIDTH + " " + ed.HEIGHT,
    width: "100%",
    style: {
      maxWidth: "100%"
    }
  }, /* @__PURE__ */ $e.createElement("defs", null, /* @__PURE__ */ $e.createElement("clipPath", {
    id: "pageRadius" + D
  }, /* @__PURE__ */ $e.createElement("rect", {
    x: Xt.X_OFFSET,
    y: "0",
    rx: x,
    ry: x,
    width: Xt.WIDTH,
    height: Xt.HEIGHT
  })), /* @__PURE__ */ $e.createElement("clipPath", {
    id: "foldCrop" + D
  }, /* @__PURE__ */ $e.createElement("rect", {
    width: Xt.WIDTH,
    height: ni.HEIGHT,
    transform: "rotate(-45 0 " + ni.HEIGHT + ")"
  })), /* @__PURE__ */ $e.createElement("linearGradient", {
    x1: "100%",
    y1: "0%",
    y2: "100%",
    id: "pageGradient" + D
  }, /* @__PURE__ */ $e.createElement("stop", {
    stopColor: p,
    stopOpacity: f,
    offset: "0%"
  }), /* @__PURE__ */ $e.createElement("stop", {
    stopColor: p,
    stopOpacity: "0",
    offset: "66.67%"
  }))), /* @__PURE__ */ $e.createElement("g", {
    id: "file",
    clipPath: "url(#pageRadius" + D + ")"
  }, s ? /* @__PURE__ */ $e.createElement($e.Fragment, null, /* @__PURE__ */ $e.createElement("path", {
    d: "M" + Xt.X_OFFSET + " 0 h " + (Xt.WIDTH - ni.HEIGHT) + " L " + (Xt.WIDTH + Xt.X_OFFSET) + " " + ni.HEIGHT + " v " + (Xt.HEIGHT - ni.HEIGHT) + " H " + Xt.X_OFFSET + " Z",
    fill: r
  }), /* @__PURE__ */ $e.createElement("path", {
    d: "M" + Xt.X_OFFSET + " 0 h " + (Xt.WIDTH - ni.HEIGHT) + " L " + (Xt.WIDTH + Xt.X_OFFSET) + " " + ni.HEIGHT + " v " + (Xt.HEIGHT - ni.HEIGHT) + " H " + Xt.X_OFFSET + " Z",
    fill: "url(#pageGradient" + D + ")"
  })) : /* @__PURE__ */ $e.createElement($e.Fragment, null, /* @__PURE__ */ $e.createElement("rect", {
    x: Xt.X_OFFSET,
    y: "0",
    width: Xt.WIDTH,
    height: Xt.HEIGHT,
    fill: r
  }), /* @__PURE__ */ $e.createElement("rect", {
    x: Xt.X_OFFSET,
    y: "0",
    width: Xt.WIDTH,
    height: Xt.HEIGHT,
    fill: "url(#pageGradient" + D + ")"
  }))), s && /* @__PURE__ */ $e.createElement("g", {
    transform: "translate(28 " + ni.HEIGHT + ") rotate(-90)"
  }, /* @__PURE__ */ $e.createElement("rect", {
    width: Xt.WIDTH,
    height: Xt.HEIGHT,
    fill: l || ta(r).darken(0.1).toHex(),
    rx: x,
    ry: x,
    clipPath: "url(#foldCrop" + D + ")"
  })), a && /* @__PURE__ */ $e.createElement($e.Fragment, null, /* @__PURE__ */ $e.createElement("g", {
    id: "label" + D
  }, /* @__PURE__ */ $e.createElement("rect", {
    fill: g || ta(r).darken(0.3).toHex(),
    x: Xt.X_OFFSET,
    y: Xt.HEIGHT - By,
    width: Xt.WIDTH,
    height: By,
    clipPath: "url(#pageRadius" + D + ")"
  })), /* @__PURE__ */ $e.createElement("g", {
    id: "labelText" + D,
    transform: "translate(" + Xt.X_OFFSET + " 34)"
  }, /* @__PURE__ */ $e.createElement("text", {
    x: Xt.WIDTH / 2,
    y: "10",
    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif",
    fontSize: "9",
    fill: T,
    textAnchor: "middle",
    style: {
      fontWeight: "bold",
      textAlign: "center",
      pointerEvents: "none",
      textTransform: A ? "uppercase" : "none",
      userSelect: "none"
    }
  }, a))), P && /* @__PURE__ */ $e.createElement("g", {
    transform: "translate(-4 " + (a ? 0 : 6) + ")",
    fill: c || ta(r).darken(0.15).toHex()
  }, xU[P]));
};
VI.propTypes = DU;
var wU = {
  "3dm": {
    labelColor: "#8D1A11",
    type: "3d"
  },
  "3ds": {
    labelColor: "#5FB9AD",
    type: "3d"
  },
  "3g2": {
    type: "video"
  },
  "3gp": {
    type: "video"
  },
  "7zip": {
    type: "compressed"
  },
  aab: {
    type: "android",
    labelColor: "#3DDC84"
  },
  aac: {
    type: "audio"
  },
  aep: {
    type: "video"
  },
  ai: {
    color: "#423325",
    gradientOpacity: 0,
    labelColor: "#423325",
    labelTextColor: "#FF7F18",
    labelUppercase: !0,
    foldColor: "#FF7F18",
    radius: 2
  },
  aif: {
    type: "audio"
  },
  aiff: {
    type: "audio"
  },
  apk: {
    type: "android",
    labelColor: "#3DDC84"
  },
  apkm: {
    type: "android",
    labelColor: "#3DDC84"
  },
  apks: {
    type: "android",
    labelColor: "#3DDC84"
  },
  asf: {
    type: "video"
  },
  asp: {
    type: "code"
  },
  aspx: {
    type: "code"
  },
  avi: {
    type: "video"
  },
  bin: {
    type: "binary"
  },
  bmp: {
    type: "image"
  },
  c: {
    type: "code"
  },
  cpp: {
    type: "code"
  },
  cs: {
    type: "code"
  },
  css: {
    type: "code"
  },
  csv: {
    type: "spreadsheet"
  },
  cue: {
    type: "document"
  },
  dll: {
    type: "settings"
  },
  dmg: {
    type: "drive"
  },
  doc: {
    color: "#2C5898",
    foldColor: "#254A80",
    glyphColor: "rgba(255,255,255,0.4)",
    labelColor: "#2C5898",
    labelUppercase: !0,
    type: "document"
  },
  docx: {
    color: "#2C5898",
    foldColor: "#254A80",
    glyphColor: "rgba(255,255,255,0.4)",
    labelColor: "#2C5898",
    labelUppercase: !0,
    type: "document"
  },
  dwg: {
    type: "vector"
  },
  dxf: {
    type: "vector"
  },
  eot: {
    type: "font"
  },
  eps: {
    type: "vector"
  },
  exe: {
    type: "settings"
  },
  flac: {
    type: "audio"
  },
  flv: {
    type: "video"
  },
  fnt: {
    type: "font"
  },
  fodp: {
    type: "presentation"
  },
  fods: {
    type: "spreadsheet"
  },
  fodt: {
    type: "document"
  },
  fon: {
    type: "font"
  },
  gif: {
    type: "image"
  },
  gz: {
    type: "compressed"
  },
  htm: {
    type: "code"
  },
  html: {
    type: "code"
  },
  indd: {
    color: "#4B2B36",
    gradientOpacity: 0,
    labelColor: "#4B2B36",
    labelTextColor: "#FF408C",
    labelUppercase: !0,
    foldColor: "#FF408C",
    radius: 2
  },
  ini: {
    type: "settings"
  },
  java: {
    type: "code"
  },
  jpeg: {
    type: "image"
  },
  jpg: {
    type: "image"
  },
  js: {
    labelColor: "#F7DF1E",
    type: "code"
  },
  json: {
    type: "code"
  },
  jsx: {
    labelColor: "#00D8FF",
    type: "code"
  },
  m4a: {
    type: "audio"
  },
  m4v: {
    type: "video"
  },
  max: {
    labelColor: "#5FB9AD",
    type: "3d"
  },
  md: {
    type: "document"
  },
  mid: {
    type: "audio"
  },
  mkv: {
    type: "video"
  },
  mov: {
    type: "video"
  },
  mp3: {
    type: "audio"
  },
  mp4: {
    type: "video"
  },
  mpeg: {
    type: "video"
  },
  mpg: {
    type: "video"
  },
  obj: {
    type: "3d"
  },
  odp: {
    type: "presentation"
  },
  ods: {
    type: "spreadsheet"
  },
  odt: {
    type: "document"
  },
  ogg: {
    type: "audio"
  },
  ogv: {
    type: "video"
  },
  otf: {
    type: "font"
  },
  pdf: {
    labelColor: "#D93831",
    type: "acrobat"
  },
  php: {
    labelColor: "#8892BE",
    type: "code"
  },
  pkg: {
    type: "3d"
  },
  plist: {
    type: "settings"
  },
  png: {
    type: "image"
  },
  ppt: {
    color: "#D14423",
    foldColor: "#AB381D",
    glyphColor: "rgba(255,255,255,0.4)",
    labelColor: "#D14423",
    labelUppercase: !0,
    type: "presentation"
  },
  pptx: {
    color: "#D14423",
    foldColor: "#AB381D",
    glyphColor: "rgba(255,255,255,0.4)",
    labelColor: "#D14423",
    labelUppercase: !0,
    type: "presentation"
  },
  pr: {
    type: "video"
  },
  ps: {
    type: "vector"
  },
  psd: {
    color: "#34364E",
    gradientOpacity: 0,
    labelColor: "#34364E",
    labelTextColor: "#31C5F0",
    labelUppercase: !0,
    foldColor: "#31C5F0",
    radius: 2
  },
  py: {
    labelColor: "#FFDE57",
    type: "code"
  },
  rar: {
    type: "compressed"
  },
  rb: {
    labelColor: "#BB271A",
    type: "code"
  },
  rm: {
    type: "video"
  },
  rtf: {
    type: "document"
  },
  scss: {
    labelColor: "#C16A98",
    type: "code"
  },
  sitx: {
    type: "compressed"
  },
  skp: {
    type: "3d"
  },
  svg: {
    type: "vector"
  },
  swf: {
    type: "video"
  },
  sys: {
    type: "settings"
  },
  tar: {
    type: "compressed"
  },
  tex: {
    type: "document"
  },
  tif: {
    type: "image"
  },
  tiff: {
    type: "image"
  },
  ts: {
    labelColor: "#3478C7",
    type: "code"
  },
  ttf: {
    type: "font"
  },
  txt: {
    type: "document"
  },
  wav: {
    type: "audio"
  },
  webm: {
    type: "video"
  },
  wmv: {
    type: "video"
  },
  woff: {
    type: "font"
  },
  wpd: {
    type: "document"
  },
  wps: {
    type: "document"
  },
  xapk: {
    type: "android",
    labelColor: "#3DDC84"
  },
  xlr: {
    type: "spreadsheet"
  },
  xls: {
    color: "#1A754C",
    foldColor: "#16613F",
    glyphColor: "rgba(255,255,255,0.4)",
    labelColor: "#1A754C",
    labelUppercase: !0,
    type: "spreadsheet"
  },
  xlsx: {
    color: "#1A754C",
    foldColor: "#16613F",
    glyphColor: "rgba(255,255,255,0.4)",
    labelColor: "#1A754C",
    labelUppercase: !0,
    type: "spreadsheet"
  },
  yml: {
    type: "code"
  },
  zip: {
    type: "compressed"
  },
  zipx: {
    type: "compressed"
  }
};
const $I = ({ name: t, mime: e, children: n }) => {
  const r = e ? e.split("/").pop() : "txt";
  return /* @__PURE__ */ C.jsxs(
    Zt,
    {
      position: "relative",
      sx: (a) => ({
        height: 50,
        [a.breakpoints.down("sm")]: {
          height: 36
        }
      }),
      children: [
        n,
        /* @__PURE__ */ C.jsxs(
          fn,
          {
            sx: (a) => ({
              height: "100%",
              flexDirection: "row",
              alignItems: "center",
              gap: 1.2,
              borderRadius: "0.7rem",
              px: 1.2,
              border: (i) => `1px solid ${i.palette.primary.main}`,
              color: (i) => i.palette.mode === "light" ? i.palette.primary.main : i.palette.text.primary,
              background: (i) => i.palette.mode === "light" ? i.palette.primary.light : i.palette.primary.dark,
              width: 160,
              [a.breakpoints.down("sm")]: {
                width: "fit-content",
                maxWidth: 120
              }
            }),
            children: [
              /* @__PURE__ */ C.jsx(
                Zt,
                {
                  sx: (a) => ({
                    width: "2rem",
                    [a.breakpoints.down("sm")]: {
                      width: "1.25rem"
                    }
                  }),
                  children: /* @__PURE__ */ C.jsx(VI, { ...wU[r], extension: r })
                }
              ),
              /* @__PURE__ */ C.jsx(
                _s,
                {
                  sx: {
                    textOverflow: "ellipsis",
                    overflow: "hidden",
                    whiteSpace: "nowrap",
                    fontWeight: 500,
                    fontSize: "0.8rem",
                    width: "70%"
                  },
                  children: t
                }
              )
            ]
          }
        )
      ]
    }
  );
}, LU = ({ element: t }) => t.url ? /* @__PURE__ */ C.jsx(
  yE,
  {
    className: `${t.display}-file`,
    download: t.name,
    href: t.url,
    target: "_blank",
    sx: {
      textDecoration: "none"
    },
    children: /* @__PURE__ */ C.jsx($I, { name: t.name, mime: t.mime })
  }
) : null, MU = ({ items: t }) => /* @__PURE__ */ C.jsx(fn, { spacing: 1, direction: "row", children: t.map((e, n) => /* @__PURE__ */ C.jsx("div", { children: /* @__PURE__ */ C.jsx(LU, { element: e }) }, n)) }), kU = ({ children: t }) => /* @__PURE__ */ C.jsx(
  Zt,
  {
    sx: {
      p: 1,
      boxSizing: "border-box",
      bgcolor: (e) => e.palette.mode === "light" ? Bt[200] : Bt[900],
      borderRadius: "4px",
      display: "flex"
    },
    children: t
  }
), PU = (t, e) => {
  const n = window.innerWidth / 2, r = window.innerHeight / 2, a = window.innerWidth / 4, i = window.innerHeight / 4, s = window.open(
    "",
    "_blank",
    `width=${n},height=${r},left=${a},top=${i}`
  );
  s && (s.document.write(`
      <html>
        <head>
          <title>${t}</title>
          <link rel="icon" href="/favicon">
          <style>
            body {
              margin: 0;
              display: flex;
              flex-direction: column;
              justify-content: center;
              align-items: center;
              height: 100vh;
              background-color: rgba(0, 0, 0, 0.8);
            }
            img {
              max-width: 100%;
              max-height: calc(100% - 50px);
            }
            a {
              margin: 10px 0;
              color: white;
              text-decoration: none;
              font-size: 15px;
              background-color: rgba(255, 255, 255, 0.2);
              padding: 8px 12px;
              border-radius: 5px;
            }
            a:hover {
              background-color: rgba(255, 255, 255, 0.4);
            }
          </style>
        </head>
        <body>
          <img src="${e}" alt="${t}" />
          <a href="${e}" download="${t}">Download</a>
        </body>
      </html>
    `), s.document.close());
}, FU = ({ element: t }) => {
  const [e, n] = Hn(!0);
  return t.url ? /* @__PURE__ */ C.jsxs(kU, { children: [
    e && /* @__PURE__ */ C.jsx(e7, { variant: "rectangular", width: "100%", height: 200 }),
    /* @__PURE__ */ C.jsx(
      "img",
      {
        className: `${t.display}-image`,
        src: t.url,
        onLoad: () => n(!1),
        onClick: () => {
          if (t.display === "inline") {
            const r = `${t.name}.png`;
            PU(r, t.url);
          }
        },
        style: {
          objectFit: "cover",
          maxWidth: "100%",
          margin: "auto",
          height: "auto",
          display: "block",
          cursor: t.display === "inline" ? "pointer" : "default"
        },
        alt: t.name,
        loading: "lazy"
      }
    )
  ] }) : null;
}, Uy = (t) => {
  switch (t.size) {
    case "small":
      return 1;
    case "medium":
      return 2;
    case "large":
      return 4;
    default:
      return 2;
  }
}, WI = ({
  elements: t,
  renderElement: e
}) => /* @__PURE__ */ C.jsx(
  t7,
  {
    sx: {
      margin: 0,
      // Promote the list into its own layer in Chrome. This costs memory, but helps keeping high FPS.
      transform: "translateZ(0)",
      width: "100%",
      maxWidth: 600,
      overflowY: "hidden"
    },
    variant: "quilted",
    cols: 4,
    gap: 8,
    children: t.map((n, r) => {
      const a = Uy(n), i = Uy(n);
      return /* @__PURE__ */ C.jsx(n7, { cols: a, rows: i, children: /* @__PURE__ */ C.jsx(e, { element: n }) }, r);
    })
  }
), BU = ({ items: t }) => /* @__PURE__ */ C.jsx(
  WI,
  {
    elements: t,
    renderElement: (e) => /* @__PURE__ */ C.jsx(FU, { element: e.element })
  }
), UU = ({ element: t }) => {
  if (!t.url)
    return null;
  const e = t.page ? `${t.url}#page=${t.page}` : t.url;
  return /* @__PURE__ */ C.jsx(
    "iframe",
    {
      className: `${t.display}-pdf`,
      src: e,
      style: { border: "none" },
      width: "100%",
      height: "100%"
    }
  );
}, GU = ({ items: t }) => /* @__PURE__ */ C.jsx(fn, { spacing: 1, children: t.map((e, n) => /* @__PURE__ */ C.jsx(
  "div",
  {
    style: {
      maxWidth: "600px",
      height: "400px"
    },
    children: /* @__PURE__ */ C.jsx(UU, { element: e })
  },
  n
)) });
class KI extends SP {
  state = {
    hasError: !1,
    error: void 0
  };
  static getDerivedStateFromError(e) {
    return { hasError: !0, error: e.message };
  }
  componentDidCatch(e, n) {
    console.error("Uncaught error:", e, n);
  }
  render() {
    if (this.state.hasError) {
      const e = this.props.prefix ? `${this.props.prefix}: ${this.state.error}` : this.state.error;
      return /* @__PURE__ */ C.jsx(Zt, { flexGrow: 1, children: /* @__PURE__ */ C.jsx(x2, { severity: "error", children: e }) });
    }
    return this.props.children;
  }
}
const HU = bP(() => import("./react-plotly-28UHSrG-.js").then((t) => t.r)), YU = ({ element: t }) => {
  const { data: e, error: n, isLoading: r } = KE(t.url || null);
  if (r)
    return /* @__PURE__ */ C.jsx("div", { children: "Loading..." });
  if (n)
    return /* @__PURE__ */ C.jsx("div", { children: "An error occurred" });
  let a;
  if (e)
    a = e;
  else
    return null;
  return /* @__PURE__ */ C.jsx(TP, { fallback: /* @__PURE__ */ C.jsx("div", { children: "Loading..." }), children: /* @__PURE__ */ C.jsx(
    HU,
    {
      className: `${t.display}-plotly`,
      data: a.data,
      layout: a.layout,
      frames: a.frames,
      config: a.config,
      style: {
        width: "100%",
        height: "100%",
        borderRadius: "1rem",
        overflow: "hidden"
      },
      useResizeHandler: !0
    }
  ) });
}, zU = (t) => /* @__PURE__ */ C.jsx(KI, { prefix: "Failed to load chart.", children: /* @__PURE__ */ C.jsx(YU, { ...t }) }), qU = ({ items: t }) => /* @__PURE__ */ C.jsx(fn, { spacing: 1, children: t.map((e, n) => /* @__PURE__ */ C.jsx(
  "div",
  {
    style: {
      maxWidth: "600px",
      height: "400px"
    },
    children: /* @__PURE__ */ C.jsx(zU, { element: e })
  },
  n
)) });
function Gy(t) {
  const e = [], n = String(t || "");
  let r = n.indexOf(","), a = 0, i = !1;
  for (; !i; ) {
    r === -1 && (r = n.length, i = !0);
    const s = n.slice(a, r).trim();
    (s || !i) && e.push(s), a = r + 1, r = n.indexOf(",", a);
  }
  return e;
}
function QI(t, e) {
  const n = {};
  return (t[t.length - 1] === "" ? [...t, ""] : t).join(
    (n.padRight ? " " : "") + "," + (n.padLeft === !1 ? "" : " ")
  ).trim();
}
const VU = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u, $U = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u, WU = {};
function Hy(t, e) {
  return (WU.jsx ? $U : VU).test(t);
}
const KU = /[ \t\n\f\r]/g;
function QU(t) {
  return typeof t == "object" ? t.type === "text" ? Yy(t.value) : !1 : Yy(t);
}
function Yy(t) {
  return t.replace(KU, "") === "";
}
class Wl {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(e, n, r) {
    this.property = e, this.normal = n, r && (this.space = r);
  }
}
Wl.prototype.property = {};
Wl.prototype.normal = {};
Wl.prototype.space = null;
function jI(t, e) {
  const n = {}, r = {};
  let a = -1;
  for (; ++a < t.length; )
    Object.assign(n, t[a].property), Object.assign(r, t[a].normal);
  return new Wl(n, r, e);
}
function Ml(t) {
  return t.toLowerCase();
}
class da {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(e, n) {
    this.property = e, this.attribute = n;
  }
}
da.prototype.space = null;
da.prototype.boolean = !1;
da.prototype.booleanish = !1;
da.prototype.overloadedBoolean = !1;
da.prototype.number = !1;
da.prototype.commaSeparated = !1;
da.prototype.spaceSeparated = !1;
da.prototype.commaOrSpaceSeparated = !1;
da.prototype.mustUseProperty = !1;
da.prototype.defined = !1;
let jU = 0;
const Et = hs(), Mn = hs(), XI = hs(), Pe = hs(), sn = hs(), Js = hs(), Gr = hs();
function hs() {
  return 2 ** ++jU;
}
const Mh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  boolean: Et,
  booleanish: Mn,
  commaOrSpaceSeparated: Gr,
  commaSeparated: Js,
  number: Pe,
  overloadedBoolean: XI,
  spaceSeparated: sn
}, Symbol.toStringTag, { value: "Module" })), V0 = Object.keys(Mh);
class QE extends da {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(e, n, r, a) {
    let i = -1;
    if (super(e, n), zy(this, "space", a), typeof r == "number")
      for (; ++i < V0.length; ) {
        const s = V0[i];
        zy(this, V0[i], (r & Mh[s]) === Mh[s]);
      }
  }
}
QE.prototype.defined = !0;
function zy(t, e, n) {
  n && (t[e] = n);
}
const XU = {}.hasOwnProperty;
function fo(t) {
  const e = {}, n = {};
  let r;
  for (r in t.properties)
    if (XU.call(t.properties, r)) {
      const a = t.properties[r], i = new QE(
        r,
        t.transform(t.attributes || {}, r),
        a,
        t.space
      );
      t.mustUseProperty && t.mustUseProperty.includes(r) && (i.mustUseProperty = !0), e[r] = i, n[Ml(r)] = r, n[Ml(i.attribute)] = r;
    }
  return new Wl(e, n, t.space);
}
const ZI = fo({
  space: "xlink",
  transform(t, e) {
    return "xlink:" + e.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
}), JI = fo({
  space: "xml",
  transform(t, e) {
    return "xml:" + e.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
});
function ex(t, e) {
  return e in t ? t[e] : e;
}
function tx(t, e) {
  return ex(t, e.toLowerCase());
}
const nx = fo({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: tx,
  properties: { xmlns: null, xmlnsXLink: null }
}), rx = fo({
  transform(t, e) {
    return e === "role" ? e : "aria-" + e.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: Mn,
    ariaAutoComplete: null,
    ariaBusy: Mn,
    ariaChecked: Mn,
    ariaColCount: Pe,
    ariaColIndex: Pe,
    ariaColSpan: Pe,
    ariaControls: sn,
    ariaCurrent: null,
    ariaDescribedBy: sn,
    ariaDetails: null,
    ariaDisabled: Mn,
    ariaDropEffect: sn,
    ariaErrorMessage: null,
    ariaExpanded: Mn,
    ariaFlowTo: sn,
    ariaGrabbed: Mn,
    ariaHasPopup: null,
    ariaHidden: Mn,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: sn,
    ariaLevel: Pe,
    ariaLive: null,
    ariaModal: Mn,
    ariaMultiLine: Mn,
    ariaMultiSelectable: Mn,
    ariaOrientation: null,
    ariaOwns: sn,
    ariaPlaceholder: null,
    ariaPosInSet: Pe,
    ariaPressed: Mn,
    ariaReadOnly: Mn,
    ariaRelevant: null,
    ariaRequired: Mn,
    ariaRoleDescription: sn,
    ariaRowCount: Pe,
    ariaRowIndex: Pe,
    ariaRowSpan: Pe,
    ariaSelected: Mn,
    ariaSetSize: Pe,
    ariaSort: null,
    ariaValueMax: Pe,
    ariaValueMin: Pe,
    ariaValueNow: Pe,
    ariaValueText: null,
    role: null
  }
}), ZU = fo({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  transform: tx,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: Js,
    acceptCharset: sn,
    accessKey: sn,
    action: null,
    allow: null,
    allowFullScreen: Et,
    allowPaymentRequest: Et,
    allowUserMedia: Et,
    alt: null,
    as: null,
    async: Et,
    autoCapitalize: null,
    autoComplete: sn,
    autoFocus: Et,
    autoPlay: Et,
    blocking: sn,
    capture: null,
    charSet: null,
    checked: Et,
    cite: null,
    className: sn,
    cols: Pe,
    colSpan: null,
    content: null,
    contentEditable: Mn,
    controls: Et,
    controlsList: sn,
    coords: Pe | Js,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: Et,
    defer: Et,
    dir: null,
    dirName: null,
    disabled: Et,
    download: XI,
    draggable: Mn,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: Et,
    formTarget: null,
    headers: sn,
    height: Pe,
    hidden: Et,
    high: Pe,
    href: null,
    hrefLang: null,
    htmlFor: sn,
    httpEquiv: sn,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: Et,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: Et,
    itemId: null,
    itemProp: sn,
    itemRef: sn,
    itemScope: Et,
    itemType: sn,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: Et,
    low: Pe,
    manifest: null,
    max: null,
    maxLength: Pe,
    media: null,
    method: null,
    min: null,
    minLength: Pe,
    multiple: Et,
    muted: Et,
    name: null,
    nonce: null,
    noModule: Et,
    noValidate: Et,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: Et,
    optimum: Pe,
    pattern: null,
    ping: sn,
    placeholder: null,
    playsInline: Et,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: Et,
    referrerPolicy: null,
    rel: sn,
    required: Et,
    reversed: Et,
    rows: Pe,
    rowSpan: Pe,
    sandbox: sn,
    scope: null,
    scoped: Et,
    seamless: Et,
    selected: Et,
    shadowRootDelegatesFocus: Et,
    shadowRootMode: null,
    shape: null,
    size: Pe,
    sizes: null,
    slot: null,
    span: Pe,
    spellCheck: Mn,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: Pe,
    step: null,
    style: null,
    tabIndex: Pe,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: Et,
    useMap: null,
    value: Mn,
    width: Pe,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: sn,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: Pe,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: Pe,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: Et,
    // Lists. Use CSS to reduce space between items instead
    declare: Et,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: Pe,
    // `<img>` and `<object>`
    leftMargin: Pe,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: Pe,
    // `<body>`
    marginWidth: Pe,
    // `<body>`
    noResize: Et,
    // `<frame>`
    noHref: Et,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: Et,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: Et,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: Pe,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: Mn,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: Pe,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: Pe,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: Et,
    disableRemotePlayback: Et,
    prefix: null,
    property: null,
    results: Pe,
    security: null,
    unselectable: null
  }
}), JU = fo({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  transform: ex,
  properties: {
    about: Gr,
    accentHeight: Pe,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: Pe,
    amplitude: Pe,
    arabicForm: null,
    ascent: Pe,
    attributeName: null,
    attributeType: null,
    azimuth: Pe,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: Pe,
    by: null,
    calcMode: null,
    capHeight: Pe,
    className: sn,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: Pe,
    diffuseConstant: Pe,
    direction: null,
    display: null,
    dur: null,
    divisor: Pe,
    dominantBaseline: null,
    download: Et,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: Pe,
    enableBackground: null,
    end: null,
    event: null,
    exponent: Pe,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: Pe,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: Js,
    g2: Js,
    glyphName: Js,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: Pe,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: Pe,
    horizOriginX: Pe,
    horizOriginY: Pe,
    id: null,
    ideographic: Pe,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: Pe,
    k: Pe,
    k1: Pe,
    k2: Pe,
    k3: Pe,
    k4: Pe,
    kernelMatrix: Gr,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: Pe,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: Pe,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: Pe,
    overlineThickness: Pe,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: Pe,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: sn,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: Pe,
    pointsAtY: Pe,
    pointsAtZ: Pe,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: Gr,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: Gr,
    rev: Gr,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: Gr,
    requiredFeatures: Gr,
    requiredFonts: Gr,
    requiredFormats: Gr,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: Pe,
    specularExponent: Pe,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: Pe,
    strikethroughThickness: Pe,
    string: null,
    stroke: null,
    strokeDashArray: Gr,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: Pe,
    strokeOpacity: Pe,
    strokeWidth: null,
    style: null,
    surfaceScale: Pe,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: Gr,
    tabIndex: Pe,
    tableValues: null,
    target: null,
    targetX: Pe,
    targetY: Pe,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: Gr,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: Pe,
    underlineThickness: Pe,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: Pe,
    values: null,
    vAlphabetic: Pe,
    vMathematical: Pe,
    vectorEffect: null,
    vHanging: Pe,
    vIdeographic: Pe,
    version: null,
    vertAdvY: Pe,
    vertOriginX: Pe,
    vertOriginY: Pe,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: Pe,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
}), eG = /^data[-\w.:]+$/i, qy = /-[a-z]/g, tG = /[A-Z]/g;
function Dd(t, e) {
  const n = Ml(e);
  let r = e, a = da;
  if (n in t.normal)
    return t.property[t.normal[n]];
  if (n.length > 4 && n.slice(0, 4) === "data" && eG.test(e)) {
    if (e.charAt(4) === "-") {
      const i = e.slice(5).replace(qy, rG);
      r = "data" + i.charAt(0).toUpperCase() + i.slice(1);
    } else {
      const i = e.slice(4);
      if (!qy.test(i)) {
        let s = i.replace(tG, nG);
        s.charAt(0) !== "-" && (s = "-" + s), e = "data" + s;
      }
    }
    a = QE;
  }
  return new a(r, e);
}
function nG(t) {
  return "-" + t.toLowerCase();
}
function rG(t) {
  return t.charAt(1).toUpperCase();
}
const aG = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink"
}, Kl = jI([JI, ZI, nx, rx, ZU], "html"), qi = jI([JI, ZI, nx, rx, JU], "svg");
function Vy(t) {
  const e = String(t || "").trim();
  return e ? e.split(/[ \t\n\r\f]+/g) : [];
}
function ax(t) {
  return t.join(" ").trim();
}
var ix = {}, $y = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, iG = /\n/g, sG = /^\s*/, oG = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/, lG = /^:\s*/, cG = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/, uG = /^[;\s]*/, dG = /^\s+|\s+$/g, pG = `
`, Wy = "/", Ky = "*", us = "", _G = "comment", mG = "declaration", fG = function(t, e) {
  if (typeof t != "string")
    throw new TypeError("First argument must be a string");
  if (!t) return [];
  e = e || {};
  var n = 1, r = 1;
  function a(E) {
    var T = E.match(iG);
    T && (n += T.length);
    var R = E.lastIndexOf(pG);
    r = ~R ? E.length - R : r + E.length;
  }
  function i() {
    var E = { line: n, column: r };
    return function(T) {
      return T.position = new s(E), d(), T;
    };
  }
  function s(E) {
    this.start = E, this.end = { line: n, column: r }, this.source = e.source;
  }
  s.prototype.content = t;
  function l(E) {
    var T = new Error(
      e.source + ":" + n + ":" + r + ": " + E
    );
    if (T.reason = E, T.filename = e.source, T.line = n, T.column = r, T.source = t, !e.silent) throw T;
  }
  function c(E) {
    var T = E.exec(t);
    if (T) {
      var R = T[0];
      return a(R), t = t.slice(R.length), T;
    }
  }
  function d() {
    c(sG);
  }
  function p(E) {
    var T;
    for (E = E || []; T = _(); )
      T !== !1 && E.push(T);
    return E;
  }
  function _() {
    var E = i();
    if (!(Wy != t.charAt(0) || Ky != t.charAt(1))) {
      for (var T = 2; us != t.charAt(T) && (Ky != t.charAt(T) || Wy != t.charAt(T + 1)); )
        ++T;
      if (T += 2, us === t.charAt(T - 1))
        return l("End of comment missing");
      var R = t.slice(2, T - 2);
      return r += 2, a(R), t = t.slice(T), r += 2, E({
        type: _G,
        comment: R
      });
    }
  }
  function f() {
    var E = i(), T = c(oG);
    if (T) {
      if (_(), !c(lG)) return l("property missing ':'");
      var R = c(cG), A = E({
        type: mG,
        property: Qy(T[0].replace($y, us)),
        value: R ? Qy(R[0].replace($y, us)) : us
      });
      return c(uG), A;
    }
  }
  function g() {
    var E = [];
    p(E);
    for (var T; T = f(); )
      T !== !1 && (E.push(T), p(E));
    return E;
  }
  return d(), g();
};
function Qy(t) {
  return t ? t.replace(dG, us) : us;
}
var gG = Qn && Qn.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(ix, "__esModule", { value: !0 });
var hG = gG(fG);
function EG(t, e) {
  var n = null;
  if (!t || typeof t != "string")
    return n;
  var r = (0, hG.default)(t), a = typeof e == "function";
  return r.forEach(function(i) {
    if (i.type === "declaration") {
      var s = i.property, l = i.value;
      a ? e(s, l, i) : l && (n = n || {}, n[s] = l);
    }
  }), n;
}
var jy = ix.default = EG;
const SG = jy.default || jy, wd = sx("end"), Ga = sx("start");
function sx(t) {
  return e;
  function e(n) {
    const r = n && n.position && n.position[t] || {};
    if (typeof r.line == "number" && r.line > 0 && typeof r.column == "number" && r.column > 0)
      return {
        line: r.line,
        column: r.column,
        offset: typeof r.offset == "number" && r.offset > -1 ? r.offset : void 0
      };
  }
}
function bG(t) {
  const e = Ga(t), n = wd(t);
  if (e && n)
    return { start: e, end: n };
}
function El(t) {
  return !t || typeof t != "object" ? "" : "position" in t || "type" in t ? Xy(t.position) : "start" in t || "end" in t ? Xy(t) : "line" in t || "column" in t ? kh(t) : "";
}
function kh(t) {
  return Zy(t && t.line) + ":" + Zy(t && t.column);
}
function Xy(t) {
  return kh(t && t.start) + "-" + kh(t && t.end);
}
function Zy(t) {
  return t && typeof t == "number" ? t : 1;
}
class sr extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(e, n, r) {
    super(), typeof n == "string" && (r = n, n = void 0);
    let a = "", i = {}, s = !1;
    if (n && ("line" in n && "column" in n ? i = { place: n } : "start" in n && "end" in n ? i = { place: n } : "type" in n ? i = {
      ancestors: [n],
      place: n.position
    } : i = { ...n }), typeof e == "string" ? a = e : !i.cause && e && (s = !0, a = e.message, i.cause = e), !i.ruleId && !i.source && typeof r == "string") {
      const c = r.indexOf(":");
      c === -1 ? i.ruleId = r : (i.source = r.slice(0, c), i.ruleId = r.slice(c + 1));
    }
    if (!i.place && i.ancestors && i.ancestors) {
      const c = i.ancestors[i.ancestors.length - 1];
      c && (i.place = c.position);
    }
    const l = i.place && "start" in i.place ? i.place.start : i.place;
    this.ancestors = i.ancestors || void 0, this.cause = i.cause || void 0, this.column = l ? l.column : void 0, this.fatal = void 0, this.file, this.message = a, this.line = l ? l.line : void 0, this.name = El(i.place) || "1:1", this.place = i.place || void 0, this.reason = this.message, this.ruleId = i.ruleId || void 0, this.source = i.source || void 0, this.stack = s && i.cause && typeof i.cause.stack == "string" ? i.cause.stack : "", this.actual, this.expected, this.note, this.url;
  }
}
sr.prototype.file = "";
sr.prototype.name = "";
sr.prototype.reason = "";
sr.prototype.message = "";
sr.prototype.stack = "";
sr.prototype.column = void 0;
sr.prototype.line = void 0;
sr.prototype.ancestors = void 0;
sr.prototype.cause = void 0;
sr.prototype.fatal = void 0;
sr.prototype.place = void 0;
sr.prototype.ruleId = void 0;
sr.prototype.source = void 0;
const jE = {}.hasOwnProperty, TG = /* @__PURE__ */ new Map(), yG = /[A-Z]/g, vG = /-([a-z])/g, CG = /* @__PURE__ */ new Set(["table", "tbody", "thead", "tfoot", "tr"]), RG = /* @__PURE__ */ new Set(["td", "th"]), ox = "https://github.com/syntax-tree/hast-util-to-jsx-runtime";
function AG(t, e) {
  if (!e || e.Fragment === void 0)
    throw new TypeError("Expected `Fragment` in options");
  const n = e.filePath || void 0;
  let r;
  if (e.development) {
    if (typeof e.jsxDEV != "function")
      throw new TypeError(
        "Expected `jsxDEV` in options when `development: true`"
      );
    r = MG(n, e.jsxDEV);
  } else {
    if (typeof e.jsx != "function")
      throw new TypeError("Expected `jsx` in production options");
    if (typeof e.jsxs != "function")
      throw new TypeError("Expected `jsxs` in production options");
    r = LG(n, e.jsx, e.jsxs);
  }
  const a = {
    Fragment: e.Fragment,
    ancestors: [],
    components: e.components || {},
    create: r,
    elementAttributeNameCase: e.elementAttributeNameCase || "react",
    evaluater: e.createEvaluater ? e.createEvaluater() : void 0,
    filePath: n,
    ignoreInvalidStyle: e.ignoreInvalidStyle || !1,
    passKeys: e.passKeys !== !1,
    passNode: e.passNode || !1,
    schema: e.space === "svg" ? qi : Kl,
    stylePropertyNameCase: e.stylePropertyNameCase || "dom",
    tableCellAlignToStyle: e.tableCellAlignToStyle !== !1
  }, i = lx(a, t, void 0);
  return i && typeof i != "string" ? i : a.create(
    t,
    a.Fragment,
    { children: i || void 0 },
    void 0
  );
}
function lx(t, e, n) {
  if (e.type === "element")
    return OG(t, e, n);
  if (e.type === "mdxFlowExpression" || e.type === "mdxTextExpression")
    return NG(t, e);
  if (e.type === "mdxJsxFlowElement" || e.type === "mdxJsxTextElement")
    return xG(t, e, n);
  if (e.type === "mdxjsEsm")
    return IG(t, e);
  if (e.type === "root")
    return DG(t, e, n);
  if (e.type === "text")
    return wG(t, e);
}
function OG(t, e, n) {
  const r = t.schema;
  let a = r;
  e.tagName.toLowerCase() === "svg" && r.space === "html" && (a = qi, t.schema = a), t.ancestors.push(e);
  const i = ux(t, e.tagName, !1), s = kG(t, e);
  let l = ZE(t, e);
  return CG.has(e.tagName) && (l = l.filter(function(c) {
    return typeof c == "string" ? !QU(c) : !0;
  })), cx(t, s, i, e), XE(s, l), t.ancestors.pop(), t.schema = r, t.create(e, i, s, n);
}
function NG(t, e) {
  if (e.data && e.data.estree && t.evaluater) {
    const r = e.data.estree.body[0];
    return r.type, /** @type {Child | undefined} */
    t.evaluater.evaluateExpression(r.expression);
  }
  kl(t, e.position);
}
function IG(t, e) {
  if (e.data && e.data.estree && t.evaluater)
    return (
      /** @type {Child | undefined} */
      t.evaluater.evaluateProgram(e.data.estree)
    );
  kl(t, e.position);
}
function xG(t, e, n) {
  const r = t.schema;
  let a = r;
  e.name === "svg" && r.space === "html" && (a = qi, t.schema = a), t.ancestors.push(e);
  const i = e.name === null ? t.Fragment : ux(t, e.name, !0), s = PG(t, e), l = ZE(t, e);
  return cx(t, s, i, e), XE(s, l), t.ancestors.pop(), t.schema = r, t.create(e, i, s, n);
}
function DG(t, e, n) {
  const r = {};
  return XE(r, ZE(t, e)), t.create(e, t.Fragment, r, n);
}
function wG(t, e) {
  return e.value;
}
function cx(t, e, n, r) {
  typeof n != "string" && n !== t.Fragment && t.passNode && (e.node = r);
}
function XE(t, e) {
  if (e.length > 0) {
    const n = e.length > 1 ? e : e[0];
    n && (t.children = n);
  }
}
function LG(t, e, n) {
  return r;
  function r(a, i, s, l) {
    const d = Array.isArray(s.children) ? n : e;
    return l ? d(i, s, l) : d(i, s);
  }
}
function MG(t, e) {
  return n;
  function n(r, a, i, s) {
    const l = Array.isArray(i.children), c = Ga(r);
    return e(
      a,
      i,
      s,
      l,
      {
        columnNumber: c ? c.column - 1 : void 0,
        fileName: t,
        lineNumber: c ? c.line : void 0
      },
      void 0
    );
  }
}
function kG(t, e) {
  const n = {};
  let r, a;
  for (a in e.properties)
    if (a !== "children" && jE.call(e.properties, a)) {
      const i = FG(t, a, e.properties[a]);
      if (i) {
        const [s, l] = i;
        t.tableCellAlignToStyle && s === "align" && typeof l == "string" && RG.has(e.tagName) ? r = l : n[s] = l;
      }
    }
  if (r) {
    const i = (
      /** @type {Style} */
      n.style || (n.style = {})
    );
    i[t.stylePropertyNameCase === "css" ? "text-align" : "textAlign"] = r;
  }
  return n;
}
function PG(t, e) {
  const n = {};
  for (const r of e.attributes)
    if (r.type === "mdxJsxExpressionAttribute")
      if (r.data && r.data.estree && t.evaluater) {
        const i = r.data.estree.body[0];
        i.type;
        const s = i.expression;
        s.type;
        const l = s.properties[0];
        l.type, Object.assign(
          n,
          t.evaluater.evaluateExpression(l.argument)
        );
      } else
        kl(t, e.position);
    else {
      const a = r.name;
      let i;
      if (r.value && typeof r.value == "object")
        if (r.value.data && r.value.data.estree && t.evaluater) {
          const l = r.value.data.estree.body[0];
          l.type, i = t.evaluater.evaluateExpression(l.expression);
        } else
          kl(t, e.position);
      else
        i = r.value === null ? !0 : r.value;
      n[a] = /** @type {Props[keyof Props]} */
      i;
    }
  return n;
}
function ZE(t, e) {
  const n = [];
  let r = -1;
  const a = t.passKeys ? /* @__PURE__ */ new Map() : TG;
  for (; ++r < e.children.length; ) {
    const i = e.children[r];
    let s;
    if (t.passKeys) {
      const c = i.type === "element" ? i.tagName : i.type === "mdxJsxFlowElement" || i.type === "mdxJsxTextElement" ? i.name : void 0;
      if (c) {
        const d = a.get(c) || 0;
        s = c + "-" + d, a.set(c, d + 1);
      }
    }
    const l = lx(t, i, s);
    l !== void 0 && n.push(l);
  }
  return n;
}
function FG(t, e, n) {
  const r = Dd(t.schema, e);
  if (!(n == null || typeof n == "number" && Number.isNaN(n))) {
    if (Array.isArray(n) && (n = r.commaSeparated ? QI(n) : ax(n)), r.property === "style") {
      let a = typeof n == "object" ? n : BG(t, String(n));
      return t.stylePropertyNameCase === "css" && (a = UG(a)), ["style", a];
    }
    return [
      t.elementAttributeNameCase === "react" && r.space ? aG[r.property] || r.property : r.attribute,
      n
    ];
  }
}
function BG(t, e) {
  const n = {};
  try {
    SG(e, r);
  } catch (a) {
    if (!t.ignoreInvalidStyle) {
      const i = (
        /** @type {Error} */
        a
      ), s = new sr("Cannot parse `style` attribute", {
        ancestors: t.ancestors,
        cause: i,
        ruleId: "style",
        source: "hast-util-to-jsx-runtime"
      });
      throw s.file = t.filePath || void 0, s.url = ox + "#cannot-parse-style-attribute", s;
    }
  }
  return n;
  function r(a, i) {
    let s = a;
    s.slice(0, 2) !== "--" && (s.slice(0, 4) === "-ms-" && (s = "ms-" + s.slice(4)), s = s.replace(vG, HG)), n[s] = i;
  }
}
function ux(t, e, n) {
  let r;
  if (!n)
    r = { type: "Literal", value: e };
  else if (e.includes(".")) {
    const a = e.split(".");
    let i = -1, s;
    for (; ++i < a.length; ) {
      const l = Hy(a[i]) ? { type: "Identifier", name: a[i] } : { type: "Literal", value: a[i] };
      s = s ? {
        type: "MemberExpression",
        object: s,
        property: l,
        computed: !!(i && l.type === "Literal"),
        optional: !1
      } : l;
    }
    r = s;
  } else
    r = Hy(e) && !/^[a-z]/.test(e) ? { type: "Identifier", name: e } : { type: "Literal", value: e };
  if (r.type === "Literal") {
    const a = (
      /** @type {keyof JSX.IntrinsicElements} */
      r.value
    );
    return jE.call(t.components, a) ? t.components[a] : a;
  }
  if (t.evaluater)
    return t.evaluater.evaluateExpression(r);
  kl(t);
}
function kl(t, e) {
  const n = new sr(
    "Cannot handle MDX estrees without `createEvaluater`",
    {
      ancestors: t.ancestors,
      place: e,
      ruleId: "mdx-estree",
      source: "hast-util-to-jsx-runtime"
    }
  );
  throw n.file = t.filePath || void 0, n.url = ox + "#cannot-handle-mdx-estrees-without-createevaluater", n;
}
function UG(t) {
  const e = {};
  let n;
  for (n in t)
    jE.call(t, n) && (e[GG(n)] = t[n]);
  return e;
}
function GG(t) {
  let e = t.replace(yG, YG);
  return e.slice(0, 3) === "ms-" && (e = "-" + e), e;
}
function HG(t, e) {
  return e.toUpperCase();
}
function YG(t) {
  return "-" + t.toLowerCase();
}
const $0 = {
  action: ["form"],
  cite: ["blockquote", "del", "ins", "q"],
  data: ["object"],
  formAction: ["button", "input"],
  href: ["a", "area", "base", "link"],
  icon: ["menuitem"],
  itemId: null,
  manifest: ["html"],
  ping: ["a", "area"],
  poster: ["video"],
  src: [
    "audio",
    "embed",
    "iframe",
    "img",
    "input",
    "script",
    "source",
    "track",
    "video"
  ]
}, zG = {};
function JE(t, e) {
  const n = zG, r = typeof n.includeImageAlt == "boolean" ? n.includeImageAlt : !0, a = typeof n.includeHtml == "boolean" ? n.includeHtml : !0;
  return dx(t, r, a);
}
function dx(t, e, n) {
  if (qG(t)) {
    if ("value" in t)
      return t.type === "html" && !n ? "" : t.value;
    if (e && "alt" in t && t.alt)
      return t.alt;
    if ("children" in t)
      return Jy(t.children, e, n);
  }
  return Array.isArray(t) ? Jy(t, e, n) : "";
}
function Jy(t, e, n) {
  const r = [];
  let a = -1;
  for (; ++a < t.length; )
    r[a] = dx(t[a], e, n);
  return r.join("");
}
function qG(t) {
  return !!(t && typeof t == "object");
}
const ev = document.createElement("i");
function e1(t) {
  const e = "&" + t + ";";
  ev.innerHTML = e;
  const n = ev.textContent;
  return n.charCodeAt(n.length - 1) === 59 && t !== "semi" || n === e ? !1 : n;
}
function qr(t, e, n, r) {
  const a = t.length;
  let i = 0, s;
  if (e < 0 ? e = -e > a ? 0 : a + e : e = e > a ? a : e, n = n > 0 ? n : 0, r.length < 1e4)
    s = Array.from(r), s.unshift(e, n), t.splice(...s);
  else
    for (n && t.splice(e, n); i < r.length; )
      s = r.slice(i, i + 1e4), s.unshift(e, 0), t.splice(...s), i += 1e4, e += 1e4;
}
function ra(t, e) {
  return t.length > 0 ? (qr(t, t.length, 0, e), t) : e;
}
const tv = {}.hasOwnProperty;
function px(t) {
  const e = {};
  let n = -1;
  for (; ++n < t.length; )
    VG(e, t[n]);
  return e;
}
function VG(t, e) {
  let n;
  for (n in e) {
    const a = (tv.call(t, n) ? t[n] : void 0) || (t[n] = {}), i = e[n];
    let s;
    if (i)
      for (s in i) {
        tv.call(a, s) || (a[s] = []);
        const l = i[s];
        $G(
          // @ts-expect-error Looks like a list.
          a[s],
          Array.isArray(l) ? l : l ? [l] : []
        );
      }
  }
}
function $G(t, e) {
  let n = -1;
  const r = [];
  for (; ++n < e.length; )
    (e[n].add === "after" ? t : r).push(e[n]);
  qr(t, 0, 0, r);
}
function _x(t, e) {
  const n = Number.parseInt(t, e);
  return (
    // C0 except for HT, LF, FF, CR, space.
    n < 9 || n === 11 || n > 13 && n < 32 || // Control character (DEL) of C0, and C1 controls.
    n > 126 && n < 160 || // Lone high surrogates and low surrogates.
    n > 55295 && n < 57344 || // Noncharacters.
    n > 64975 && n < 65008 || /* eslint-disable no-bitwise */
    (n & 65535) === 65535 || (n & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    n > 1114111 ? "�" : String.fromCodePoint(n)
  );
}
function Ta(t) {
  return t.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}
const hr = Vi(/[A-Za-z]/), ir = Vi(/[\dA-Za-z]/), WG = Vi(/[#-'*+\--9=?A-Z^-~]/);
function td(t) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    t !== null && (t < 32 || t === 127)
  );
}
const Ph = Vi(/\d/), KG = Vi(/[\dA-Fa-f]/), QG = Vi(/[!-/:-@[-`{-~]/);
function Je(t) {
  return t !== null && t < -2;
}
function en(t) {
  return t !== null && (t < 0 || t === 32);
}
function wt(t) {
  return t === -2 || t === -1 || t === 32;
}
const Ld = Vi(/\p{P}|\p{S}/u), fs = Vi(/\s/);
function Vi(t) {
  return e;
  function e(n) {
    return n !== null && n > -1 && t.test(String.fromCharCode(n));
  }
}
function go(t) {
  const e = [];
  let n = -1, r = 0, a = 0;
  for (; ++n < t.length; ) {
    const i = t.charCodeAt(n);
    let s = "";
    if (i === 37 && ir(t.charCodeAt(n + 1)) && ir(t.charCodeAt(n + 2)))
      a = 2;
    else if (i < 128)
      /[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(i)) || (s = String.fromCharCode(i));
    else if (i > 55295 && i < 57344) {
      const l = t.charCodeAt(n + 1);
      i < 56320 && l > 56319 && l < 57344 ? (s = String.fromCharCode(i, l), a = 1) : s = "�";
    } else
      s = String.fromCharCode(i);
    s && (e.push(t.slice(r, n), encodeURIComponent(s)), r = n + a + 1, s = ""), a && (n += a, a = 0);
  }
  return e.join("") + t.slice(r);
}
function Nt(t, e, n, r) {
  const a = r ? r - 1 : Number.POSITIVE_INFINITY;
  let i = 0;
  return s;
  function s(c) {
    return wt(c) ? (t.enter(n), l(c)) : e(c);
  }
  function l(c) {
    return wt(c) && i++ < a ? (t.consume(c), l) : (t.exit(n), e(c));
  }
}
const jG = {
  tokenize: XG
};
function XG(t) {
  const e = t.attempt(
    this.parser.constructs.contentInitial,
    r,
    a
  );
  let n;
  return e;
  function r(l) {
    if (l === null) {
      t.consume(l);
      return;
    }
    return t.enter("lineEnding"), t.consume(l), t.exit("lineEnding"), Nt(t, e, "linePrefix");
  }
  function a(l) {
    return t.enter("paragraph"), i(l);
  }
  function i(l) {
    const c = t.enter("chunkText", {
      contentType: "text",
      previous: n
    });
    return n && (n.next = c), n = c, s(l);
  }
  function s(l) {
    if (l === null) {
      t.exit("chunkText"), t.exit("paragraph"), t.consume(l);
      return;
    }
    return Je(l) ? (t.consume(l), t.exit("chunkText"), i) : (t.consume(l), s);
  }
}
const ZG = {
  tokenize: JG
}, nv = {
  tokenize: eH
};
function JG(t) {
  const e = this, n = [];
  let r = 0, a, i, s;
  return l;
  function l(x) {
    if (r < n.length) {
      const P = n[r];
      return e.containerState = P[1], t.attempt(
        P[0].continuation,
        c,
        d
      )(x);
    }
    return d(x);
  }
  function c(x) {
    if (r++, e.containerState._closeFlow) {
      e.containerState._closeFlow = void 0, a && I();
      const P = e.events.length;
      let D = P, L;
      for (; D--; )
        if (e.events[D][0] === "exit" && e.events[D][1].type === "chunkFlow") {
          L = e.events[D][1].end;
          break;
        }
      A(r);
      let K = P;
      for (; K < e.events.length; )
        e.events[K][1].end = Object.assign({}, L), K++;
      return qr(
        e.events,
        D + 1,
        0,
        e.events.slice(P)
      ), e.events.length = K, d(x);
    }
    return l(x);
  }
  function d(x) {
    if (r === n.length) {
      if (!a)
        return f(x);
      if (a.currentConstruct && a.currentConstruct.concrete)
        return E(x);
      e.interrupt = !!(a.currentConstruct && !a._gfmTableDynamicInterruptHack);
    }
    return e.containerState = {}, t.check(
      nv,
      p,
      _
    )(x);
  }
  function p(x) {
    return a && I(), A(r), f(x);
  }
  function _(x) {
    return e.parser.lazy[e.now().line] = r !== n.length, s = e.now().offset, E(x);
  }
  function f(x) {
    return e.containerState = {}, t.attempt(
      nv,
      g,
      E
    )(x);
  }
  function g(x) {
    return r++, n.push([e.currentConstruct, e.containerState]), f(x);
  }
  function E(x) {
    if (x === null) {
      a && I(), A(0), t.consume(x);
      return;
    }
    return a = a || e.parser.flow(e.now()), t.enter("chunkFlow", {
      contentType: "flow",
      previous: i,
      _tokenizer: a
    }), T(x);
  }
  function T(x) {
    if (x === null) {
      R(t.exit("chunkFlow"), !0), A(0), t.consume(x);
      return;
    }
    return Je(x) ? (t.consume(x), R(t.exit("chunkFlow")), r = 0, e.interrupt = void 0, l) : (t.consume(x), T);
  }
  function R(x, P) {
    const D = e.sliceStream(x);
    if (P && D.push(null), x.previous = i, i && (i.next = x), i = x, a.defineSkip(x.start), a.write(D), e.parser.lazy[x.start.line]) {
      let L = a.events.length;
      for (; L--; )
        if (
          // The token starts before the line ending…
          a.events[L][1].start.offset < s && // …and either is not ended yet…
          (!a.events[L][1].end || // …or ends after it.
          a.events[L][1].end.offset > s)
        )
          return;
      const K = e.events.length;
      let J = K, X, $;
      for (; J--; )
        if (e.events[J][0] === "exit" && e.events[J][1].type === "chunkFlow") {
          if (X) {
            $ = e.events[J][1].end;
            break;
          }
          X = !0;
        }
      for (A(r), L = K; L < e.events.length; )
        e.events[L][1].end = Object.assign({}, $), L++;
      qr(
        e.events,
        J + 1,
        0,
        e.events.slice(K)
      ), e.events.length = L;
    }
  }
  function A(x) {
    let P = n.length;
    for (; P-- > x; ) {
      const D = n[P];
      e.containerState = D[1], D[0].exit.call(e, t);
    }
    n.length = x;
  }
  function I() {
    a.write([null]), i = void 0, a = void 0, e.containerState._closeFlow = void 0;
  }
}
function eH(t, e, n) {
  return Nt(
    t,
    t.attempt(this.parser.constructs.document, e, n),
    "linePrefix",
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
  );
}
function nd(t) {
  if (t === null || en(t) || fs(t))
    return 1;
  if (Ld(t))
    return 2;
}
function Md(t, e, n) {
  const r = [];
  let a = -1;
  for (; ++a < t.length; ) {
    const i = t[a].resolveAll;
    i && !r.includes(i) && (e = i(e, n), r.push(i));
  }
  return e;
}
const Fh = {
  name: "attention",
  tokenize: nH,
  resolveAll: tH
};
function tH(t, e) {
  let n = -1, r, a, i, s, l, c, d, p;
  for (; ++n < t.length; )
    if (t[n][0] === "enter" && t[n][1].type === "attentionSequence" && t[n][1]._close) {
      for (r = n; r--; )
        if (t[r][0] === "exit" && t[r][1].type === "attentionSequence" && t[r][1]._open && // If the markers are the same:
        e.sliceSerialize(t[r][1]).charCodeAt(0) === e.sliceSerialize(t[n][1]).charCodeAt(0)) {
          if ((t[r][1]._close || t[n][1]._open) && (t[n][1].end.offset - t[n][1].start.offset) % 3 && !((t[r][1].end.offset - t[r][1].start.offset + t[n][1].end.offset - t[n][1].start.offset) % 3))
            continue;
          c = t[r][1].end.offset - t[r][1].start.offset > 1 && t[n][1].end.offset - t[n][1].start.offset > 1 ? 2 : 1;
          const _ = Object.assign({}, t[r][1].end), f = Object.assign({}, t[n][1].start);
          rv(_, -c), rv(f, c), s = {
            type: c > 1 ? "strongSequence" : "emphasisSequence",
            start: _,
            end: Object.assign({}, t[r][1].end)
          }, l = {
            type: c > 1 ? "strongSequence" : "emphasisSequence",
            start: Object.assign({}, t[n][1].start),
            end: f
          }, i = {
            type: c > 1 ? "strongText" : "emphasisText",
            start: Object.assign({}, t[r][1].end),
            end: Object.assign({}, t[n][1].start)
          }, a = {
            type: c > 1 ? "strong" : "emphasis",
            start: Object.assign({}, s.start),
            end: Object.assign({}, l.end)
          }, t[r][1].end = Object.assign({}, s.start), t[n][1].start = Object.assign({}, l.end), d = [], t[r][1].end.offset - t[r][1].start.offset && (d = ra(d, [
            ["enter", t[r][1], e],
            ["exit", t[r][1], e]
          ])), d = ra(d, [
            ["enter", a, e],
            ["enter", s, e],
            ["exit", s, e],
            ["enter", i, e]
          ]), d = ra(
            d,
            Md(
              e.parser.constructs.insideSpan.null,
              t.slice(r + 1, n),
              e
            )
          ), d = ra(d, [
            ["exit", i, e],
            ["enter", l, e],
            ["exit", l, e],
            ["exit", a, e]
          ]), t[n][1].end.offset - t[n][1].start.offset ? (p = 2, d = ra(d, [
            ["enter", t[n][1], e],
            ["exit", t[n][1], e]
          ])) : p = 0, qr(t, r - 1, n - r + 3, d), n = r + d.length - p - 2;
          break;
        }
    }
  for (n = -1; ++n < t.length; )
    t[n][1].type === "attentionSequence" && (t[n][1].type = "data");
  return t;
}
function nH(t, e) {
  const n = this.parser.constructs.attentionMarkers.null, r = this.previous, a = nd(r);
  let i;
  return s;
  function s(c) {
    return i = c, t.enter("attentionSequence"), l(c);
  }
  function l(c) {
    if (c === i)
      return t.consume(c), l;
    const d = t.exit("attentionSequence"), p = nd(c), _ = !p || p === 2 && a || n.includes(c), f = !a || a === 2 && p || n.includes(r);
    return d._open = !!(i === 42 ? _ : _ && (a || !f)), d._close = !!(i === 42 ? f : f && (p || !_)), e(c);
  }
}
function rv(t, e) {
  t.column += e, t.offset += e, t._bufferIndex += e;
}
const rH = {
  name: "autolink",
  tokenize: aH
};
function aH(t, e, n) {
  let r = 0;
  return a;
  function a(g) {
    return t.enter("autolink"), t.enter("autolinkMarker"), t.consume(g), t.exit("autolinkMarker"), t.enter("autolinkProtocol"), i;
  }
  function i(g) {
    return hr(g) ? (t.consume(g), s) : d(g);
  }
  function s(g) {
    return g === 43 || g === 45 || g === 46 || ir(g) ? (r = 1, l(g)) : d(g);
  }
  function l(g) {
    return g === 58 ? (t.consume(g), r = 0, c) : (g === 43 || g === 45 || g === 46 || ir(g)) && r++ < 32 ? (t.consume(g), l) : (r = 0, d(g));
  }
  function c(g) {
    return g === 62 ? (t.exit("autolinkProtocol"), t.enter("autolinkMarker"), t.consume(g), t.exit("autolinkMarker"), t.exit("autolink"), e) : g === null || g === 32 || g === 60 || td(g) ? n(g) : (t.consume(g), c);
  }
  function d(g) {
    return g === 64 ? (t.consume(g), p) : WG(g) ? (t.consume(g), d) : n(g);
  }
  function p(g) {
    return ir(g) ? _(g) : n(g);
  }
  function _(g) {
    return g === 46 ? (t.consume(g), r = 0, p) : g === 62 ? (t.exit("autolinkProtocol").type = "autolinkEmail", t.enter("autolinkMarker"), t.consume(g), t.exit("autolinkMarker"), t.exit("autolink"), e) : f(g);
  }
  function f(g) {
    if ((g === 45 || ir(g)) && r++ < 63) {
      const E = g === 45 ? f : _;
      return t.consume(g), E;
    }
    return n(g);
  }
}
const Ql = {
  tokenize: iH,
  partial: !0
};
function iH(t, e, n) {
  return r;
  function r(i) {
    return wt(i) ? Nt(t, a, "linePrefix")(i) : a(i);
  }
  function a(i) {
    return i === null || Je(i) ? e(i) : n(i);
  }
}
const mx = {
  name: "blockQuote",
  tokenize: sH,
  continuation: {
    tokenize: oH
  },
  exit: lH
};
function sH(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    if (s === 62) {
      const l = r.containerState;
      return l.open || (t.enter("blockQuote", {
        _container: !0
      }), l.open = !0), t.enter("blockQuotePrefix"), t.enter("blockQuoteMarker"), t.consume(s), t.exit("blockQuoteMarker"), i;
    }
    return n(s);
  }
  function i(s) {
    return wt(s) ? (t.enter("blockQuotePrefixWhitespace"), t.consume(s), t.exit("blockQuotePrefixWhitespace"), t.exit("blockQuotePrefix"), e) : (t.exit("blockQuotePrefix"), e(s));
  }
}
function oH(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return wt(s) ? Nt(
      t,
      i,
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(s) : i(s);
  }
  function i(s) {
    return t.attempt(mx, e, n)(s);
  }
}
function lH(t) {
  t.exit("blockQuote");
}
const fx = {
  name: "characterEscape",
  tokenize: cH
};
function cH(t, e, n) {
  return r;
  function r(i) {
    return t.enter("characterEscape"), t.enter("escapeMarker"), t.consume(i), t.exit("escapeMarker"), a;
  }
  function a(i) {
    return QG(i) ? (t.enter("characterEscapeValue"), t.consume(i), t.exit("characterEscapeValue"), t.exit("characterEscape"), e) : n(i);
  }
}
const gx = {
  name: "characterReference",
  tokenize: uH
};
function uH(t, e, n) {
  const r = this;
  let a = 0, i, s;
  return l;
  function l(_) {
    return t.enter("characterReference"), t.enter("characterReferenceMarker"), t.consume(_), t.exit("characterReferenceMarker"), c;
  }
  function c(_) {
    return _ === 35 ? (t.enter("characterReferenceMarkerNumeric"), t.consume(_), t.exit("characterReferenceMarkerNumeric"), d) : (t.enter("characterReferenceValue"), i = 31, s = ir, p(_));
  }
  function d(_) {
    return _ === 88 || _ === 120 ? (t.enter("characterReferenceMarkerHexadecimal"), t.consume(_), t.exit("characterReferenceMarkerHexadecimal"), t.enter("characterReferenceValue"), i = 6, s = KG, p) : (t.enter("characterReferenceValue"), i = 7, s = Ph, p(_));
  }
  function p(_) {
    if (_ === 59 && a) {
      const f = t.exit("characterReferenceValue");
      return s === ir && !e1(r.sliceSerialize(f)) ? n(_) : (t.enter("characterReferenceMarker"), t.consume(_), t.exit("characterReferenceMarker"), t.exit("characterReference"), e);
    }
    return s(_) && a++ < i ? (t.consume(_), p) : n(_);
  }
}
const av = {
  tokenize: pH,
  partial: !0
}, iv = {
  name: "codeFenced",
  tokenize: dH,
  concrete: !0
};
function dH(t, e, n) {
  const r = this, a = {
    tokenize: D,
    partial: !0
  };
  let i = 0, s = 0, l;
  return c;
  function c(L) {
    return d(L);
  }
  function d(L) {
    const K = r.events[r.events.length - 1];
    return i = K && K[1].type === "linePrefix" ? K[2].sliceSerialize(K[1], !0).length : 0, l = L, t.enter("codeFenced"), t.enter("codeFencedFence"), t.enter("codeFencedFenceSequence"), p(L);
  }
  function p(L) {
    return L === l ? (s++, t.consume(L), p) : s < 3 ? n(L) : (t.exit("codeFencedFenceSequence"), wt(L) ? Nt(t, _, "whitespace")(L) : _(L));
  }
  function _(L) {
    return L === null || Je(L) ? (t.exit("codeFencedFence"), r.interrupt ? e(L) : t.check(av, T, P)(L)) : (t.enter("codeFencedFenceInfo"), t.enter("chunkString", {
      contentType: "string"
    }), f(L));
  }
  function f(L) {
    return L === null || Je(L) ? (t.exit("chunkString"), t.exit("codeFencedFenceInfo"), _(L)) : wt(L) ? (t.exit("chunkString"), t.exit("codeFencedFenceInfo"), Nt(t, g, "whitespace")(L)) : L === 96 && L === l ? n(L) : (t.consume(L), f);
  }
  function g(L) {
    return L === null || Je(L) ? _(L) : (t.enter("codeFencedFenceMeta"), t.enter("chunkString", {
      contentType: "string"
    }), E(L));
  }
  function E(L) {
    return L === null || Je(L) ? (t.exit("chunkString"), t.exit("codeFencedFenceMeta"), _(L)) : L === 96 && L === l ? n(L) : (t.consume(L), E);
  }
  function T(L) {
    return t.attempt(a, P, R)(L);
  }
  function R(L) {
    return t.enter("lineEnding"), t.consume(L), t.exit("lineEnding"), A;
  }
  function A(L) {
    return i > 0 && wt(L) ? Nt(
      t,
      I,
      "linePrefix",
      i + 1
    )(L) : I(L);
  }
  function I(L) {
    return L === null || Je(L) ? t.check(av, T, P)(L) : (t.enter("codeFlowValue"), x(L));
  }
  function x(L) {
    return L === null || Je(L) ? (t.exit("codeFlowValue"), I(L)) : (t.consume(L), x);
  }
  function P(L) {
    return t.exit("codeFenced"), e(L);
  }
  function D(L, K, J) {
    let X = 0;
    return $;
    function $(fe) {
      return L.enter("lineEnding"), L.consume(fe), L.exit("lineEnding"), ae;
    }
    function ae(fe) {
      return L.enter("codeFencedFence"), wt(fe) ? Nt(
        L,
        ce,
        "linePrefix",
        r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(fe) : ce(fe);
    }
    function ce(fe) {
      return fe === l ? (L.enter("codeFencedFenceSequence"), ve(fe)) : J(fe);
    }
    function ve(fe) {
      return fe === l ? (X++, L.consume(fe), ve) : X >= s ? (L.exit("codeFencedFenceSequence"), wt(fe) ? Nt(L, ge, "whitespace")(fe) : ge(fe)) : J(fe);
    }
    function ge(fe) {
      return fe === null || Je(fe) ? (L.exit("codeFencedFence"), K(fe)) : J(fe);
    }
  }
}
function pH(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return s === null ? n(s) : (t.enter("lineEnding"), t.consume(s), t.exit("lineEnding"), i);
  }
  function i(s) {
    return r.parser.lazy[r.now().line] ? n(s) : e(s);
  }
}
const W0 = {
  name: "codeIndented",
  tokenize: mH
}, _H = {
  tokenize: fH,
  partial: !0
};
function mH(t, e, n) {
  const r = this;
  return a;
  function a(d) {
    return t.enter("codeIndented"), Nt(t, i, "linePrefix", 5)(d);
  }
  function i(d) {
    const p = r.events[r.events.length - 1];
    return p && p[1].type === "linePrefix" && p[2].sliceSerialize(p[1], !0).length >= 4 ? s(d) : n(d);
  }
  function s(d) {
    return d === null ? c(d) : Je(d) ? t.attempt(_H, s, c)(d) : (t.enter("codeFlowValue"), l(d));
  }
  function l(d) {
    return d === null || Je(d) ? (t.exit("codeFlowValue"), s(d)) : (t.consume(d), l);
  }
  function c(d) {
    return t.exit("codeIndented"), e(d);
  }
}
function fH(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return r.parser.lazy[r.now().line] ? n(s) : Je(s) ? (t.enter("lineEnding"), t.consume(s), t.exit("lineEnding"), a) : Nt(t, i, "linePrefix", 5)(s);
  }
  function i(s) {
    const l = r.events[r.events.length - 1];
    return l && l[1].type === "linePrefix" && l[2].sliceSerialize(l[1], !0).length >= 4 ? e(s) : Je(s) ? a(s) : n(s);
  }
}
const gH = {
  name: "codeText",
  tokenize: SH,
  resolve: hH,
  previous: EH
};
function hH(t) {
  let e = t.length - 4, n = 3, r, a;
  if ((t[n][1].type === "lineEnding" || t[n][1].type === "space") && (t[e][1].type === "lineEnding" || t[e][1].type === "space")) {
    for (r = n; ++r < e; )
      if (t[r][1].type === "codeTextData") {
        t[n][1].type = "codeTextPadding", t[e][1].type = "codeTextPadding", n += 2, e -= 2;
        break;
      }
  }
  for (r = n - 1, e++; ++r <= e; )
    a === void 0 ? r !== e && t[r][1].type !== "lineEnding" && (a = r) : (r === e || t[r][1].type === "lineEnding") && (t[a][1].type = "codeTextData", r !== a + 2 && (t[a][1].end = t[r - 1][1].end, t.splice(a + 2, r - a - 2), e -= r - a - 2, r = a + 2), a = void 0);
  return t;
}
function EH(t) {
  return t !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function SH(t, e, n) {
  let r = 0, a, i;
  return s;
  function s(_) {
    return t.enter("codeText"), t.enter("codeTextSequence"), l(_);
  }
  function l(_) {
    return _ === 96 ? (t.consume(_), r++, l) : (t.exit("codeTextSequence"), c(_));
  }
  function c(_) {
    return _ === null ? n(_) : _ === 32 ? (t.enter("space"), t.consume(_), t.exit("space"), c) : _ === 96 ? (i = t.enter("codeTextSequence"), a = 0, p(_)) : Je(_) ? (t.enter("lineEnding"), t.consume(_), t.exit("lineEnding"), c) : (t.enter("codeTextData"), d(_));
  }
  function d(_) {
    return _ === null || _ === 32 || _ === 96 || Je(_) ? (t.exit("codeTextData"), c(_)) : (t.consume(_), d);
  }
  function p(_) {
    return _ === 96 ? (t.consume(_), a++, p) : a === r ? (t.exit("codeTextSequence"), t.exit("codeText"), e(_)) : (i.type = "codeTextData", d(_));
  }
}
function hx(t) {
  const e = {};
  let n = -1, r, a, i, s, l, c, d;
  for (; ++n < t.length; ) {
    for (; n in e; )
      n = e[n];
    if (r = t[n], n && r[1].type === "chunkFlow" && t[n - 1][1].type === "listItemPrefix" && (c = r[1]._tokenizer.events, i = 0, i < c.length && c[i][1].type === "lineEndingBlank" && (i += 2), i < c.length && c[i][1].type === "content"))
      for (; ++i < c.length && c[i][1].type !== "content"; )
        c[i][1].type === "chunkText" && (c[i][1]._isInFirstContentOfListItem = !0, i++);
    if (r[0] === "enter")
      r[1].contentType && (Object.assign(e, bH(t, n)), n = e[n], d = !0);
    else if (r[1]._container) {
      for (i = n, a = void 0; i-- && (s = t[i], s[1].type === "lineEnding" || s[1].type === "lineEndingBlank"); )
        s[0] === "enter" && (a && (t[a][1].type = "lineEndingBlank"), s[1].type = "lineEnding", a = i);
      a && (r[1].end = Object.assign({}, t[a][1].start), l = t.slice(a, n), l.unshift(r), qr(t, a, n - a + 1, l));
    }
  }
  return !d;
}
function bH(t, e) {
  const n = t[e][1], r = t[e][2];
  let a = e - 1;
  const i = [], s = n._tokenizer || r.parser[n.contentType](n.start), l = s.events, c = [], d = {};
  let p, _, f = -1, g = n, E = 0, T = 0;
  const R = [T];
  for (; g; ) {
    for (; t[++a][1] !== g; )
      ;
    i.push(a), g._tokenizer || (p = r.sliceStream(g), g.next || p.push(null), _ && s.defineSkip(g.start), g._isInFirstContentOfListItem && (s._gfmTasklistFirstContentOfListItem = !0), s.write(p), g._isInFirstContentOfListItem && (s._gfmTasklistFirstContentOfListItem = void 0)), _ = g, g = g.next;
  }
  for (g = n; ++f < l.length; )
    // Find a void token that includes a break.
    l[f][0] === "exit" && l[f - 1][0] === "enter" && l[f][1].type === l[f - 1][1].type && l[f][1].start.line !== l[f][1].end.line && (T = f + 1, R.push(T), g._tokenizer = void 0, g.previous = void 0, g = g.next);
  for (s.events = [], g ? (g._tokenizer = void 0, g.previous = void 0) : R.pop(), f = R.length; f--; ) {
    const A = l.slice(R[f], R[f + 1]), I = i.pop();
    c.unshift([I, I + A.length - 1]), qr(t, I, 2, A);
  }
  for (f = -1; ++f < c.length; )
    d[E + c[f][0]] = E + c[f][1], E += c[f][1] - c[f][0] - 1;
  return d;
}
const TH = {
  tokenize: CH,
  resolve: vH
}, yH = {
  tokenize: RH,
  partial: !0
};
function vH(t) {
  return hx(t), t;
}
function CH(t, e) {
  let n;
  return r;
  function r(l) {
    return t.enter("content"), n = t.enter("chunkContent", {
      contentType: "content"
    }), a(l);
  }
  function a(l) {
    return l === null ? i(l) : Je(l) ? t.check(
      yH,
      s,
      i
    )(l) : (t.consume(l), a);
  }
  function i(l) {
    return t.exit("chunkContent"), t.exit("content"), e(l);
  }
  function s(l) {
    return t.consume(l), t.exit("chunkContent"), n.next = t.enter("chunkContent", {
      contentType: "content",
      previous: n
    }), n = n.next, a;
  }
}
function RH(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return t.exit("chunkContent"), t.enter("lineEnding"), t.consume(s), t.exit("lineEnding"), Nt(t, i, "linePrefix");
  }
  function i(s) {
    if (s === null || Je(s))
      return n(s);
    const l = r.events[r.events.length - 1];
    return !r.parser.constructs.disable.null.includes("codeIndented") && l && l[1].type === "linePrefix" && l[2].sliceSerialize(l[1], !0).length >= 4 ? e(s) : t.interrupt(r.parser.constructs.flow, n, e)(s);
  }
}
function Ex(t, e, n, r, a, i, s, l, c) {
  const d = c || Number.POSITIVE_INFINITY;
  let p = 0;
  return _;
  function _(A) {
    return A === 60 ? (t.enter(r), t.enter(a), t.enter(i), t.consume(A), t.exit(i), f) : A === null || A === 32 || A === 41 || td(A) ? n(A) : (t.enter(r), t.enter(s), t.enter(l), t.enter("chunkString", {
      contentType: "string"
    }), T(A));
  }
  function f(A) {
    return A === 62 ? (t.enter(i), t.consume(A), t.exit(i), t.exit(a), t.exit(r), e) : (t.enter(l), t.enter("chunkString", {
      contentType: "string"
    }), g(A));
  }
  function g(A) {
    return A === 62 ? (t.exit("chunkString"), t.exit(l), f(A)) : A === null || A === 60 || Je(A) ? n(A) : (t.consume(A), A === 92 ? E : g);
  }
  function E(A) {
    return A === 60 || A === 62 || A === 92 ? (t.consume(A), g) : g(A);
  }
  function T(A) {
    return !p && (A === null || A === 41 || en(A)) ? (t.exit("chunkString"), t.exit(l), t.exit(s), t.exit(r), e(A)) : p < d && A === 40 ? (t.consume(A), p++, T) : A === 41 ? (t.consume(A), p--, T) : A === null || A === 32 || A === 40 || td(A) ? n(A) : (t.consume(A), A === 92 ? R : T);
  }
  function R(A) {
    return A === 40 || A === 41 || A === 92 ? (t.consume(A), T) : T(A);
  }
}
function Sx(t, e, n, r, a, i) {
  const s = this;
  let l = 0, c;
  return d;
  function d(g) {
    return t.enter(r), t.enter(a), t.consume(g), t.exit(a), t.enter(i), p;
  }
  function p(g) {
    return l > 999 || g === null || g === 91 || g === 93 && !c || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    g === 94 && !l && "_hiddenFootnoteSupport" in s.parser.constructs ? n(g) : g === 93 ? (t.exit(i), t.enter(a), t.consume(g), t.exit(a), t.exit(r), e) : Je(g) ? (t.enter("lineEnding"), t.consume(g), t.exit("lineEnding"), p) : (t.enter("chunkString", {
      contentType: "string"
    }), _(g));
  }
  function _(g) {
    return g === null || g === 91 || g === 93 || Je(g) || l++ > 999 ? (t.exit("chunkString"), p(g)) : (t.consume(g), c || (c = !wt(g)), g === 92 ? f : _);
  }
  function f(g) {
    return g === 91 || g === 92 || g === 93 ? (t.consume(g), l++, _) : _(g);
  }
}
function bx(t, e, n, r, a, i) {
  let s;
  return l;
  function l(f) {
    return f === 34 || f === 39 || f === 40 ? (t.enter(r), t.enter(a), t.consume(f), t.exit(a), s = f === 40 ? 41 : f, c) : n(f);
  }
  function c(f) {
    return f === s ? (t.enter(a), t.consume(f), t.exit(a), t.exit(r), e) : (t.enter(i), d(f));
  }
  function d(f) {
    return f === s ? (t.exit(i), c(s)) : f === null ? n(f) : Je(f) ? (t.enter("lineEnding"), t.consume(f), t.exit("lineEnding"), Nt(t, d, "linePrefix")) : (t.enter("chunkString", {
      contentType: "string"
    }), p(f));
  }
  function p(f) {
    return f === s || f === null || Je(f) ? (t.exit("chunkString"), d(f)) : (t.consume(f), f === 92 ? _ : p);
  }
  function _(f) {
    return f === s || f === 92 ? (t.consume(f), p) : p(f);
  }
}
function Sl(t, e) {
  let n;
  return r;
  function r(a) {
    return Je(a) ? (t.enter("lineEnding"), t.consume(a), t.exit("lineEnding"), n = !0, r) : wt(a) ? Nt(
      t,
      r,
      n ? "linePrefix" : "lineSuffix"
    )(a) : e(a);
  }
}
const AH = {
  name: "definition",
  tokenize: NH
}, OH = {
  tokenize: IH,
  partial: !0
};
function NH(t, e, n) {
  const r = this;
  let a;
  return i;
  function i(g) {
    return t.enter("definition"), s(g);
  }
  function s(g) {
    return Sx.call(
      r,
      t,
      l,
      // Note: we don’t need to reset the way `markdown-rs` does.
      n,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(g);
  }
  function l(g) {
    return a = Ta(
      r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1)
    ), g === 58 ? (t.enter("definitionMarker"), t.consume(g), t.exit("definitionMarker"), c) : n(g);
  }
  function c(g) {
    return en(g) ? Sl(t, d)(g) : d(g);
  }
  function d(g) {
    return Ex(
      t,
      p,
      // Note: we don’t need to reset the way `markdown-rs` does.
      n,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(g);
  }
  function p(g) {
    return t.attempt(OH, _, _)(g);
  }
  function _(g) {
    return wt(g) ? Nt(t, f, "whitespace")(g) : f(g);
  }
  function f(g) {
    return g === null || Je(g) ? (t.exit("definition"), r.parser.defined.push(a), e(g)) : n(g);
  }
}
function IH(t, e, n) {
  return r;
  function r(l) {
    return en(l) ? Sl(t, a)(l) : n(l);
  }
  function a(l) {
    return bx(
      t,
      i,
      n,
      "definitionTitle",
      "definitionTitleMarker",
      "definitionTitleString"
    )(l);
  }
  function i(l) {
    return wt(l) ? Nt(t, s, "whitespace")(l) : s(l);
  }
  function s(l) {
    return l === null || Je(l) ? e(l) : n(l);
  }
}
const xH = {
  name: "hardBreakEscape",
  tokenize: DH
};
function DH(t, e, n) {
  return r;
  function r(i) {
    return t.enter("hardBreakEscape"), t.consume(i), a;
  }
  function a(i) {
    return Je(i) ? (t.exit("hardBreakEscape"), e(i)) : n(i);
  }
}
const wH = {
  name: "headingAtx",
  tokenize: MH,
  resolve: LH
};
function LH(t, e) {
  let n = t.length - 2, r = 3, a, i;
  return t[r][1].type === "whitespace" && (r += 2), n - 2 > r && t[n][1].type === "whitespace" && (n -= 2), t[n][1].type === "atxHeadingSequence" && (r === n - 1 || n - 4 > r && t[n - 2][1].type === "whitespace") && (n -= r + 1 === n ? 2 : 4), n > r && (a = {
    type: "atxHeadingText",
    start: t[r][1].start,
    end: t[n][1].end
  }, i = {
    type: "chunkText",
    start: t[r][1].start,
    end: t[n][1].end,
    contentType: "text"
  }, qr(t, r, n - r + 1, [
    ["enter", a, e],
    ["enter", i, e],
    ["exit", i, e],
    ["exit", a, e]
  ])), t;
}
function MH(t, e, n) {
  let r = 0;
  return a;
  function a(p) {
    return t.enter("atxHeading"), i(p);
  }
  function i(p) {
    return t.enter("atxHeadingSequence"), s(p);
  }
  function s(p) {
    return p === 35 && r++ < 6 ? (t.consume(p), s) : p === null || en(p) ? (t.exit("atxHeadingSequence"), l(p)) : n(p);
  }
  function l(p) {
    return p === 35 ? (t.enter("atxHeadingSequence"), c(p)) : p === null || Je(p) ? (t.exit("atxHeading"), e(p)) : wt(p) ? Nt(t, l, "whitespace")(p) : (t.enter("atxHeadingText"), d(p));
  }
  function c(p) {
    return p === 35 ? (t.consume(p), c) : (t.exit("atxHeadingSequence"), l(p));
  }
  function d(p) {
    return p === null || p === 35 || en(p) ? (t.exit("atxHeadingText"), l(p)) : (t.consume(p), d);
  }
}
const kH = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], sv = ["pre", "script", "style", "textarea"], PH = {
  name: "htmlFlow",
  tokenize: GH,
  resolveTo: UH,
  concrete: !0
}, FH = {
  tokenize: YH,
  partial: !0
}, BH = {
  tokenize: HH,
  partial: !0
};
function UH(t) {
  let e = t.length;
  for (; e-- && !(t[e][0] === "enter" && t[e][1].type === "htmlFlow"); )
    ;
  return e > 1 && t[e - 2][1].type === "linePrefix" && (t[e][1].start = t[e - 2][1].start, t[e + 1][1].start = t[e - 2][1].start, t.splice(e - 2, 2)), t;
}
function GH(t, e, n) {
  const r = this;
  let a, i, s, l, c;
  return d;
  function d(k) {
    return p(k);
  }
  function p(k) {
    return t.enter("htmlFlow"), t.enter("htmlFlowData"), t.consume(k), _;
  }
  function _(k) {
    return k === 33 ? (t.consume(k), f) : k === 47 ? (t.consume(k), i = !0, T) : k === 63 ? (t.consume(k), a = 3, r.interrupt ? e : v) : hr(k) ? (t.consume(k), s = String.fromCharCode(k), R) : n(k);
  }
  function f(k) {
    return k === 45 ? (t.consume(k), a = 2, g) : k === 91 ? (t.consume(k), a = 5, l = 0, E) : hr(k) ? (t.consume(k), a = 4, r.interrupt ? e : v) : n(k);
  }
  function g(k) {
    return k === 45 ? (t.consume(k), r.interrupt ? e : v) : n(k);
  }
  function E(k) {
    const me = "CDATA[";
    return k === me.charCodeAt(l++) ? (t.consume(k), l === me.length ? r.interrupt ? e : ce : E) : n(k);
  }
  function T(k) {
    return hr(k) ? (t.consume(k), s = String.fromCharCode(k), R) : n(k);
  }
  function R(k) {
    if (k === null || k === 47 || k === 62 || en(k)) {
      const me = k === 47, Ce = s.toLowerCase();
      return !me && !i && sv.includes(Ce) ? (a = 1, r.interrupt ? e(k) : ce(k)) : kH.includes(s.toLowerCase()) ? (a = 6, me ? (t.consume(k), A) : r.interrupt ? e(k) : ce(k)) : (a = 7, r.interrupt && !r.parser.lazy[r.now().line] ? n(k) : i ? I(k) : x(k));
    }
    return k === 45 || ir(k) ? (t.consume(k), s += String.fromCharCode(k), R) : n(k);
  }
  function A(k) {
    return k === 62 ? (t.consume(k), r.interrupt ? e : ce) : n(k);
  }
  function I(k) {
    return wt(k) ? (t.consume(k), I) : $(k);
  }
  function x(k) {
    return k === 47 ? (t.consume(k), $) : k === 58 || k === 95 || hr(k) ? (t.consume(k), P) : wt(k) ? (t.consume(k), x) : $(k);
  }
  function P(k) {
    return k === 45 || k === 46 || k === 58 || k === 95 || ir(k) ? (t.consume(k), P) : D(k);
  }
  function D(k) {
    return k === 61 ? (t.consume(k), L) : wt(k) ? (t.consume(k), D) : x(k);
  }
  function L(k) {
    return k === null || k === 60 || k === 61 || k === 62 || k === 96 ? n(k) : k === 34 || k === 39 ? (t.consume(k), c = k, K) : wt(k) ? (t.consume(k), L) : J(k);
  }
  function K(k) {
    return k === c ? (t.consume(k), c = null, X) : k === null || Je(k) ? n(k) : (t.consume(k), K);
  }
  function J(k) {
    return k === null || k === 34 || k === 39 || k === 47 || k === 60 || k === 61 || k === 62 || k === 96 || en(k) ? D(k) : (t.consume(k), J);
  }
  function X(k) {
    return k === 47 || k === 62 || wt(k) ? x(k) : n(k);
  }
  function $(k) {
    return k === 62 ? (t.consume(k), ae) : n(k);
  }
  function ae(k) {
    return k === null || Je(k) ? ce(k) : wt(k) ? (t.consume(k), ae) : n(k);
  }
  function ce(k) {
    return k === 45 && a === 2 ? (t.consume(k), Fe) : k === 60 && a === 1 ? (t.consume(k), ne) : k === 62 && a === 4 ? (t.consume(k), H) : k === 63 && a === 3 ? (t.consume(k), v) : k === 93 && a === 5 ? (t.consume(k), z) : Je(k) && (a === 6 || a === 7) ? (t.exit("htmlFlowData"), t.check(
      FH,
      oe,
      ve
    )(k)) : k === null || Je(k) ? (t.exit("htmlFlowData"), ve(k)) : (t.consume(k), ce);
  }
  function ve(k) {
    return t.check(
      BH,
      ge,
      oe
    )(k);
  }
  function ge(k) {
    return t.enter("lineEnding"), t.consume(k), t.exit("lineEnding"), fe;
  }
  function fe(k) {
    return k === null || Je(k) ? ve(k) : (t.enter("htmlFlowData"), ce(k));
  }
  function Fe(k) {
    return k === 45 ? (t.consume(k), v) : ce(k);
  }
  function ne(k) {
    return k === 47 ? (t.consume(k), s = "", se) : ce(k);
  }
  function se(k) {
    if (k === 62) {
      const me = s.toLowerCase();
      return sv.includes(me) ? (t.consume(k), H) : ce(k);
    }
    return hr(k) && s.length < 8 ? (t.consume(k), s += String.fromCharCode(k), se) : ce(k);
  }
  function z(k) {
    return k === 93 ? (t.consume(k), v) : ce(k);
  }
  function v(k) {
    return k === 62 ? (t.consume(k), H) : k === 45 && a === 2 ? (t.consume(k), v) : ce(k);
  }
  function H(k) {
    return k === null || Je(k) ? (t.exit("htmlFlowData"), oe(k)) : (t.consume(k), H);
  }
  function oe(k) {
    return t.exit("htmlFlow"), e(k);
  }
}
function HH(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return Je(s) ? (t.enter("lineEnding"), t.consume(s), t.exit("lineEnding"), i) : n(s);
  }
  function i(s) {
    return r.parser.lazy[r.now().line] ? n(s) : e(s);
  }
}
function YH(t, e, n) {
  return r;
  function r(a) {
    return t.enter("lineEnding"), t.consume(a), t.exit("lineEnding"), t.attempt(Ql, e, n);
  }
}
const zH = {
  name: "htmlText",
  tokenize: qH
};
function qH(t, e, n) {
  const r = this;
  let a, i, s;
  return l;
  function l(v) {
    return t.enter("htmlText"), t.enter("htmlTextData"), t.consume(v), c;
  }
  function c(v) {
    return v === 33 ? (t.consume(v), d) : v === 47 ? (t.consume(v), D) : v === 63 ? (t.consume(v), x) : hr(v) ? (t.consume(v), J) : n(v);
  }
  function d(v) {
    return v === 45 ? (t.consume(v), p) : v === 91 ? (t.consume(v), i = 0, E) : hr(v) ? (t.consume(v), I) : n(v);
  }
  function p(v) {
    return v === 45 ? (t.consume(v), g) : n(v);
  }
  function _(v) {
    return v === null ? n(v) : v === 45 ? (t.consume(v), f) : Je(v) ? (s = _, ne(v)) : (t.consume(v), _);
  }
  function f(v) {
    return v === 45 ? (t.consume(v), g) : _(v);
  }
  function g(v) {
    return v === 62 ? Fe(v) : v === 45 ? f(v) : _(v);
  }
  function E(v) {
    const H = "CDATA[";
    return v === H.charCodeAt(i++) ? (t.consume(v), i === H.length ? T : E) : n(v);
  }
  function T(v) {
    return v === null ? n(v) : v === 93 ? (t.consume(v), R) : Je(v) ? (s = T, ne(v)) : (t.consume(v), T);
  }
  function R(v) {
    return v === 93 ? (t.consume(v), A) : T(v);
  }
  function A(v) {
    return v === 62 ? Fe(v) : v === 93 ? (t.consume(v), A) : T(v);
  }
  function I(v) {
    return v === null || v === 62 ? Fe(v) : Je(v) ? (s = I, ne(v)) : (t.consume(v), I);
  }
  function x(v) {
    return v === null ? n(v) : v === 63 ? (t.consume(v), P) : Je(v) ? (s = x, ne(v)) : (t.consume(v), x);
  }
  function P(v) {
    return v === 62 ? Fe(v) : x(v);
  }
  function D(v) {
    return hr(v) ? (t.consume(v), L) : n(v);
  }
  function L(v) {
    return v === 45 || ir(v) ? (t.consume(v), L) : K(v);
  }
  function K(v) {
    return Je(v) ? (s = K, ne(v)) : wt(v) ? (t.consume(v), K) : Fe(v);
  }
  function J(v) {
    return v === 45 || ir(v) ? (t.consume(v), J) : v === 47 || v === 62 || en(v) ? X(v) : n(v);
  }
  function X(v) {
    return v === 47 ? (t.consume(v), Fe) : v === 58 || v === 95 || hr(v) ? (t.consume(v), $) : Je(v) ? (s = X, ne(v)) : wt(v) ? (t.consume(v), X) : Fe(v);
  }
  function $(v) {
    return v === 45 || v === 46 || v === 58 || v === 95 || ir(v) ? (t.consume(v), $) : ae(v);
  }
  function ae(v) {
    return v === 61 ? (t.consume(v), ce) : Je(v) ? (s = ae, ne(v)) : wt(v) ? (t.consume(v), ae) : X(v);
  }
  function ce(v) {
    return v === null || v === 60 || v === 61 || v === 62 || v === 96 ? n(v) : v === 34 || v === 39 ? (t.consume(v), a = v, ve) : Je(v) ? (s = ce, ne(v)) : wt(v) ? (t.consume(v), ce) : (t.consume(v), ge);
  }
  function ve(v) {
    return v === a ? (t.consume(v), a = void 0, fe) : v === null ? n(v) : Je(v) ? (s = ve, ne(v)) : (t.consume(v), ve);
  }
  function ge(v) {
    return v === null || v === 34 || v === 39 || v === 60 || v === 61 || v === 96 ? n(v) : v === 47 || v === 62 || en(v) ? X(v) : (t.consume(v), ge);
  }
  function fe(v) {
    return v === 47 || v === 62 || en(v) ? X(v) : n(v);
  }
  function Fe(v) {
    return v === 62 ? (t.consume(v), t.exit("htmlTextData"), t.exit("htmlText"), e) : n(v);
  }
  function ne(v) {
    return t.exit("htmlTextData"), t.enter("lineEnding"), t.consume(v), t.exit("lineEnding"), se;
  }
  function se(v) {
    return wt(v) ? Nt(
      t,
      z,
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(v) : z(v);
  }
  function z(v) {
    return t.enter("htmlTextData"), s(v);
  }
}
const t1 = {
  name: "labelEnd",
  tokenize: jH,
  resolveTo: QH,
  resolveAll: KH
}, VH = {
  tokenize: XH
}, $H = {
  tokenize: ZH
}, WH = {
  tokenize: JH
};
function KH(t) {
  let e = -1;
  for (; ++e < t.length; ) {
    const n = t[e][1];
    (n.type === "labelImage" || n.type === "labelLink" || n.type === "labelEnd") && (t.splice(e + 1, n.type === "labelImage" ? 4 : 2), n.type = "data", e++);
  }
  return t;
}
function QH(t, e) {
  let n = t.length, r = 0, a, i, s, l;
  for (; n--; )
    if (a = t[n][1], i) {
      if (a.type === "link" || a.type === "labelLink" && a._inactive)
        break;
      t[n][0] === "enter" && a.type === "labelLink" && (a._inactive = !0);
    } else if (s) {
      if (t[n][0] === "enter" && (a.type === "labelImage" || a.type === "labelLink") && !a._balanced && (i = n, a.type !== "labelLink")) {
        r = 2;
        break;
      }
    } else a.type === "labelEnd" && (s = n);
  const c = {
    type: t[i][1].type === "labelLink" ? "link" : "image",
    start: Object.assign({}, t[i][1].start),
    end: Object.assign({}, t[t.length - 1][1].end)
  }, d = {
    type: "label",
    start: Object.assign({}, t[i][1].start),
    end: Object.assign({}, t[s][1].end)
  }, p = {
    type: "labelText",
    start: Object.assign({}, t[i + r + 2][1].end),
    end: Object.assign({}, t[s - 2][1].start)
  };
  return l = [
    ["enter", c, e],
    ["enter", d, e]
  ], l = ra(l, t.slice(i + 1, i + r + 3)), l = ra(l, [["enter", p, e]]), l = ra(
    l,
    Md(
      e.parser.constructs.insideSpan.null,
      t.slice(i + r + 4, s - 3),
      e
    )
  ), l = ra(l, [
    ["exit", p, e],
    t[s - 2],
    t[s - 1],
    ["exit", d, e]
  ]), l = ra(l, t.slice(s + 1)), l = ra(l, [["exit", c, e]]), qr(t, i, t.length, l), t;
}
function jH(t, e, n) {
  const r = this;
  let a = r.events.length, i, s;
  for (; a--; )
    if ((r.events[a][1].type === "labelImage" || r.events[a][1].type === "labelLink") && !r.events[a][1]._balanced) {
      i = r.events[a][1];
      break;
    }
  return l;
  function l(f) {
    return i ? i._inactive ? _(f) : (s = r.parser.defined.includes(
      Ta(
        r.sliceSerialize({
          start: i.end,
          end: r.now()
        })
      )
    ), t.enter("labelEnd"), t.enter("labelMarker"), t.consume(f), t.exit("labelMarker"), t.exit("labelEnd"), c) : n(f);
  }
  function c(f) {
    return f === 40 ? t.attempt(
      VH,
      p,
      s ? p : _
    )(f) : f === 91 ? t.attempt(
      $H,
      p,
      s ? d : _
    )(f) : s ? p(f) : _(f);
  }
  function d(f) {
    return t.attempt(
      WH,
      p,
      _
    )(f);
  }
  function p(f) {
    return e(f);
  }
  function _(f) {
    return i._balanced = !0, n(f);
  }
}
function XH(t, e, n) {
  return r;
  function r(_) {
    return t.enter("resource"), t.enter("resourceMarker"), t.consume(_), t.exit("resourceMarker"), a;
  }
  function a(_) {
    return en(_) ? Sl(t, i)(_) : i(_);
  }
  function i(_) {
    return _ === 41 ? p(_) : Ex(
      t,
      s,
      l,
      "resourceDestination",
      "resourceDestinationLiteral",
      "resourceDestinationLiteralMarker",
      "resourceDestinationRaw",
      "resourceDestinationString",
      32
    )(_);
  }
  function s(_) {
    return en(_) ? Sl(t, c)(_) : p(_);
  }
  function l(_) {
    return n(_);
  }
  function c(_) {
    return _ === 34 || _ === 39 || _ === 40 ? bx(
      t,
      d,
      n,
      "resourceTitle",
      "resourceTitleMarker",
      "resourceTitleString"
    )(_) : p(_);
  }
  function d(_) {
    return en(_) ? Sl(t, p)(_) : p(_);
  }
  function p(_) {
    return _ === 41 ? (t.enter("resourceMarker"), t.consume(_), t.exit("resourceMarker"), t.exit("resource"), e) : n(_);
  }
}
function ZH(t, e, n) {
  const r = this;
  return a;
  function a(l) {
    return Sx.call(
      r,
      t,
      i,
      s,
      "reference",
      "referenceMarker",
      "referenceString"
    )(l);
  }
  function i(l) {
    return r.parser.defined.includes(
      Ta(
        r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1)
      )
    ) ? e(l) : n(l);
  }
  function s(l) {
    return n(l);
  }
}
function JH(t, e, n) {
  return r;
  function r(i) {
    return t.enter("reference"), t.enter("referenceMarker"), t.consume(i), t.exit("referenceMarker"), a;
  }
  function a(i) {
    return i === 93 ? (t.enter("referenceMarker"), t.consume(i), t.exit("referenceMarker"), t.exit("reference"), e) : n(i);
  }
}
const eY = {
  name: "labelStartImage",
  tokenize: tY,
  resolveAll: t1.resolveAll
};
function tY(t, e, n) {
  const r = this;
  return a;
  function a(l) {
    return t.enter("labelImage"), t.enter("labelImageMarker"), t.consume(l), t.exit("labelImageMarker"), i;
  }
  function i(l) {
    return l === 91 ? (t.enter("labelMarker"), t.consume(l), t.exit("labelMarker"), t.exit("labelImage"), s) : n(l);
  }
  function s(l) {
    return l === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? n(l) : e(l);
  }
}
const nY = {
  name: "labelStartLink",
  tokenize: rY,
  resolveAll: t1.resolveAll
};
function rY(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return t.enter("labelLink"), t.enter("labelMarker"), t.consume(s), t.exit("labelMarker"), t.exit("labelLink"), i;
  }
  function i(s) {
    return s === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? n(s) : e(s);
  }
}
const K0 = {
  name: "lineEnding",
  tokenize: aY
};
function aY(t, e) {
  return n;
  function n(r) {
    return t.enter("lineEnding"), t.consume(r), t.exit("lineEnding"), Nt(t, e, "linePrefix");
  }
}
const Gu = {
  name: "thematicBreak",
  tokenize: iY
};
function iY(t, e, n) {
  let r = 0, a;
  return i;
  function i(d) {
    return t.enter("thematicBreak"), s(d);
  }
  function s(d) {
    return a = d, l(d);
  }
  function l(d) {
    return d === a ? (t.enter("thematicBreakSequence"), c(d)) : r >= 3 && (d === null || Je(d)) ? (t.exit("thematicBreak"), e(d)) : n(d);
  }
  function c(d) {
    return d === a ? (t.consume(d), r++, c) : (t.exit("thematicBreakSequence"), wt(d) ? Nt(t, l, "whitespace")(d) : l(d));
  }
}
const Or = {
  name: "list",
  tokenize: lY,
  continuation: {
    tokenize: cY
  },
  exit: dY
}, sY = {
  tokenize: pY,
  partial: !0
}, oY = {
  tokenize: uY,
  partial: !0
};
function lY(t, e, n) {
  const r = this, a = r.events[r.events.length - 1];
  let i = a && a[1].type === "linePrefix" ? a[2].sliceSerialize(a[1], !0).length : 0, s = 0;
  return l;
  function l(g) {
    const E = r.containerState.type || (g === 42 || g === 43 || g === 45 ? "listUnordered" : "listOrdered");
    if (E === "listUnordered" ? !r.containerState.marker || g === r.containerState.marker : Ph(g)) {
      if (r.containerState.type || (r.containerState.type = E, t.enter(E, {
        _container: !0
      })), E === "listUnordered")
        return t.enter("listItemPrefix"), g === 42 || g === 45 ? t.check(Gu, n, d)(g) : d(g);
      if (!r.interrupt || g === 49)
        return t.enter("listItemPrefix"), t.enter("listItemValue"), c(g);
    }
    return n(g);
  }
  function c(g) {
    return Ph(g) && ++s < 10 ? (t.consume(g), c) : (!r.interrupt || s < 2) && (r.containerState.marker ? g === r.containerState.marker : g === 41 || g === 46) ? (t.exit("listItemValue"), d(g)) : n(g);
  }
  function d(g) {
    return t.enter("listItemMarker"), t.consume(g), t.exit("listItemMarker"), r.containerState.marker = r.containerState.marker || g, t.check(
      Ql,
      // Can’t be empty when interrupting.
      r.interrupt ? n : p,
      t.attempt(
        sY,
        f,
        _
      )
    );
  }
  function p(g) {
    return r.containerState.initialBlankLine = !0, i++, f(g);
  }
  function _(g) {
    return wt(g) ? (t.enter("listItemPrefixWhitespace"), t.consume(g), t.exit("listItemPrefixWhitespace"), f) : n(g);
  }
  function f(g) {
    return r.containerState.size = i + r.sliceSerialize(t.exit("listItemPrefix"), !0).length, e(g);
  }
}
function cY(t, e, n) {
  const r = this;
  return r.containerState._closeFlow = void 0, t.check(Ql, a, i);
  function a(l) {
    return r.containerState.furtherBlankLines = r.containerState.furtherBlankLines || r.containerState.initialBlankLine, Nt(
      t,
      e,
      "listItemIndent",
      r.containerState.size + 1
    )(l);
  }
  function i(l) {
    return r.containerState.furtherBlankLines || !wt(l) ? (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, s(l)) : (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, t.attempt(oY, e, s)(l));
  }
  function s(l) {
    return r.containerState._closeFlow = !0, r.interrupt = void 0, Nt(
      t,
      t.attempt(Or, e, n),
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(l);
  }
}
function uY(t, e, n) {
  const r = this;
  return Nt(
    t,
    a,
    "listItemIndent",
    r.containerState.size + 1
  );
  function a(i) {
    const s = r.events[r.events.length - 1];
    return s && s[1].type === "listItemIndent" && s[2].sliceSerialize(s[1], !0).length === r.containerState.size ? e(i) : n(i);
  }
}
function dY(t) {
  t.exit(this.containerState.type);
}
function pY(t, e, n) {
  const r = this;
  return Nt(
    t,
    a,
    "listItemPrefixWhitespace",
    r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 5
  );
  function a(i) {
    const s = r.events[r.events.length - 1];
    return !wt(i) && s && s[1].type === "listItemPrefixWhitespace" ? e(i) : n(i);
  }
}
const ov = {
  name: "setextUnderline",
  tokenize: mY,
  resolveTo: _Y
};
function _Y(t, e) {
  let n = t.length, r, a, i;
  for (; n--; )
    if (t[n][0] === "enter") {
      if (t[n][1].type === "content") {
        r = n;
        break;
      }
      t[n][1].type === "paragraph" && (a = n);
    } else
      t[n][1].type === "content" && t.splice(n, 1), !i && t[n][1].type === "definition" && (i = n);
  const s = {
    type: "setextHeading",
    start: Object.assign({}, t[a][1].start),
    end: Object.assign({}, t[t.length - 1][1].end)
  };
  return t[a][1].type = "setextHeadingText", i ? (t.splice(a, 0, ["enter", s, e]), t.splice(i + 1, 0, ["exit", t[r][1], e]), t[r][1].end = Object.assign({}, t[i][1].end)) : t[r][1] = s, t.push(["exit", s, e]), t;
}
function mY(t, e, n) {
  const r = this;
  let a;
  return i;
  function i(d) {
    let p = r.events.length, _;
    for (; p--; )
      if (r.events[p][1].type !== "lineEnding" && r.events[p][1].type !== "linePrefix" && r.events[p][1].type !== "content") {
        _ = r.events[p][1].type === "paragraph";
        break;
      }
    return !r.parser.lazy[r.now().line] && (r.interrupt || _) ? (t.enter("setextHeadingLine"), a = d, s(d)) : n(d);
  }
  function s(d) {
    return t.enter("setextHeadingLineSequence"), l(d);
  }
  function l(d) {
    return d === a ? (t.consume(d), l) : (t.exit("setextHeadingLineSequence"), wt(d) ? Nt(t, c, "lineSuffix")(d) : c(d));
  }
  function c(d) {
    return d === null || Je(d) ? (t.exit("setextHeadingLine"), e(d)) : n(d);
  }
}
const fY = {
  tokenize: gY
};
function gY(t) {
  const e = this, n = t.attempt(
    // Try to parse a blank line.
    Ql,
    r,
    // Try to parse initial flow (essentially, only code).
    t.attempt(
      this.parser.constructs.flowInitial,
      a,
      Nt(
        t,
        t.attempt(
          this.parser.constructs.flow,
          a,
          t.attempt(TH, a)
        ),
        "linePrefix"
      )
    )
  );
  return n;
  function r(i) {
    if (i === null) {
      t.consume(i);
      return;
    }
    return t.enter("lineEndingBlank"), t.consume(i), t.exit("lineEndingBlank"), e.currentConstruct = void 0, n;
  }
  function a(i) {
    if (i === null) {
      t.consume(i);
      return;
    }
    return t.enter("lineEnding"), t.consume(i), t.exit("lineEnding"), e.currentConstruct = void 0, n;
  }
}
const hY = {
  resolveAll: yx()
}, EY = Tx("string"), SY = Tx("text");
function Tx(t) {
  return {
    tokenize: e,
    resolveAll: yx(
      t === "text" ? bY : void 0
    )
  };
  function e(n) {
    const r = this, a = this.parser.constructs[t], i = n.attempt(a, s, l);
    return s;
    function s(p) {
      return d(p) ? i(p) : l(p);
    }
    function l(p) {
      if (p === null) {
        n.consume(p);
        return;
      }
      return n.enter("data"), n.consume(p), c;
    }
    function c(p) {
      return d(p) ? (n.exit("data"), i(p)) : (n.consume(p), c);
    }
    function d(p) {
      if (p === null)
        return !0;
      const _ = a[p];
      let f = -1;
      if (_)
        for (; ++f < _.length; ) {
          const g = _[f];
          if (!g.previous || g.previous.call(r, r.previous))
            return !0;
        }
      return !1;
    }
  }
}
function yx(t) {
  return e;
  function e(n, r) {
    let a = -1, i;
    for (; ++a <= n.length; )
      i === void 0 ? n[a] && n[a][1].type === "data" && (i = a, a++) : (!n[a] || n[a][1].type !== "data") && (a !== i + 2 && (n[i][1].end = n[a - 1][1].end, n.splice(i + 2, a - i - 2), a = i + 2), i = void 0);
    return t ? t(n, r) : n;
  }
}
function bY(t, e) {
  let n = 0;
  for (; ++n <= t.length; )
    if ((n === t.length || t[n][1].type === "lineEnding") && t[n - 1][1].type === "data") {
      const r = t[n - 1][1], a = e.sliceStream(r);
      let i = a.length, s = -1, l = 0, c;
      for (; i--; ) {
        const d = a[i];
        if (typeof d == "string") {
          for (s = d.length; d.charCodeAt(s - 1) === 32; )
            l++, s--;
          if (s) break;
          s = -1;
        } else if (d === -2)
          c = !0, l++;
        else if (d !== -1) {
          i++;
          break;
        }
      }
      if (l) {
        const d = {
          type: n === t.length || c || l < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            line: r.end.line,
            column: r.end.column - l,
            offset: r.end.offset - l,
            _index: r.start._index + i,
            _bufferIndex: i ? s : r.start._bufferIndex + s
          },
          end: Object.assign({}, r.end)
        };
        r.end = Object.assign({}, d.start), r.start.offset === r.end.offset ? Object.assign(r, d) : (t.splice(
          n,
          0,
          ["enter", d, e],
          ["exit", d, e]
        ), n += 2);
      }
      n++;
    }
  return t;
}
function TY(t, e, n) {
  let r = Object.assign(
    n ? Object.assign({}, n) : {
      line: 1,
      column: 1,
      offset: 0
    },
    {
      _index: 0,
      _bufferIndex: -1
    }
  );
  const a = {}, i = [];
  let s = [], l = [];
  const c = {
    consume: I,
    enter: x,
    exit: P,
    attempt: K(D),
    check: K(L),
    interrupt: K(L, {
      interrupt: !0
    })
  }, d = {
    previous: null,
    code: null,
    containerState: {},
    events: [],
    parser: t,
    sliceStream: g,
    sliceSerialize: f,
    now: E,
    defineSkip: T,
    write: _
  };
  let p = e.tokenize.call(d, c);
  return e.resolveAll && i.push(e), d;
  function _(ae) {
    return s = ra(s, ae), R(), s[s.length - 1] !== null ? [] : (J(e, 0), d.events = Md(i, d.events, d), d.events);
  }
  function f(ae, ce) {
    return vY(g(ae), ce);
  }
  function g(ae) {
    return yY(s, ae);
  }
  function E() {
    const { line: ae, column: ce, offset: ve, _index: ge, _bufferIndex: fe } = r;
    return {
      line: ae,
      column: ce,
      offset: ve,
      _index: ge,
      _bufferIndex: fe
    };
  }
  function T(ae) {
    a[ae.line] = ae.column, $();
  }
  function R() {
    let ae;
    for (; r._index < s.length; ) {
      const ce = s[r._index];
      if (typeof ce == "string")
        for (ae = r._index, r._bufferIndex < 0 && (r._bufferIndex = 0); r._index === ae && r._bufferIndex < ce.length; )
          A(ce.charCodeAt(r._bufferIndex));
      else
        A(ce);
    }
  }
  function A(ae) {
    p = p(ae);
  }
  function I(ae) {
    Je(ae) ? (r.line++, r.column = 1, r.offset += ae === -3 ? 2 : 1, $()) : ae !== -1 && (r.column++, r.offset++), r._bufferIndex < 0 ? r._index++ : (r._bufferIndex++, r._bufferIndex === s[r._index].length && (r._bufferIndex = -1, r._index++)), d.previous = ae;
  }
  function x(ae, ce) {
    const ve = ce || {};
    return ve.type = ae, ve.start = E(), d.events.push(["enter", ve, d]), l.push(ve), ve;
  }
  function P(ae) {
    const ce = l.pop();
    return ce.end = E(), d.events.push(["exit", ce, d]), ce;
  }
  function D(ae, ce) {
    J(ae, ce.from);
  }
  function L(ae, ce) {
    ce.restore();
  }
  function K(ae, ce) {
    return ve;
    function ve(ge, fe, Fe) {
      let ne, se, z, v;
      return Array.isArray(ge) ? oe(ge) : "tokenize" in ge ? (
        // @ts-expect-error Looks like a construct.
        oe([ge])
      ) : H(ge);
      function H(he) {
        return Ne;
        function Ne(ye) {
          const Ue = ye !== null && he[ye], Me = ye !== null && he.null, Qe = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(Ue) ? Ue : Ue ? [Ue] : [],
            ...Array.isArray(Me) ? Me : Me ? [Me] : []
          ];
          return oe(Qe)(ye);
        }
      }
      function oe(he) {
        return ne = he, se = 0, he.length === 0 ? Fe : k(he[se]);
      }
      function k(he) {
        return Ne;
        function Ne(ye) {
          return v = X(), z = he, he.partial || (d.currentConstruct = he), he.name && d.parser.constructs.disable.null.includes(he.name) ? Ce() : he.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            ce ? Object.assign(Object.create(d), ce) : d,
            c,
            me,
            Ce
          )(ye);
        }
      }
      function me(he) {
        return ae(z, v), fe;
      }
      function Ce(he) {
        return v.restore(), ++se < ne.length ? k(ne[se]) : Fe;
      }
    }
  }
  function J(ae, ce) {
    ae.resolveAll && !i.includes(ae) && i.push(ae), ae.resolve && qr(
      d.events,
      ce,
      d.events.length - ce,
      ae.resolve(d.events.slice(ce), d)
    ), ae.resolveTo && (d.events = ae.resolveTo(d.events, d));
  }
  function X() {
    const ae = E(), ce = d.previous, ve = d.currentConstruct, ge = d.events.length, fe = Array.from(l);
    return {
      restore: Fe,
      from: ge
    };
    function Fe() {
      r = ae, d.previous = ce, d.currentConstruct = ve, d.events.length = ge, l = fe, $();
    }
  }
  function $() {
    r.line in a && r.column < 2 && (r.column = a[r.line], r.offset += a[r.line] - 1);
  }
}
function yY(t, e) {
  const n = e.start._index, r = e.start._bufferIndex, a = e.end._index, i = e.end._bufferIndex;
  let s;
  if (n === a)
    s = [t[n].slice(r, i)];
  else {
    if (s = t.slice(n, a), r > -1) {
      const l = s[0];
      typeof l == "string" ? s[0] = l.slice(r) : s.shift();
    }
    i > 0 && s.push(t[a].slice(0, i));
  }
  return s;
}
function vY(t, e) {
  let n = -1;
  const r = [];
  let a;
  for (; ++n < t.length; ) {
    const i = t[n];
    let s;
    if (typeof i == "string")
      s = i;
    else
      switch (i) {
        case -5: {
          s = "\r";
          break;
        }
        case -4: {
          s = `
`;
          break;
        }
        case -3: {
          s = `\r
`;
          break;
        }
        case -2: {
          s = e ? " " : "	";
          break;
        }
        case -1: {
          if (!e && a) continue;
          s = " ";
          break;
        }
        default:
          s = String.fromCharCode(i);
      }
    a = i === -2, r.push(s);
  }
  return r.join("");
}
const CY = {
  42: Or,
  43: Or,
  45: Or,
  48: Or,
  49: Or,
  50: Or,
  51: Or,
  52: Or,
  53: Or,
  54: Or,
  55: Or,
  56: Or,
  57: Or,
  62: mx
}, RY = {
  91: AH
}, AY = {
  [-2]: W0,
  [-1]: W0,
  32: W0
}, OY = {
  35: wH,
  42: Gu,
  45: [ov, Gu],
  60: PH,
  61: ov,
  95: Gu,
  96: iv,
  126: iv
}, NY = {
  38: gx,
  92: fx
}, IY = {
  [-5]: K0,
  [-4]: K0,
  [-3]: K0,
  33: eY,
  38: gx,
  42: Fh,
  60: [rH, zH],
  91: nY,
  92: [xH, fx],
  93: t1,
  95: Fh,
  96: gH
}, xY = {
  null: [Fh, hY]
}, DY = {
  null: [42, 95]
}, wY = {
  null: []
}, LY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  attentionMarkers: DY,
  contentInitial: RY,
  disable: wY,
  document: CY,
  flow: OY,
  flowInitial: AY,
  insideSpan: xY,
  string: NY,
  text: IY
}, Symbol.toStringTag, { value: "Module" }));
function MY(t) {
  const n = (
    /** @type {FullNormalizedExtension} */
    px([LY, ...(t || {}).extensions || []])
  ), r = {
    defined: [],
    lazy: {},
    constructs: n,
    content: a(jG),
    document: a(ZG),
    flow: a(fY),
    string: a(EY),
    text: a(SY)
  };
  return r;
  function a(i) {
    return s;
    function s(l) {
      return TY(r, i, l);
    }
  }
}
function kY(t) {
  for (; !hx(t); )
    ;
  return t;
}
const lv = /[\0\t\n\r]/g;
function PY() {
  let t = 1, e = "", n = !0, r;
  return a;
  function a(i, s, l) {
    const c = [];
    let d, p, _, f, g;
    for (i = e + (typeof i == "string" ? i.toString() : new TextDecoder(s || void 0).decode(i)), _ = 0, e = "", n && (i.charCodeAt(0) === 65279 && _++, n = void 0); _ < i.length; ) {
      if (lv.lastIndex = _, d = lv.exec(i), f = d && d.index !== void 0 ? d.index : i.length, g = i.charCodeAt(f), !d) {
        e = i.slice(_);
        break;
      }
      if (g === 10 && _ === f && r)
        c.push(-3), r = void 0;
      else
        switch (r && (c.push(-5), r = void 0), _ < f && (c.push(i.slice(_, f)), t += f - _), g) {
          case 0: {
            c.push(65533), t++;
            break;
          }
          case 9: {
            for (p = Math.ceil(t / 4) * 4, c.push(-2); t++ < p; ) c.push(-1);
            break;
          }
          case 10: {
            c.push(-4), t = 1;
            break;
          }
          default:
            r = !0, t = 1;
        }
      _ = f + 1;
    }
    return l && (r && c.push(-5), e && c.push(e), c.push(null)), c;
  }
}
const FY = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function BY(t) {
  return t.replace(FY, UY);
}
function UY(t, e, n) {
  if (e)
    return e;
  if (n.charCodeAt(0) === 35) {
    const a = n.charCodeAt(1), i = a === 120 || a === 88;
    return _x(n.slice(i ? 2 : 1), i ? 16 : 10);
  }
  return e1(n) || t;
}
const vx = {}.hasOwnProperty;
function GY(t, e, n) {
  return typeof e != "string" && (n = e, e = void 0), HY(n)(
    kY(
      MY(n).document().write(PY()(t, e, !0))
    )
  );
}
function HY(t) {
  const e = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: i(_t),
      autolinkProtocol: X,
      autolinkEmail: X,
      atxHeading: i(et),
      blockQuote: i(Ue),
      characterEscape: X,
      characterReference: X,
      codeFenced: i(Me),
      codeFencedFenceInfo: s,
      codeFencedFenceMeta: s,
      codeIndented: i(Me, s),
      codeText: i(Qe, s),
      codeTextData: X,
      data: X,
      codeFlowValue: X,
      definition: i(_e),
      definitionDestinationString: s,
      definitionLabelString: s,
      definitionTitleString: s,
      emphasis: i(je),
      hardBreakEscape: i(nt),
      hardBreakTrailing: i(nt),
      htmlFlow: i(mt, s),
      htmlFlowData: X,
      htmlText: i(mt, s),
      htmlTextData: X,
      image: i(bt),
      label: s,
      link: i(_t),
      listItem: i(Gt),
      listItemValue: f,
      listOrdered: i(He, _),
      listUnordered: i(He),
      paragraph: i(pt),
      reference: k,
      referenceString: s,
      resourceDestinationString: s,
      resourceTitleString: s,
      setextHeading: i(et),
      strong: i(Be),
      thematicBreak: i(Oe)
    },
    exit: {
      atxHeading: c(),
      atxHeadingSequence: D,
      autolink: c(),
      autolinkEmail: ye,
      autolinkProtocol: Ne,
      blockQuote: c(),
      characterEscapeValue: $,
      characterReferenceMarkerHexadecimal: Ce,
      characterReferenceMarkerNumeric: Ce,
      characterReferenceValue: he,
      codeFenced: c(R),
      codeFencedFence: T,
      codeFencedFenceInfo: g,
      codeFencedFenceMeta: E,
      codeFlowValue: $,
      codeIndented: c(A),
      codeText: c(fe),
      codeTextData: $,
      data: $,
      definition: c(),
      definitionDestinationString: P,
      definitionLabelString: I,
      definitionTitleString: x,
      emphasis: c(),
      hardBreakEscape: c(ce),
      hardBreakTrailing: c(ce),
      htmlFlow: c(ve),
      htmlFlowData: $,
      htmlText: c(ge),
      htmlTextData: $,
      image: c(ne),
      label: z,
      labelText: se,
      lineEnding: ae,
      link: c(Fe),
      listItem: c(),
      listOrdered: c(),
      listUnordered: c(),
      paragraph: c(),
      referenceString: me,
      resourceDestinationString: v,
      resourceTitleString: H,
      resource: oe,
      setextHeading: c(J),
      setextHeadingLineSequence: K,
      setextHeadingText: L,
      strong: c(),
      thematicBreak: c()
    }
  };
  Cx(e, (t || {}).mdastExtensions || []);
  const n = {};
  return r;
  function r(j) {
    let Se = {
      type: "root",
      children: []
    };
    const ue = {
      stack: [Se],
      tokenStack: [],
      config: e,
      enter: l,
      exit: d,
      buffer: s,
      resume: p,
      data: n
    }, be = [];
    let Ge = -1;
    for (; ++Ge < j.length; )
      if (j[Ge][1].type === "listOrdered" || j[Ge][1].type === "listUnordered")
        if (j[Ge][0] === "enter")
          be.push(Ge);
        else {
          const Ze = be.pop();
          Ge = a(j, Ze, Ge);
        }
    for (Ge = -1; ++Ge < j.length; ) {
      const Ze = e[j[Ge][0]];
      vx.call(Ze, j[Ge][1].type) && Ze[j[Ge][1].type].call(
        Object.assign(
          {
            sliceSerialize: j[Ge][2].sliceSerialize
          },
          ue
        ),
        j[Ge][1]
      );
    }
    if (ue.tokenStack.length > 0) {
      const Ze = ue.tokenStack[ue.tokenStack.length - 1];
      (Ze[1] || cv).call(ue, void 0, Ze[0]);
    }
    for (Se.position = {
      start: Ci(
        j.length > 0 ? j[0][1].start : {
          line: 1,
          column: 1,
          offset: 0
        }
      ),
      end: Ci(
        j.length > 0 ? j[j.length - 2][1].end : {
          line: 1,
          column: 1,
          offset: 0
        }
      )
    }, Ge = -1; ++Ge < e.transforms.length; )
      Se = e.transforms[Ge](Se) || Se;
    return Se;
  }
  function a(j, Se, ue) {
    let be = Se - 1, Ge = -1, Ze = !1, vt, Pt, Ln, Rn;
    for (; ++be <= ue; ) {
      const nn = j[be];
      switch (nn[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote": {
          nn[0] === "enter" ? Ge++ : Ge--, Rn = void 0;
          break;
        }
        case "lineEndingBlank": {
          nn[0] === "enter" && (vt && !Rn && !Ge && !Ln && (Ln = be), Rn = void 0);
          break;
        }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace":
          break;
        default:
          Rn = void 0;
      }
      if (!Ge && nn[0] === "enter" && nn[1].type === "listItemPrefix" || Ge === -1 && nn[0] === "exit" && (nn[1].type === "listUnordered" || nn[1].type === "listOrdered")) {
        if (vt) {
          let Fn = be;
          for (Pt = void 0; Fn--; ) {
            const ut = j[Fn];
            if (ut[1].type === "lineEnding" || ut[1].type === "lineEndingBlank") {
              if (ut[0] === "exit") continue;
              Pt && (j[Pt][1].type = "lineEndingBlank", Ze = !0), ut[1].type = "lineEnding", Pt = Fn;
            } else if (!(ut[1].type === "linePrefix" || ut[1].type === "blockQuotePrefix" || ut[1].type === "blockQuotePrefixWhitespace" || ut[1].type === "blockQuoteMarker" || ut[1].type === "listItemIndent")) break;
          }
          Ln && (!Pt || Ln < Pt) && (vt._spread = !0), vt.end = Object.assign(
            {},
            Pt ? j[Pt][1].start : nn[1].end
          ), j.splice(Pt || be, 0, ["exit", vt, nn[2]]), be++, ue++;
        }
        if (nn[1].type === "listItemPrefix") {
          const Fn = {
            type: "listItem",
            _spread: !1,
            start: Object.assign({}, nn[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          vt = Fn, j.splice(be, 0, ["enter", Fn, nn[2]]), be++, ue++, Ln = void 0, Rn = !0;
        }
      }
    }
    return j[Se][1]._spread = Ze, ue;
  }
  function i(j, Se) {
    return ue;
    function ue(be) {
      l.call(this, j(be), be), Se && Se.call(this, be);
    }
  }
  function s() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function l(j, Se, ue) {
    this.stack[this.stack.length - 1].children.push(j), this.stack.push(j), this.tokenStack.push([Se, ue]), j.position = {
      start: Ci(Se.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function c(j) {
    return Se;
    function Se(ue) {
      j && j.call(this, ue), d.call(this, ue);
    }
  }
  function d(j, Se) {
    const ue = this.stack.pop(), be = this.tokenStack.pop();
    if (be)
      be[0].type !== j.type && (Se ? Se.call(this, j, be[0]) : (be[1] || cv).call(this, j, be[0]));
    else throw new Error(
      "Cannot close `" + j.type + "` (" + El({
        start: j.start,
        end: j.end
      }) + "): it’s not open"
    );
    ue.position.end = Ci(j.end);
  }
  function p() {
    return JE(this.stack.pop());
  }
  function _() {
    this.data.expectingFirstListItemValue = !0;
  }
  function f(j) {
    if (this.data.expectingFirstListItemValue) {
      const Se = this.stack[this.stack.length - 2];
      Se.start = Number.parseInt(this.sliceSerialize(j), 10), this.data.expectingFirstListItemValue = void 0;
    }
  }
  function g() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.lang = j;
  }
  function E() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.meta = j;
  }
  function T() {
    this.data.flowCodeInside || (this.buffer(), this.data.flowCodeInside = !0);
  }
  function R() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.value = j.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, ""), this.data.flowCodeInside = void 0;
  }
  function A() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.value = j.replace(/(\r?\n|\r)$/g, "");
  }
  function I(j) {
    const Se = this.resume(), ue = this.stack[this.stack.length - 1];
    ue.label = Se, ue.identifier = Ta(
      this.sliceSerialize(j)
    ).toLowerCase();
  }
  function x() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.title = j;
  }
  function P() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.url = j;
  }
  function D(j) {
    const Se = this.stack[this.stack.length - 1];
    if (!Se.depth) {
      const ue = this.sliceSerialize(j).length;
      Se.depth = ue;
    }
  }
  function L() {
    this.data.setextHeadingSlurpLineEnding = !0;
  }
  function K(j) {
    const Se = this.stack[this.stack.length - 1];
    Se.depth = this.sliceSerialize(j).codePointAt(0) === 61 ? 1 : 2;
  }
  function J() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function X(j) {
    const ue = this.stack[this.stack.length - 1].children;
    let be = ue[ue.length - 1];
    (!be || be.type !== "text") && (be = It(), be.position = {
      start: Ci(j.start),
      // @ts-expect-error: we’ll add `end` later.
      end: void 0
    }, ue.push(be)), this.stack.push(be);
  }
  function $(j) {
    const Se = this.stack.pop();
    Se.value += this.sliceSerialize(j), Se.position.end = Ci(j.end);
  }
  function ae(j) {
    const Se = this.stack[this.stack.length - 1];
    if (this.data.atHardBreak) {
      const ue = Se.children[Se.children.length - 1];
      ue.position.end = Ci(j.end), this.data.atHardBreak = void 0;
      return;
    }
    !this.data.setextHeadingSlurpLineEnding && e.canContainEols.includes(Se.type) && (X.call(this, j), $.call(this, j));
  }
  function ce() {
    this.data.atHardBreak = !0;
  }
  function ve() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.value = j;
  }
  function ge() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.value = j;
  }
  function fe() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.value = j;
  }
  function Fe() {
    const j = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const Se = this.data.referenceType || "shortcut";
      j.type += "Reference", j.referenceType = Se, delete j.url, delete j.title;
    } else
      delete j.identifier, delete j.label;
    this.data.referenceType = void 0;
  }
  function ne() {
    const j = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const Se = this.data.referenceType || "shortcut";
      j.type += "Reference", j.referenceType = Se, delete j.url, delete j.title;
    } else
      delete j.identifier, delete j.label;
    this.data.referenceType = void 0;
  }
  function se(j) {
    const Se = this.sliceSerialize(j), ue = this.stack[this.stack.length - 2];
    ue.label = BY(Se), ue.identifier = Ta(Se).toLowerCase();
  }
  function z() {
    const j = this.stack[this.stack.length - 1], Se = this.resume(), ue = this.stack[this.stack.length - 1];
    if (this.data.inReference = !0, ue.type === "link") {
      const be = j.children;
      ue.children = be;
    } else
      ue.alt = Se;
  }
  function v() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.url = j;
  }
  function H() {
    const j = this.resume(), Se = this.stack[this.stack.length - 1];
    Se.title = j;
  }
  function oe() {
    this.data.inReference = void 0;
  }
  function k() {
    this.data.referenceType = "collapsed";
  }
  function me(j) {
    const Se = this.resume(), ue = this.stack[this.stack.length - 1];
    ue.label = Se, ue.identifier = Ta(
      this.sliceSerialize(j)
    ).toLowerCase(), this.data.referenceType = "full";
  }
  function Ce(j) {
    this.data.characterReferenceType = j.type;
  }
  function he(j) {
    const Se = this.sliceSerialize(j), ue = this.data.characterReferenceType;
    let be;
    ue ? (be = _x(
      Se,
      ue === "characterReferenceMarkerNumeric" ? 10 : 16
    ), this.data.characterReferenceType = void 0) : be = e1(Se);
    const Ge = this.stack.pop();
    Ge.value += be, Ge.position.end = Ci(j.end);
  }
  function Ne(j) {
    $.call(this, j);
    const Se = this.stack[this.stack.length - 1];
    Se.url = this.sliceSerialize(j);
  }
  function ye(j) {
    $.call(this, j);
    const Se = this.stack[this.stack.length - 1];
    Se.url = "mailto:" + this.sliceSerialize(j);
  }
  function Ue() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function Me() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function Qe() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function _e() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function je() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function et() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function nt() {
    return {
      type: "break"
    };
  }
  function mt() {
    return {
      type: "html",
      value: ""
    };
  }
  function bt() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function _t() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function He(j) {
    return {
      type: "list",
      ordered: j.type === "listOrdered",
      start: null,
      spread: j._spread,
      children: []
    };
  }
  function Gt(j) {
    return {
      type: "listItem",
      spread: j._spread,
      checked: null,
      children: []
    };
  }
  function pt() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function Be() {
    return {
      type: "strong",
      children: []
    };
  }
  function It() {
    return {
      type: "text",
      value: ""
    };
  }
  function Oe() {
    return {
      type: "thematicBreak"
    };
  }
}
function Ci(t) {
  return {
    line: t.line,
    column: t.column,
    offset: t.offset
  };
}
function Cx(t, e) {
  let n = -1;
  for (; ++n < e.length; ) {
    const r = e[n];
    Array.isArray(r) ? Cx(t, r) : YY(t, r);
  }
}
function YY(t, e) {
  let n;
  for (n in e)
    if (vx.call(e, n))
      switch (n) {
        case "canContainEols": {
          const r = e[n];
          r && t[n].push(...r);
          break;
        }
        case "transforms": {
          const r = e[n];
          r && t[n].push(...r);
          break;
        }
        case "enter":
        case "exit": {
          const r = e[n];
          r && Object.assign(t[n], r);
          break;
        }
      }
}
function cv(t, e) {
  throw t ? new Error(
    "Cannot close `" + t.type + "` (" + El({
      start: t.start,
      end: t.end
    }) + "): a different token (`" + e.type + "`, " + El({
      start: e.start,
      end: e.end
    }) + ") is open"
  ) : new Error(
    "Cannot close document, a token (`" + e.type + "`, " + El({
      start: e.start,
      end: e.end
    }) + ") is still open"
  );
}
function zY(t) {
  const e = this;
  e.parser = n;
  function n(r) {
    return GY(r, {
      ...e.data("settings"),
      ...t,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: e.data("micromarkExtensions") || [],
      mdastExtensions: e.data("fromMarkdownExtensions") || []
    });
  }
}
function qY(t, e) {
  const n = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: t.wrap(t.all(e), !0)
  };
  return t.patch(e, n), t.applyData(e, n);
}
function VY(t, e) {
  const n = { type: "element", tagName: "br", properties: {}, children: [] };
  return t.patch(e, n), [t.applyData(e, n), { type: "text", value: `
` }];
}
function $Y(t, e) {
  const n = e.value ? e.value + `
` : "", r = {};
  e.lang && (r.className = ["language-" + e.lang]);
  let a = {
    type: "element",
    tagName: "code",
    properties: r,
    children: [{ type: "text", value: n }]
  };
  return e.meta && (a.data = { meta: e.meta }), t.patch(e, a), a = t.applyData(e, a), a = { type: "element", tagName: "pre", properties: {}, children: [a] }, t.patch(e, a), a;
}
function WY(t, e) {
  const n = {
    type: "element",
    tagName: "del",
    properties: {},
    children: t.all(e)
  };
  return t.patch(e, n), t.applyData(e, n);
}
function KY(t, e) {
  const n = {
    type: "element",
    tagName: "em",
    properties: {},
    children: t.all(e)
  };
  return t.patch(e, n), t.applyData(e, n);
}
function QY(t, e) {
  const n = typeof t.options.clobberPrefix == "string" ? t.options.clobberPrefix : "user-content-", r = String(e.identifier).toUpperCase(), a = go(r.toLowerCase()), i = t.footnoteOrder.indexOf(r);
  let s, l = t.footnoteCounts.get(r);
  l === void 0 ? (l = 0, t.footnoteOrder.push(r), s = t.footnoteOrder.length) : s = i + 1, l += 1, t.footnoteCounts.set(r, l);
  const c = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + n + "fn-" + a,
      id: n + "fnref-" + a + (l > 1 ? "-" + l : ""),
      dataFootnoteRef: !0,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(s) }]
  };
  t.patch(e, c);
  const d = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [c]
  };
  return t.patch(e, d), t.applyData(e, d);
}
function jY(t, e) {
  const n = {
    type: "element",
    tagName: "h" + e.depth,
    properties: {},
    children: t.all(e)
  };
  return t.patch(e, n), t.applyData(e, n);
}
function XY(t, e) {
  if (t.options.allowDangerousHtml) {
    const n = { type: "raw", value: e.value };
    return t.patch(e, n), t.applyData(e, n);
  }
}
function Rx(t, e) {
  const n = e.referenceType;
  let r = "]";
  if (n === "collapsed" ? r += "[]" : n === "full" && (r += "[" + (e.label || e.identifier) + "]"), e.type === "imageReference")
    return [{ type: "text", value: "![" + e.alt + r }];
  const a = t.all(e), i = a[0];
  i && i.type === "text" ? i.value = "[" + i.value : a.unshift({ type: "text", value: "[" });
  const s = a[a.length - 1];
  return s && s.type === "text" ? s.value += r : a.push({ type: "text", value: r }), a;
}
function ZY(t, e) {
  const n = String(e.identifier).toUpperCase(), r = t.definitionById.get(n);
  if (!r)
    return Rx(t, e);
  const a = { src: go(r.url || ""), alt: e.alt };
  r.title !== null && r.title !== void 0 && (a.title = r.title);
  const i = { type: "element", tagName: "img", properties: a, children: [] };
  return t.patch(e, i), t.applyData(e, i);
}
function JY(t, e) {
  const n = { src: go(e.url) };
  e.alt !== null && e.alt !== void 0 && (n.alt = e.alt), e.title !== null && e.title !== void 0 && (n.title = e.title);
  const r = { type: "element", tagName: "img", properties: n, children: [] };
  return t.patch(e, r), t.applyData(e, r);
}
function ez(t, e) {
  const n = { type: "text", value: e.value.replace(/\r?\n|\r/g, " ") };
  t.patch(e, n);
  const r = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [n]
  };
  return t.patch(e, r), t.applyData(e, r);
}
function tz(t, e) {
  const n = String(e.identifier).toUpperCase(), r = t.definitionById.get(n);
  if (!r)
    return Rx(t, e);
  const a = { href: go(r.url || "") };
  r.title !== null && r.title !== void 0 && (a.title = r.title);
  const i = {
    type: "element",
    tagName: "a",
    properties: a,
    children: t.all(e)
  };
  return t.patch(e, i), t.applyData(e, i);
}
function nz(t, e) {
  const n = { href: go(e.url) };
  e.title !== null && e.title !== void 0 && (n.title = e.title);
  const r = {
    type: "element",
    tagName: "a",
    properties: n,
    children: t.all(e)
  };
  return t.patch(e, r), t.applyData(e, r);
}
function rz(t, e, n) {
  const r = t.all(e), a = n ? az(n) : Ax(e), i = {}, s = [];
  if (typeof e.checked == "boolean") {
    const p = r[0];
    let _;
    p && p.type === "element" && p.tagName === "p" ? _ = p : (_ = { type: "element", tagName: "p", properties: {}, children: [] }, r.unshift(_)), _.children.length > 0 && _.children.unshift({ type: "text", value: " " }), _.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: e.checked, disabled: !0 },
      children: []
    }), i.className = ["task-list-item"];
  }
  let l = -1;
  for (; ++l < r.length; ) {
    const p = r[l];
    (a || l !== 0 || p.type !== "element" || p.tagName !== "p") && s.push({ type: "text", value: `
` }), p.type === "element" && p.tagName === "p" && !a ? s.push(...p.children) : s.push(p);
  }
  const c = r[r.length - 1];
  c && (a || c.type !== "element" || c.tagName !== "p") && s.push({ type: "text", value: `
` });
  const d = { type: "element", tagName: "li", properties: i, children: s };
  return t.patch(e, d), t.applyData(e, d);
}
function az(t) {
  let e = !1;
  if (t.type === "list") {
    e = t.spread || !1;
    const n = t.children;
    let r = -1;
    for (; !e && ++r < n.length; )
      e = Ax(n[r]);
  }
  return e;
}
function Ax(t) {
  const e = t.spread;
  return e ?? t.children.length > 1;
}
function iz(t, e) {
  const n = {}, r = t.all(e);
  let a = -1;
  for (typeof e.start == "number" && e.start !== 1 && (n.start = e.start); ++a < r.length; ) {
    const s = r[a];
    if (s.type === "element" && s.tagName === "li" && s.properties && Array.isArray(s.properties.className) && s.properties.className.includes("task-list-item")) {
      n.className = ["contains-task-list"];
      break;
    }
  }
  const i = {
    type: "element",
    tagName: e.ordered ? "ol" : "ul",
    properties: n,
    children: t.wrap(r, !0)
  };
  return t.patch(e, i), t.applyData(e, i);
}
function sz(t, e) {
  const n = {
    type: "element",
    tagName: "p",
    properties: {},
    children: t.all(e)
  };
  return t.patch(e, n), t.applyData(e, n);
}
function oz(t, e) {
  const n = { type: "root", children: t.wrap(t.all(e)) };
  return t.patch(e, n), t.applyData(e, n);
}
function lz(t, e) {
  const n = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: t.all(e)
  };
  return t.patch(e, n), t.applyData(e, n);
}
function cz(t, e) {
  const n = t.all(e), r = n.shift(), a = [];
  if (r) {
    const s = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: t.wrap([r], !0)
    };
    t.patch(e.children[0], s), a.push(s);
  }
  if (n.length > 0) {
    const s = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: t.wrap(n, !0)
    }, l = Ga(e.children[1]), c = wd(e.children[e.children.length - 1]);
    l && c && (s.position = { start: l, end: c }), a.push(s);
  }
  const i = {
    type: "element",
    tagName: "table",
    properties: {},
    children: t.wrap(a, !0)
  };
  return t.patch(e, i), t.applyData(e, i);
}
function uz(t, e, n) {
  const r = n ? n.children : void 0, i = (r ? r.indexOf(e) : 1) === 0 ? "th" : "td", s = n && n.type === "table" ? n.align : void 0, l = s ? s.length : e.children.length;
  let c = -1;
  const d = [];
  for (; ++c < l; ) {
    const _ = e.children[c], f = {}, g = s ? s[c] : void 0;
    g && (f.align = g);
    let E = { type: "element", tagName: i, properties: f, children: [] };
    _ && (E.children = t.all(_), t.patch(_, E), E = t.applyData(_, E)), d.push(E);
  }
  const p = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: t.wrap(d, !0)
  };
  return t.patch(e, p), t.applyData(e, p);
}
function dz(t, e) {
  const n = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: t.all(e)
  };
  return t.patch(e, n), t.applyData(e, n);
}
const uv = 9, dv = 32;
function pz(t) {
  const e = String(t), n = /\r?\n|\r/g;
  let r = n.exec(e), a = 0;
  const i = [];
  for (; r; )
    i.push(
      pv(e.slice(a, r.index), a > 0, !0),
      r[0]
    ), a = r.index + r[0].length, r = n.exec(e);
  return i.push(pv(e.slice(a), a > 0, !1)), i.join("");
}
function pv(t, e, n) {
  let r = 0, a = t.length;
  if (e) {
    let i = t.codePointAt(r);
    for (; i === uv || i === dv; )
      r++, i = t.codePointAt(r);
  }
  if (n) {
    let i = t.codePointAt(a - 1);
    for (; i === uv || i === dv; )
      a--, i = t.codePointAt(a - 1);
  }
  return a > r ? t.slice(r, a) : "";
}
function _z(t, e) {
  const n = { type: "text", value: pz(String(e.value)) };
  return t.patch(e, n), t.applyData(e, n);
}
function mz(t, e) {
  const n = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  return t.patch(e, n), t.applyData(e, n);
}
const fz = {
  blockquote: qY,
  break: VY,
  code: $Y,
  delete: WY,
  emphasis: KY,
  footnoteReference: QY,
  heading: jY,
  html: XY,
  imageReference: ZY,
  image: JY,
  inlineCode: ez,
  linkReference: tz,
  link: nz,
  listItem: rz,
  list: iz,
  paragraph: sz,
  // @ts-expect-error: root is different, but hard to type.
  root: oz,
  strong: lz,
  table: cz,
  tableCell: dz,
  tableRow: uz,
  text: _z,
  thematicBreak: mz,
  toml: Eu,
  yaml: Eu,
  definition: Eu,
  footnoteDefinition: Eu
};
function Eu() {
}
const Ox = -1, kd = 0, rd = 1, ad = 2, n1 = 3, r1 = 4, a1 = 5, i1 = 6, Nx = 7, Ix = 8, _v = typeof self == "object" ? self : globalThis, gz = (t, e) => {
  const n = (a, i) => (t.set(i, a), a), r = (a) => {
    if (t.has(a))
      return t.get(a);
    const [i, s] = e[a];
    switch (i) {
      case kd:
      case Ox:
        return n(s, a);
      case rd: {
        const l = n([], a);
        for (const c of s)
          l.push(r(c));
        return l;
      }
      case ad: {
        const l = n({}, a);
        for (const [c, d] of s)
          l[r(c)] = r(d);
        return l;
      }
      case n1:
        return n(new Date(s), a);
      case r1: {
        const { source: l, flags: c } = s;
        return n(new RegExp(l, c), a);
      }
      case a1: {
        const l = n(/* @__PURE__ */ new Map(), a);
        for (const [c, d] of s)
          l.set(r(c), r(d));
        return l;
      }
      case i1: {
        const l = n(/* @__PURE__ */ new Set(), a);
        for (const c of s)
          l.add(r(c));
        return l;
      }
      case Nx: {
        const { name: l, message: c } = s;
        return n(new _v[l](c), a);
      }
      case Ix:
        return n(BigInt(s), a);
      case "BigInt":
        return n(Object(BigInt(s)), a);
    }
    return n(new _v[i](s), a);
  };
  return r;
}, mv = (t) => gz(/* @__PURE__ */ new Map(), t)(0), Gs = "", { toString: hz } = {}, { keys: Ez } = Object, sl = (t) => {
  const e = typeof t;
  if (e !== "object" || !t)
    return [kd, e];
  const n = hz.call(t).slice(8, -1);
  switch (n) {
    case "Array":
      return [rd, Gs];
    case "Object":
      return [ad, Gs];
    case "Date":
      return [n1, Gs];
    case "RegExp":
      return [r1, Gs];
    case "Map":
      return [a1, Gs];
    case "Set":
      return [i1, Gs];
  }
  return n.includes("Array") ? [rd, n] : n.includes("Error") ? [Nx, n] : [ad, n];
}, Su = ([t, e]) => t === kd && (e === "function" || e === "symbol"), Sz = (t, e, n, r) => {
  const a = (s, l) => {
    const c = r.push(s) - 1;
    return n.set(l, c), c;
  }, i = (s) => {
    if (n.has(s))
      return n.get(s);
    let [l, c] = sl(s);
    switch (l) {
      case kd: {
        let p = s;
        switch (c) {
          case "bigint":
            l = Ix, p = s.toString();
            break;
          case "function":
          case "symbol":
            if (t)
              throw new TypeError("unable to serialize " + c);
            p = null;
            break;
          case "undefined":
            return a([Ox], s);
        }
        return a([l, p], s);
      }
      case rd: {
        if (c)
          return a([c, [...s]], s);
        const p = [], _ = a([l, p], s);
        for (const f of s)
          p.push(i(f));
        return _;
      }
      case ad: {
        if (c)
          switch (c) {
            case "BigInt":
              return a([c, s.toString()], s);
            case "Boolean":
            case "Number":
            case "String":
              return a([c, s.valueOf()], s);
          }
        if (e && "toJSON" in s)
          return i(s.toJSON());
        const p = [], _ = a([l, p], s);
        for (const f of Ez(s))
          (t || !Su(sl(s[f]))) && p.push([i(f), i(s[f])]);
        return _;
      }
      case n1:
        return a([l, s.toISOString()], s);
      case r1: {
        const { source: p, flags: _ } = s;
        return a([l, { source: p, flags: _ }], s);
      }
      case a1: {
        const p = [], _ = a([l, p], s);
        for (const [f, g] of s)
          (t || !(Su(sl(f)) || Su(sl(g)))) && p.push([i(f), i(g)]);
        return _;
      }
      case i1: {
        const p = [], _ = a([l, p], s);
        for (const f of s)
          (t || !Su(sl(f))) && p.push(i(f));
        return _;
      }
    }
    const { message: d } = s;
    return a([l, { name: c, message: d }], s);
  };
  return i;
}, fv = (t, { json: e, lossy: n } = {}) => {
  const r = [];
  return Sz(!(e || n), !!e, /* @__PURE__ */ new Map(), r)(t), r;
}, to = typeof structuredClone == "function" ? (
  /* c8 ignore start */
  (t, e) => e && ("json" in e || "lossy" in e) ? mv(fv(t, e)) : structuredClone(t)
) : (t, e) => mv(fv(t, e));
function bz(t, e) {
  const n = [{ type: "text", value: "↩" }];
  return e > 1 && n.push({
    type: "element",
    tagName: "sup",
    properties: {},
    children: [{ type: "text", value: String(e) }]
  }), n;
}
function Tz(t, e) {
  return "Back to reference " + (t + 1) + (e > 1 ? "-" + e : "");
}
function yz(t) {
  const e = typeof t.options.clobberPrefix == "string" ? t.options.clobberPrefix : "user-content-", n = t.options.footnoteBackContent || bz, r = t.options.footnoteBackLabel || Tz, a = t.options.footnoteLabel || "Footnotes", i = t.options.footnoteLabelTagName || "h2", s = t.options.footnoteLabelProperties || {
    className: ["sr-only"]
  }, l = [];
  let c = -1;
  for (; ++c < t.footnoteOrder.length; ) {
    const d = t.footnoteById.get(t.footnoteOrder[c]);
    if (!d)
      continue;
    const p = t.all(d), _ = String(d.identifier).toUpperCase(), f = go(_.toLowerCase());
    let g = 0;
    const E = [], T = t.footnoteCounts.get(_);
    for (; T !== void 0 && ++g <= T; ) {
      E.length > 0 && E.push({ type: "text", value: " " });
      let I = typeof n == "string" ? n : n(c, g);
      typeof I == "string" && (I = { type: "text", value: I }), E.push({
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + e + "fnref-" + f + (g > 1 ? "-" + g : ""),
          dataFootnoteBackref: "",
          ariaLabel: typeof r == "string" ? r : r(c, g),
          className: ["data-footnote-backref"]
        },
        children: Array.isArray(I) ? I : [I]
      });
    }
    const R = p[p.length - 1];
    if (R && R.type === "element" && R.tagName === "p") {
      const I = R.children[R.children.length - 1];
      I && I.type === "text" ? I.value += " " : R.children.push({ type: "text", value: " " }), R.children.push(...E);
    } else
      p.push(...E);
    const A = {
      type: "element",
      tagName: "li",
      properties: { id: e + "fn-" + f },
      children: t.wrap(p, !0)
    };
    t.patch(d, A), l.push(A);
  }
  if (l.length !== 0)
    return {
      type: "element",
      tagName: "section",
      properties: { dataFootnotes: !0, className: ["footnotes"] },
      children: [
        {
          type: "element",
          tagName: i,
          properties: {
            ...to(s),
            id: "footnote-label"
          },
          children: [{ type: "text", value: a }]
        },
        { type: "text", value: `
` },
        {
          type: "element",
          tagName: "ol",
          properties: {},
          children: t.wrap(l, !0)
        },
        { type: "text", value: `
` }
      ]
    };
}
const jl = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(t) {
    if (t == null)
      return Az;
    if (typeof t == "function")
      return Pd(t);
    if (typeof t == "object")
      return Array.isArray(t) ? vz(t) : Cz(t);
    if (typeof t == "string")
      return Rz(t);
    throw new Error("Expected function, string, or object as test");
  }
);
function vz(t) {
  const e = [];
  let n = -1;
  for (; ++n < t.length; )
    e[n] = jl(t[n]);
  return Pd(r);
  function r(...a) {
    let i = -1;
    for (; ++i < e.length; )
      if (e[i].apply(this, a)) return !0;
    return !1;
  }
}
function Cz(t) {
  const e = (
    /** @type {Record<string, unknown>} */
    t
  );
  return Pd(n);
  function n(r) {
    const a = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      r
    );
    let i;
    for (i in t)
      if (a[i] !== e[i]) return !1;
    return !0;
  }
}
function Rz(t) {
  return Pd(e);
  function e(n) {
    return n && n.type === t;
  }
}
function Pd(t) {
  return e;
  function e(n, r, a) {
    return !!(Oz(n) && t.call(
      this,
      n,
      typeof r == "number" ? r : void 0,
      a || void 0
    ));
  }
}
function Az() {
  return !0;
}
function Oz(t) {
  return t !== null && typeof t == "object" && "type" in t;
}
const xx = [], Nz = !0, Bh = !1, Dx = "skip";
function s1(t, e, n, r) {
  let a;
  typeof e == "function" && typeof n != "function" ? (r = n, n = e) : a = e;
  const i = jl(a), s = r ? -1 : 1;
  l(t, void 0, [])();
  function l(c, d, p) {
    const _ = (
      /** @type {Record<string, unknown>} */
      c && typeof c == "object" ? c : {}
    );
    if (typeof _.type == "string") {
      const g = (
        // `hast`
        typeof _.tagName == "string" ? _.tagName : (
          // `xast`
          typeof _.name == "string" ? _.name : void 0
        )
      );
      Object.defineProperty(f, "name", {
        value: "node (" + (c.type + (g ? "<" + g + ">" : "")) + ")"
      });
    }
    return f;
    function f() {
      let g = xx, E, T, R;
      if ((!e || i(c, d, p[p.length - 1] || void 0)) && (g = Iz(n(c, p)), g[0] === Bh))
        return g;
      if ("children" in c && c.children) {
        const A = (
          /** @type {UnistParent} */
          c
        );
        if (A.children && g[0] !== Dx)
          for (T = (r ? A.children.length : -1) + s, R = p.concat(A); T > -1 && T < A.children.length; ) {
            const I = A.children[T];
            if (E = l(I, T, R)(), E[0] === Bh)
              return E;
            T = typeof E[1] == "number" ? E[1] : T + s;
          }
      }
      return g;
    }
  }
}
function Iz(t) {
  return Array.isArray(t) ? t : typeof t == "number" ? [Nz, t] : t == null ? xx : [t];
}
function Xl(t, e, n, r) {
  let a, i, s;
  typeof e == "function" && typeof n != "function" ? (i = void 0, s = e, a = n) : (i = e, s = n, a = r), s1(t, i, l, a);
  function l(c, d) {
    const p = d[d.length - 1], _ = p ? p.children.indexOf(c) : void 0;
    return s(c, _, p);
  }
}
const Uh = {}.hasOwnProperty, xz = {};
function Dz(t, e) {
  const n = e || xz, r = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map(), s = { ...fz, ...n.handlers }, l = {
    all: d,
    applyData: Lz,
    definitionById: r,
    footnoteById: a,
    footnoteCounts: i,
    footnoteOrder: [],
    handlers: s,
    one: c,
    options: n,
    patch: wz,
    wrap: kz
  };
  return Xl(t, function(p) {
    if (p.type === "definition" || p.type === "footnoteDefinition") {
      const _ = p.type === "definition" ? r : a, f = String(p.identifier).toUpperCase();
      _.has(f) || _.set(f, p);
    }
  }), l;
  function c(p, _) {
    const f = p.type, g = l.handlers[f];
    if (Uh.call(l.handlers, f) && g)
      return g(l, p, _);
    if (l.options.passThrough && l.options.passThrough.includes(f)) {
      if ("children" in p) {
        const { children: T, ...R } = p, A = to(R);
        return A.children = l.all(p), A;
      }
      return to(p);
    }
    return (l.options.unknownHandler || Mz)(l, p, _);
  }
  function d(p) {
    const _ = [];
    if ("children" in p) {
      const f = p.children;
      let g = -1;
      for (; ++g < f.length; ) {
        const E = l.one(f[g], p);
        if (E) {
          if (g && f[g - 1].type === "break" && (!Array.isArray(E) && E.type === "text" && (E.value = gv(E.value)), !Array.isArray(E) && E.type === "element")) {
            const T = E.children[0];
            T && T.type === "text" && (T.value = gv(T.value));
          }
          Array.isArray(E) ? _.push(...E) : _.push(E);
        }
      }
    }
    return _;
  }
}
function wz(t, e) {
  t.position && (e.position = bG(t));
}
function Lz(t, e) {
  let n = e;
  if (t && t.data) {
    const r = t.data.hName, a = t.data.hChildren, i = t.data.hProperties;
    if (typeof r == "string")
      if (n.type === "element")
        n.tagName = r;
      else {
        const s = "children" in n ? n.children : [n];
        n = { type: "element", tagName: r, properties: {}, children: s };
      }
    n.type === "element" && i && Object.assign(n.properties, to(i)), "children" in n && n.children && a !== null && a !== void 0 && (n.children = a);
  }
  return n;
}
function Mz(t, e) {
  const n = e.data || {}, r = "value" in e && !(Uh.call(n, "hProperties") || Uh.call(n, "hChildren")) ? { type: "text", value: e.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: t.all(e)
  };
  return t.patch(e, r), t.applyData(e, r);
}
function kz(t, e) {
  const n = [];
  let r = -1;
  for (e && n.push({ type: "text", value: `
` }); ++r < t.length; )
    r && n.push({ type: "text", value: `
` }), n.push(t[r]);
  return e && t.length > 0 && n.push({ type: "text", value: `
` }), n;
}
function gv(t) {
  let e = 0, n = t.charCodeAt(e);
  for (; n === 9 || n === 32; )
    e++, n = t.charCodeAt(e);
  return t.slice(e);
}
function hv(t, e) {
  const n = Dz(t, e), r = n.one(t, void 0), a = yz(n), i = Array.isArray(r) ? { type: "root", children: r } : r || { type: "root", children: [] };
  return a && i.children.push({ type: "text", value: `
` }, a), i;
}
function Pz(t, e) {
  return t && "run" in t ? async function(n, r) {
    const a = (
      /** @type {HastRoot} */
      hv(n, { file: r, ...e })
    );
    await t.run(a, r);
  } : function(n, r) {
    return (
      /** @type {HastRoot} */
      hv(n, { file: r, ...e || t })
    );
  };
}
function Ev(t) {
  if (t)
    throw t;
}
var Hu = Object.prototype.hasOwnProperty, wx = Object.prototype.toString, Sv = Object.defineProperty, bv = Object.getOwnPropertyDescriptor, Tv = function(e) {
  return typeof Array.isArray == "function" ? Array.isArray(e) : wx.call(e) === "[object Array]";
}, yv = function(e) {
  if (!e || wx.call(e) !== "[object Object]")
    return !1;
  var n = Hu.call(e, "constructor"), r = e.constructor && e.constructor.prototype && Hu.call(e.constructor.prototype, "isPrototypeOf");
  if (e.constructor && !n && !r)
    return !1;
  var a;
  for (a in e)
    ;
  return typeof a > "u" || Hu.call(e, a);
}, vv = function(e, n) {
  Sv && n.name === "__proto__" ? Sv(e, n.name, {
    enumerable: !0,
    configurable: !0,
    value: n.newValue,
    writable: !0
  }) : e[n.name] = n.newValue;
}, Cv = function(e, n) {
  if (n === "__proto__")
    if (Hu.call(e, n)) {
      if (bv)
        return bv(e, n).value;
    } else return;
  return e[n];
}, Fz = function t() {
  var e, n, r, a, i, s, l = arguments[0], c = 1, d = arguments.length, p = !1;
  for (typeof l == "boolean" && (p = l, l = arguments[1] || {}, c = 2), (l == null || typeof l != "object" && typeof l != "function") && (l = {}); c < d; ++c)
    if (e = arguments[c], e != null)
      for (n in e)
        r = Cv(l, n), a = Cv(e, n), l !== a && (p && a && (yv(a) || (i = Tv(a))) ? (i ? (i = !1, s = r && Tv(r) ? r : []) : s = r && yv(r) ? r : {}, vv(l, { name: n, newValue: t(p, s, a) })) : typeof a < "u" && vv(l, { name: n, newValue: a }));
  return l;
};
const Q0 = /* @__PURE__ */ oo(Fz);
function Gh(t) {
  if (typeof t != "object" || t === null)
    return !1;
  const e = Object.getPrototypeOf(t);
  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(Symbol.toStringTag in t) && !(Symbol.iterator in t);
}
function Bz() {
  const t = [], e = { run: n, use: r };
  return e;
  function n(...a) {
    let i = -1;
    const s = a.pop();
    if (typeof s != "function")
      throw new TypeError("Expected function as last argument, not " + s);
    l(null, ...a);
    function l(c, ...d) {
      const p = t[++i];
      let _ = -1;
      if (c) {
        s(c);
        return;
      }
      for (; ++_ < a.length; )
        (d[_] === null || d[_] === void 0) && (d[_] = a[_]);
      a = d, p ? Uz(p, l)(...d) : s(null, ...d);
    }
  }
  function r(a) {
    if (typeof a != "function")
      throw new TypeError(
        "Expected `middelware` to be a function, not " + a
      );
    return t.push(a), e;
  }
}
function Uz(t, e) {
  let n;
  return r;
  function r(...s) {
    const l = t.length > s.length;
    let c;
    l && s.push(a);
    try {
      c = t.apply(this, s);
    } catch (d) {
      const p = (
        /** @type {Error} */
        d
      );
      if (l && n)
        throw p;
      return a(p);
    }
    l || (c && c.then && typeof c.then == "function" ? c.then(i, a) : c instanceof Error ? a(c) : i(c));
  }
  function a(s, ...l) {
    n || (n = !0, e(s, ...l));
  }
  function i(s) {
    a(null, s);
  }
}
const Ia = { basename: Gz, dirname: Hz, extname: Yz, join: zz, sep: "/" };
function Gz(t, e) {
  if (e !== void 0 && typeof e != "string")
    throw new TypeError('"ext" argument must be a string');
  Zl(t);
  let n = 0, r = -1, a = t.length, i;
  if (e === void 0 || e.length === 0 || e.length > t.length) {
    for (; a--; )
      if (t.codePointAt(a) === 47) {
        if (i) {
          n = a + 1;
          break;
        }
      } else r < 0 && (i = !0, r = a + 1);
    return r < 0 ? "" : t.slice(n, r);
  }
  if (e === t)
    return "";
  let s = -1, l = e.length - 1;
  for (; a--; )
    if (t.codePointAt(a) === 47) {
      if (i) {
        n = a + 1;
        break;
      }
    } else
      s < 0 && (i = !0, s = a + 1), l > -1 && (t.codePointAt(a) === e.codePointAt(l--) ? l < 0 && (r = a) : (l = -1, r = s));
  return n === r ? r = s : r < 0 && (r = t.length), t.slice(n, r);
}
function Hz(t) {
  if (Zl(t), t.length === 0)
    return ".";
  let e = -1, n = t.length, r;
  for (; --n; )
    if (t.codePointAt(n) === 47) {
      if (r) {
        e = n;
        break;
      }
    } else r || (r = !0);
  return e < 0 ? t.codePointAt(0) === 47 ? "/" : "." : e === 1 && t.codePointAt(0) === 47 ? "//" : t.slice(0, e);
}
function Yz(t) {
  Zl(t);
  let e = t.length, n = -1, r = 0, a = -1, i = 0, s;
  for (; e--; ) {
    const l = t.codePointAt(e);
    if (l === 47) {
      if (s) {
        r = e + 1;
        break;
      }
      continue;
    }
    n < 0 && (s = !0, n = e + 1), l === 46 ? a < 0 ? a = e : i !== 1 && (i = 1) : a > -1 && (i = -1);
  }
  return a < 0 || n < 0 || // We saw a non-dot character immediately before the dot.
  i === 0 || // The (right-most) trimmed path component is exactly `..`.
  i === 1 && a === n - 1 && a === r + 1 ? "" : t.slice(a, n);
}
function zz(...t) {
  let e = -1, n;
  for (; ++e < t.length; )
    Zl(t[e]), t[e] && (n = n === void 0 ? t[e] : n + "/" + t[e]);
  return n === void 0 ? "." : qz(n);
}
function qz(t) {
  Zl(t);
  const e = t.codePointAt(0) === 47;
  let n = Vz(t, !e);
  return n.length === 0 && !e && (n = "."), n.length > 0 && t.codePointAt(t.length - 1) === 47 && (n += "/"), e ? "/" + n : n;
}
function Vz(t, e) {
  let n = "", r = 0, a = -1, i = 0, s = -1, l, c;
  for (; ++s <= t.length; ) {
    if (s < t.length)
      l = t.codePointAt(s);
    else {
      if (l === 47)
        break;
      l = 47;
    }
    if (l === 47) {
      if (!(a === s - 1 || i === 1)) if (a !== s - 1 && i === 2) {
        if (n.length < 2 || r !== 2 || n.codePointAt(n.length - 1) !== 46 || n.codePointAt(n.length - 2) !== 46) {
          if (n.length > 2) {
            if (c = n.lastIndexOf("/"), c !== n.length - 1) {
              c < 0 ? (n = "", r = 0) : (n = n.slice(0, c), r = n.length - 1 - n.lastIndexOf("/")), a = s, i = 0;
              continue;
            }
          } else if (n.length > 0) {
            n = "", r = 0, a = s, i = 0;
            continue;
          }
        }
        e && (n = n.length > 0 ? n + "/.." : "..", r = 2);
      } else
        n.length > 0 ? n += "/" + t.slice(a + 1, s) : n = t.slice(a + 1, s), r = s - a - 1;
      a = s, i = 0;
    } else l === 46 && i > -1 ? i++ : i = -1;
  }
  return n;
}
function Zl(t) {
  if (typeof t != "string")
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(t)
    );
}
const $z = { cwd: Wz };
function Wz() {
  return "/";
}
function Hh(t) {
  return !!(t !== null && typeof t == "object" && "href" in t && t.href && "protocol" in t && t.protocol && // @ts-expect-error: indexing is fine.
  t.auth === void 0);
}
function Kz(t) {
  if (typeof t == "string")
    t = new URL(t);
  else if (!Hh(t)) {
    const e = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + t + "`"
    );
    throw e.code = "ERR_INVALID_ARG_TYPE", e;
  }
  if (t.protocol !== "file:") {
    const e = new TypeError("The URL must be of scheme file");
    throw e.code = "ERR_INVALID_URL_SCHEME", e;
  }
  return Qz(t);
}
function Qz(t) {
  if (t.hostname !== "") {
    const r = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    throw r.code = "ERR_INVALID_FILE_URL_HOST", r;
  }
  const e = t.pathname;
  let n = -1;
  for (; ++n < e.length; )
    if (e.codePointAt(n) === 37 && e.codePointAt(n + 1) === 50) {
      const r = e.codePointAt(n + 2);
      if (r === 70 || r === 102) {
        const a = new TypeError(
          "File URL path must not include encoded / characters"
        );
        throw a.code = "ERR_INVALID_FILE_URL_PATH", a;
      }
    }
  return decodeURIComponent(e);
}
const j0 = (
  /** @type {const} */
  [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
  ]
);
class Lx {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(e) {
    let n;
    e ? Hh(e) ? n = { path: e } : typeof e == "string" || jz(e) ? n = { value: e } : n = e : n = {}, this.cwd = $z.cwd(), this.data = {}, this.history = [], this.messages = [], this.value, this.map, this.result, this.stored;
    let r = -1;
    for (; ++r < j0.length; ) {
      const i = j0[r];
      i in n && n[i] !== void 0 && n[i] !== null && (this[i] = i === "history" ? [...n[i]] : n[i]);
    }
    let a;
    for (a in n)
      j0.includes(a) || (this[a] = n[a]);
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path == "string" ? Ia.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(e) {
    Z0(e, "basename"), X0(e, "basename"), this.path = Ia.join(this.dirname || "", e);
  }
  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path == "string" ? Ia.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(e) {
    Rv(this.basename, "dirname"), this.path = Ia.join(e || "", this.basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path == "string" ? Ia.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(e) {
    if (X0(e, "extname"), Rv(this.dirname, "extname"), e) {
      if (e.codePointAt(0) !== 46)
        throw new Error("`extname` must start with `.`");
      if (e.includes(".", 1))
        throw new Error("`extname` cannot contain multiple dots");
    }
    this.path = Ia.join(this.dirname, this.stem + (e || ""));
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(e) {
    Hh(e) && (e = Kz(e)), Z0(e, "path"), this.path !== e && this.history.push(e);
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path == "string" ? Ia.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(e) {
    Z0(e, "stem"), X0(e, "stem"), this.path = Ia.join(this.dirname || "", e + (this.extname || ""));
  }
  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(e, n, r) {
    const a = this.message(e, n, r);
    throw a.fatal = !0, a;
  }
  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(e, n, r) {
    const a = this.message(e, n, r);
    return a.fatal = void 0, a;
  }
  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(e, n, r) {
    const a = new sr(
      // @ts-expect-error: the overloads are fine.
      e,
      n,
      r
    );
    return this.path && (a.name = this.path + ":" + a.name, a.file = this.path), a.fatal = !1, this.messages.push(a), a;
  }
  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(e) {
    return this.value === void 0 ? "" : typeof this.value == "string" ? this.value : new TextDecoder(e || void 0).decode(this.value);
  }
}
function X0(t, e) {
  if (t && t.includes(Ia.sep))
    throw new Error(
      "`" + e + "` cannot be a path: did not expect `" + Ia.sep + "`"
    );
}
function Z0(t, e) {
  if (!t)
    throw new Error("`" + e + "` cannot be empty");
}
function Rv(t, e) {
  if (!t)
    throw new Error("Setting `" + e + "` requires `path` to be set too");
}
function jz(t) {
  return !!(t && typeof t == "object" && "byteLength" in t && "byteOffset" in t);
}
const Xz = (
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  /** @type {unknown} */
  /**
   * @this {Function}
   * @param {string | symbol} property
   * @returns {(...parameters: Array<unknown>) => unknown}
   */
  function(t) {
    const r = (
      /** @type {Record<string | symbol, Function>} */
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      this.constructor.prototype
    ), a = r[t], i = function() {
      return a.apply(i, arguments);
    };
    Object.setPrototypeOf(i, r);
    const s = Object.getOwnPropertyNames(a);
    for (const l of s) {
      const c = Object.getOwnPropertyDescriptor(a, l);
      c && Object.defineProperty(i, l, c);
    }
    return i;
  }
), Zz = {}.hasOwnProperty;
class o1 extends Xz {
  /**
   * Create a processor.
   */
  constructor() {
    super("copy"), this.Compiler = void 0, this.Parser = void 0, this.attachers = [], this.compiler = void 0, this.freezeIndex = -1, this.frozen = void 0, this.namespace = {}, this.parser = void 0, this.transformers = Bz();
  }
  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@link Processor `Processor`}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    const e = (
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
      new o1()
    );
    let n = -1;
    for (; ++n < this.attachers.length; ) {
      const r = this.attachers[n];
      e.use(...r);
    }
    return e.data(Q0(!0, {}, this.namespace)), e;
  }
  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > 👉 **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > 👉 **Note**: to register custom data in TypeScript, augment the
   * > {@link Data `Data`} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(e, n) {
    return typeof e == "string" ? arguments.length === 2 ? (t_("data", this.frozen), this.namespace[e] = n, this) : Zz.call(this.namespace, e) && this.namespace[e] || void 0 : e ? (t_("data", this.frozen), this.namespace = e, this) : this.namespace;
  }
  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen)
      return this;
    const e = (
      /** @type {Processor} */
      /** @type {unknown} */
      this
    );
    for (; ++this.freezeIndex < this.attachers.length; ) {
      const [n, ...r] = this.attachers[this.freezeIndex];
      if (r[0] === !1)
        continue;
      r[0] === !0 && (r[0] = void 0);
      const a = n.call(e, ...r);
      typeof a == "function" && this.transformers.use(a);
    }
    return this.frozen = !0, this.freezeIndex = Number.POSITIVE_INFINITY, this;
  }
  /**
   * Parse text to a syntax tree.
   *
   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(e) {
    this.freeze();
    const n = bu(e), r = this.parser || this.Parser;
    return J0("parse", r), r(String(n), n);
  }
  /**
   * Process the given file as configured on the processor.
   *
   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > 👉 **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@link CompileResultMap `CompileResultMap`}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(e, n) {
    const r = this;
    return this.freeze(), J0("process", this.parser || this.Parser), e_("process", this.compiler || this.Compiler), n ? a(void 0, n) : new Promise(a);
    function a(i, s) {
      const l = bu(e), c = (
        /** @type {HeadTree extends undefined ? Node : HeadTree} */
        /** @type {unknown} */
        r.parse(l)
      );
      r.run(c, l, function(p, _, f) {
        if (p || !_ || !f)
          return d(p);
        const g = (
          /** @type {CompileTree extends undefined ? Node : CompileTree} */
          /** @type {unknown} */
          _
        ), E = r.stringify(g, f);
        tq(E) ? f.value = E : f.result = E, d(
          p,
          /** @type {VFileWithOutput<CompileResult>} */
          f
        );
      });
      function d(p, _) {
        p || !_ ? s(p) : i ? i(_) : n(void 0, _);
      }
    }
  }
  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > 👉 **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@link CompileResultMap `CompileResultMap`}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(e) {
    let n = !1, r;
    return this.freeze(), J0("processSync", this.parser || this.Parser), e_("processSync", this.compiler || this.Compiler), this.process(e, a), Ov("processSync", "process", n), r;
    function a(i, s) {
      n = !0, Ev(i), r = s;
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(e, n, r) {
    Av(e), this.freeze();
    const a = this.transformers;
    return !r && typeof n == "function" && (r = n, n = void 0), r ? i(void 0, r) : new Promise(i);
    function i(s, l) {
      const c = bu(n);
      a.run(e, c, d);
      function d(p, _, f) {
        const g = (
          /** @type {TailTree extends undefined ? Node : TailTree} */
          _ || e
        );
        p ? l(p) : s ? s(g) : r(void 0, g, f);
      }
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(e, n) {
    let r = !1, a;
    return this.run(e, n, i), Ov("runSync", "run", r), a;
    function i(s, l) {
      Ev(s), a = l, r = !0;
    }
  }
  /**
   * Compile a syntax tree.
   *
   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > 👉 **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@link CompileResultMap `CompileResultMap`}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(e, n) {
    this.freeze();
    const r = bu(n), a = this.compiler || this.Compiler;
    return e_("stringify", a), Av(e), a(e, r);
  }
  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > 👉 **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(e, ...n) {
    const r = this.attachers, a = this.namespace;
    if (t_("use", this.frozen), e != null) if (typeof e == "function")
      c(e, n);
    else if (typeof e == "object")
      Array.isArray(e) ? l(e) : s(e);
    else
      throw new TypeError("Expected usable value, not `" + e + "`");
    return this;
    function i(d) {
      if (typeof d == "function")
        c(d, []);
      else if (typeof d == "object")
        if (Array.isArray(d)) {
          const [p, ..._] = (
            /** @type {PluginTuple<Array<unknown>>} */
            d
          );
          c(p, _);
        } else
          s(d);
      else
        throw new TypeError("Expected usable value, not `" + d + "`");
    }
    function s(d) {
      if (!("plugins" in d) && !("settings" in d))
        throw new Error(
          "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
        );
      l(d.plugins), d.settings && (a.settings = Q0(!0, a.settings, d.settings));
    }
    function l(d) {
      let p = -1;
      if (d != null) if (Array.isArray(d))
        for (; ++p < d.length; ) {
          const _ = d[p];
          i(_);
        }
      else
        throw new TypeError("Expected a list of plugins, not `" + d + "`");
    }
    function c(d, p) {
      let _ = -1, f = -1;
      for (; ++_ < r.length; )
        if (r[_][0] === d) {
          f = _;
          break;
        }
      if (f === -1)
        r.push([d, ...p]);
      else if (p.length > 0) {
        let [g, ...E] = p;
        const T = r[f][1];
        Gh(T) && Gh(g) && (g = Q0(!0, T, g)), r[f] = [d, g, ...E];
      }
    }
  }
}
const Jz = new o1().freeze();
function J0(t, e) {
  if (typeof e != "function")
    throw new TypeError("Cannot `" + t + "` without `parser`");
}
function e_(t, e) {
  if (typeof e != "function")
    throw new TypeError("Cannot `" + t + "` without `compiler`");
}
function t_(t, e) {
  if (e)
    throw new Error(
      "Cannot call `" + t + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
}
function Av(t) {
  if (!Gh(t) || typeof t.type != "string")
    throw new TypeError("Expected node, got `" + t + "`");
}
function Ov(t, e, n) {
  if (!n)
    throw new Error(
      "`" + t + "` finished async. Use `" + e + "` instead"
    );
}
function bu(t) {
  return eq(t) ? t : new Lx(t);
}
function eq(t) {
  return !!(t && typeof t == "object" && "message" in t && "messages" in t);
}
function tq(t) {
  return typeof t == "string" || nq(t);
}
function nq(t) {
  return !!(t && typeof t == "object" && "byteLength" in t && "byteOffset" in t);
}
const rq = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md", Nv = [], Iv = { allowDangerousHtml: !0 }, aq = /^(https?|ircs?|mailto|xmpp)$/i, iq = [
  { from: "astPlugins", id: "remove-buggy-html-in-markdown-parser" },
  { from: "allowDangerousHtml", id: "remove-buggy-html-in-markdown-parser" },
  {
    from: "allowNode",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowElement"
  },
  {
    from: "allowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowedElements"
  },
  {
    from: "disallowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "disallowedElements"
  },
  { from: "escapeHtml", id: "remove-buggy-html-in-markdown-parser" },
  { from: "includeElementIndex", id: "#remove-includeelementindex" },
  {
    from: "includeNodeIndex",
    id: "change-includenodeindex-to-includeelementindex"
  },
  { from: "linkTarget", id: "remove-linktarget" },
  { from: "plugins", id: "change-plugins-to-remarkplugins", to: "remarkPlugins" },
  { from: "rawSourcePos", id: "#remove-rawsourcepos" },
  { from: "renderers", id: "change-renderers-to-components", to: "components" },
  { from: "source", id: "change-source-to-children", to: "children" },
  { from: "sourcePos", id: "#remove-sourcepos" },
  { from: "transformImageUri", id: "#add-urltransform", to: "urlTransform" },
  { from: "transformLinkUri", id: "#add-urltransform", to: "urlTransform" }
];
function sq(t) {
  const e = t.allowedElements, n = t.allowElement, r = t.children || "", a = t.className, i = t.components, s = t.disallowedElements, l = t.rehypePlugins || Nv, c = t.remarkPlugins || Nv, d = t.remarkRehypeOptions ? { ...t.remarkRehypeOptions, ...Iv } : Iv, p = t.skipHtml, _ = t.unwrapDisallowed, f = t.urlTransform || oq, g = Jz().use(zY).use(c).use(Pz, d).use(l), E = new Lx();
  typeof r == "string" && (E.value = r);
  for (const I of iq)
    Object.hasOwn(t, I.from) && ("" + I.from + (I.to ? "use `" + I.to + "` instead" : "remove it") + rq + I.id, void 0);
  const T = g.parse(E);
  let R = g.runSync(T, E);
  return a && (R = {
    type: "element",
    tagName: "div",
    properties: { className: a },
    // Assume no doctypes.
    children: (
      /** @type {Array<ElementContent>} */
      R.type === "root" ? R.children : [R]
    )
  }), Xl(R, A), AG(R, {
    Fragment: C.Fragment,
    components: i,
    ignoreInvalidStyle: !0,
    jsx: C.jsx,
    jsxs: C.jsxs,
    passKeys: !0,
    passNode: !0
  });
  function A(I, x, P) {
    if (I.type === "raw" && P && typeof x == "number")
      return p ? P.children.splice(x, 1) : P.children[x] = { type: "text", value: I.value }, x;
    if (I.type === "element") {
      let D;
      for (D in $0)
        if (Object.hasOwn($0, D) && Object.hasOwn(I.properties, D)) {
          const L = I.properties[D], K = $0[D];
          (K === null || K.includes(I.tagName)) && (I.properties[D] = f(String(L || ""), D, I));
        }
    }
    if (I.type === "element") {
      let D = e ? !e.includes(I.tagName) : s ? s.includes(I.tagName) : !1;
      if (!D && n && typeof x == "number" && (D = !n(I, x, P)), D && P && typeof x == "number")
        return _ && I.children ? P.children.splice(x, 1, ...I.children) : P.children.splice(x, 1), x;
    }
  }
}
function oq(t) {
  const e = t.indexOf(":"), n = t.indexOf("?"), r = t.indexOf("#"), a = t.indexOf("/");
  return (
    // If there is no protocol, it’s relative.
    e < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    a > -1 && e > a || n > -1 && e > n || r > -1 && e > r || // It is a protocol, it should be allowed.
    aq.test(t.slice(0, e)) ? t : ""
  );
}
const xv = /[#.]/g;
function lq(t, e) {
  const n = t || "", r = {};
  let a = 0, i, s;
  for (; a < n.length; ) {
    xv.lastIndex = a;
    const l = xv.exec(n), c = n.slice(a, l ? l.index : n.length);
    c && (i ? i === "#" ? r.id = c : Array.isArray(r.className) ? r.className.push(c) : r.className = [c] : s = c, a += c.length), l && (i = l[0], a++);
  }
  return {
    type: "element",
    // @ts-expect-error: tag name is parsed.
    tagName: s || e || "div",
    properties: r,
    children: []
  };
}
const cq = /* @__PURE__ */ new Set(["button", "menu", "reset", "submit"]), Yh = {}.hasOwnProperty;
function Mx(t, e, n) {
  const r = n && _q(n);
  function a(i, s, ...l) {
    let c = -1, d;
    if (i == null) {
      d = { type: "root", children: [] };
      const p = (
        /** @type {Child} */
        s
      );
      l.unshift(p);
    } else if (d = lq(i, e), d.tagName = d.tagName.toLowerCase(), r && Yh.call(r, d.tagName) && (d.tagName = r[d.tagName]), uq(s, d.tagName)) {
      let p;
      for (p in s)
        Yh.call(s, p) && dq(t, d.properties, p, s[p]);
    } else
      l.unshift(s);
    for (; ++c < l.length; )
      zh(d.children, l[c]);
    return d.type === "element" && d.tagName === "template" && (d.content = { type: "root", children: d.children }, d.children = []), d;
  }
  return a;
}
function uq(t, e) {
  return t == null || typeof t != "object" || Array.isArray(t) ? !1 : e === "input" || !t.type || typeof t.type != "string" ? !0 : "children" in t && Array.isArray(t.children) ? !1 : e === "button" ? cq.has(t.type.toLowerCase()) : !("value" in t);
}
function dq(t, e, n, r) {
  const a = Dd(t, n);
  let i = -1, s;
  if (r != null) {
    if (typeof r == "number") {
      if (Number.isNaN(r)) return;
      s = r;
    } else typeof r == "boolean" ? s = r : typeof r == "string" ? a.spaceSeparated ? s = Vy(r) : a.commaSeparated ? s = Gy(r) : a.commaOrSpaceSeparated ? s = Vy(Gy(r).join(" ")) : s = Dv(a, a.property, r) : Array.isArray(r) ? s = r.concat() : s = a.property === "style" ? pq(r) : String(r);
    if (Array.isArray(s)) {
      const l = [];
      for (; ++i < s.length; ) {
        const c = (
          /** @type {number | string} */
          Dv(a, a.property, s[i])
        );
        l[i] = c;
      }
      s = l;
    }
    if (a.property === "className" && Array.isArray(e.className)) {
      const l = (
        /** @type {number | string} */
        s
      );
      s = e.className.concat(l);
    }
    e[a.property] = s;
  }
}
function zh(t, e) {
  let n = -1;
  if (e != null) if (typeof e == "string" || typeof e == "number")
    t.push({ type: "text", value: String(e) });
  else if (Array.isArray(e))
    for (; ++n < e.length; )
      zh(t, e[n]);
  else if (typeof e == "object" && "type" in e)
    e.type === "root" ? zh(t, e.children) : t.push(e);
  else
    throw new Error("Expected node, nodes, or string, got `" + e + "`");
}
function Dv(t, e, n) {
  if (typeof n == "string") {
    if (t.number && n && !Number.isNaN(Number(n)))
      return Number(n);
    if ((t.boolean || t.overloadedBoolean) && (n === "" || Ml(n) === Ml(e)))
      return !0;
  }
  return n;
}
function pq(t) {
  const e = [];
  let n;
  for (n in t)
    Yh.call(t, n) && e.push([n, t[n]].join(": "));
  return e.join("; ");
}
function _q(t) {
  const e = {};
  let n = -1;
  for (; ++n < t.length; )
    e[t[n].toLowerCase()] = t[n];
  return e;
}
const mq = [
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "solidColor",
  "textArea",
  "textPath"
], kx = Mx(Kl, "div"), Px = Mx(qi, "g", mq), wa = {
  html: "http://www.w3.org/1999/xhtml",
  mathml: "http://www.w3.org/1998/Math/MathML",
  svg: "http://www.w3.org/2000/svg",
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
function fq(t, e) {
  return Fx(t, {}) || { type: "root", children: [] };
}
function Fx(t, e) {
  const n = gq(t, e);
  return n && e.afterTransform && e.afterTransform(t, n), n;
}
function gq(t, e) {
  switch (t.nodeType) {
    case 1:
      return bq(
        /** @type {Element} */
        t,
        e
      );
    case 3:
      return Eq(
        /** @type {Text} */
        t
      );
    case 8:
      return Sq(
        /** @type {Comment} */
        t
      );
    case 9:
      return wv(
        /** @type {Document} */
        t,
        e
      );
    case 10:
      return hq();
    case 11:
      return wv(
        /** @type {DocumentFragment} */
        t,
        e
      );
    default:
      return;
  }
}
function wv(t, e) {
  return { type: "root", children: Bx(t, e) };
}
function hq() {
  return { type: "doctype" };
}
function Eq(t) {
  return { type: "text", value: t.nodeValue || "" };
}
function Sq(t) {
  return { type: "comment", value: t.nodeValue || "" };
}
function bq(t, e) {
  const n = t.namespaceURI, r = n === wa.svg ? Px : kx, a = n === wa.html ? t.tagName.toLowerCase() : t.tagName, i = (
    // @ts-expect-error: DOM types are wrong, content can exist.
    n === wa.html && a === "template" ? t.content : t
  ), s = t.getAttributeNames(), l = {};
  let c = -1;
  for (; ++c < s.length; )
    l[s[c]] = t.getAttribute(s[c]) || "";
  return r(a, l, Bx(i, e));
}
function Bx(t, e) {
  const n = t.childNodes, r = [];
  let a = -1;
  for (; ++a < n.length; ) {
    const i = Fx(n[a], e);
    i !== void 0 && r.push(i);
  }
  return r;
}
new DOMParser();
function Tq(t, e) {
  const n = yq(t);
  return (
    /** @type {Root} */
    fq(n)
  );
}
function yq(t) {
  const e = document.createElement("template");
  return e.innerHTML = t, e.content;
}
const Lv = (
  // Note: overloads like this are needed to support optional generics.
  /**
   * @type {(
   *   (<Kind extends UnistParent, Check extends Test>(parent: Kind, index: Child<Kind> | number, test: Check) => Matches<Child<Kind>, Check> | undefined) &
   *   (<Kind extends UnistParent>(parent: Kind, index: Child<Kind> | number, test?: null | undefined) => Child<Kind> | undefined)
   * )}
   */
  /**
   * @param {UnistParent} parent
   * @param {UnistNode | number} index
   * @param {Test} [test]
   * @returns {UnistNode | undefined}
   */
  function(t, e, n) {
    const r = jl(n);
    if (!t || !t.type || !t.children)
      throw new Error("Expected parent node");
    if (typeof e == "number") {
      if (e < 0 || e === Number.POSITIVE_INFINITY)
        throw new Error("Expected positive finite number as index");
    } else if (e = t.children.indexOf(e), e < 0)
      throw new Error("Expected child node or index");
    for (; ++e < t.children.length; )
      if (r(t.children[e], e, t))
        return t.children[e];
  }
), Es = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {Check}
   */
  function(t) {
    if (t == null)
      return Rq;
    if (typeof t == "string")
      return Cq(t);
    if (typeof t == "object")
      return vq(t);
    if (typeof t == "function")
      return l1(t);
    throw new Error("Expected function, string, or array as `test`");
  }
);
function vq(t) {
  const e = [];
  let n = -1;
  for (; ++n < t.length; )
    e[n] = Es(t[n]);
  return l1(r);
  function r(...a) {
    let i = -1;
    for (; ++i < e.length; )
      if (e[i].apply(this, a)) return !0;
    return !1;
  }
}
function Cq(t) {
  return l1(e);
  function e(n) {
    return n.tagName === t;
  }
}
function l1(t) {
  return e;
  function e(n, r, a) {
    return !!(Aq(n) && t.call(
      this,
      n,
      typeof r == "number" ? r : void 0,
      a || void 0
    ));
  }
}
function Rq(t) {
  return !!(t && typeof t == "object" && "type" in t && t.type === "element" && "tagName" in t && typeof t.tagName == "string");
}
function Aq(t) {
  return t !== null && typeof t == "object" && "type" in t && "tagName" in t;
}
const Mv = /\n/g, kv = /[\t ]+/g, qh = Es("br"), Pv = Es(Mq), Oq = Es("p"), Fv = Es("tr"), Nq = Es([
  // List from: <https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements>
  "datalist",
  "head",
  "noembed",
  "noframes",
  "noscript",
  // Act as if we support scripting.
  "rp",
  "script",
  "style",
  "template",
  "title",
  // Hidden attribute.
  Lq,
  // From: <https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3>
  kq
]), Ux = Es([
  "address",
  // Flow content
  "article",
  // Sections and headings
  "aside",
  // Sections and headings
  "blockquote",
  // Flow content
  "body",
  // Page
  "caption",
  // `table-caption`
  "center",
  // Flow content (legacy)
  "dd",
  // Lists
  "dialog",
  // Flow content
  "dir",
  // Lists (legacy)
  "dl",
  // Lists
  "dt",
  // Lists
  "div",
  // Flow content
  "figure",
  // Flow content
  "figcaption",
  // Flow content
  "footer",
  // Flow content
  "form,",
  // Flow content
  "h1",
  // Sections and headings
  "h2",
  // Sections and headings
  "h3",
  // Sections and headings
  "h4",
  // Sections and headings
  "h5",
  // Sections and headings
  "h6",
  // Sections and headings
  "header",
  // Flow content
  "hgroup",
  // Sections and headings
  "hr",
  // Flow content
  "html",
  // Page
  "legend",
  // Flow content
  "listing",
  // Flow content (legacy)
  "main",
  // Flow content
  "menu",
  // Lists
  "nav",
  // Sections and headings
  "ol",
  // Lists
  "p",
  // Flow content
  "plaintext",
  // Flow content (legacy)
  "pre",
  // Flow content
  "section",
  // Sections and headings
  "ul",
  // Lists
  "xmp"
  // Flow content (legacy)
]);
function Iq(t, e = {}) {
  const n = "children" in t ? t.children : [], r = Ux(t), a = Yx(t, {
    whitespace: e.whitespace || "normal",
    breakBefore: !1,
    breakAfter: !1
  }), i = [];
  (t.type === "text" || t.type === "comment") && i.push(
    ...Hx(t, {
      whitespace: a,
      breakBefore: !0,
      breakAfter: !0
    })
  );
  let s = -1;
  for (; ++s < n.length; )
    i.push(
      ...Gx(
        n[s],
        // @ts-expect-error: `tree` is a parent if we’re here.
        t,
        {
          whitespace: a,
          breakBefore: s ? void 0 : r,
          breakAfter: s < n.length - 1 ? qh(n[s + 1]) : r
        }
      )
    );
  const l = [];
  let c;
  for (s = -1; ++s < i.length; ) {
    const d = i[s];
    typeof d == "number" ? c !== void 0 && d > c && (c = d) : d && (c !== void 0 && c > -1 && l.push(`
`.repeat(c) || " "), c = -1, l.push(d));
  }
  return l.join("");
}
function Gx(t, e, n) {
  return t.type === "element" ? xq(t, e, n) : t.type === "text" ? n.whitespace === "normal" ? Hx(t, n) : Dq(t) : [];
}
function xq(t, e, n) {
  const r = Yx(t, n), a = t.children || [];
  let i = -1, s = [];
  if (Nq(t))
    return s;
  let l, c;
  for (qh(t) || Fv(t) && // @ts-expect-error: something up with types of parents.
  Lv(e, t, Fv) ? c = `
` : Oq(t) ? (l = 2, c = 2) : Ux(t) && (l = 1, c = 1); ++i < a.length; )
    s = s.concat(
      Gx(a[i], t, {
        whitespace: r,
        breakBefore: i ? void 0 : l,
        breakAfter: i < a.length - 1 ? qh(a[i + 1]) : c
      })
    );
  return Pv(t) && // @ts-expect-error: something up with types of parents.
  Lv(e, t, Pv) && s.push("	"), l && s.unshift(l), c && s.push(c), s;
}
function Hx(t, e) {
  const n = String(t.value), r = [], a = [];
  let i = 0;
  for (; i <= n.length; ) {
    Mv.lastIndex = i;
    const c = Mv.exec(n), d = c && "index" in c ? c.index : n.length;
    r.push(
      // Any sequence of collapsible spaces and tabs immediately preceding or
      // following a segment break is removed.
      wq(
        // […] ignoring bidi formatting characters (characters with the
        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
        // they were not there.
        n.slice(i, d).replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ""),
        i === 0 ? e.breakBefore : !0,
        d === n.length ? e.breakAfter : !0
      )
    ), i = d + 1;
  }
  let s = -1, l;
  for (; ++s < r.length; )
    r[s].charCodeAt(r[s].length - 1) === 8203 || s < r.length - 1 && r[s + 1].charCodeAt(0) === 8203 ? (a.push(r[s]), l = void 0) : r[s] ? (typeof l == "number" && a.push(l), a.push(r[s]), l = 0) : (s === 0 || s === r.length - 1) && a.push(0);
  return a;
}
function Dq(t) {
  return [String(t.value)];
}
function wq(t, e, n) {
  const r = [];
  let a = 0, i;
  for (; a < t.length; ) {
    kv.lastIndex = a;
    const s = kv.exec(t);
    i = s ? s.index : t.length, !a && !i && s && !e && r.push(""), a !== i && r.push(t.slice(a, i)), a = s ? i + s[0].length : i;
  }
  return a !== i && !n && r.push(""), r.join(" ");
}
function Yx(t, e) {
  if (t.type === "element") {
    const n = t.properties || {};
    switch (t.tagName) {
      case "listing":
      case "plaintext":
      case "xmp":
        return "pre";
      case "nobr":
        return "nowrap";
      case "pre":
        return n.wrap ? "pre-wrap" : "pre";
      case "td":
      case "th":
        return n.noWrap ? "nowrap" : e.whitespace;
      case "textarea":
        return "pre-wrap";
    }
  }
  return e.whitespace;
}
function Lq(t) {
  return !!(t.properties || {}).hidden;
}
function Mq(t) {
  return t.tagName === "td" || t.tagName === "th";
}
function kq(t) {
  return t.tagName === "dialog" && !(t.properties || {}).open;
}
class Hr {
  // The + prefix indicates that these fields aren't writeable
  // Lexer holding the input string.
  // Start offset, zero-based inclusive.
  // End offset, zero-based exclusive.
  constructor(e, n, r) {
    this.lexer = void 0, this.start = void 0, this.end = void 0, this.lexer = e, this.start = n, this.end = r;
  }
  /**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */
  static range(e, n) {
    return n ? !e || !e.loc || !n.loc || e.loc.lexer !== n.loc.lexer ? null : new Hr(e.loc.lexer, e.loc.start, n.loc.end) : e && e.loc;
  }
}
class oa {
  // don't expand the token
  // used in \noexpand
  constructor(e, n) {
    this.text = void 0, this.loc = void 0, this.noexpand = void 0, this.treatAsRelax = void 0, this.text = e, this.loc = n;
  }
  /**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */
  range(e, n) {
    return new oa(n, Hr.range(this, e));
  }
}
class ke {
  // Error start position based on passed-in Token or ParseNode.
  // Length of affected text based on passed-in Token or ParseNode.
  // The underlying error message without any context added.
  constructor(e, n) {
    this.name = void 0, this.position = void 0, this.length = void 0, this.rawMessage = void 0;
    var r = "KaTeX parse error: " + e, a, i, s = n && n.loc;
    if (s && s.start <= s.end) {
      var l = s.lexer.input;
      a = s.start, i = s.end, a === l.length ? r += " at end of input: " : r += " at position " + (a + 1) + ": ";
      var c = l.slice(a, i).replace(/[^]/g, "$&̲"), d;
      a > 15 ? d = "…" + l.slice(a - 15, a) : d = l.slice(0, a);
      var p;
      i + 15 < l.length ? p = l.slice(i, i + 15) + "…" : p = l.slice(i), r += d + c + p;
    }
    var _ = new Error(r);
    return _.name = "ParseError", _.__proto__ = ke.prototype, _.position = a, a != null && i != null && (_.length = i - a), _.rawMessage = e, _;
  }
}
ke.prototype.__proto__ = Error.prototype;
var Pq = function(e, n) {
  return e.indexOf(n) !== -1;
}, Fq = function(e, n) {
  return e === void 0 ? n : e;
}, Bq = /([A-Z])/g, Uq = function(e) {
  return e.replace(Bq, "-$1").toLowerCase();
}, Gq = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  '"': "&quot;",
  "'": "&#x27;"
}, Hq = /[&><"']/g;
function Yq(t) {
  return String(t).replace(Hq, (e) => Gq[e]);
}
var zx = function t(e) {
  return e.type === "ordgroup" || e.type === "color" ? e.body.length === 1 ? t(e.body[0]) : e : e.type === "font" ? t(e.body) : e;
}, zq = function(e) {
  var n = zx(e);
  return n.type === "mathord" || n.type === "textord" || n.type === "atom";
}, qq = function(e) {
  if (!e)
    throw new Error("Expected non-null, but got " + String(e));
  return e;
}, Vq = function(e) {
  var n = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(e);
  return n ? n[2] !== ":" || !/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(n[1]) ? null : n[1].toLowerCase() : "_relative";
}, tt = {
  contains: Pq,
  deflt: Fq,
  escape: Yq,
  hyphenate: Uq,
  getBaseElem: zx,
  isCharacterBox: zq,
  protocolFromUrl: Vq
}, Yu = {
  displayMode: {
    type: "boolean",
    description: "Render math in display mode, which puts the math in display style (so \\int and \\sum are large, for example), and centers the math on the page on its own line.",
    cli: "-d, --display-mode"
  },
  output: {
    type: {
      enum: ["htmlAndMathml", "html", "mathml"]
    },
    description: "Determines the markup language of the output.",
    cli: "-F, --format <type>"
  },
  leqno: {
    type: "boolean",
    description: "Render display math in leqno style (left-justified tags)."
  },
  fleqn: {
    type: "boolean",
    description: "Render display math flush left."
  },
  throwOnError: {
    type: "boolean",
    default: !0,
    cli: "-t, --no-throw-on-error",
    cliDescription: "Render errors (in the color given by --error-color) instead of throwing a ParseError exception when encountering an error."
  },
  errorColor: {
    type: "string",
    default: "#cc0000",
    cli: "-c, --error-color <color>",
    cliDescription: "A color string given in the format 'rgb' or 'rrggbb' (no #). This option determines the color of errors rendered by the -t option.",
    cliProcessor: (t) => "#" + t
  },
  macros: {
    type: "object",
    cli: "-m, --macro <def>",
    cliDescription: "Define custom macro of the form '\\foo:expansion' (use multiple -m arguments for multiple macros).",
    cliDefault: [],
    cliProcessor: (t, e) => (e.push(t), e)
  },
  minRuleThickness: {
    type: "number",
    description: "Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`.",
    processor: (t) => Math.max(0, t),
    cli: "--min-rule-thickness <size>",
    cliProcessor: parseFloat
  },
  colorIsTextColor: {
    type: "boolean",
    description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, instead of LaTeX's one-argument \\color mode change.",
    cli: "-b, --color-is-text-color"
  },
  strict: {
    type: [{
      enum: ["warn", "ignore", "error"]
    }, "boolean", "function"],
    description: "Turn on strict / LaTeX faithfulness mode, which throws an error if the input uses features that are not supported by LaTeX.",
    cli: "-S, --strict",
    cliDefault: !1
  },
  trust: {
    type: ["boolean", "function"],
    description: "Trust the input, enabling all HTML features such as \\url.",
    cli: "-T, --trust"
  },
  maxSize: {
    type: "number",
    default: 1 / 0,
    description: "If non-zero, all user-specified sizes, e.g. in \\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, elements and spaces can be arbitrarily large",
    processor: (t) => Math.max(0, t),
    cli: "-s, --max-size <n>",
    cliProcessor: parseInt
  },
  maxExpand: {
    type: "number",
    default: 1e3,
    description: "Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity, the macro expander will try to fully expand as in LaTeX.",
    processor: (t) => Math.max(0, t),
    cli: "-e, --max-expand <n>",
    cliProcessor: (t) => t === "Infinity" ? 1 / 0 : parseInt(t)
  },
  globalGroup: {
    type: "boolean",
    cli: !1
  }
};
function $q(t) {
  if (t.default)
    return t.default;
  var e = t.type, n = Array.isArray(e) ? e[0] : e;
  if (typeof n != "string")
    return n.enum[0];
  switch (n) {
    case "boolean":
      return !1;
    case "string":
      return "";
    case "number":
      return 0;
    case "object":
      return {};
  }
}
class c1 {
  constructor(e) {
    this.displayMode = void 0, this.output = void 0, this.leqno = void 0, this.fleqn = void 0, this.throwOnError = void 0, this.errorColor = void 0, this.macros = void 0, this.minRuleThickness = void 0, this.colorIsTextColor = void 0, this.strict = void 0, this.trust = void 0, this.maxSize = void 0, this.maxExpand = void 0, this.globalGroup = void 0, e = e || {};
    for (var n in Yu)
      if (Yu.hasOwnProperty(n)) {
        var r = Yu[n];
        this[n] = e[n] !== void 0 ? r.processor ? r.processor(e[n]) : e[n] : $q(r);
      }
  }
  /**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */
  reportNonstrict(e, n, r) {
    var a = this.strict;
    if (typeof a == "function" && (a = a(e, n, r)), !(!a || a === "ignore")) {
      if (a === !0 || a === "error")
        throw new ke("LaTeX-incompatible input and strict mode is set to 'error': " + (n + " [" + e + "]"), r);
      a === "warn" ? typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (n + " [" + e + "]")) : typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + a + "': " + n + " [" + e + "]"));
    }
  }
  /**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */
  useStrictBehavior(e, n, r) {
    var a = this.strict;
    if (typeof a == "function")
      try {
        a = a(e, n, r);
      } catch {
        a = "error";
      }
    return !a || a === "ignore" ? !1 : a === !0 || a === "error" ? !0 : a === "warn" ? (typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (n + " [" + e + "]")), !1) : (typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + a + "': " + n + " [" + e + "]")), !1);
  }
  /**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */
  isTrusted(e) {
    if (e.url && !e.protocol) {
      var n = tt.protocolFromUrl(e.url);
      if (n == null)
        return !1;
      e.protocol = n;
    }
    var r = typeof this.trust == "function" ? this.trust(e) : this.trust;
    return !!r;
  }
}
class Ri {
  constructor(e, n, r) {
    this.id = void 0, this.size = void 0, this.cramped = void 0, this.id = e, this.size = n, this.cramped = r;
  }
  /**
   * Get the style of a superscript given a base in the current style.
   */
  sup() {
    return xa[Wq[this.id]];
  }
  /**
   * Get the style of a subscript given a base in the current style.
   */
  sub() {
    return xa[Kq[this.id]];
  }
  /**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */
  fracNum() {
    return xa[Qq[this.id]];
  }
  /**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */
  fracDen() {
    return xa[jq[this.id]];
  }
  /**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */
  cramp() {
    return xa[Xq[this.id]];
  }
  /**
   * Get a text or display version of this style.
   */
  text() {
    return xa[Zq[this.id]];
  }
  /**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */
  isTight() {
    return this.size >= 2;
  }
}
var u1 = 0, id = 1, eo = 2, oi = 3, Pl = 4, sa = 5, no = 6, Er = 7, xa = [new Ri(u1, 0, !1), new Ri(id, 0, !0), new Ri(eo, 1, !1), new Ri(oi, 1, !0), new Ri(Pl, 2, !1), new Ri(sa, 2, !0), new Ri(no, 3, !1), new Ri(Er, 3, !0)], Wq = [Pl, sa, Pl, sa, no, Er, no, Er], Kq = [sa, sa, sa, sa, Er, Er, Er, Er], Qq = [eo, oi, Pl, sa, no, Er, no, Er], jq = [oi, oi, sa, sa, Er, Er, Er, Er], Xq = [id, id, oi, oi, sa, sa, Er, Er], Zq = [u1, id, eo, oi, eo, oi, eo, oi], at = {
  DISPLAY: xa[u1],
  TEXT: xa[eo],
  SCRIPT: xa[Pl],
  SCRIPTSCRIPT: xa[no]
}, Vh = [{
  // Latin characters beyond the Latin-1 characters we have metrics for.
  // Needed for Czech, Hungarian and Turkish text, for example.
  name: "latin",
  blocks: [
    [256, 591],
    // Latin Extended-A and Latin Extended-B
    [768, 879]
    // Combining Diacritical marks
  ]
}, {
  // The Cyrillic script used by Russian and related languages.
  // A Cyrillic subset used to be supported as explicitly defined
  // symbols in symbols.js
  name: "cyrillic",
  blocks: [[1024, 1279]]
}, {
  // Armenian
  name: "armenian",
  blocks: [[1328, 1423]]
}, {
  // The Brahmic scripts of South and Southeast Asia
  // Devanagari (0900–097F)
  // Bengali (0980–09FF)
  // Gurmukhi (0A00–0A7F)
  // Gujarati (0A80–0AFF)
  // Oriya (0B00–0B7F)
  // Tamil (0B80–0BFF)
  // Telugu (0C00–0C7F)
  // Kannada (0C80–0CFF)
  // Malayalam (0D00–0D7F)
  // Sinhala (0D80–0DFF)
  // Thai (0E00–0E7F)
  // Lao (0E80–0EFF)
  // Tibetan (0F00–0FFF)
  // Myanmar (1000–109F)
  name: "brahmic",
  blocks: [[2304, 4255]]
}, {
  name: "georgian",
  blocks: [[4256, 4351]]
}, {
  // Chinese and Japanese.
  // The "k" in cjk is for Korean, but we've separated Korean out
  name: "cjk",
  blocks: [
    [12288, 12543],
    // CJK symbols and punctuation, Hiragana, Katakana
    [19968, 40879],
    // CJK ideograms
    [65280, 65376]
    // Fullwidth punctuation
    // TODO: add halfwidth Katakana and Romanji glyphs
  ]
}, {
  // Korean
  name: "hangul",
  blocks: [[44032, 55215]]
}];
function Jq(t) {
  for (var e = 0; e < Vh.length; e++)
    for (var n = Vh[e], r = 0; r < n.blocks.length; r++) {
      var a = n.blocks[r];
      if (t >= a[0] && t <= a[1])
        return n.name;
    }
  return null;
}
var zu = [];
Vh.forEach((t) => t.blocks.forEach((e) => zu.push(...e)));
function qx(t) {
  for (var e = 0; e < zu.length; e += 2)
    if (t >= zu[e] && t <= zu[e + 1])
      return !0;
  return !1;
}
var Hs = 80, eV = function(e, n) {
  return "M95," + (622 + e + n) + `
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l` + e / 2.075 + " -" + e + `
c5.3,-9.3,12,-14,20,-14
H400000v` + (40 + e) + `H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M` + (834 + e) + " " + n + "h400000v" + (40 + e) + "h-400000z";
}, tV = function(e, n) {
  return "M263," + (601 + e + n) + `c0.7,0,18,39.7,52,119
c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120
c340,-704.7,510.7,-1060.3,512,-1067
l` + e / 2.084 + " -" + e + `
c4.7,-7.3,11,-11,19,-11
H40000v` + (40 + e) + `H1012.3
s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232
c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1
s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26
c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z
M` + (1001 + e) + " " + n + "h400000v" + (40 + e) + "h-400000z";
}, nV = function(e, n) {
  return "M983 " + (10 + e + n) + `
l` + e / 3.13 + " -" + e + `
c4,-6.7,10,-10,18,-10 H400000v` + (40 + e) + `
H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7
s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744
c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30
c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722
c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5
c53.7,-170.3,84.5,-266.8,92.5,-289.5z
M` + (1001 + e) + " " + n + "h400000v" + (40 + e) + "h-400000z";
}, rV = function(e, n) {
  return "M424," + (2398 + e + n) + `
c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514
c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20
s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121
s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081
l` + e / 4.223 + " -" + e + `c4,-6.7,10,-10,18,-10 H400000
v` + (40 + e) + `H1014.6
s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185
c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2z M` + (1001 + e) + " " + n + `
h400000v` + (40 + e) + "h-400000z";
}, aV = function(e, n) {
  return "M473," + (2713 + e + n) + `
c339.3,-1799.3,509.3,-2700,510,-2702 l` + e / 5.298 + " -" + e + `
c3.3,-7.3,9.3,-11,18,-11 H400000v` + (40 + e) + `H1017.7
s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200
c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26
s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,
606zM` + (1001 + e) + " " + n + "h400000v" + (40 + e) + "H1017.7z";
}, iV = function(e) {
  var n = e / 2;
  return "M400000 " + e + " H0 L" + n + " 0 l65 45 L145 " + (e - 80) + " H400000z";
}, sV = function(e, n, r) {
  var a = r - 54 - n - e;
  return "M702 " + (e + n) + "H400000" + (40 + e) + `
H742v` + a + `l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1
h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170
c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667
219 661 l218 661zM702 ` + n + "H400000v" + (40 + e) + "H742z";
}, oV = function(e, n, r) {
  n = 1e3 * n;
  var a = "";
  switch (e) {
    case "sqrtMain":
      a = eV(n, Hs);
      break;
    case "sqrtSize1":
      a = tV(n, Hs);
      break;
    case "sqrtSize2":
      a = nV(n, Hs);
      break;
    case "sqrtSize3":
      a = rV(n, Hs);
      break;
    case "sqrtSize4":
      a = aV(n, Hs);
      break;
    case "sqrtTall":
      a = sV(n, Hs, r);
  }
  return a;
}, lV = function(e, n) {
  switch (e) {
    case "⎜":
      return "M291 0 H417 V" + n + " H291z M291 0 H417 V" + n + " H291z";
    case "∣":
      return "M145 0 H188 V" + n + " H145z M145 0 H188 V" + n + " H145z";
    case "∥":
      return "M145 0 H188 V" + n + " H145z M145 0 H188 V" + n + " H145z" + ("M367 0 H410 V" + n + " H367z M367 0 H410 V" + n + " H367z");
    case "⎟":
      return "M457 0 H583 V" + n + " H457z M457 0 H583 V" + n + " H457z";
    case "⎢":
      return "M319 0 H403 V" + n + " H319z M319 0 H403 V" + n + " H319z";
    case "⎥":
      return "M263 0 H347 V" + n + " H263z M263 0 H347 V" + n + " H263z";
    case "⎪":
      return "M384 0 H504 V" + n + " H384z M384 0 H504 V" + n + " H384z";
    case "⏐":
      return "M312 0 H355 V" + n + " H312z M312 0 H355 V" + n + " H312z";
    case "‖":
      return "M257 0 H300 V" + n + " H257z M257 0 H300 V" + n + " H257z" + ("M478 0 H521 V" + n + " H478z M478 0 H521 V" + n + " H478z");
    default:
      return "";
  }
}, Bv = {
  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
  doubleleftarrow: `M262 157
l10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3
 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28
 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5
c2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5
 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87
-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7
-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z
m8 0v40h399730v-40zm0 194v40h399730v-40z`,
  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
  doublerightarrow: `M399738 392l
-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5
 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88
-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68
-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18
-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782
c-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3
-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z`,
  // leftarrow is from glyph U+2190 in font KaTeX Main
  leftarrow: `M400000 241H110l3-3c68.7-52.7 113.7-120
 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8
-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247
c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208
 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3
 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202
 l-3-3h399890zM100 241v40h399900v-40z`,
  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
  leftbrace: `M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117
-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7
 5-6 9-10 13-.7 1-7.3 1-20 1H6z`,
  leftbraceunder: `M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13
 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688
 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7
-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z`,
  // overgroup is from the MnSymbol package (public domain)
  leftgroup: `M400000 80
H435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0
 435 0h399565z`,
  leftgroupunder: `M400000 262
H435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219
 435 219h399565z`,
  // Harpoons are from glyph U+21BD in font KaTeX Main
  leftharpoon: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3
-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5
-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7
-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z`,
  leftharpoonplus: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5
 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3
-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7
-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z
m0 0v40h400000v-40z`,
  leftharpoondown: `M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333
 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5
 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667
-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z`,
  leftharpoondownplus: `M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12
 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7
-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0
v40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z`,
  // hook is from glyph U+21A9 in font KaTeX Main
  lefthook: `M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5
-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3
-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21
 71.5 23h399859zM103 281v-40h399897v40z`,
  leftlinesegment: `M40 281 V428 H0 V94 H40 V241 H400000 v40z
M40 281 V428 H0 V94 H40 V241 H400000 v40z`,
  leftmapsto: `M40 281 V448H0V74H40V241H400000v40z
M40 281 V448H0V74H40V241H400000v40z`,
  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
  leftToFrom: `M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23
-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8
c28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3
 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z`,
  longequal: `M0 50 h400000 v40H0z m0 194h40000v40H0z
M0 50 h400000 v40H0z m0 194h40000v40H0z`,
  midbrace: `M200428 334
c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14
-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7
 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11
 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z`,
  midbraceunder: `M199572 214
c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14
 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3
 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0
-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z`,
  oiintSize1: `M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6
-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z
m368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8
60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z`,
  oiintSize2: `M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8
-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z
m502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2
c0 110 84 276 504 276s502.4-166 502.4-276z`,
  oiiintSize1: `M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6
-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z
m525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0
85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z`,
  oiiintSize2: `M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8
-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z
m770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1
c0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z`,
  rightarrow: `M0 241v40h399891c-47.3 35.3-84 78-110 128
-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20
 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7
 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85
-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
 151.7 139 205zm0 0v40h399900v-40z`,
  rightbrace: `M400000 542l
-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5
s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1
c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z`,
  rightbraceunder: `M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3
 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237
-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z`,
  rightgroup: `M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0
 3-1 3-3v-38c-76-158-257-219-435-219H0z`,
  rightgroupunder: `M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18
 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z`,
  rightharpoon: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3
-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2
-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58
 69.2 92 94.5zm0 0v40h399900v-40z`,
  rightharpoonplus: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11
-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7
 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z
m0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z`,
  rightharpoondown: `M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8
 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5
-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95
-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z`,
  rightharpoondownplus: `M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8
 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3
 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3
-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z
m0-194v40h400000v-40zm0 0v40h400000v-40z`,
  righthook: `M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3
 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0
-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21
 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z`,
  rightlinesegment: `M399960 241 V94 h40 V428 h-40 V281 H0 v-40z
M399960 241 V94 h40 V428 h-40 V281 H0 v-40z`,
  rightToFrom: `M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23
 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32
-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142
-167z M100 147v40h399900v-40zM0 341v40h399900v-40z`,
  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
  twoheadleftarrow: `M0 167c68 40
 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69
-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3
-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19
-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101
 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z`,
  twoheadrightarrow: `M400000 167
c-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3
 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42
 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333
-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70
 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z`,
  // tilde1 is a modified version of a glyph from the MnSymbol package
  tilde1: `M200 55.538c-77 0-168 73.953-177 73.953-3 0-7
-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0
 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0
 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128
-68.267.847-113-73.952-191-73.952z`,
  // ditto tilde2, tilde3, & tilde4
  tilde2: `M344 55.266c-142 0-300.638 81.316-311.5 86.418
-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9
 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114
c1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751
 181.476 676 181.476c-149 0-189-126.21-332-126.21z`,
  tilde3: `M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457
-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0
 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697
 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696
 -338 0-409-156.573-744-156.573z`,
  tilde4: `M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345
-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409
 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9
 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409
 -175.236-744-175.236z`,
  // vec is from glyph U+20D7 in font KaTeX Main
  vec: `M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`,
  // widehat1 is a modified version of a glyph from the MnSymbol package
  widehat1: `M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z`,
  // ditto widehat2, widehat3, & widehat4
  widehat2: `M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  widehat3: `M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  widehat4: `M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  // widecheck paths are all inverted versions of widehat
  widecheck1: `M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,
-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z`,
  widecheck2: `M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  widecheck3: `M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  widecheck4: `M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  // The next ten paths support reaction arrows from the mhchem package.
  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
  // baraboveleftarrow is mostly from glyph U+2190 in font KaTeX Main
  baraboveleftarrow: `M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202
c4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5
c-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130
s-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47
121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6
s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11
c0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z
M100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z`,
  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
  rightarrowabovebar: `M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32
-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0
13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39
-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5
-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z`,
  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
  baraboveshortleftharpoon: `M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17
c2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21
c-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40
c-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z
M0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z`,
  rightharpoonaboveshortbar: `M0,241 l0,40c399126,0,399993,0,399993,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z`,
  shortbaraboveleftharpoon: `M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,
1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,
-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z
M93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z`,
  shortrightharpoonabovebar: `M53,241l0,40c398570,0,399437,0,399437,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z`
}, cV = function(e, n) {
  switch (e) {
    case "lbrack":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + n + ` v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v` + n + " v1759 h84z";
    case "rbrack":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + n + ` v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v` + n + " v1759 h84z";
    case "vert":
      return "M145 15 v585 v" + n + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -n + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v` + n + " v585 h43z";
    case "doublevert":
      return "M145 15 v585 v" + n + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -n + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v` + n + ` v585 h43z
M367 15 v585 v` + n + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -n + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M410 15 H367 v585 v` + n + " v585 h43z";
    case "lfloor":
      return "M319 602 V0 H403 V602 v" + n + ` v1715 h263 v84 H319z
MM319 602 V0 H403 V602 v` + n + " v1715 H319z";
    case "rfloor":
      return "M319 602 V0 H403 V602 v" + n + ` v1799 H0 v-84 H319z
MM319 602 V0 H403 V602 v` + n + " v1715 H319z";
    case "lceil":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + n + ` v602 h84z
M403 1759 V0 H319 V1759 v` + n + " v602 h84z";
    case "rceil":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + n + ` v602 h84z
M347 1759 V0 h-84 V1759 v` + n + " v602 h84z";
    case "lparen":
      return `M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1
c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,
-36,557 l0,` + (n + 84) + `c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,
949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9
c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,
-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189
l0,-` + (n + 92) + `c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,
-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z`;
    case "rparen":
      return `M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,
63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5
c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,` + (n + 9) + `
c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664
c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11
c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17
c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558
l0,-` + (n + 144) + `c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,
-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z`;
    default:
      throw new Error("Unknown stretchy delimiter.");
  }
};
class Jl {
  // HtmlDomNode
  // Never used; needed for satisfying interface.
  constructor(e) {
    this.children = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, this.children = e, this.classes = [], this.height = 0, this.depth = 0, this.maxFontSize = 0, this.style = {};
  }
  hasClass(e) {
    return tt.contains(this.classes, e);
  }
  /** Convert the fragment into a node. */
  toNode() {
    for (var e = document.createDocumentFragment(), n = 0; n < this.children.length; n++)
      e.appendChild(this.children[n].toNode());
    return e;
  }
  /** Convert the fragment into HTML markup. */
  toMarkup() {
    for (var e = "", n = 0; n < this.children.length; n++)
      e += this.children[n].toMarkup();
    return e;
  }
  /**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */
  toText() {
    var e = (n) => n.toText();
    return this.children.map(e).join("");
  }
}
var La = {
  "AMS-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.68889, 0, 0, 0.72222],
    66: [0, 0.68889, 0, 0, 0.66667],
    67: [0, 0.68889, 0, 0, 0.72222],
    68: [0, 0.68889, 0, 0, 0.72222],
    69: [0, 0.68889, 0, 0, 0.66667],
    70: [0, 0.68889, 0, 0, 0.61111],
    71: [0, 0.68889, 0, 0, 0.77778],
    72: [0, 0.68889, 0, 0, 0.77778],
    73: [0, 0.68889, 0, 0, 0.38889],
    74: [0.16667, 0.68889, 0, 0, 0.5],
    75: [0, 0.68889, 0, 0, 0.77778],
    76: [0, 0.68889, 0, 0, 0.66667],
    77: [0, 0.68889, 0, 0, 0.94445],
    78: [0, 0.68889, 0, 0, 0.72222],
    79: [0.16667, 0.68889, 0, 0, 0.77778],
    80: [0, 0.68889, 0, 0, 0.61111],
    81: [0.16667, 0.68889, 0, 0, 0.77778],
    82: [0, 0.68889, 0, 0, 0.72222],
    83: [0, 0.68889, 0, 0, 0.55556],
    84: [0, 0.68889, 0, 0, 0.66667],
    85: [0, 0.68889, 0, 0, 0.72222],
    86: [0, 0.68889, 0, 0, 0.72222],
    87: [0, 0.68889, 0, 0, 1],
    88: [0, 0.68889, 0, 0, 0.72222],
    89: [0, 0.68889, 0, 0, 0.72222],
    90: [0, 0.68889, 0, 0, 0.66667],
    107: [0, 0.68889, 0, 0, 0.55556],
    160: [0, 0, 0, 0, 0.25],
    165: [0, 0.675, 0.025, 0, 0.75],
    174: [0.15559, 0.69224, 0, 0, 0.94666],
    240: [0, 0.68889, 0, 0, 0.55556],
    295: [0, 0.68889, 0, 0, 0.54028],
    710: [0, 0.825, 0, 0, 2.33334],
    732: [0, 0.9, 0, 0, 2.33334],
    770: [0, 0.825, 0, 0, 2.33334],
    771: [0, 0.9, 0, 0, 2.33334],
    989: [0.08167, 0.58167, 0, 0, 0.77778],
    1008: [0, 0.43056, 0.04028, 0, 0.66667],
    8245: [0, 0.54986, 0, 0, 0.275],
    8463: [0, 0.68889, 0, 0, 0.54028],
    8487: [0, 0.68889, 0, 0, 0.72222],
    8498: [0, 0.68889, 0, 0, 0.55556],
    8502: [0, 0.68889, 0, 0, 0.66667],
    8503: [0, 0.68889, 0, 0, 0.44445],
    8504: [0, 0.68889, 0, 0, 0.66667],
    8513: [0, 0.68889, 0, 0, 0.63889],
    8592: [-0.03598, 0.46402, 0, 0, 0.5],
    8594: [-0.03598, 0.46402, 0, 0, 0.5],
    8602: [-0.13313, 0.36687, 0, 0, 1],
    8603: [-0.13313, 0.36687, 0, 0, 1],
    8606: [0.01354, 0.52239, 0, 0, 1],
    8608: [0.01354, 0.52239, 0, 0, 1],
    8610: [0.01354, 0.52239, 0, 0, 1.11111],
    8611: [0.01354, 0.52239, 0, 0, 1.11111],
    8619: [0, 0.54986, 0, 0, 1],
    8620: [0, 0.54986, 0, 0, 1],
    8621: [-0.13313, 0.37788, 0, 0, 1.38889],
    8622: [-0.13313, 0.36687, 0, 0, 1],
    8624: [0, 0.69224, 0, 0, 0.5],
    8625: [0, 0.69224, 0, 0, 0.5],
    8630: [0, 0.43056, 0, 0, 1],
    8631: [0, 0.43056, 0, 0, 1],
    8634: [0.08198, 0.58198, 0, 0, 0.77778],
    8635: [0.08198, 0.58198, 0, 0, 0.77778],
    8638: [0.19444, 0.69224, 0, 0, 0.41667],
    8639: [0.19444, 0.69224, 0, 0, 0.41667],
    8642: [0.19444, 0.69224, 0, 0, 0.41667],
    8643: [0.19444, 0.69224, 0, 0, 0.41667],
    8644: [0.1808, 0.675, 0, 0, 1],
    8646: [0.1808, 0.675, 0, 0, 1],
    8647: [0.1808, 0.675, 0, 0, 1],
    8648: [0.19444, 0.69224, 0, 0, 0.83334],
    8649: [0.1808, 0.675, 0, 0, 1],
    8650: [0.19444, 0.69224, 0, 0, 0.83334],
    8651: [0.01354, 0.52239, 0, 0, 1],
    8652: [0.01354, 0.52239, 0, 0, 1],
    8653: [-0.13313, 0.36687, 0, 0, 1],
    8654: [-0.13313, 0.36687, 0, 0, 1],
    8655: [-0.13313, 0.36687, 0, 0, 1],
    8666: [0.13667, 0.63667, 0, 0, 1],
    8667: [0.13667, 0.63667, 0, 0, 1],
    8669: [-0.13313, 0.37788, 0, 0, 1],
    8672: [-0.064, 0.437, 0, 0, 1.334],
    8674: [-0.064, 0.437, 0, 0, 1.334],
    8705: [0, 0.825, 0, 0, 0.5],
    8708: [0, 0.68889, 0, 0, 0.55556],
    8709: [0.08167, 0.58167, 0, 0, 0.77778],
    8717: [0, 0.43056, 0, 0, 0.42917],
    8722: [-0.03598, 0.46402, 0, 0, 0.5],
    8724: [0.08198, 0.69224, 0, 0, 0.77778],
    8726: [0.08167, 0.58167, 0, 0, 0.77778],
    8733: [0, 0.69224, 0, 0, 0.77778],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8737: [0, 0.69224, 0, 0, 0.72222],
    8738: [0.03517, 0.52239, 0, 0, 0.72222],
    8739: [0.08167, 0.58167, 0, 0, 0.22222],
    8740: [0.25142, 0.74111, 0, 0, 0.27778],
    8741: [0.08167, 0.58167, 0, 0, 0.38889],
    8742: [0.25142, 0.74111, 0, 0, 0.5],
    8756: [0, 0.69224, 0, 0, 0.66667],
    8757: [0, 0.69224, 0, 0, 0.66667],
    8764: [-0.13313, 0.36687, 0, 0, 0.77778],
    8765: [-0.13313, 0.37788, 0, 0, 0.77778],
    8769: [-0.13313, 0.36687, 0, 0, 0.77778],
    8770: [-0.03625, 0.46375, 0, 0, 0.77778],
    8774: [0.30274, 0.79383, 0, 0, 0.77778],
    8776: [-0.01688, 0.48312, 0, 0, 0.77778],
    8778: [0.08167, 0.58167, 0, 0, 0.77778],
    8782: [0.06062, 0.54986, 0, 0, 0.77778],
    8783: [0.06062, 0.54986, 0, 0, 0.77778],
    8785: [0.08198, 0.58198, 0, 0, 0.77778],
    8786: [0.08198, 0.58198, 0, 0, 0.77778],
    8787: [0.08198, 0.58198, 0, 0, 0.77778],
    8790: [0, 0.69224, 0, 0, 0.77778],
    8791: [0.22958, 0.72958, 0, 0, 0.77778],
    8796: [0.08198, 0.91667, 0, 0, 0.77778],
    8806: [0.25583, 0.75583, 0, 0, 0.77778],
    8807: [0.25583, 0.75583, 0, 0, 0.77778],
    8808: [0.25142, 0.75726, 0, 0, 0.77778],
    8809: [0.25142, 0.75726, 0, 0, 0.77778],
    8812: [0.25583, 0.75583, 0, 0, 0.5],
    8814: [0.20576, 0.70576, 0, 0, 0.77778],
    8815: [0.20576, 0.70576, 0, 0, 0.77778],
    8816: [0.30274, 0.79383, 0, 0, 0.77778],
    8817: [0.30274, 0.79383, 0, 0, 0.77778],
    8818: [0.22958, 0.72958, 0, 0, 0.77778],
    8819: [0.22958, 0.72958, 0, 0, 0.77778],
    8822: [0.1808, 0.675, 0, 0, 0.77778],
    8823: [0.1808, 0.675, 0, 0, 0.77778],
    8828: [0.13667, 0.63667, 0, 0, 0.77778],
    8829: [0.13667, 0.63667, 0, 0, 0.77778],
    8830: [0.22958, 0.72958, 0, 0, 0.77778],
    8831: [0.22958, 0.72958, 0, 0, 0.77778],
    8832: [0.20576, 0.70576, 0, 0, 0.77778],
    8833: [0.20576, 0.70576, 0, 0, 0.77778],
    8840: [0.30274, 0.79383, 0, 0, 0.77778],
    8841: [0.30274, 0.79383, 0, 0, 0.77778],
    8842: [0.13597, 0.63597, 0, 0, 0.77778],
    8843: [0.13597, 0.63597, 0, 0, 0.77778],
    8847: [0.03517, 0.54986, 0, 0, 0.77778],
    8848: [0.03517, 0.54986, 0, 0, 0.77778],
    8858: [0.08198, 0.58198, 0, 0, 0.77778],
    8859: [0.08198, 0.58198, 0, 0, 0.77778],
    8861: [0.08198, 0.58198, 0, 0, 0.77778],
    8862: [0, 0.675, 0, 0, 0.77778],
    8863: [0, 0.675, 0, 0, 0.77778],
    8864: [0, 0.675, 0, 0, 0.77778],
    8865: [0, 0.675, 0, 0, 0.77778],
    8872: [0, 0.69224, 0, 0, 0.61111],
    8873: [0, 0.69224, 0, 0, 0.72222],
    8874: [0, 0.69224, 0, 0, 0.88889],
    8876: [0, 0.68889, 0, 0, 0.61111],
    8877: [0, 0.68889, 0, 0, 0.61111],
    8878: [0, 0.68889, 0, 0, 0.72222],
    8879: [0, 0.68889, 0, 0, 0.72222],
    8882: [0.03517, 0.54986, 0, 0, 0.77778],
    8883: [0.03517, 0.54986, 0, 0, 0.77778],
    8884: [0.13667, 0.63667, 0, 0, 0.77778],
    8885: [0.13667, 0.63667, 0, 0, 0.77778],
    8888: [0, 0.54986, 0, 0, 1.11111],
    8890: [0.19444, 0.43056, 0, 0, 0.55556],
    8891: [0.19444, 0.69224, 0, 0, 0.61111],
    8892: [0.19444, 0.69224, 0, 0, 0.61111],
    8901: [0, 0.54986, 0, 0, 0.27778],
    8903: [0.08167, 0.58167, 0, 0, 0.77778],
    8905: [0.08167, 0.58167, 0, 0, 0.77778],
    8906: [0.08167, 0.58167, 0, 0, 0.77778],
    8907: [0, 0.69224, 0, 0, 0.77778],
    8908: [0, 0.69224, 0, 0, 0.77778],
    8909: [-0.03598, 0.46402, 0, 0, 0.77778],
    8910: [0, 0.54986, 0, 0, 0.76042],
    8911: [0, 0.54986, 0, 0, 0.76042],
    8912: [0.03517, 0.54986, 0, 0, 0.77778],
    8913: [0.03517, 0.54986, 0, 0, 0.77778],
    8914: [0, 0.54986, 0, 0, 0.66667],
    8915: [0, 0.54986, 0, 0, 0.66667],
    8916: [0, 0.69224, 0, 0, 0.66667],
    8918: [0.0391, 0.5391, 0, 0, 0.77778],
    8919: [0.0391, 0.5391, 0, 0, 0.77778],
    8920: [0.03517, 0.54986, 0, 0, 1.33334],
    8921: [0.03517, 0.54986, 0, 0, 1.33334],
    8922: [0.38569, 0.88569, 0, 0, 0.77778],
    8923: [0.38569, 0.88569, 0, 0, 0.77778],
    8926: [0.13667, 0.63667, 0, 0, 0.77778],
    8927: [0.13667, 0.63667, 0, 0, 0.77778],
    8928: [0.30274, 0.79383, 0, 0, 0.77778],
    8929: [0.30274, 0.79383, 0, 0, 0.77778],
    8934: [0.23222, 0.74111, 0, 0, 0.77778],
    8935: [0.23222, 0.74111, 0, 0, 0.77778],
    8936: [0.23222, 0.74111, 0, 0, 0.77778],
    8937: [0.23222, 0.74111, 0, 0, 0.77778],
    8938: [0.20576, 0.70576, 0, 0, 0.77778],
    8939: [0.20576, 0.70576, 0, 0, 0.77778],
    8940: [0.30274, 0.79383, 0, 0, 0.77778],
    8941: [0.30274, 0.79383, 0, 0, 0.77778],
    8994: [0.19444, 0.69224, 0, 0, 0.77778],
    8995: [0.19444, 0.69224, 0, 0, 0.77778],
    9416: [0.15559, 0.69224, 0, 0, 0.90222],
    9484: [0, 0.69224, 0, 0, 0.5],
    9488: [0, 0.69224, 0, 0, 0.5],
    9492: [0, 0.37788, 0, 0, 0.5],
    9496: [0, 0.37788, 0, 0, 0.5],
    9585: [0.19444, 0.68889, 0, 0, 0.88889],
    9586: [0.19444, 0.74111, 0, 0, 0.88889],
    9632: [0, 0.675, 0, 0, 0.77778],
    9633: [0, 0.675, 0, 0, 0.77778],
    9650: [0, 0.54986, 0, 0, 0.72222],
    9651: [0, 0.54986, 0, 0, 0.72222],
    9654: [0.03517, 0.54986, 0, 0, 0.77778],
    9660: [0, 0.54986, 0, 0, 0.72222],
    9661: [0, 0.54986, 0, 0, 0.72222],
    9664: [0.03517, 0.54986, 0, 0, 0.77778],
    9674: [0.11111, 0.69224, 0, 0, 0.66667],
    9733: [0.19444, 0.69224, 0, 0, 0.94445],
    10003: [0, 0.69224, 0, 0, 0.83334],
    10016: [0, 0.69224, 0, 0, 0.83334],
    10731: [0.11111, 0.69224, 0, 0, 0.66667],
    10846: [0.19444, 0.75583, 0, 0, 0.61111],
    10877: [0.13667, 0.63667, 0, 0, 0.77778],
    10878: [0.13667, 0.63667, 0, 0, 0.77778],
    10885: [0.25583, 0.75583, 0, 0, 0.77778],
    10886: [0.25583, 0.75583, 0, 0, 0.77778],
    10887: [0.13597, 0.63597, 0, 0, 0.77778],
    10888: [0.13597, 0.63597, 0, 0, 0.77778],
    10889: [0.26167, 0.75726, 0, 0, 0.77778],
    10890: [0.26167, 0.75726, 0, 0, 0.77778],
    10891: [0.48256, 0.98256, 0, 0, 0.77778],
    10892: [0.48256, 0.98256, 0, 0, 0.77778],
    10901: [0.13667, 0.63667, 0, 0, 0.77778],
    10902: [0.13667, 0.63667, 0, 0, 0.77778],
    10933: [0.25142, 0.75726, 0, 0, 0.77778],
    10934: [0.25142, 0.75726, 0, 0, 0.77778],
    10935: [0.26167, 0.75726, 0, 0, 0.77778],
    10936: [0.26167, 0.75726, 0, 0, 0.77778],
    10937: [0.26167, 0.75726, 0, 0, 0.77778],
    10938: [0.26167, 0.75726, 0, 0, 0.77778],
    10949: [0.25583, 0.75583, 0, 0, 0.77778],
    10950: [0.25583, 0.75583, 0, 0, 0.77778],
    10955: [0.28481, 0.79383, 0, 0, 0.77778],
    10956: [0.28481, 0.79383, 0, 0, 0.77778],
    57350: [0.08167, 0.58167, 0, 0, 0.22222],
    57351: [0.08167, 0.58167, 0, 0, 0.38889],
    57352: [0.08167, 0.58167, 0, 0, 0.77778],
    57353: [0, 0.43056, 0.04028, 0, 0.66667],
    57356: [0.25142, 0.75726, 0, 0, 0.77778],
    57357: [0.25142, 0.75726, 0, 0, 0.77778],
    57358: [0.41951, 0.91951, 0, 0, 0.77778],
    57359: [0.30274, 0.79383, 0, 0, 0.77778],
    57360: [0.30274, 0.79383, 0, 0, 0.77778],
    57361: [0.41951, 0.91951, 0, 0, 0.77778],
    57366: [0.25142, 0.75726, 0, 0, 0.77778],
    57367: [0.25142, 0.75726, 0, 0, 0.77778],
    57368: [0.25142, 0.75726, 0, 0, 0.77778],
    57369: [0.25142, 0.75726, 0, 0, 0.77778],
    57370: [0.13597, 0.63597, 0, 0, 0.77778],
    57371: [0.13597, 0.63597, 0, 0, 0.77778]
  },
  "Caligraphic-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.68333, 0, 0.19445, 0.79847],
    66: [0, 0.68333, 0.03041, 0.13889, 0.65681],
    67: [0, 0.68333, 0.05834, 0.13889, 0.52653],
    68: [0, 0.68333, 0.02778, 0.08334, 0.77139],
    69: [0, 0.68333, 0.08944, 0.11111, 0.52778],
    70: [0, 0.68333, 0.09931, 0.11111, 0.71875],
    71: [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
    72: [0, 0.68333, 965e-5, 0.11111, 0.84452],
    73: [0, 0.68333, 0.07382, 0, 0.54452],
    74: [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
    75: [0, 0.68333, 0.01445, 0.05556, 0.76195],
    76: [0, 0.68333, 0, 0.13889, 0.68972],
    77: [0, 0.68333, 0, 0.13889, 1.2009],
    78: [0, 0.68333, 0.14736, 0.08334, 0.82049],
    79: [0, 0.68333, 0.02778, 0.11111, 0.79611],
    80: [0, 0.68333, 0.08222, 0.08334, 0.69556],
    81: [0.09722, 0.68333, 0, 0.11111, 0.81667],
    82: [0, 0.68333, 0, 0.08334, 0.8475],
    83: [0, 0.68333, 0.075, 0.13889, 0.60556],
    84: [0, 0.68333, 0.25417, 0, 0.54464],
    85: [0, 0.68333, 0.09931, 0.08334, 0.62583],
    86: [0, 0.68333, 0.08222, 0, 0.61278],
    87: [0, 0.68333, 0.08222, 0.08334, 0.98778],
    88: [0, 0.68333, 0.14643, 0.13889, 0.7133],
    89: [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
    90: [0, 0.68333, 0.07944, 0.13889, 0.72473],
    160: [0, 0, 0, 0, 0.25]
  },
  "Fraktur-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69141, 0, 0, 0.29574],
    34: [0, 0.69141, 0, 0, 0.21471],
    38: [0, 0.69141, 0, 0, 0.73786],
    39: [0, 0.69141, 0, 0, 0.21201],
    40: [0.24982, 0.74947, 0, 0, 0.38865],
    41: [0.24982, 0.74947, 0, 0, 0.38865],
    42: [0, 0.62119, 0, 0, 0.27764],
    43: [0.08319, 0.58283, 0, 0, 0.75623],
    44: [0, 0.10803, 0, 0, 0.27764],
    45: [0.08319, 0.58283, 0, 0, 0.75623],
    46: [0, 0.10803, 0, 0, 0.27764],
    47: [0.24982, 0.74947, 0, 0, 0.50181],
    48: [0, 0.47534, 0, 0, 0.50181],
    49: [0, 0.47534, 0, 0, 0.50181],
    50: [0, 0.47534, 0, 0, 0.50181],
    51: [0.18906, 0.47534, 0, 0, 0.50181],
    52: [0.18906, 0.47534, 0, 0, 0.50181],
    53: [0.18906, 0.47534, 0, 0, 0.50181],
    54: [0, 0.69141, 0, 0, 0.50181],
    55: [0.18906, 0.47534, 0, 0, 0.50181],
    56: [0, 0.69141, 0, 0, 0.50181],
    57: [0.18906, 0.47534, 0, 0, 0.50181],
    58: [0, 0.47534, 0, 0, 0.21606],
    59: [0.12604, 0.47534, 0, 0, 0.21606],
    61: [-0.13099, 0.36866, 0, 0, 0.75623],
    63: [0, 0.69141, 0, 0, 0.36245],
    65: [0, 0.69141, 0, 0, 0.7176],
    66: [0, 0.69141, 0, 0, 0.88397],
    67: [0, 0.69141, 0, 0, 0.61254],
    68: [0, 0.69141, 0, 0, 0.83158],
    69: [0, 0.69141, 0, 0, 0.66278],
    70: [0.12604, 0.69141, 0, 0, 0.61119],
    71: [0, 0.69141, 0, 0, 0.78539],
    72: [0.06302, 0.69141, 0, 0, 0.7203],
    73: [0, 0.69141, 0, 0, 0.55448],
    74: [0.12604, 0.69141, 0, 0, 0.55231],
    75: [0, 0.69141, 0, 0, 0.66845],
    76: [0, 0.69141, 0, 0, 0.66602],
    77: [0, 0.69141, 0, 0, 1.04953],
    78: [0, 0.69141, 0, 0, 0.83212],
    79: [0, 0.69141, 0, 0, 0.82699],
    80: [0.18906, 0.69141, 0, 0, 0.82753],
    81: [0.03781, 0.69141, 0, 0, 0.82699],
    82: [0, 0.69141, 0, 0, 0.82807],
    83: [0, 0.69141, 0, 0, 0.82861],
    84: [0, 0.69141, 0, 0, 0.66899],
    85: [0, 0.69141, 0, 0, 0.64576],
    86: [0, 0.69141, 0, 0, 0.83131],
    87: [0, 0.69141, 0, 0, 1.04602],
    88: [0, 0.69141, 0, 0, 0.71922],
    89: [0.18906, 0.69141, 0, 0, 0.83293],
    90: [0.12604, 0.69141, 0, 0, 0.60201],
    91: [0.24982, 0.74947, 0, 0, 0.27764],
    93: [0.24982, 0.74947, 0, 0, 0.27764],
    94: [0, 0.69141, 0, 0, 0.49965],
    97: [0, 0.47534, 0, 0, 0.50046],
    98: [0, 0.69141, 0, 0, 0.51315],
    99: [0, 0.47534, 0, 0, 0.38946],
    100: [0, 0.62119, 0, 0, 0.49857],
    101: [0, 0.47534, 0, 0, 0.40053],
    102: [0.18906, 0.69141, 0, 0, 0.32626],
    103: [0.18906, 0.47534, 0, 0, 0.5037],
    104: [0.18906, 0.69141, 0, 0, 0.52126],
    105: [0, 0.69141, 0, 0, 0.27899],
    106: [0, 0.69141, 0, 0, 0.28088],
    107: [0, 0.69141, 0, 0, 0.38946],
    108: [0, 0.69141, 0, 0, 0.27953],
    109: [0, 0.47534, 0, 0, 0.76676],
    110: [0, 0.47534, 0, 0, 0.52666],
    111: [0, 0.47534, 0, 0, 0.48885],
    112: [0.18906, 0.52396, 0, 0, 0.50046],
    113: [0.18906, 0.47534, 0, 0, 0.48912],
    114: [0, 0.47534, 0, 0, 0.38919],
    115: [0, 0.47534, 0, 0, 0.44266],
    116: [0, 0.62119, 0, 0, 0.33301],
    117: [0, 0.47534, 0, 0, 0.5172],
    118: [0, 0.52396, 0, 0, 0.5118],
    119: [0, 0.52396, 0, 0, 0.77351],
    120: [0.18906, 0.47534, 0, 0, 0.38865],
    121: [0.18906, 0.47534, 0, 0, 0.49884],
    122: [0.18906, 0.47534, 0, 0, 0.39054],
    160: [0, 0, 0, 0, 0.25],
    8216: [0, 0.69141, 0, 0, 0.21471],
    8217: [0, 0.69141, 0, 0, 0.21471],
    58112: [0, 0.62119, 0, 0, 0.49749],
    58113: [0, 0.62119, 0, 0, 0.4983],
    58114: [0.18906, 0.69141, 0, 0, 0.33328],
    58115: [0.18906, 0.69141, 0, 0, 0.32923],
    58116: [0.18906, 0.47534, 0, 0, 0.50343],
    58117: [0, 0.69141, 0, 0, 0.33301],
    58118: [0, 0.62119, 0, 0, 0.33409],
    58119: [0, 0.47534, 0, 0, 0.50073]
  },
  "Main-Bold": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.35],
    34: [0, 0.69444, 0, 0, 0.60278],
    35: [0.19444, 0.69444, 0, 0, 0.95833],
    36: [0.05556, 0.75, 0, 0, 0.575],
    37: [0.05556, 0.75, 0, 0, 0.95833],
    38: [0, 0.69444, 0, 0, 0.89444],
    39: [0, 0.69444, 0, 0, 0.31944],
    40: [0.25, 0.75, 0, 0, 0.44722],
    41: [0.25, 0.75, 0, 0, 0.44722],
    42: [0, 0.75, 0, 0, 0.575],
    43: [0.13333, 0.63333, 0, 0, 0.89444],
    44: [0.19444, 0.15556, 0, 0, 0.31944],
    45: [0, 0.44444, 0, 0, 0.38333],
    46: [0, 0.15556, 0, 0, 0.31944],
    47: [0.25, 0.75, 0, 0, 0.575],
    48: [0, 0.64444, 0, 0, 0.575],
    49: [0, 0.64444, 0, 0, 0.575],
    50: [0, 0.64444, 0, 0, 0.575],
    51: [0, 0.64444, 0, 0, 0.575],
    52: [0, 0.64444, 0, 0, 0.575],
    53: [0, 0.64444, 0, 0, 0.575],
    54: [0, 0.64444, 0, 0, 0.575],
    55: [0, 0.64444, 0, 0, 0.575],
    56: [0, 0.64444, 0, 0, 0.575],
    57: [0, 0.64444, 0, 0, 0.575],
    58: [0, 0.44444, 0, 0, 0.31944],
    59: [0.19444, 0.44444, 0, 0, 0.31944],
    60: [0.08556, 0.58556, 0, 0, 0.89444],
    61: [-0.10889, 0.39111, 0, 0, 0.89444],
    62: [0.08556, 0.58556, 0, 0, 0.89444],
    63: [0, 0.69444, 0, 0, 0.54305],
    64: [0, 0.69444, 0, 0, 0.89444],
    65: [0, 0.68611, 0, 0, 0.86944],
    66: [0, 0.68611, 0, 0, 0.81805],
    67: [0, 0.68611, 0, 0, 0.83055],
    68: [0, 0.68611, 0, 0, 0.88194],
    69: [0, 0.68611, 0, 0, 0.75555],
    70: [0, 0.68611, 0, 0, 0.72361],
    71: [0, 0.68611, 0, 0, 0.90416],
    72: [0, 0.68611, 0, 0, 0.9],
    73: [0, 0.68611, 0, 0, 0.43611],
    74: [0, 0.68611, 0, 0, 0.59444],
    75: [0, 0.68611, 0, 0, 0.90138],
    76: [0, 0.68611, 0, 0, 0.69166],
    77: [0, 0.68611, 0, 0, 1.09166],
    78: [0, 0.68611, 0, 0, 0.9],
    79: [0, 0.68611, 0, 0, 0.86388],
    80: [0, 0.68611, 0, 0, 0.78611],
    81: [0.19444, 0.68611, 0, 0, 0.86388],
    82: [0, 0.68611, 0, 0, 0.8625],
    83: [0, 0.68611, 0, 0, 0.63889],
    84: [0, 0.68611, 0, 0, 0.8],
    85: [0, 0.68611, 0, 0, 0.88472],
    86: [0, 0.68611, 0.01597, 0, 0.86944],
    87: [0, 0.68611, 0.01597, 0, 1.18888],
    88: [0, 0.68611, 0, 0, 0.86944],
    89: [0, 0.68611, 0.02875, 0, 0.86944],
    90: [0, 0.68611, 0, 0, 0.70277],
    91: [0.25, 0.75, 0, 0, 0.31944],
    92: [0.25, 0.75, 0, 0, 0.575],
    93: [0.25, 0.75, 0, 0, 0.31944],
    94: [0, 0.69444, 0, 0, 0.575],
    95: [0.31, 0.13444, 0.03194, 0, 0.575],
    97: [0, 0.44444, 0, 0, 0.55902],
    98: [0, 0.69444, 0, 0, 0.63889],
    99: [0, 0.44444, 0, 0, 0.51111],
    100: [0, 0.69444, 0, 0, 0.63889],
    101: [0, 0.44444, 0, 0, 0.52708],
    102: [0, 0.69444, 0.10903, 0, 0.35139],
    103: [0.19444, 0.44444, 0.01597, 0, 0.575],
    104: [0, 0.69444, 0, 0, 0.63889],
    105: [0, 0.69444, 0, 0, 0.31944],
    106: [0.19444, 0.69444, 0, 0, 0.35139],
    107: [0, 0.69444, 0, 0, 0.60694],
    108: [0, 0.69444, 0, 0, 0.31944],
    109: [0, 0.44444, 0, 0, 0.95833],
    110: [0, 0.44444, 0, 0, 0.63889],
    111: [0, 0.44444, 0, 0, 0.575],
    112: [0.19444, 0.44444, 0, 0, 0.63889],
    113: [0.19444, 0.44444, 0, 0, 0.60694],
    114: [0, 0.44444, 0, 0, 0.47361],
    115: [0, 0.44444, 0, 0, 0.45361],
    116: [0, 0.63492, 0, 0, 0.44722],
    117: [0, 0.44444, 0, 0, 0.63889],
    118: [0, 0.44444, 0.01597, 0, 0.60694],
    119: [0, 0.44444, 0.01597, 0, 0.83055],
    120: [0, 0.44444, 0, 0, 0.60694],
    121: [0.19444, 0.44444, 0.01597, 0, 0.60694],
    122: [0, 0.44444, 0, 0, 0.51111],
    123: [0.25, 0.75, 0, 0, 0.575],
    124: [0.25, 0.75, 0, 0, 0.31944],
    125: [0.25, 0.75, 0, 0, 0.575],
    126: [0.35, 0.34444, 0, 0, 0.575],
    160: [0, 0, 0, 0, 0.25],
    163: [0, 0.69444, 0, 0, 0.86853],
    168: [0, 0.69444, 0, 0, 0.575],
    172: [0, 0.44444, 0, 0, 0.76666],
    176: [0, 0.69444, 0, 0, 0.86944],
    177: [0.13333, 0.63333, 0, 0, 0.89444],
    184: [0.17014, 0, 0, 0, 0.51111],
    198: [0, 0.68611, 0, 0, 1.04166],
    215: [0.13333, 0.63333, 0, 0, 0.89444],
    216: [0.04861, 0.73472, 0, 0, 0.89444],
    223: [0, 0.69444, 0, 0, 0.59722],
    230: [0, 0.44444, 0, 0, 0.83055],
    247: [0.13333, 0.63333, 0, 0, 0.89444],
    248: [0.09722, 0.54167, 0, 0, 0.575],
    305: [0, 0.44444, 0, 0, 0.31944],
    338: [0, 0.68611, 0, 0, 1.16944],
    339: [0, 0.44444, 0, 0, 0.89444],
    567: [0.19444, 0.44444, 0, 0, 0.35139],
    710: [0, 0.69444, 0, 0, 0.575],
    711: [0, 0.63194, 0, 0, 0.575],
    713: [0, 0.59611, 0, 0, 0.575],
    714: [0, 0.69444, 0, 0, 0.575],
    715: [0, 0.69444, 0, 0, 0.575],
    728: [0, 0.69444, 0, 0, 0.575],
    729: [0, 0.69444, 0, 0, 0.31944],
    730: [0, 0.69444, 0, 0, 0.86944],
    732: [0, 0.69444, 0, 0, 0.575],
    733: [0, 0.69444, 0, 0, 0.575],
    915: [0, 0.68611, 0, 0, 0.69166],
    916: [0, 0.68611, 0, 0, 0.95833],
    920: [0, 0.68611, 0, 0, 0.89444],
    923: [0, 0.68611, 0, 0, 0.80555],
    926: [0, 0.68611, 0, 0, 0.76666],
    928: [0, 0.68611, 0, 0, 0.9],
    931: [0, 0.68611, 0, 0, 0.83055],
    933: [0, 0.68611, 0, 0, 0.89444],
    934: [0, 0.68611, 0, 0, 0.83055],
    936: [0, 0.68611, 0, 0, 0.89444],
    937: [0, 0.68611, 0, 0, 0.83055],
    8211: [0, 0.44444, 0.03194, 0, 0.575],
    8212: [0, 0.44444, 0.03194, 0, 1.14999],
    8216: [0, 0.69444, 0, 0, 0.31944],
    8217: [0, 0.69444, 0, 0, 0.31944],
    8220: [0, 0.69444, 0, 0, 0.60278],
    8221: [0, 0.69444, 0, 0, 0.60278],
    8224: [0.19444, 0.69444, 0, 0, 0.51111],
    8225: [0.19444, 0.69444, 0, 0, 0.51111],
    8242: [0, 0.55556, 0, 0, 0.34444],
    8407: [0, 0.72444, 0.15486, 0, 0.575],
    8463: [0, 0.69444, 0, 0, 0.66759],
    8465: [0, 0.69444, 0, 0, 0.83055],
    8467: [0, 0.69444, 0, 0, 0.47361],
    8472: [0.19444, 0.44444, 0, 0, 0.74027],
    8476: [0, 0.69444, 0, 0, 0.83055],
    8501: [0, 0.69444, 0, 0, 0.70277],
    8592: [-0.10889, 0.39111, 0, 0, 1.14999],
    8593: [0.19444, 0.69444, 0, 0, 0.575],
    8594: [-0.10889, 0.39111, 0, 0, 1.14999],
    8595: [0.19444, 0.69444, 0, 0, 0.575],
    8596: [-0.10889, 0.39111, 0, 0, 1.14999],
    8597: [0.25, 0.75, 0, 0, 0.575],
    8598: [0.19444, 0.69444, 0, 0, 1.14999],
    8599: [0.19444, 0.69444, 0, 0, 1.14999],
    8600: [0.19444, 0.69444, 0, 0, 1.14999],
    8601: [0.19444, 0.69444, 0, 0, 1.14999],
    8636: [-0.10889, 0.39111, 0, 0, 1.14999],
    8637: [-0.10889, 0.39111, 0, 0, 1.14999],
    8640: [-0.10889, 0.39111, 0, 0, 1.14999],
    8641: [-0.10889, 0.39111, 0, 0, 1.14999],
    8656: [-0.10889, 0.39111, 0, 0, 1.14999],
    8657: [0.19444, 0.69444, 0, 0, 0.70277],
    8658: [-0.10889, 0.39111, 0, 0, 1.14999],
    8659: [0.19444, 0.69444, 0, 0, 0.70277],
    8660: [-0.10889, 0.39111, 0, 0, 1.14999],
    8661: [0.25, 0.75, 0, 0, 0.70277],
    8704: [0, 0.69444, 0, 0, 0.63889],
    8706: [0, 0.69444, 0.06389, 0, 0.62847],
    8707: [0, 0.69444, 0, 0, 0.63889],
    8709: [0.05556, 0.75, 0, 0, 0.575],
    8711: [0, 0.68611, 0, 0, 0.95833],
    8712: [0.08556, 0.58556, 0, 0, 0.76666],
    8715: [0.08556, 0.58556, 0, 0, 0.76666],
    8722: [0.13333, 0.63333, 0, 0, 0.89444],
    8723: [0.13333, 0.63333, 0, 0, 0.89444],
    8725: [0.25, 0.75, 0, 0, 0.575],
    8726: [0.25, 0.75, 0, 0, 0.575],
    8727: [-0.02778, 0.47222, 0, 0, 0.575],
    8728: [-0.02639, 0.47361, 0, 0, 0.575],
    8729: [-0.02639, 0.47361, 0, 0, 0.575],
    8730: [0.18, 0.82, 0, 0, 0.95833],
    8733: [0, 0.44444, 0, 0, 0.89444],
    8734: [0, 0.44444, 0, 0, 1.14999],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8739: [0.25, 0.75, 0, 0, 0.31944],
    8741: [0.25, 0.75, 0, 0, 0.575],
    8743: [0, 0.55556, 0, 0, 0.76666],
    8744: [0, 0.55556, 0, 0, 0.76666],
    8745: [0, 0.55556, 0, 0, 0.76666],
    8746: [0, 0.55556, 0, 0, 0.76666],
    8747: [0.19444, 0.69444, 0.12778, 0, 0.56875],
    8764: [-0.10889, 0.39111, 0, 0, 0.89444],
    8768: [0.19444, 0.69444, 0, 0, 0.31944],
    8771: [222e-5, 0.50222, 0, 0, 0.89444],
    8773: [0.027, 0.638, 0, 0, 0.894],
    8776: [0.02444, 0.52444, 0, 0, 0.89444],
    8781: [222e-5, 0.50222, 0, 0, 0.89444],
    8801: [222e-5, 0.50222, 0, 0, 0.89444],
    8804: [0.19667, 0.69667, 0, 0, 0.89444],
    8805: [0.19667, 0.69667, 0, 0, 0.89444],
    8810: [0.08556, 0.58556, 0, 0, 1.14999],
    8811: [0.08556, 0.58556, 0, 0, 1.14999],
    8826: [0.08556, 0.58556, 0, 0, 0.89444],
    8827: [0.08556, 0.58556, 0, 0, 0.89444],
    8834: [0.08556, 0.58556, 0, 0, 0.89444],
    8835: [0.08556, 0.58556, 0, 0, 0.89444],
    8838: [0.19667, 0.69667, 0, 0, 0.89444],
    8839: [0.19667, 0.69667, 0, 0, 0.89444],
    8846: [0, 0.55556, 0, 0, 0.76666],
    8849: [0.19667, 0.69667, 0, 0, 0.89444],
    8850: [0.19667, 0.69667, 0, 0, 0.89444],
    8851: [0, 0.55556, 0, 0, 0.76666],
    8852: [0, 0.55556, 0, 0, 0.76666],
    8853: [0.13333, 0.63333, 0, 0, 0.89444],
    8854: [0.13333, 0.63333, 0, 0, 0.89444],
    8855: [0.13333, 0.63333, 0, 0, 0.89444],
    8856: [0.13333, 0.63333, 0, 0, 0.89444],
    8857: [0.13333, 0.63333, 0, 0, 0.89444],
    8866: [0, 0.69444, 0, 0, 0.70277],
    8867: [0, 0.69444, 0, 0, 0.70277],
    8868: [0, 0.69444, 0, 0, 0.89444],
    8869: [0, 0.69444, 0, 0, 0.89444],
    8900: [-0.02639, 0.47361, 0, 0, 0.575],
    8901: [-0.02639, 0.47361, 0, 0, 0.31944],
    8902: [-0.02778, 0.47222, 0, 0, 0.575],
    8968: [0.25, 0.75, 0, 0, 0.51111],
    8969: [0.25, 0.75, 0, 0, 0.51111],
    8970: [0.25, 0.75, 0, 0, 0.51111],
    8971: [0.25, 0.75, 0, 0, 0.51111],
    8994: [-0.13889, 0.36111, 0, 0, 1.14999],
    8995: [-0.13889, 0.36111, 0, 0, 1.14999],
    9651: [0.19444, 0.69444, 0, 0, 1.02222],
    9657: [-0.02778, 0.47222, 0, 0, 0.575],
    9661: [0.19444, 0.69444, 0, 0, 1.02222],
    9667: [-0.02778, 0.47222, 0, 0, 0.575],
    9711: [0.19444, 0.69444, 0, 0, 1.14999],
    9824: [0.12963, 0.69444, 0, 0, 0.89444],
    9825: [0.12963, 0.69444, 0, 0, 0.89444],
    9826: [0.12963, 0.69444, 0, 0, 0.89444],
    9827: [0.12963, 0.69444, 0, 0, 0.89444],
    9837: [0, 0.75, 0, 0, 0.44722],
    9838: [0.19444, 0.69444, 0, 0, 0.44722],
    9839: [0.19444, 0.69444, 0, 0, 0.44722],
    10216: [0.25, 0.75, 0, 0, 0.44722],
    10217: [0.25, 0.75, 0, 0, 0.44722],
    10815: [0, 0.68611, 0, 0, 0.9],
    10927: [0.19667, 0.69667, 0, 0, 0.89444],
    10928: [0.19667, 0.69667, 0, 0, 0.89444],
    57376: [0.19444, 0.69444, 0, 0, 0]
  },
  "Main-BoldItalic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.11417, 0, 0.38611],
    34: [0, 0.69444, 0.07939, 0, 0.62055],
    35: [0.19444, 0.69444, 0.06833, 0, 0.94444],
    37: [0.05556, 0.75, 0.12861, 0, 0.94444],
    38: [0, 0.69444, 0.08528, 0, 0.88555],
    39: [0, 0.69444, 0.12945, 0, 0.35555],
    40: [0.25, 0.75, 0.15806, 0, 0.47333],
    41: [0.25, 0.75, 0.03306, 0, 0.47333],
    42: [0, 0.75, 0.14333, 0, 0.59111],
    43: [0.10333, 0.60333, 0.03306, 0, 0.88555],
    44: [0.19444, 0.14722, 0, 0, 0.35555],
    45: [0, 0.44444, 0.02611, 0, 0.41444],
    46: [0, 0.14722, 0, 0, 0.35555],
    47: [0.25, 0.75, 0.15806, 0, 0.59111],
    48: [0, 0.64444, 0.13167, 0, 0.59111],
    49: [0, 0.64444, 0.13167, 0, 0.59111],
    50: [0, 0.64444, 0.13167, 0, 0.59111],
    51: [0, 0.64444, 0.13167, 0, 0.59111],
    52: [0.19444, 0.64444, 0.13167, 0, 0.59111],
    53: [0, 0.64444, 0.13167, 0, 0.59111],
    54: [0, 0.64444, 0.13167, 0, 0.59111],
    55: [0.19444, 0.64444, 0.13167, 0, 0.59111],
    56: [0, 0.64444, 0.13167, 0, 0.59111],
    57: [0, 0.64444, 0.13167, 0, 0.59111],
    58: [0, 0.44444, 0.06695, 0, 0.35555],
    59: [0.19444, 0.44444, 0.06695, 0, 0.35555],
    61: [-0.10889, 0.39111, 0.06833, 0, 0.88555],
    63: [0, 0.69444, 0.11472, 0, 0.59111],
    64: [0, 0.69444, 0.09208, 0, 0.88555],
    65: [0, 0.68611, 0, 0, 0.86555],
    66: [0, 0.68611, 0.0992, 0, 0.81666],
    67: [0, 0.68611, 0.14208, 0, 0.82666],
    68: [0, 0.68611, 0.09062, 0, 0.87555],
    69: [0, 0.68611, 0.11431, 0, 0.75666],
    70: [0, 0.68611, 0.12903, 0, 0.72722],
    71: [0, 0.68611, 0.07347, 0, 0.89527],
    72: [0, 0.68611, 0.17208, 0, 0.8961],
    73: [0, 0.68611, 0.15681, 0, 0.47166],
    74: [0, 0.68611, 0.145, 0, 0.61055],
    75: [0, 0.68611, 0.14208, 0, 0.89499],
    76: [0, 0.68611, 0, 0, 0.69777],
    77: [0, 0.68611, 0.17208, 0, 1.07277],
    78: [0, 0.68611, 0.17208, 0, 0.8961],
    79: [0, 0.68611, 0.09062, 0, 0.85499],
    80: [0, 0.68611, 0.0992, 0, 0.78721],
    81: [0.19444, 0.68611, 0.09062, 0, 0.85499],
    82: [0, 0.68611, 0.02559, 0, 0.85944],
    83: [0, 0.68611, 0.11264, 0, 0.64999],
    84: [0, 0.68611, 0.12903, 0, 0.7961],
    85: [0, 0.68611, 0.17208, 0, 0.88083],
    86: [0, 0.68611, 0.18625, 0, 0.86555],
    87: [0, 0.68611, 0.18625, 0, 1.15999],
    88: [0, 0.68611, 0.15681, 0, 0.86555],
    89: [0, 0.68611, 0.19803, 0, 0.86555],
    90: [0, 0.68611, 0.14208, 0, 0.70888],
    91: [0.25, 0.75, 0.1875, 0, 0.35611],
    93: [0.25, 0.75, 0.09972, 0, 0.35611],
    94: [0, 0.69444, 0.06709, 0, 0.59111],
    95: [0.31, 0.13444, 0.09811, 0, 0.59111],
    97: [0, 0.44444, 0.09426, 0, 0.59111],
    98: [0, 0.69444, 0.07861, 0, 0.53222],
    99: [0, 0.44444, 0.05222, 0, 0.53222],
    100: [0, 0.69444, 0.10861, 0, 0.59111],
    101: [0, 0.44444, 0.085, 0, 0.53222],
    102: [0.19444, 0.69444, 0.21778, 0, 0.4],
    103: [0.19444, 0.44444, 0.105, 0, 0.53222],
    104: [0, 0.69444, 0.09426, 0, 0.59111],
    105: [0, 0.69326, 0.11387, 0, 0.35555],
    106: [0.19444, 0.69326, 0.1672, 0, 0.35555],
    107: [0, 0.69444, 0.11111, 0, 0.53222],
    108: [0, 0.69444, 0.10861, 0, 0.29666],
    109: [0, 0.44444, 0.09426, 0, 0.94444],
    110: [0, 0.44444, 0.09426, 0, 0.64999],
    111: [0, 0.44444, 0.07861, 0, 0.59111],
    112: [0.19444, 0.44444, 0.07861, 0, 0.59111],
    113: [0.19444, 0.44444, 0.105, 0, 0.53222],
    114: [0, 0.44444, 0.11111, 0, 0.50167],
    115: [0, 0.44444, 0.08167, 0, 0.48694],
    116: [0, 0.63492, 0.09639, 0, 0.385],
    117: [0, 0.44444, 0.09426, 0, 0.62055],
    118: [0, 0.44444, 0.11111, 0, 0.53222],
    119: [0, 0.44444, 0.11111, 0, 0.76777],
    120: [0, 0.44444, 0.12583, 0, 0.56055],
    121: [0.19444, 0.44444, 0.105, 0, 0.56166],
    122: [0, 0.44444, 0.13889, 0, 0.49055],
    126: [0.35, 0.34444, 0.11472, 0, 0.59111],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.69444, 0.11473, 0, 0.59111],
    176: [0, 0.69444, 0, 0, 0.94888],
    184: [0.17014, 0, 0, 0, 0.53222],
    198: [0, 0.68611, 0.11431, 0, 1.02277],
    216: [0.04861, 0.73472, 0.09062, 0, 0.88555],
    223: [0.19444, 0.69444, 0.09736, 0, 0.665],
    230: [0, 0.44444, 0.085, 0, 0.82666],
    248: [0.09722, 0.54167, 0.09458, 0, 0.59111],
    305: [0, 0.44444, 0.09426, 0, 0.35555],
    338: [0, 0.68611, 0.11431, 0, 1.14054],
    339: [0, 0.44444, 0.085, 0, 0.82666],
    567: [0.19444, 0.44444, 0.04611, 0, 0.385],
    710: [0, 0.69444, 0.06709, 0, 0.59111],
    711: [0, 0.63194, 0.08271, 0, 0.59111],
    713: [0, 0.59444, 0.10444, 0, 0.59111],
    714: [0, 0.69444, 0.08528, 0, 0.59111],
    715: [0, 0.69444, 0, 0, 0.59111],
    728: [0, 0.69444, 0.10333, 0, 0.59111],
    729: [0, 0.69444, 0.12945, 0, 0.35555],
    730: [0, 0.69444, 0, 0, 0.94888],
    732: [0, 0.69444, 0.11472, 0, 0.59111],
    733: [0, 0.69444, 0.11472, 0, 0.59111],
    915: [0, 0.68611, 0.12903, 0, 0.69777],
    916: [0, 0.68611, 0, 0, 0.94444],
    920: [0, 0.68611, 0.09062, 0, 0.88555],
    923: [0, 0.68611, 0, 0, 0.80666],
    926: [0, 0.68611, 0.15092, 0, 0.76777],
    928: [0, 0.68611, 0.17208, 0, 0.8961],
    931: [0, 0.68611, 0.11431, 0, 0.82666],
    933: [0, 0.68611, 0.10778, 0, 0.88555],
    934: [0, 0.68611, 0.05632, 0, 0.82666],
    936: [0, 0.68611, 0.10778, 0, 0.88555],
    937: [0, 0.68611, 0.0992, 0, 0.82666],
    8211: [0, 0.44444, 0.09811, 0, 0.59111],
    8212: [0, 0.44444, 0.09811, 0, 1.18221],
    8216: [0, 0.69444, 0.12945, 0, 0.35555],
    8217: [0, 0.69444, 0.12945, 0, 0.35555],
    8220: [0, 0.69444, 0.16772, 0, 0.62055],
    8221: [0, 0.69444, 0.07939, 0, 0.62055]
  },
  "Main-Italic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.12417, 0, 0.30667],
    34: [0, 0.69444, 0.06961, 0, 0.51444],
    35: [0.19444, 0.69444, 0.06616, 0, 0.81777],
    37: [0.05556, 0.75, 0.13639, 0, 0.81777],
    38: [0, 0.69444, 0.09694, 0, 0.76666],
    39: [0, 0.69444, 0.12417, 0, 0.30667],
    40: [0.25, 0.75, 0.16194, 0, 0.40889],
    41: [0.25, 0.75, 0.03694, 0, 0.40889],
    42: [0, 0.75, 0.14917, 0, 0.51111],
    43: [0.05667, 0.56167, 0.03694, 0, 0.76666],
    44: [0.19444, 0.10556, 0, 0, 0.30667],
    45: [0, 0.43056, 0.02826, 0, 0.35778],
    46: [0, 0.10556, 0, 0, 0.30667],
    47: [0.25, 0.75, 0.16194, 0, 0.51111],
    48: [0, 0.64444, 0.13556, 0, 0.51111],
    49: [0, 0.64444, 0.13556, 0, 0.51111],
    50: [0, 0.64444, 0.13556, 0, 0.51111],
    51: [0, 0.64444, 0.13556, 0, 0.51111],
    52: [0.19444, 0.64444, 0.13556, 0, 0.51111],
    53: [0, 0.64444, 0.13556, 0, 0.51111],
    54: [0, 0.64444, 0.13556, 0, 0.51111],
    55: [0.19444, 0.64444, 0.13556, 0, 0.51111],
    56: [0, 0.64444, 0.13556, 0, 0.51111],
    57: [0, 0.64444, 0.13556, 0, 0.51111],
    58: [0, 0.43056, 0.0582, 0, 0.30667],
    59: [0.19444, 0.43056, 0.0582, 0, 0.30667],
    61: [-0.13313, 0.36687, 0.06616, 0, 0.76666],
    63: [0, 0.69444, 0.1225, 0, 0.51111],
    64: [0, 0.69444, 0.09597, 0, 0.76666],
    65: [0, 0.68333, 0, 0, 0.74333],
    66: [0, 0.68333, 0.10257, 0, 0.70389],
    67: [0, 0.68333, 0.14528, 0, 0.71555],
    68: [0, 0.68333, 0.09403, 0, 0.755],
    69: [0, 0.68333, 0.12028, 0, 0.67833],
    70: [0, 0.68333, 0.13305, 0, 0.65277],
    71: [0, 0.68333, 0.08722, 0, 0.77361],
    72: [0, 0.68333, 0.16389, 0, 0.74333],
    73: [0, 0.68333, 0.15806, 0, 0.38555],
    74: [0, 0.68333, 0.14028, 0, 0.525],
    75: [0, 0.68333, 0.14528, 0, 0.76888],
    76: [0, 0.68333, 0, 0, 0.62722],
    77: [0, 0.68333, 0.16389, 0, 0.89666],
    78: [0, 0.68333, 0.16389, 0, 0.74333],
    79: [0, 0.68333, 0.09403, 0, 0.76666],
    80: [0, 0.68333, 0.10257, 0, 0.67833],
    81: [0.19444, 0.68333, 0.09403, 0, 0.76666],
    82: [0, 0.68333, 0.03868, 0, 0.72944],
    83: [0, 0.68333, 0.11972, 0, 0.56222],
    84: [0, 0.68333, 0.13305, 0, 0.71555],
    85: [0, 0.68333, 0.16389, 0, 0.74333],
    86: [0, 0.68333, 0.18361, 0, 0.74333],
    87: [0, 0.68333, 0.18361, 0, 0.99888],
    88: [0, 0.68333, 0.15806, 0, 0.74333],
    89: [0, 0.68333, 0.19383, 0, 0.74333],
    90: [0, 0.68333, 0.14528, 0, 0.61333],
    91: [0.25, 0.75, 0.1875, 0, 0.30667],
    93: [0.25, 0.75, 0.10528, 0, 0.30667],
    94: [0, 0.69444, 0.06646, 0, 0.51111],
    95: [0.31, 0.12056, 0.09208, 0, 0.51111],
    97: [0, 0.43056, 0.07671, 0, 0.51111],
    98: [0, 0.69444, 0.06312, 0, 0.46],
    99: [0, 0.43056, 0.05653, 0, 0.46],
    100: [0, 0.69444, 0.10333, 0, 0.51111],
    101: [0, 0.43056, 0.07514, 0, 0.46],
    102: [0.19444, 0.69444, 0.21194, 0, 0.30667],
    103: [0.19444, 0.43056, 0.08847, 0, 0.46],
    104: [0, 0.69444, 0.07671, 0, 0.51111],
    105: [0, 0.65536, 0.1019, 0, 0.30667],
    106: [0.19444, 0.65536, 0.14467, 0, 0.30667],
    107: [0, 0.69444, 0.10764, 0, 0.46],
    108: [0, 0.69444, 0.10333, 0, 0.25555],
    109: [0, 0.43056, 0.07671, 0, 0.81777],
    110: [0, 0.43056, 0.07671, 0, 0.56222],
    111: [0, 0.43056, 0.06312, 0, 0.51111],
    112: [0.19444, 0.43056, 0.06312, 0, 0.51111],
    113: [0.19444, 0.43056, 0.08847, 0, 0.46],
    114: [0, 0.43056, 0.10764, 0, 0.42166],
    115: [0, 0.43056, 0.08208, 0, 0.40889],
    116: [0, 0.61508, 0.09486, 0, 0.33222],
    117: [0, 0.43056, 0.07671, 0, 0.53666],
    118: [0, 0.43056, 0.10764, 0, 0.46],
    119: [0, 0.43056, 0.10764, 0, 0.66444],
    120: [0, 0.43056, 0.12042, 0, 0.46389],
    121: [0.19444, 0.43056, 0.08847, 0, 0.48555],
    122: [0, 0.43056, 0.12292, 0, 0.40889],
    126: [0.35, 0.31786, 0.11585, 0, 0.51111],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.66786, 0.10474, 0, 0.51111],
    176: [0, 0.69444, 0, 0, 0.83129],
    184: [0.17014, 0, 0, 0, 0.46],
    198: [0, 0.68333, 0.12028, 0, 0.88277],
    216: [0.04861, 0.73194, 0.09403, 0, 0.76666],
    223: [0.19444, 0.69444, 0.10514, 0, 0.53666],
    230: [0, 0.43056, 0.07514, 0, 0.71555],
    248: [0.09722, 0.52778, 0.09194, 0, 0.51111],
    338: [0, 0.68333, 0.12028, 0, 0.98499],
    339: [0, 0.43056, 0.07514, 0, 0.71555],
    710: [0, 0.69444, 0.06646, 0, 0.51111],
    711: [0, 0.62847, 0.08295, 0, 0.51111],
    713: [0, 0.56167, 0.10333, 0, 0.51111],
    714: [0, 0.69444, 0.09694, 0, 0.51111],
    715: [0, 0.69444, 0, 0, 0.51111],
    728: [0, 0.69444, 0.10806, 0, 0.51111],
    729: [0, 0.66786, 0.11752, 0, 0.30667],
    730: [0, 0.69444, 0, 0, 0.83129],
    732: [0, 0.66786, 0.11585, 0, 0.51111],
    733: [0, 0.69444, 0.1225, 0, 0.51111],
    915: [0, 0.68333, 0.13305, 0, 0.62722],
    916: [0, 0.68333, 0, 0, 0.81777],
    920: [0, 0.68333, 0.09403, 0, 0.76666],
    923: [0, 0.68333, 0, 0, 0.69222],
    926: [0, 0.68333, 0.15294, 0, 0.66444],
    928: [0, 0.68333, 0.16389, 0, 0.74333],
    931: [0, 0.68333, 0.12028, 0, 0.71555],
    933: [0, 0.68333, 0.11111, 0, 0.76666],
    934: [0, 0.68333, 0.05986, 0, 0.71555],
    936: [0, 0.68333, 0.11111, 0, 0.76666],
    937: [0, 0.68333, 0.10257, 0, 0.71555],
    8211: [0, 0.43056, 0.09208, 0, 0.51111],
    8212: [0, 0.43056, 0.09208, 0, 1.02222],
    8216: [0, 0.69444, 0.12417, 0, 0.30667],
    8217: [0, 0.69444, 0.12417, 0, 0.30667],
    8220: [0, 0.69444, 0.1685, 0, 0.51444],
    8221: [0, 0.69444, 0.06961, 0, 0.51444],
    8463: [0, 0.68889, 0, 0, 0.54028]
  },
  "Main-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.27778],
    34: [0, 0.69444, 0, 0, 0.5],
    35: [0.19444, 0.69444, 0, 0, 0.83334],
    36: [0.05556, 0.75, 0, 0, 0.5],
    37: [0.05556, 0.75, 0, 0, 0.83334],
    38: [0, 0.69444, 0, 0, 0.77778],
    39: [0, 0.69444, 0, 0, 0.27778],
    40: [0.25, 0.75, 0, 0, 0.38889],
    41: [0.25, 0.75, 0, 0, 0.38889],
    42: [0, 0.75, 0, 0, 0.5],
    43: [0.08333, 0.58333, 0, 0, 0.77778],
    44: [0.19444, 0.10556, 0, 0, 0.27778],
    45: [0, 0.43056, 0, 0, 0.33333],
    46: [0, 0.10556, 0, 0, 0.27778],
    47: [0.25, 0.75, 0, 0, 0.5],
    48: [0, 0.64444, 0, 0, 0.5],
    49: [0, 0.64444, 0, 0, 0.5],
    50: [0, 0.64444, 0, 0, 0.5],
    51: [0, 0.64444, 0, 0, 0.5],
    52: [0, 0.64444, 0, 0, 0.5],
    53: [0, 0.64444, 0, 0, 0.5],
    54: [0, 0.64444, 0, 0, 0.5],
    55: [0, 0.64444, 0, 0, 0.5],
    56: [0, 0.64444, 0, 0, 0.5],
    57: [0, 0.64444, 0, 0, 0.5],
    58: [0, 0.43056, 0, 0, 0.27778],
    59: [0.19444, 0.43056, 0, 0, 0.27778],
    60: [0.0391, 0.5391, 0, 0, 0.77778],
    61: [-0.13313, 0.36687, 0, 0, 0.77778],
    62: [0.0391, 0.5391, 0, 0, 0.77778],
    63: [0, 0.69444, 0, 0, 0.47222],
    64: [0, 0.69444, 0, 0, 0.77778],
    65: [0, 0.68333, 0, 0, 0.75],
    66: [0, 0.68333, 0, 0, 0.70834],
    67: [0, 0.68333, 0, 0, 0.72222],
    68: [0, 0.68333, 0, 0, 0.76389],
    69: [0, 0.68333, 0, 0, 0.68056],
    70: [0, 0.68333, 0, 0, 0.65278],
    71: [0, 0.68333, 0, 0, 0.78472],
    72: [0, 0.68333, 0, 0, 0.75],
    73: [0, 0.68333, 0, 0, 0.36111],
    74: [0, 0.68333, 0, 0, 0.51389],
    75: [0, 0.68333, 0, 0, 0.77778],
    76: [0, 0.68333, 0, 0, 0.625],
    77: [0, 0.68333, 0, 0, 0.91667],
    78: [0, 0.68333, 0, 0, 0.75],
    79: [0, 0.68333, 0, 0, 0.77778],
    80: [0, 0.68333, 0, 0, 0.68056],
    81: [0.19444, 0.68333, 0, 0, 0.77778],
    82: [0, 0.68333, 0, 0, 0.73611],
    83: [0, 0.68333, 0, 0, 0.55556],
    84: [0, 0.68333, 0, 0, 0.72222],
    85: [0, 0.68333, 0, 0, 0.75],
    86: [0, 0.68333, 0.01389, 0, 0.75],
    87: [0, 0.68333, 0.01389, 0, 1.02778],
    88: [0, 0.68333, 0, 0, 0.75],
    89: [0, 0.68333, 0.025, 0, 0.75],
    90: [0, 0.68333, 0, 0, 0.61111],
    91: [0.25, 0.75, 0, 0, 0.27778],
    92: [0.25, 0.75, 0, 0, 0.5],
    93: [0.25, 0.75, 0, 0, 0.27778],
    94: [0, 0.69444, 0, 0, 0.5],
    95: [0.31, 0.12056, 0.02778, 0, 0.5],
    97: [0, 0.43056, 0, 0, 0.5],
    98: [0, 0.69444, 0, 0, 0.55556],
    99: [0, 0.43056, 0, 0, 0.44445],
    100: [0, 0.69444, 0, 0, 0.55556],
    101: [0, 0.43056, 0, 0, 0.44445],
    102: [0, 0.69444, 0.07778, 0, 0.30556],
    103: [0.19444, 0.43056, 0.01389, 0, 0.5],
    104: [0, 0.69444, 0, 0, 0.55556],
    105: [0, 0.66786, 0, 0, 0.27778],
    106: [0.19444, 0.66786, 0, 0, 0.30556],
    107: [0, 0.69444, 0, 0, 0.52778],
    108: [0, 0.69444, 0, 0, 0.27778],
    109: [0, 0.43056, 0, 0, 0.83334],
    110: [0, 0.43056, 0, 0, 0.55556],
    111: [0, 0.43056, 0, 0, 0.5],
    112: [0.19444, 0.43056, 0, 0, 0.55556],
    113: [0.19444, 0.43056, 0, 0, 0.52778],
    114: [0, 0.43056, 0, 0, 0.39167],
    115: [0, 0.43056, 0, 0, 0.39445],
    116: [0, 0.61508, 0, 0, 0.38889],
    117: [0, 0.43056, 0, 0, 0.55556],
    118: [0, 0.43056, 0.01389, 0, 0.52778],
    119: [0, 0.43056, 0.01389, 0, 0.72222],
    120: [0, 0.43056, 0, 0, 0.52778],
    121: [0.19444, 0.43056, 0.01389, 0, 0.52778],
    122: [0, 0.43056, 0, 0, 0.44445],
    123: [0.25, 0.75, 0, 0, 0.5],
    124: [0.25, 0.75, 0, 0, 0.27778],
    125: [0.25, 0.75, 0, 0, 0.5],
    126: [0.35, 0.31786, 0, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    163: [0, 0.69444, 0, 0, 0.76909],
    167: [0.19444, 0.69444, 0, 0, 0.44445],
    168: [0, 0.66786, 0, 0, 0.5],
    172: [0, 0.43056, 0, 0, 0.66667],
    176: [0, 0.69444, 0, 0, 0.75],
    177: [0.08333, 0.58333, 0, 0, 0.77778],
    182: [0.19444, 0.69444, 0, 0, 0.61111],
    184: [0.17014, 0, 0, 0, 0.44445],
    198: [0, 0.68333, 0, 0, 0.90278],
    215: [0.08333, 0.58333, 0, 0, 0.77778],
    216: [0.04861, 0.73194, 0, 0, 0.77778],
    223: [0, 0.69444, 0, 0, 0.5],
    230: [0, 0.43056, 0, 0, 0.72222],
    247: [0.08333, 0.58333, 0, 0, 0.77778],
    248: [0.09722, 0.52778, 0, 0, 0.5],
    305: [0, 0.43056, 0, 0, 0.27778],
    338: [0, 0.68333, 0, 0, 1.01389],
    339: [0, 0.43056, 0, 0, 0.77778],
    567: [0.19444, 0.43056, 0, 0, 0.30556],
    710: [0, 0.69444, 0, 0, 0.5],
    711: [0, 0.62847, 0, 0, 0.5],
    713: [0, 0.56778, 0, 0, 0.5],
    714: [0, 0.69444, 0, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0, 0, 0.5],
    729: [0, 0.66786, 0, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.75],
    732: [0, 0.66786, 0, 0, 0.5],
    733: [0, 0.69444, 0, 0, 0.5],
    915: [0, 0.68333, 0, 0, 0.625],
    916: [0, 0.68333, 0, 0, 0.83334],
    920: [0, 0.68333, 0, 0, 0.77778],
    923: [0, 0.68333, 0, 0, 0.69445],
    926: [0, 0.68333, 0, 0, 0.66667],
    928: [0, 0.68333, 0, 0, 0.75],
    931: [0, 0.68333, 0, 0, 0.72222],
    933: [0, 0.68333, 0, 0, 0.77778],
    934: [0, 0.68333, 0, 0, 0.72222],
    936: [0, 0.68333, 0, 0, 0.77778],
    937: [0, 0.68333, 0, 0, 0.72222],
    8211: [0, 0.43056, 0.02778, 0, 0.5],
    8212: [0, 0.43056, 0.02778, 0, 1],
    8216: [0, 0.69444, 0, 0, 0.27778],
    8217: [0, 0.69444, 0, 0, 0.27778],
    8220: [0, 0.69444, 0, 0, 0.5],
    8221: [0, 0.69444, 0, 0, 0.5],
    8224: [0.19444, 0.69444, 0, 0, 0.44445],
    8225: [0.19444, 0.69444, 0, 0, 0.44445],
    8230: [0, 0.123, 0, 0, 1.172],
    8242: [0, 0.55556, 0, 0, 0.275],
    8407: [0, 0.71444, 0.15382, 0, 0.5],
    8463: [0, 0.68889, 0, 0, 0.54028],
    8465: [0, 0.69444, 0, 0, 0.72222],
    8467: [0, 0.69444, 0, 0.11111, 0.41667],
    8472: [0.19444, 0.43056, 0, 0.11111, 0.63646],
    8476: [0, 0.69444, 0, 0, 0.72222],
    8501: [0, 0.69444, 0, 0, 0.61111],
    8592: [-0.13313, 0.36687, 0, 0, 1],
    8593: [0.19444, 0.69444, 0, 0, 0.5],
    8594: [-0.13313, 0.36687, 0, 0, 1],
    8595: [0.19444, 0.69444, 0, 0, 0.5],
    8596: [-0.13313, 0.36687, 0, 0, 1],
    8597: [0.25, 0.75, 0, 0, 0.5],
    8598: [0.19444, 0.69444, 0, 0, 1],
    8599: [0.19444, 0.69444, 0, 0, 1],
    8600: [0.19444, 0.69444, 0, 0, 1],
    8601: [0.19444, 0.69444, 0, 0, 1],
    8614: [0.011, 0.511, 0, 0, 1],
    8617: [0.011, 0.511, 0, 0, 1.126],
    8618: [0.011, 0.511, 0, 0, 1.126],
    8636: [-0.13313, 0.36687, 0, 0, 1],
    8637: [-0.13313, 0.36687, 0, 0, 1],
    8640: [-0.13313, 0.36687, 0, 0, 1],
    8641: [-0.13313, 0.36687, 0, 0, 1],
    8652: [0.011, 0.671, 0, 0, 1],
    8656: [-0.13313, 0.36687, 0, 0, 1],
    8657: [0.19444, 0.69444, 0, 0, 0.61111],
    8658: [-0.13313, 0.36687, 0, 0, 1],
    8659: [0.19444, 0.69444, 0, 0, 0.61111],
    8660: [-0.13313, 0.36687, 0, 0, 1],
    8661: [0.25, 0.75, 0, 0, 0.61111],
    8704: [0, 0.69444, 0, 0, 0.55556],
    8706: [0, 0.69444, 0.05556, 0.08334, 0.5309],
    8707: [0, 0.69444, 0, 0, 0.55556],
    8709: [0.05556, 0.75, 0, 0, 0.5],
    8711: [0, 0.68333, 0, 0, 0.83334],
    8712: [0.0391, 0.5391, 0, 0, 0.66667],
    8715: [0.0391, 0.5391, 0, 0, 0.66667],
    8722: [0.08333, 0.58333, 0, 0, 0.77778],
    8723: [0.08333, 0.58333, 0, 0, 0.77778],
    8725: [0.25, 0.75, 0, 0, 0.5],
    8726: [0.25, 0.75, 0, 0, 0.5],
    8727: [-0.03472, 0.46528, 0, 0, 0.5],
    8728: [-0.05555, 0.44445, 0, 0, 0.5],
    8729: [-0.05555, 0.44445, 0, 0, 0.5],
    8730: [0.2, 0.8, 0, 0, 0.83334],
    8733: [0, 0.43056, 0, 0, 0.77778],
    8734: [0, 0.43056, 0, 0, 1],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8739: [0.25, 0.75, 0, 0, 0.27778],
    8741: [0.25, 0.75, 0, 0, 0.5],
    8743: [0, 0.55556, 0, 0, 0.66667],
    8744: [0, 0.55556, 0, 0, 0.66667],
    8745: [0, 0.55556, 0, 0, 0.66667],
    8746: [0, 0.55556, 0, 0, 0.66667],
    8747: [0.19444, 0.69444, 0.11111, 0, 0.41667],
    8764: [-0.13313, 0.36687, 0, 0, 0.77778],
    8768: [0.19444, 0.69444, 0, 0, 0.27778],
    8771: [-0.03625, 0.46375, 0, 0, 0.77778],
    8773: [-0.022, 0.589, 0, 0, 0.778],
    8776: [-0.01688, 0.48312, 0, 0, 0.77778],
    8781: [-0.03625, 0.46375, 0, 0, 0.77778],
    8784: [-0.133, 0.673, 0, 0, 0.778],
    8801: [-0.03625, 0.46375, 0, 0, 0.77778],
    8804: [0.13597, 0.63597, 0, 0, 0.77778],
    8805: [0.13597, 0.63597, 0, 0, 0.77778],
    8810: [0.0391, 0.5391, 0, 0, 1],
    8811: [0.0391, 0.5391, 0, 0, 1],
    8826: [0.0391, 0.5391, 0, 0, 0.77778],
    8827: [0.0391, 0.5391, 0, 0, 0.77778],
    8834: [0.0391, 0.5391, 0, 0, 0.77778],
    8835: [0.0391, 0.5391, 0, 0, 0.77778],
    8838: [0.13597, 0.63597, 0, 0, 0.77778],
    8839: [0.13597, 0.63597, 0, 0, 0.77778],
    8846: [0, 0.55556, 0, 0, 0.66667],
    8849: [0.13597, 0.63597, 0, 0, 0.77778],
    8850: [0.13597, 0.63597, 0, 0, 0.77778],
    8851: [0, 0.55556, 0, 0, 0.66667],
    8852: [0, 0.55556, 0, 0, 0.66667],
    8853: [0.08333, 0.58333, 0, 0, 0.77778],
    8854: [0.08333, 0.58333, 0, 0, 0.77778],
    8855: [0.08333, 0.58333, 0, 0, 0.77778],
    8856: [0.08333, 0.58333, 0, 0, 0.77778],
    8857: [0.08333, 0.58333, 0, 0, 0.77778],
    8866: [0, 0.69444, 0, 0, 0.61111],
    8867: [0, 0.69444, 0, 0, 0.61111],
    8868: [0, 0.69444, 0, 0, 0.77778],
    8869: [0, 0.69444, 0, 0, 0.77778],
    8872: [0.249, 0.75, 0, 0, 0.867],
    8900: [-0.05555, 0.44445, 0, 0, 0.5],
    8901: [-0.05555, 0.44445, 0, 0, 0.27778],
    8902: [-0.03472, 0.46528, 0, 0, 0.5],
    8904: [5e-3, 0.505, 0, 0, 0.9],
    8942: [0.03, 0.903, 0, 0, 0.278],
    8943: [-0.19, 0.313, 0, 0, 1.172],
    8945: [-0.1, 0.823, 0, 0, 1.282],
    8968: [0.25, 0.75, 0, 0, 0.44445],
    8969: [0.25, 0.75, 0, 0, 0.44445],
    8970: [0.25, 0.75, 0, 0, 0.44445],
    8971: [0.25, 0.75, 0, 0, 0.44445],
    8994: [-0.14236, 0.35764, 0, 0, 1],
    8995: [-0.14236, 0.35764, 0, 0, 1],
    9136: [0.244, 0.744, 0, 0, 0.412],
    9137: [0.244, 0.745, 0, 0, 0.412],
    9651: [0.19444, 0.69444, 0, 0, 0.88889],
    9657: [-0.03472, 0.46528, 0, 0, 0.5],
    9661: [0.19444, 0.69444, 0, 0, 0.88889],
    9667: [-0.03472, 0.46528, 0, 0, 0.5],
    9711: [0.19444, 0.69444, 0, 0, 1],
    9824: [0.12963, 0.69444, 0, 0, 0.77778],
    9825: [0.12963, 0.69444, 0, 0, 0.77778],
    9826: [0.12963, 0.69444, 0, 0, 0.77778],
    9827: [0.12963, 0.69444, 0, 0, 0.77778],
    9837: [0, 0.75, 0, 0, 0.38889],
    9838: [0.19444, 0.69444, 0, 0, 0.38889],
    9839: [0.19444, 0.69444, 0, 0, 0.38889],
    10216: [0.25, 0.75, 0, 0, 0.38889],
    10217: [0.25, 0.75, 0, 0, 0.38889],
    10222: [0.244, 0.744, 0, 0, 0.412],
    10223: [0.244, 0.745, 0, 0, 0.412],
    10229: [0.011, 0.511, 0, 0, 1.609],
    10230: [0.011, 0.511, 0, 0, 1.638],
    10231: [0.011, 0.511, 0, 0, 1.859],
    10232: [0.024, 0.525, 0, 0, 1.609],
    10233: [0.024, 0.525, 0, 0, 1.638],
    10234: [0.024, 0.525, 0, 0, 1.858],
    10236: [0.011, 0.511, 0, 0, 1.638],
    10815: [0, 0.68333, 0, 0, 0.75],
    10927: [0.13597, 0.63597, 0, 0, 0.77778],
    10928: [0.13597, 0.63597, 0, 0, 0.77778],
    57376: [0.19444, 0.69444, 0, 0, 0]
  },
  "Math-BoldItalic": {
    32: [0, 0, 0, 0, 0.25],
    48: [0, 0.44444, 0, 0, 0.575],
    49: [0, 0.44444, 0, 0, 0.575],
    50: [0, 0.44444, 0, 0, 0.575],
    51: [0.19444, 0.44444, 0, 0, 0.575],
    52: [0.19444, 0.44444, 0, 0, 0.575],
    53: [0.19444, 0.44444, 0, 0, 0.575],
    54: [0, 0.64444, 0, 0, 0.575],
    55: [0.19444, 0.44444, 0, 0, 0.575],
    56: [0, 0.64444, 0, 0, 0.575],
    57: [0.19444, 0.44444, 0, 0, 0.575],
    65: [0, 0.68611, 0, 0, 0.86944],
    66: [0, 0.68611, 0.04835, 0, 0.8664],
    67: [0, 0.68611, 0.06979, 0, 0.81694],
    68: [0, 0.68611, 0.03194, 0, 0.93812],
    69: [0, 0.68611, 0.05451, 0, 0.81007],
    70: [0, 0.68611, 0.15972, 0, 0.68889],
    71: [0, 0.68611, 0, 0, 0.88673],
    72: [0, 0.68611, 0.08229, 0, 0.98229],
    73: [0, 0.68611, 0.07778, 0, 0.51111],
    74: [0, 0.68611, 0.10069, 0, 0.63125],
    75: [0, 0.68611, 0.06979, 0, 0.97118],
    76: [0, 0.68611, 0, 0, 0.75555],
    77: [0, 0.68611, 0.11424, 0, 1.14201],
    78: [0, 0.68611, 0.11424, 0, 0.95034],
    79: [0, 0.68611, 0.03194, 0, 0.83666],
    80: [0, 0.68611, 0.15972, 0, 0.72309],
    81: [0.19444, 0.68611, 0, 0, 0.86861],
    82: [0, 0.68611, 421e-5, 0, 0.87235],
    83: [0, 0.68611, 0.05382, 0, 0.69271],
    84: [0, 0.68611, 0.15972, 0, 0.63663],
    85: [0, 0.68611, 0.11424, 0, 0.80027],
    86: [0, 0.68611, 0.25555, 0, 0.67778],
    87: [0, 0.68611, 0.15972, 0, 1.09305],
    88: [0, 0.68611, 0.07778, 0, 0.94722],
    89: [0, 0.68611, 0.25555, 0, 0.67458],
    90: [0, 0.68611, 0.06979, 0, 0.77257],
    97: [0, 0.44444, 0, 0, 0.63287],
    98: [0, 0.69444, 0, 0, 0.52083],
    99: [0, 0.44444, 0, 0, 0.51342],
    100: [0, 0.69444, 0, 0, 0.60972],
    101: [0, 0.44444, 0, 0, 0.55361],
    102: [0.19444, 0.69444, 0.11042, 0, 0.56806],
    103: [0.19444, 0.44444, 0.03704, 0, 0.5449],
    104: [0, 0.69444, 0, 0, 0.66759],
    105: [0, 0.69326, 0, 0, 0.4048],
    106: [0.19444, 0.69326, 0.0622, 0, 0.47083],
    107: [0, 0.69444, 0.01852, 0, 0.6037],
    108: [0, 0.69444, 88e-4, 0, 0.34815],
    109: [0, 0.44444, 0, 0, 1.0324],
    110: [0, 0.44444, 0, 0, 0.71296],
    111: [0, 0.44444, 0, 0, 0.58472],
    112: [0.19444, 0.44444, 0, 0, 0.60092],
    113: [0.19444, 0.44444, 0.03704, 0, 0.54213],
    114: [0, 0.44444, 0.03194, 0, 0.5287],
    115: [0, 0.44444, 0, 0, 0.53125],
    116: [0, 0.63492, 0, 0, 0.41528],
    117: [0, 0.44444, 0, 0, 0.68102],
    118: [0, 0.44444, 0.03704, 0, 0.56666],
    119: [0, 0.44444, 0.02778, 0, 0.83148],
    120: [0, 0.44444, 0, 0, 0.65903],
    121: [0.19444, 0.44444, 0.03704, 0, 0.59028],
    122: [0, 0.44444, 0.04213, 0, 0.55509],
    160: [0, 0, 0, 0, 0.25],
    915: [0, 0.68611, 0.15972, 0, 0.65694],
    916: [0, 0.68611, 0, 0, 0.95833],
    920: [0, 0.68611, 0.03194, 0, 0.86722],
    923: [0, 0.68611, 0, 0, 0.80555],
    926: [0, 0.68611, 0.07458, 0, 0.84125],
    928: [0, 0.68611, 0.08229, 0, 0.98229],
    931: [0, 0.68611, 0.05451, 0, 0.88507],
    933: [0, 0.68611, 0.15972, 0, 0.67083],
    934: [0, 0.68611, 0, 0, 0.76666],
    936: [0, 0.68611, 0.11653, 0, 0.71402],
    937: [0, 0.68611, 0.04835, 0, 0.8789],
    945: [0, 0.44444, 0, 0, 0.76064],
    946: [0.19444, 0.69444, 0.03403, 0, 0.65972],
    947: [0.19444, 0.44444, 0.06389, 0, 0.59003],
    948: [0, 0.69444, 0.03819, 0, 0.52222],
    949: [0, 0.44444, 0, 0, 0.52882],
    950: [0.19444, 0.69444, 0.06215, 0, 0.50833],
    951: [0.19444, 0.44444, 0.03704, 0, 0.6],
    952: [0, 0.69444, 0.03194, 0, 0.5618],
    953: [0, 0.44444, 0, 0, 0.41204],
    954: [0, 0.44444, 0, 0, 0.66759],
    955: [0, 0.69444, 0, 0, 0.67083],
    956: [0.19444, 0.44444, 0, 0, 0.70787],
    957: [0, 0.44444, 0.06898, 0, 0.57685],
    958: [0.19444, 0.69444, 0.03021, 0, 0.50833],
    959: [0, 0.44444, 0, 0, 0.58472],
    960: [0, 0.44444, 0.03704, 0, 0.68241],
    961: [0.19444, 0.44444, 0, 0, 0.6118],
    962: [0.09722, 0.44444, 0.07917, 0, 0.42361],
    963: [0, 0.44444, 0.03704, 0, 0.68588],
    964: [0, 0.44444, 0.13472, 0, 0.52083],
    965: [0, 0.44444, 0.03704, 0, 0.63055],
    966: [0.19444, 0.44444, 0, 0, 0.74722],
    967: [0.19444, 0.44444, 0, 0, 0.71805],
    968: [0.19444, 0.69444, 0.03704, 0, 0.75833],
    969: [0, 0.44444, 0.03704, 0, 0.71782],
    977: [0, 0.69444, 0, 0, 0.69155],
    981: [0.19444, 0.69444, 0, 0, 0.7125],
    982: [0, 0.44444, 0.03194, 0, 0.975],
    1009: [0.19444, 0.44444, 0, 0, 0.6118],
    1013: [0, 0.44444, 0, 0, 0.48333],
    57649: [0, 0.44444, 0, 0, 0.39352],
    57911: [0.19444, 0.44444, 0, 0, 0.43889]
  },
  "Math-Italic": {
    32: [0, 0, 0, 0, 0.25],
    48: [0, 0.43056, 0, 0, 0.5],
    49: [0, 0.43056, 0, 0, 0.5],
    50: [0, 0.43056, 0, 0, 0.5],
    51: [0.19444, 0.43056, 0, 0, 0.5],
    52: [0.19444, 0.43056, 0, 0, 0.5],
    53: [0.19444, 0.43056, 0, 0, 0.5],
    54: [0, 0.64444, 0, 0, 0.5],
    55: [0.19444, 0.43056, 0, 0, 0.5],
    56: [0, 0.64444, 0, 0, 0.5],
    57: [0.19444, 0.43056, 0, 0, 0.5],
    65: [0, 0.68333, 0, 0.13889, 0.75],
    66: [0, 0.68333, 0.05017, 0.08334, 0.75851],
    67: [0, 0.68333, 0.07153, 0.08334, 0.71472],
    68: [0, 0.68333, 0.02778, 0.05556, 0.82792],
    69: [0, 0.68333, 0.05764, 0.08334, 0.7382],
    70: [0, 0.68333, 0.13889, 0.08334, 0.64306],
    71: [0, 0.68333, 0, 0.08334, 0.78625],
    72: [0, 0.68333, 0.08125, 0.05556, 0.83125],
    73: [0, 0.68333, 0.07847, 0.11111, 0.43958],
    74: [0, 0.68333, 0.09618, 0.16667, 0.55451],
    75: [0, 0.68333, 0.07153, 0.05556, 0.84931],
    76: [0, 0.68333, 0, 0.02778, 0.68056],
    77: [0, 0.68333, 0.10903, 0.08334, 0.97014],
    78: [0, 0.68333, 0.10903, 0.08334, 0.80347],
    79: [0, 0.68333, 0.02778, 0.08334, 0.76278],
    80: [0, 0.68333, 0.13889, 0.08334, 0.64201],
    81: [0.19444, 0.68333, 0, 0.08334, 0.79056],
    82: [0, 0.68333, 773e-5, 0.08334, 0.75929],
    83: [0, 0.68333, 0.05764, 0.08334, 0.6132],
    84: [0, 0.68333, 0.13889, 0.08334, 0.58438],
    85: [0, 0.68333, 0.10903, 0.02778, 0.68278],
    86: [0, 0.68333, 0.22222, 0, 0.58333],
    87: [0, 0.68333, 0.13889, 0, 0.94445],
    88: [0, 0.68333, 0.07847, 0.08334, 0.82847],
    89: [0, 0.68333, 0.22222, 0, 0.58056],
    90: [0, 0.68333, 0.07153, 0.08334, 0.68264],
    97: [0, 0.43056, 0, 0, 0.52859],
    98: [0, 0.69444, 0, 0, 0.42917],
    99: [0, 0.43056, 0, 0.05556, 0.43276],
    100: [0, 0.69444, 0, 0.16667, 0.52049],
    101: [0, 0.43056, 0, 0.05556, 0.46563],
    102: [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
    103: [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
    104: [0, 0.69444, 0, 0, 0.57616],
    105: [0, 0.65952, 0, 0, 0.34451],
    106: [0.19444, 0.65952, 0.05724, 0, 0.41181],
    107: [0, 0.69444, 0.03148, 0, 0.5206],
    108: [0, 0.69444, 0.01968, 0.08334, 0.29838],
    109: [0, 0.43056, 0, 0, 0.87801],
    110: [0, 0.43056, 0, 0, 0.60023],
    111: [0, 0.43056, 0, 0.05556, 0.48472],
    112: [0.19444, 0.43056, 0, 0.08334, 0.50313],
    113: [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
    114: [0, 0.43056, 0.02778, 0.05556, 0.45116],
    115: [0, 0.43056, 0, 0.05556, 0.46875],
    116: [0, 0.61508, 0, 0.08334, 0.36111],
    117: [0, 0.43056, 0, 0.02778, 0.57246],
    118: [0, 0.43056, 0.03588, 0.02778, 0.48472],
    119: [0, 0.43056, 0.02691, 0.08334, 0.71592],
    120: [0, 0.43056, 0, 0.02778, 0.57153],
    121: [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
    122: [0, 0.43056, 0.04398, 0.05556, 0.46505],
    160: [0, 0, 0, 0, 0.25],
    915: [0, 0.68333, 0.13889, 0.08334, 0.61528],
    916: [0, 0.68333, 0, 0.16667, 0.83334],
    920: [0, 0.68333, 0.02778, 0.08334, 0.76278],
    923: [0, 0.68333, 0, 0.16667, 0.69445],
    926: [0, 0.68333, 0.07569, 0.08334, 0.74236],
    928: [0, 0.68333, 0.08125, 0.05556, 0.83125],
    931: [0, 0.68333, 0.05764, 0.08334, 0.77986],
    933: [0, 0.68333, 0.13889, 0.05556, 0.58333],
    934: [0, 0.68333, 0, 0.08334, 0.66667],
    936: [0, 0.68333, 0.11, 0.05556, 0.61222],
    937: [0, 0.68333, 0.05017, 0.08334, 0.7724],
    945: [0, 0.43056, 37e-4, 0.02778, 0.6397],
    946: [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
    947: [0.19444, 0.43056, 0.05556, 0, 0.51773],
    948: [0, 0.69444, 0.03785, 0.05556, 0.44444],
    949: [0, 0.43056, 0, 0.08334, 0.46632],
    950: [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
    951: [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
    952: [0, 0.69444, 0.02778, 0.08334, 0.46944],
    953: [0, 0.43056, 0, 0.05556, 0.35394],
    954: [0, 0.43056, 0, 0, 0.57616],
    955: [0, 0.69444, 0, 0, 0.58334],
    956: [0.19444, 0.43056, 0, 0.02778, 0.60255],
    957: [0, 0.43056, 0.06366, 0.02778, 0.49398],
    958: [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
    959: [0, 0.43056, 0, 0.05556, 0.48472],
    960: [0, 0.43056, 0.03588, 0, 0.57003],
    961: [0.19444, 0.43056, 0, 0.08334, 0.51702],
    962: [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
    963: [0, 0.43056, 0.03588, 0, 0.57141],
    964: [0, 0.43056, 0.1132, 0.02778, 0.43715],
    965: [0, 0.43056, 0.03588, 0.02778, 0.54028],
    966: [0.19444, 0.43056, 0, 0.08334, 0.65417],
    967: [0.19444, 0.43056, 0, 0.05556, 0.62569],
    968: [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
    969: [0, 0.43056, 0.03588, 0, 0.62245],
    977: [0, 0.69444, 0, 0.08334, 0.59144],
    981: [0.19444, 0.69444, 0, 0.08334, 0.59583],
    982: [0, 0.43056, 0.02778, 0, 0.82813],
    1009: [0.19444, 0.43056, 0, 0.08334, 0.51702],
    1013: [0, 0.43056, 0, 0.05556, 0.4059],
    57649: [0, 0.43056, 0, 0.02778, 0.32246],
    57911: [0.19444, 0.43056, 0, 0.08334, 0.38403]
  },
  "SansSerif-Bold": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.36667],
    34: [0, 0.69444, 0, 0, 0.55834],
    35: [0.19444, 0.69444, 0, 0, 0.91667],
    36: [0.05556, 0.75, 0, 0, 0.55],
    37: [0.05556, 0.75, 0, 0, 1.02912],
    38: [0, 0.69444, 0, 0, 0.83056],
    39: [0, 0.69444, 0, 0, 0.30556],
    40: [0.25, 0.75, 0, 0, 0.42778],
    41: [0.25, 0.75, 0, 0, 0.42778],
    42: [0, 0.75, 0, 0, 0.55],
    43: [0.11667, 0.61667, 0, 0, 0.85556],
    44: [0.10556, 0.13056, 0, 0, 0.30556],
    45: [0, 0.45833, 0, 0, 0.36667],
    46: [0, 0.13056, 0, 0, 0.30556],
    47: [0.25, 0.75, 0, 0, 0.55],
    48: [0, 0.69444, 0, 0, 0.55],
    49: [0, 0.69444, 0, 0, 0.55],
    50: [0, 0.69444, 0, 0, 0.55],
    51: [0, 0.69444, 0, 0, 0.55],
    52: [0, 0.69444, 0, 0, 0.55],
    53: [0, 0.69444, 0, 0, 0.55],
    54: [0, 0.69444, 0, 0, 0.55],
    55: [0, 0.69444, 0, 0, 0.55],
    56: [0, 0.69444, 0, 0, 0.55],
    57: [0, 0.69444, 0, 0, 0.55],
    58: [0, 0.45833, 0, 0, 0.30556],
    59: [0.10556, 0.45833, 0, 0, 0.30556],
    61: [-0.09375, 0.40625, 0, 0, 0.85556],
    63: [0, 0.69444, 0, 0, 0.51945],
    64: [0, 0.69444, 0, 0, 0.73334],
    65: [0, 0.69444, 0, 0, 0.73334],
    66: [0, 0.69444, 0, 0, 0.73334],
    67: [0, 0.69444, 0, 0, 0.70278],
    68: [0, 0.69444, 0, 0, 0.79445],
    69: [0, 0.69444, 0, 0, 0.64167],
    70: [0, 0.69444, 0, 0, 0.61111],
    71: [0, 0.69444, 0, 0, 0.73334],
    72: [0, 0.69444, 0, 0, 0.79445],
    73: [0, 0.69444, 0, 0, 0.33056],
    74: [0, 0.69444, 0, 0, 0.51945],
    75: [0, 0.69444, 0, 0, 0.76389],
    76: [0, 0.69444, 0, 0, 0.58056],
    77: [0, 0.69444, 0, 0, 0.97778],
    78: [0, 0.69444, 0, 0, 0.79445],
    79: [0, 0.69444, 0, 0, 0.79445],
    80: [0, 0.69444, 0, 0, 0.70278],
    81: [0.10556, 0.69444, 0, 0, 0.79445],
    82: [0, 0.69444, 0, 0, 0.70278],
    83: [0, 0.69444, 0, 0, 0.61111],
    84: [0, 0.69444, 0, 0, 0.73334],
    85: [0, 0.69444, 0, 0, 0.76389],
    86: [0, 0.69444, 0.01528, 0, 0.73334],
    87: [0, 0.69444, 0.01528, 0, 1.03889],
    88: [0, 0.69444, 0, 0, 0.73334],
    89: [0, 0.69444, 0.0275, 0, 0.73334],
    90: [0, 0.69444, 0, 0, 0.67223],
    91: [0.25, 0.75, 0, 0, 0.34306],
    93: [0.25, 0.75, 0, 0, 0.34306],
    94: [0, 0.69444, 0, 0, 0.55],
    95: [0.35, 0.10833, 0.03056, 0, 0.55],
    97: [0, 0.45833, 0, 0, 0.525],
    98: [0, 0.69444, 0, 0, 0.56111],
    99: [0, 0.45833, 0, 0, 0.48889],
    100: [0, 0.69444, 0, 0, 0.56111],
    101: [0, 0.45833, 0, 0, 0.51111],
    102: [0, 0.69444, 0.07639, 0, 0.33611],
    103: [0.19444, 0.45833, 0.01528, 0, 0.55],
    104: [0, 0.69444, 0, 0, 0.56111],
    105: [0, 0.69444, 0, 0, 0.25556],
    106: [0.19444, 0.69444, 0, 0, 0.28611],
    107: [0, 0.69444, 0, 0, 0.53056],
    108: [0, 0.69444, 0, 0, 0.25556],
    109: [0, 0.45833, 0, 0, 0.86667],
    110: [0, 0.45833, 0, 0, 0.56111],
    111: [0, 0.45833, 0, 0, 0.55],
    112: [0.19444, 0.45833, 0, 0, 0.56111],
    113: [0.19444, 0.45833, 0, 0, 0.56111],
    114: [0, 0.45833, 0.01528, 0, 0.37222],
    115: [0, 0.45833, 0, 0, 0.42167],
    116: [0, 0.58929, 0, 0, 0.40417],
    117: [0, 0.45833, 0, 0, 0.56111],
    118: [0, 0.45833, 0.01528, 0, 0.5],
    119: [0, 0.45833, 0.01528, 0, 0.74445],
    120: [0, 0.45833, 0, 0, 0.5],
    121: [0.19444, 0.45833, 0.01528, 0, 0.5],
    122: [0, 0.45833, 0, 0, 0.47639],
    126: [0.35, 0.34444, 0, 0, 0.55],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.69444, 0, 0, 0.55],
    176: [0, 0.69444, 0, 0, 0.73334],
    180: [0, 0.69444, 0, 0, 0.55],
    184: [0.17014, 0, 0, 0, 0.48889],
    305: [0, 0.45833, 0, 0, 0.25556],
    567: [0.19444, 0.45833, 0, 0, 0.28611],
    710: [0, 0.69444, 0, 0, 0.55],
    711: [0, 0.63542, 0, 0, 0.55],
    713: [0, 0.63778, 0, 0, 0.55],
    728: [0, 0.69444, 0, 0, 0.55],
    729: [0, 0.69444, 0, 0, 0.30556],
    730: [0, 0.69444, 0, 0, 0.73334],
    732: [0, 0.69444, 0, 0, 0.55],
    733: [0, 0.69444, 0, 0, 0.55],
    915: [0, 0.69444, 0, 0, 0.58056],
    916: [0, 0.69444, 0, 0, 0.91667],
    920: [0, 0.69444, 0, 0, 0.85556],
    923: [0, 0.69444, 0, 0, 0.67223],
    926: [0, 0.69444, 0, 0, 0.73334],
    928: [0, 0.69444, 0, 0, 0.79445],
    931: [0, 0.69444, 0, 0, 0.79445],
    933: [0, 0.69444, 0, 0, 0.85556],
    934: [0, 0.69444, 0, 0, 0.79445],
    936: [0, 0.69444, 0, 0, 0.85556],
    937: [0, 0.69444, 0, 0, 0.79445],
    8211: [0, 0.45833, 0.03056, 0, 0.55],
    8212: [0, 0.45833, 0.03056, 0, 1.10001],
    8216: [0, 0.69444, 0, 0, 0.30556],
    8217: [0, 0.69444, 0, 0, 0.30556],
    8220: [0, 0.69444, 0, 0, 0.55834],
    8221: [0, 0.69444, 0, 0, 0.55834]
  },
  "SansSerif-Italic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.05733, 0, 0.31945],
    34: [0, 0.69444, 316e-5, 0, 0.5],
    35: [0.19444, 0.69444, 0.05087, 0, 0.83334],
    36: [0.05556, 0.75, 0.11156, 0, 0.5],
    37: [0.05556, 0.75, 0.03126, 0, 0.83334],
    38: [0, 0.69444, 0.03058, 0, 0.75834],
    39: [0, 0.69444, 0.07816, 0, 0.27778],
    40: [0.25, 0.75, 0.13164, 0, 0.38889],
    41: [0.25, 0.75, 0.02536, 0, 0.38889],
    42: [0, 0.75, 0.11775, 0, 0.5],
    43: [0.08333, 0.58333, 0.02536, 0, 0.77778],
    44: [0.125, 0.08333, 0, 0, 0.27778],
    45: [0, 0.44444, 0.01946, 0, 0.33333],
    46: [0, 0.08333, 0, 0, 0.27778],
    47: [0.25, 0.75, 0.13164, 0, 0.5],
    48: [0, 0.65556, 0.11156, 0, 0.5],
    49: [0, 0.65556, 0.11156, 0, 0.5],
    50: [0, 0.65556, 0.11156, 0, 0.5],
    51: [0, 0.65556, 0.11156, 0, 0.5],
    52: [0, 0.65556, 0.11156, 0, 0.5],
    53: [0, 0.65556, 0.11156, 0, 0.5],
    54: [0, 0.65556, 0.11156, 0, 0.5],
    55: [0, 0.65556, 0.11156, 0, 0.5],
    56: [0, 0.65556, 0.11156, 0, 0.5],
    57: [0, 0.65556, 0.11156, 0, 0.5],
    58: [0, 0.44444, 0.02502, 0, 0.27778],
    59: [0.125, 0.44444, 0.02502, 0, 0.27778],
    61: [-0.13, 0.37, 0.05087, 0, 0.77778],
    63: [0, 0.69444, 0.11809, 0, 0.47222],
    64: [0, 0.69444, 0.07555, 0, 0.66667],
    65: [0, 0.69444, 0, 0, 0.66667],
    66: [0, 0.69444, 0.08293, 0, 0.66667],
    67: [0, 0.69444, 0.11983, 0, 0.63889],
    68: [0, 0.69444, 0.07555, 0, 0.72223],
    69: [0, 0.69444, 0.11983, 0, 0.59722],
    70: [0, 0.69444, 0.13372, 0, 0.56945],
    71: [0, 0.69444, 0.11983, 0, 0.66667],
    72: [0, 0.69444, 0.08094, 0, 0.70834],
    73: [0, 0.69444, 0.13372, 0, 0.27778],
    74: [0, 0.69444, 0.08094, 0, 0.47222],
    75: [0, 0.69444, 0.11983, 0, 0.69445],
    76: [0, 0.69444, 0, 0, 0.54167],
    77: [0, 0.69444, 0.08094, 0, 0.875],
    78: [0, 0.69444, 0.08094, 0, 0.70834],
    79: [0, 0.69444, 0.07555, 0, 0.73611],
    80: [0, 0.69444, 0.08293, 0, 0.63889],
    81: [0.125, 0.69444, 0.07555, 0, 0.73611],
    82: [0, 0.69444, 0.08293, 0, 0.64584],
    83: [0, 0.69444, 0.09205, 0, 0.55556],
    84: [0, 0.69444, 0.13372, 0, 0.68056],
    85: [0, 0.69444, 0.08094, 0, 0.6875],
    86: [0, 0.69444, 0.1615, 0, 0.66667],
    87: [0, 0.69444, 0.1615, 0, 0.94445],
    88: [0, 0.69444, 0.13372, 0, 0.66667],
    89: [0, 0.69444, 0.17261, 0, 0.66667],
    90: [0, 0.69444, 0.11983, 0, 0.61111],
    91: [0.25, 0.75, 0.15942, 0, 0.28889],
    93: [0.25, 0.75, 0.08719, 0, 0.28889],
    94: [0, 0.69444, 0.0799, 0, 0.5],
    95: [0.35, 0.09444, 0.08616, 0, 0.5],
    97: [0, 0.44444, 981e-5, 0, 0.48056],
    98: [0, 0.69444, 0.03057, 0, 0.51667],
    99: [0, 0.44444, 0.08336, 0, 0.44445],
    100: [0, 0.69444, 0.09483, 0, 0.51667],
    101: [0, 0.44444, 0.06778, 0, 0.44445],
    102: [0, 0.69444, 0.21705, 0, 0.30556],
    103: [0.19444, 0.44444, 0.10836, 0, 0.5],
    104: [0, 0.69444, 0.01778, 0, 0.51667],
    105: [0, 0.67937, 0.09718, 0, 0.23889],
    106: [0.19444, 0.67937, 0.09162, 0, 0.26667],
    107: [0, 0.69444, 0.08336, 0, 0.48889],
    108: [0, 0.69444, 0.09483, 0, 0.23889],
    109: [0, 0.44444, 0.01778, 0, 0.79445],
    110: [0, 0.44444, 0.01778, 0, 0.51667],
    111: [0, 0.44444, 0.06613, 0, 0.5],
    112: [0.19444, 0.44444, 0.0389, 0, 0.51667],
    113: [0.19444, 0.44444, 0.04169, 0, 0.51667],
    114: [0, 0.44444, 0.10836, 0, 0.34167],
    115: [0, 0.44444, 0.0778, 0, 0.38333],
    116: [0, 0.57143, 0.07225, 0, 0.36111],
    117: [0, 0.44444, 0.04169, 0, 0.51667],
    118: [0, 0.44444, 0.10836, 0, 0.46111],
    119: [0, 0.44444, 0.10836, 0, 0.68334],
    120: [0, 0.44444, 0.09169, 0, 0.46111],
    121: [0.19444, 0.44444, 0.10836, 0, 0.46111],
    122: [0, 0.44444, 0.08752, 0, 0.43472],
    126: [0.35, 0.32659, 0.08826, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.67937, 0.06385, 0, 0.5],
    176: [0, 0.69444, 0, 0, 0.73752],
    184: [0.17014, 0, 0, 0, 0.44445],
    305: [0, 0.44444, 0.04169, 0, 0.23889],
    567: [0.19444, 0.44444, 0.04169, 0, 0.26667],
    710: [0, 0.69444, 0.0799, 0, 0.5],
    711: [0, 0.63194, 0.08432, 0, 0.5],
    713: [0, 0.60889, 0.08776, 0, 0.5],
    714: [0, 0.69444, 0.09205, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0.09483, 0, 0.5],
    729: [0, 0.67937, 0.07774, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.73752],
    732: [0, 0.67659, 0.08826, 0, 0.5],
    733: [0, 0.69444, 0.09205, 0, 0.5],
    915: [0, 0.69444, 0.13372, 0, 0.54167],
    916: [0, 0.69444, 0, 0, 0.83334],
    920: [0, 0.69444, 0.07555, 0, 0.77778],
    923: [0, 0.69444, 0, 0, 0.61111],
    926: [0, 0.69444, 0.12816, 0, 0.66667],
    928: [0, 0.69444, 0.08094, 0, 0.70834],
    931: [0, 0.69444, 0.11983, 0, 0.72222],
    933: [0, 0.69444, 0.09031, 0, 0.77778],
    934: [0, 0.69444, 0.04603, 0, 0.72222],
    936: [0, 0.69444, 0.09031, 0, 0.77778],
    937: [0, 0.69444, 0.08293, 0, 0.72222],
    8211: [0, 0.44444, 0.08616, 0, 0.5],
    8212: [0, 0.44444, 0.08616, 0, 1],
    8216: [0, 0.69444, 0.07816, 0, 0.27778],
    8217: [0, 0.69444, 0.07816, 0, 0.27778],
    8220: [0, 0.69444, 0.14205, 0, 0.5],
    8221: [0, 0.69444, 316e-5, 0, 0.5]
  },
  "SansSerif-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.31945],
    34: [0, 0.69444, 0, 0, 0.5],
    35: [0.19444, 0.69444, 0, 0, 0.83334],
    36: [0.05556, 0.75, 0, 0, 0.5],
    37: [0.05556, 0.75, 0, 0, 0.83334],
    38: [0, 0.69444, 0, 0, 0.75834],
    39: [0, 0.69444, 0, 0, 0.27778],
    40: [0.25, 0.75, 0, 0, 0.38889],
    41: [0.25, 0.75, 0, 0, 0.38889],
    42: [0, 0.75, 0, 0, 0.5],
    43: [0.08333, 0.58333, 0, 0, 0.77778],
    44: [0.125, 0.08333, 0, 0, 0.27778],
    45: [0, 0.44444, 0, 0, 0.33333],
    46: [0, 0.08333, 0, 0, 0.27778],
    47: [0.25, 0.75, 0, 0, 0.5],
    48: [0, 0.65556, 0, 0, 0.5],
    49: [0, 0.65556, 0, 0, 0.5],
    50: [0, 0.65556, 0, 0, 0.5],
    51: [0, 0.65556, 0, 0, 0.5],
    52: [0, 0.65556, 0, 0, 0.5],
    53: [0, 0.65556, 0, 0, 0.5],
    54: [0, 0.65556, 0, 0, 0.5],
    55: [0, 0.65556, 0, 0, 0.5],
    56: [0, 0.65556, 0, 0, 0.5],
    57: [0, 0.65556, 0, 0, 0.5],
    58: [0, 0.44444, 0, 0, 0.27778],
    59: [0.125, 0.44444, 0, 0, 0.27778],
    61: [-0.13, 0.37, 0, 0, 0.77778],
    63: [0, 0.69444, 0, 0, 0.47222],
    64: [0, 0.69444, 0, 0, 0.66667],
    65: [0, 0.69444, 0, 0, 0.66667],
    66: [0, 0.69444, 0, 0, 0.66667],
    67: [0, 0.69444, 0, 0, 0.63889],
    68: [0, 0.69444, 0, 0, 0.72223],
    69: [0, 0.69444, 0, 0, 0.59722],
    70: [0, 0.69444, 0, 0, 0.56945],
    71: [0, 0.69444, 0, 0, 0.66667],
    72: [0, 0.69444, 0, 0, 0.70834],
    73: [0, 0.69444, 0, 0, 0.27778],
    74: [0, 0.69444, 0, 0, 0.47222],
    75: [0, 0.69444, 0, 0, 0.69445],
    76: [0, 0.69444, 0, 0, 0.54167],
    77: [0, 0.69444, 0, 0, 0.875],
    78: [0, 0.69444, 0, 0, 0.70834],
    79: [0, 0.69444, 0, 0, 0.73611],
    80: [0, 0.69444, 0, 0, 0.63889],
    81: [0.125, 0.69444, 0, 0, 0.73611],
    82: [0, 0.69444, 0, 0, 0.64584],
    83: [0, 0.69444, 0, 0, 0.55556],
    84: [0, 0.69444, 0, 0, 0.68056],
    85: [0, 0.69444, 0, 0, 0.6875],
    86: [0, 0.69444, 0.01389, 0, 0.66667],
    87: [0, 0.69444, 0.01389, 0, 0.94445],
    88: [0, 0.69444, 0, 0, 0.66667],
    89: [0, 0.69444, 0.025, 0, 0.66667],
    90: [0, 0.69444, 0, 0, 0.61111],
    91: [0.25, 0.75, 0, 0, 0.28889],
    93: [0.25, 0.75, 0, 0, 0.28889],
    94: [0, 0.69444, 0, 0, 0.5],
    95: [0.35, 0.09444, 0.02778, 0, 0.5],
    97: [0, 0.44444, 0, 0, 0.48056],
    98: [0, 0.69444, 0, 0, 0.51667],
    99: [0, 0.44444, 0, 0, 0.44445],
    100: [0, 0.69444, 0, 0, 0.51667],
    101: [0, 0.44444, 0, 0, 0.44445],
    102: [0, 0.69444, 0.06944, 0, 0.30556],
    103: [0.19444, 0.44444, 0.01389, 0, 0.5],
    104: [0, 0.69444, 0, 0, 0.51667],
    105: [0, 0.67937, 0, 0, 0.23889],
    106: [0.19444, 0.67937, 0, 0, 0.26667],
    107: [0, 0.69444, 0, 0, 0.48889],
    108: [0, 0.69444, 0, 0, 0.23889],
    109: [0, 0.44444, 0, 0, 0.79445],
    110: [0, 0.44444, 0, 0, 0.51667],
    111: [0, 0.44444, 0, 0, 0.5],
    112: [0.19444, 0.44444, 0, 0, 0.51667],
    113: [0.19444, 0.44444, 0, 0, 0.51667],
    114: [0, 0.44444, 0.01389, 0, 0.34167],
    115: [0, 0.44444, 0, 0, 0.38333],
    116: [0, 0.57143, 0, 0, 0.36111],
    117: [0, 0.44444, 0, 0, 0.51667],
    118: [0, 0.44444, 0.01389, 0, 0.46111],
    119: [0, 0.44444, 0.01389, 0, 0.68334],
    120: [0, 0.44444, 0, 0, 0.46111],
    121: [0.19444, 0.44444, 0.01389, 0, 0.46111],
    122: [0, 0.44444, 0, 0, 0.43472],
    126: [0.35, 0.32659, 0, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.67937, 0, 0, 0.5],
    176: [0, 0.69444, 0, 0, 0.66667],
    184: [0.17014, 0, 0, 0, 0.44445],
    305: [0, 0.44444, 0, 0, 0.23889],
    567: [0.19444, 0.44444, 0, 0, 0.26667],
    710: [0, 0.69444, 0, 0, 0.5],
    711: [0, 0.63194, 0, 0, 0.5],
    713: [0, 0.60889, 0, 0, 0.5],
    714: [0, 0.69444, 0, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0, 0, 0.5],
    729: [0, 0.67937, 0, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.66667],
    732: [0, 0.67659, 0, 0, 0.5],
    733: [0, 0.69444, 0, 0, 0.5],
    915: [0, 0.69444, 0, 0, 0.54167],
    916: [0, 0.69444, 0, 0, 0.83334],
    920: [0, 0.69444, 0, 0, 0.77778],
    923: [0, 0.69444, 0, 0, 0.61111],
    926: [0, 0.69444, 0, 0, 0.66667],
    928: [0, 0.69444, 0, 0, 0.70834],
    931: [0, 0.69444, 0, 0, 0.72222],
    933: [0, 0.69444, 0, 0, 0.77778],
    934: [0, 0.69444, 0, 0, 0.72222],
    936: [0, 0.69444, 0, 0, 0.77778],
    937: [0, 0.69444, 0, 0, 0.72222],
    8211: [0, 0.44444, 0.02778, 0, 0.5],
    8212: [0, 0.44444, 0.02778, 0, 1],
    8216: [0, 0.69444, 0, 0, 0.27778],
    8217: [0, 0.69444, 0, 0, 0.27778],
    8220: [0, 0.69444, 0, 0, 0.5],
    8221: [0, 0.69444, 0, 0, 0.5]
  },
  "Script-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.7, 0.22925, 0, 0.80253],
    66: [0, 0.7, 0.04087, 0, 0.90757],
    67: [0, 0.7, 0.1689, 0, 0.66619],
    68: [0, 0.7, 0.09371, 0, 0.77443],
    69: [0, 0.7, 0.18583, 0, 0.56162],
    70: [0, 0.7, 0.13634, 0, 0.89544],
    71: [0, 0.7, 0.17322, 0, 0.60961],
    72: [0, 0.7, 0.29694, 0, 0.96919],
    73: [0, 0.7, 0.19189, 0, 0.80907],
    74: [0.27778, 0.7, 0.19189, 0, 1.05159],
    75: [0, 0.7, 0.31259, 0, 0.91364],
    76: [0, 0.7, 0.19189, 0, 0.87373],
    77: [0, 0.7, 0.15981, 0, 1.08031],
    78: [0, 0.7, 0.3525, 0, 0.9015],
    79: [0, 0.7, 0.08078, 0, 0.73787],
    80: [0, 0.7, 0.08078, 0, 1.01262],
    81: [0, 0.7, 0.03305, 0, 0.88282],
    82: [0, 0.7, 0.06259, 0, 0.85],
    83: [0, 0.7, 0.19189, 0, 0.86767],
    84: [0, 0.7, 0.29087, 0, 0.74697],
    85: [0, 0.7, 0.25815, 0, 0.79996],
    86: [0, 0.7, 0.27523, 0, 0.62204],
    87: [0, 0.7, 0.27523, 0, 0.80532],
    88: [0, 0.7, 0.26006, 0, 0.94445],
    89: [0, 0.7, 0.2939, 0, 0.70961],
    90: [0, 0.7, 0.24037, 0, 0.8212],
    160: [0, 0, 0, 0, 0.25]
  },
  "Size1-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.35001, 0.85, 0, 0, 0.45834],
    41: [0.35001, 0.85, 0, 0, 0.45834],
    47: [0.35001, 0.85, 0, 0, 0.57778],
    91: [0.35001, 0.85, 0, 0, 0.41667],
    92: [0.35001, 0.85, 0, 0, 0.57778],
    93: [0.35001, 0.85, 0, 0, 0.41667],
    123: [0.35001, 0.85, 0, 0, 0.58334],
    125: [0.35001, 0.85, 0, 0, 0.58334],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.72222, 0, 0, 0.55556],
    732: [0, 0.72222, 0, 0, 0.55556],
    770: [0, 0.72222, 0, 0, 0.55556],
    771: [0, 0.72222, 0, 0, 0.55556],
    8214: [-99e-5, 0.601, 0, 0, 0.77778],
    8593: [1e-5, 0.6, 0, 0, 0.66667],
    8595: [1e-5, 0.6, 0, 0, 0.66667],
    8657: [1e-5, 0.6, 0, 0, 0.77778],
    8659: [1e-5, 0.6, 0, 0, 0.77778],
    8719: [0.25001, 0.75, 0, 0, 0.94445],
    8720: [0.25001, 0.75, 0, 0, 0.94445],
    8721: [0.25001, 0.75, 0, 0, 1.05556],
    8730: [0.35001, 0.85, 0, 0, 1],
    8739: [-599e-5, 0.606, 0, 0, 0.33333],
    8741: [-599e-5, 0.606, 0, 0, 0.55556],
    8747: [0.30612, 0.805, 0.19445, 0, 0.47222],
    8748: [0.306, 0.805, 0.19445, 0, 0.47222],
    8749: [0.306, 0.805, 0.19445, 0, 0.47222],
    8750: [0.30612, 0.805, 0.19445, 0, 0.47222],
    8896: [0.25001, 0.75, 0, 0, 0.83334],
    8897: [0.25001, 0.75, 0, 0, 0.83334],
    8898: [0.25001, 0.75, 0, 0, 0.83334],
    8899: [0.25001, 0.75, 0, 0, 0.83334],
    8968: [0.35001, 0.85, 0, 0, 0.47222],
    8969: [0.35001, 0.85, 0, 0, 0.47222],
    8970: [0.35001, 0.85, 0, 0, 0.47222],
    8971: [0.35001, 0.85, 0, 0, 0.47222],
    9168: [-99e-5, 0.601, 0, 0, 0.66667],
    10216: [0.35001, 0.85, 0, 0, 0.47222],
    10217: [0.35001, 0.85, 0, 0, 0.47222],
    10752: [0.25001, 0.75, 0, 0, 1.11111],
    10753: [0.25001, 0.75, 0, 0, 1.11111],
    10754: [0.25001, 0.75, 0, 0, 1.11111],
    10756: [0.25001, 0.75, 0, 0, 0.83334],
    10758: [0.25001, 0.75, 0, 0, 0.83334]
  },
  "Size2-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.65002, 1.15, 0, 0, 0.59722],
    41: [0.65002, 1.15, 0, 0, 0.59722],
    47: [0.65002, 1.15, 0, 0, 0.81111],
    91: [0.65002, 1.15, 0, 0, 0.47222],
    92: [0.65002, 1.15, 0, 0, 0.81111],
    93: [0.65002, 1.15, 0, 0, 0.47222],
    123: [0.65002, 1.15, 0, 0, 0.66667],
    125: [0.65002, 1.15, 0, 0, 0.66667],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.75, 0, 0, 1],
    732: [0, 0.75, 0, 0, 1],
    770: [0, 0.75, 0, 0, 1],
    771: [0, 0.75, 0, 0, 1],
    8719: [0.55001, 1.05, 0, 0, 1.27778],
    8720: [0.55001, 1.05, 0, 0, 1.27778],
    8721: [0.55001, 1.05, 0, 0, 1.44445],
    8730: [0.65002, 1.15, 0, 0, 1],
    8747: [0.86225, 1.36, 0.44445, 0, 0.55556],
    8748: [0.862, 1.36, 0.44445, 0, 0.55556],
    8749: [0.862, 1.36, 0.44445, 0, 0.55556],
    8750: [0.86225, 1.36, 0.44445, 0, 0.55556],
    8896: [0.55001, 1.05, 0, 0, 1.11111],
    8897: [0.55001, 1.05, 0, 0, 1.11111],
    8898: [0.55001, 1.05, 0, 0, 1.11111],
    8899: [0.55001, 1.05, 0, 0, 1.11111],
    8968: [0.65002, 1.15, 0, 0, 0.52778],
    8969: [0.65002, 1.15, 0, 0, 0.52778],
    8970: [0.65002, 1.15, 0, 0, 0.52778],
    8971: [0.65002, 1.15, 0, 0, 0.52778],
    10216: [0.65002, 1.15, 0, 0, 0.61111],
    10217: [0.65002, 1.15, 0, 0, 0.61111],
    10752: [0.55001, 1.05, 0, 0, 1.51112],
    10753: [0.55001, 1.05, 0, 0, 1.51112],
    10754: [0.55001, 1.05, 0, 0, 1.51112],
    10756: [0.55001, 1.05, 0, 0, 1.11111],
    10758: [0.55001, 1.05, 0, 0, 1.11111]
  },
  "Size3-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.95003, 1.45, 0, 0, 0.73611],
    41: [0.95003, 1.45, 0, 0, 0.73611],
    47: [0.95003, 1.45, 0, 0, 1.04445],
    91: [0.95003, 1.45, 0, 0, 0.52778],
    92: [0.95003, 1.45, 0, 0, 1.04445],
    93: [0.95003, 1.45, 0, 0, 0.52778],
    123: [0.95003, 1.45, 0, 0, 0.75],
    125: [0.95003, 1.45, 0, 0, 0.75],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.75, 0, 0, 1.44445],
    732: [0, 0.75, 0, 0, 1.44445],
    770: [0, 0.75, 0, 0, 1.44445],
    771: [0, 0.75, 0, 0, 1.44445],
    8730: [0.95003, 1.45, 0, 0, 1],
    8968: [0.95003, 1.45, 0, 0, 0.58334],
    8969: [0.95003, 1.45, 0, 0, 0.58334],
    8970: [0.95003, 1.45, 0, 0, 0.58334],
    8971: [0.95003, 1.45, 0, 0, 0.58334],
    10216: [0.95003, 1.45, 0, 0, 0.75],
    10217: [0.95003, 1.45, 0, 0, 0.75]
  },
  "Size4-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [1.25003, 1.75, 0, 0, 0.79167],
    41: [1.25003, 1.75, 0, 0, 0.79167],
    47: [1.25003, 1.75, 0, 0, 1.27778],
    91: [1.25003, 1.75, 0, 0, 0.58334],
    92: [1.25003, 1.75, 0, 0, 1.27778],
    93: [1.25003, 1.75, 0, 0, 0.58334],
    123: [1.25003, 1.75, 0, 0, 0.80556],
    125: [1.25003, 1.75, 0, 0, 0.80556],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.825, 0, 0, 1.8889],
    732: [0, 0.825, 0, 0, 1.8889],
    770: [0, 0.825, 0, 0, 1.8889],
    771: [0, 0.825, 0, 0, 1.8889],
    8730: [1.25003, 1.75, 0, 0, 1],
    8968: [1.25003, 1.75, 0, 0, 0.63889],
    8969: [1.25003, 1.75, 0, 0, 0.63889],
    8970: [1.25003, 1.75, 0, 0, 0.63889],
    8971: [1.25003, 1.75, 0, 0, 0.63889],
    9115: [0.64502, 1.155, 0, 0, 0.875],
    9116: [1e-5, 0.6, 0, 0, 0.875],
    9117: [0.64502, 1.155, 0, 0, 0.875],
    9118: [0.64502, 1.155, 0, 0, 0.875],
    9119: [1e-5, 0.6, 0, 0, 0.875],
    9120: [0.64502, 1.155, 0, 0, 0.875],
    9121: [0.64502, 1.155, 0, 0, 0.66667],
    9122: [-99e-5, 0.601, 0, 0, 0.66667],
    9123: [0.64502, 1.155, 0, 0, 0.66667],
    9124: [0.64502, 1.155, 0, 0, 0.66667],
    9125: [-99e-5, 0.601, 0, 0, 0.66667],
    9126: [0.64502, 1.155, 0, 0, 0.66667],
    9127: [1e-5, 0.9, 0, 0, 0.88889],
    9128: [0.65002, 1.15, 0, 0, 0.88889],
    9129: [0.90001, 0, 0, 0, 0.88889],
    9130: [0, 0.3, 0, 0, 0.88889],
    9131: [1e-5, 0.9, 0, 0, 0.88889],
    9132: [0.65002, 1.15, 0, 0, 0.88889],
    9133: [0.90001, 0, 0, 0, 0.88889],
    9143: [0.88502, 0.915, 0, 0, 1.05556],
    10216: [1.25003, 1.75, 0, 0, 0.80556],
    10217: [1.25003, 1.75, 0, 0, 0.80556],
    57344: [-499e-5, 0.605, 0, 0, 1.05556],
    57345: [-499e-5, 0.605, 0, 0, 1.05556],
    57680: [0, 0.12, 0, 0, 0.45],
    57681: [0, 0.12, 0, 0, 0.45],
    57682: [0, 0.12, 0, 0, 0.45],
    57683: [0, 0.12, 0, 0, 0.45]
  },
  "Typewriter-Regular": {
    32: [0, 0, 0, 0, 0.525],
    33: [0, 0.61111, 0, 0, 0.525],
    34: [0, 0.61111, 0, 0, 0.525],
    35: [0, 0.61111, 0, 0, 0.525],
    36: [0.08333, 0.69444, 0, 0, 0.525],
    37: [0.08333, 0.69444, 0, 0, 0.525],
    38: [0, 0.61111, 0, 0, 0.525],
    39: [0, 0.61111, 0, 0, 0.525],
    40: [0.08333, 0.69444, 0, 0, 0.525],
    41: [0.08333, 0.69444, 0, 0, 0.525],
    42: [0, 0.52083, 0, 0, 0.525],
    43: [-0.08056, 0.53055, 0, 0, 0.525],
    44: [0.13889, 0.125, 0, 0, 0.525],
    45: [-0.08056, 0.53055, 0, 0, 0.525],
    46: [0, 0.125, 0, 0, 0.525],
    47: [0.08333, 0.69444, 0, 0, 0.525],
    48: [0, 0.61111, 0, 0, 0.525],
    49: [0, 0.61111, 0, 0, 0.525],
    50: [0, 0.61111, 0, 0, 0.525],
    51: [0, 0.61111, 0, 0, 0.525],
    52: [0, 0.61111, 0, 0, 0.525],
    53: [0, 0.61111, 0, 0, 0.525],
    54: [0, 0.61111, 0, 0, 0.525],
    55: [0, 0.61111, 0, 0, 0.525],
    56: [0, 0.61111, 0, 0, 0.525],
    57: [0, 0.61111, 0, 0, 0.525],
    58: [0, 0.43056, 0, 0, 0.525],
    59: [0.13889, 0.43056, 0, 0, 0.525],
    60: [-0.05556, 0.55556, 0, 0, 0.525],
    61: [-0.19549, 0.41562, 0, 0, 0.525],
    62: [-0.05556, 0.55556, 0, 0, 0.525],
    63: [0, 0.61111, 0, 0, 0.525],
    64: [0, 0.61111, 0, 0, 0.525],
    65: [0, 0.61111, 0, 0, 0.525],
    66: [0, 0.61111, 0, 0, 0.525],
    67: [0, 0.61111, 0, 0, 0.525],
    68: [0, 0.61111, 0, 0, 0.525],
    69: [0, 0.61111, 0, 0, 0.525],
    70: [0, 0.61111, 0, 0, 0.525],
    71: [0, 0.61111, 0, 0, 0.525],
    72: [0, 0.61111, 0, 0, 0.525],
    73: [0, 0.61111, 0, 0, 0.525],
    74: [0, 0.61111, 0, 0, 0.525],
    75: [0, 0.61111, 0, 0, 0.525],
    76: [0, 0.61111, 0, 0, 0.525],
    77: [0, 0.61111, 0, 0, 0.525],
    78: [0, 0.61111, 0, 0, 0.525],
    79: [0, 0.61111, 0, 0, 0.525],
    80: [0, 0.61111, 0, 0, 0.525],
    81: [0.13889, 0.61111, 0, 0, 0.525],
    82: [0, 0.61111, 0, 0, 0.525],
    83: [0, 0.61111, 0, 0, 0.525],
    84: [0, 0.61111, 0, 0, 0.525],
    85: [0, 0.61111, 0, 0, 0.525],
    86: [0, 0.61111, 0, 0, 0.525],
    87: [0, 0.61111, 0, 0, 0.525],
    88: [0, 0.61111, 0, 0, 0.525],
    89: [0, 0.61111, 0, 0, 0.525],
    90: [0, 0.61111, 0, 0, 0.525],
    91: [0.08333, 0.69444, 0, 0, 0.525],
    92: [0.08333, 0.69444, 0, 0, 0.525],
    93: [0.08333, 0.69444, 0, 0, 0.525],
    94: [0, 0.61111, 0, 0, 0.525],
    95: [0.09514, 0, 0, 0, 0.525],
    96: [0, 0.61111, 0, 0, 0.525],
    97: [0, 0.43056, 0, 0, 0.525],
    98: [0, 0.61111, 0, 0, 0.525],
    99: [0, 0.43056, 0, 0, 0.525],
    100: [0, 0.61111, 0, 0, 0.525],
    101: [0, 0.43056, 0, 0, 0.525],
    102: [0, 0.61111, 0, 0, 0.525],
    103: [0.22222, 0.43056, 0, 0, 0.525],
    104: [0, 0.61111, 0, 0, 0.525],
    105: [0, 0.61111, 0, 0, 0.525],
    106: [0.22222, 0.61111, 0, 0, 0.525],
    107: [0, 0.61111, 0, 0, 0.525],
    108: [0, 0.61111, 0, 0, 0.525],
    109: [0, 0.43056, 0, 0, 0.525],
    110: [0, 0.43056, 0, 0, 0.525],
    111: [0, 0.43056, 0, 0, 0.525],
    112: [0.22222, 0.43056, 0, 0, 0.525],
    113: [0.22222, 0.43056, 0, 0, 0.525],
    114: [0, 0.43056, 0, 0, 0.525],
    115: [0, 0.43056, 0, 0, 0.525],
    116: [0, 0.55358, 0, 0, 0.525],
    117: [0, 0.43056, 0, 0, 0.525],
    118: [0, 0.43056, 0, 0, 0.525],
    119: [0, 0.43056, 0, 0, 0.525],
    120: [0, 0.43056, 0, 0, 0.525],
    121: [0.22222, 0.43056, 0, 0, 0.525],
    122: [0, 0.43056, 0, 0, 0.525],
    123: [0.08333, 0.69444, 0, 0, 0.525],
    124: [0.08333, 0.69444, 0, 0, 0.525],
    125: [0.08333, 0.69444, 0, 0, 0.525],
    126: [0, 0.61111, 0, 0, 0.525],
    127: [0, 0.61111, 0, 0, 0.525],
    160: [0, 0, 0, 0, 0.525],
    176: [0, 0.61111, 0, 0, 0.525],
    184: [0.19445, 0, 0, 0, 0.525],
    305: [0, 0.43056, 0, 0, 0.525],
    567: [0.22222, 0.43056, 0, 0, 0.525],
    711: [0, 0.56597, 0, 0, 0.525],
    713: [0, 0.56555, 0, 0, 0.525],
    714: [0, 0.61111, 0, 0, 0.525],
    715: [0, 0.61111, 0, 0, 0.525],
    728: [0, 0.61111, 0, 0, 0.525],
    730: [0, 0.61111, 0, 0, 0.525],
    770: [0, 0.61111, 0, 0, 0.525],
    771: [0, 0.61111, 0, 0, 0.525],
    776: [0, 0.61111, 0, 0, 0.525],
    915: [0, 0.61111, 0, 0, 0.525],
    916: [0, 0.61111, 0, 0, 0.525],
    920: [0, 0.61111, 0, 0, 0.525],
    923: [0, 0.61111, 0, 0, 0.525],
    926: [0, 0.61111, 0, 0, 0.525],
    928: [0, 0.61111, 0, 0, 0.525],
    931: [0, 0.61111, 0, 0, 0.525],
    933: [0, 0.61111, 0, 0, 0.525],
    934: [0, 0.61111, 0, 0, 0.525],
    936: [0, 0.61111, 0, 0, 0.525],
    937: [0, 0.61111, 0, 0, 0.525],
    8216: [0, 0.61111, 0, 0, 0.525],
    8217: [0, 0.61111, 0, 0, 0.525],
    8242: [0, 0.61111, 0, 0, 0.525],
    9251: [0.11111, 0.21944, 0, 0, 0.525]
  }
}, Tu = {
  slant: [0.25, 0.25, 0.25],
  // sigma1
  space: [0, 0, 0],
  // sigma2
  stretch: [0, 0, 0],
  // sigma3
  shrink: [0, 0, 0],
  // sigma4
  xHeight: [0.431, 0.431, 0.431],
  // sigma5
  quad: [1, 1.171, 1.472],
  // sigma6
  extraSpace: [0, 0, 0],
  // sigma7
  num1: [0.677, 0.732, 0.925],
  // sigma8
  num2: [0.394, 0.384, 0.387],
  // sigma9
  num3: [0.444, 0.471, 0.504],
  // sigma10
  denom1: [0.686, 0.752, 1.025],
  // sigma11
  denom2: [0.345, 0.344, 0.532],
  // sigma12
  sup1: [0.413, 0.503, 0.504],
  // sigma13
  sup2: [0.363, 0.431, 0.404],
  // sigma14
  sup3: [0.289, 0.286, 0.294],
  // sigma15
  sub1: [0.15, 0.143, 0.2],
  // sigma16
  sub2: [0.247, 0.286, 0.4],
  // sigma17
  supDrop: [0.386, 0.353, 0.494],
  // sigma18
  subDrop: [0.05, 0.071, 0.1],
  // sigma19
  delim1: [2.39, 1.7, 1.98],
  // sigma20
  delim2: [1.01, 1.157, 1.42],
  // sigma21
  axisHeight: [0.25, 0.25, 0.25],
  // sigma22
  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
  // they correspond to the font parameters of the extension fonts (family 3).
  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
  // values.
  defaultRuleThickness: [0.04, 0.049, 0.049],
  // xi8; cmex7: 0.049
  bigOpSpacing1: [0.111, 0.111, 0.111],
  // xi9
  bigOpSpacing2: [0.166, 0.166, 0.166],
  // xi10
  bigOpSpacing3: [0.2, 0.2, 0.2],
  // xi11
  bigOpSpacing4: [0.6, 0.611, 0.611],
  // xi12; cmex7: 0.611
  bigOpSpacing5: [0.1, 0.143, 0.143],
  // xi13; cmex7: 0.143
  // The \sqrt rule width is taken from the height of the surd character.
  // Since we use the same font at all sizes, this thickness doesn't scale.
  sqrtRuleThickness: [0.04, 0.04, 0.04],
  // This value determines how large a pt is, for metrics which are defined
  // in terms of pts.
  // This value is also used in katex.scss; if you change it make sure the
  // values match.
  ptPerEm: [10, 10, 10],
  // The space between adjacent `|` columns in an array definition. From
  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
  doubleRuleSep: [0.2, 0.2, 0.2],
  // The width of separator lines in {array} environments. From
  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
  arrayRuleWidth: [0.04, 0.04, 0.04],
  // Two values from LaTeX source2e:
  fboxsep: [0.3, 0.3, 0.3],
  //        3 pt / ptPerEm
  fboxrule: [0.04, 0.04, 0.04]
  // 0.4 pt / ptPerEm
}, Uv = {
  // Latin-1
  Å: "A",
  Ð: "D",
  Þ: "o",
  å: "a",
  ð: "d",
  þ: "o",
  // Cyrillic
  А: "A",
  Б: "B",
  В: "B",
  Г: "F",
  Д: "A",
  Е: "E",
  Ж: "K",
  З: "3",
  И: "N",
  Й: "N",
  К: "K",
  Л: "N",
  М: "M",
  Н: "H",
  О: "O",
  П: "N",
  Р: "P",
  С: "C",
  Т: "T",
  У: "y",
  Ф: "O",
  Х: "X",
  Ц: "U",
  Ч: "h",
  Ш: "W",
  Щ: "W",
  Ъ: "B",
  Ы: "X",
  Ь: "B",
  Э: "3",
  Ю: "X",
  Я: "R",
  а: "a",
  б: "b",
  в: "a",
  г: "r",
  д: "y",
  е: "e",
  ж: "m",
  з: "e",
  и: "n",
  й: "n",
  к: "n",
  л: "n",
  м: "m",
  н: "n",
  о: "o",
  п: "n",
  р: "p",
  с: "c",
  т: "o",
  у: "y",
  ф: "b",
  х: "x",
  ц: "n",
  ч: "n",
  ш: "w",
  щ: "w",
  ъ: "a",
  ы: "m",
  ь: "a",
  э: "e",
  ю: "m",
  я: "r"
};
function uV(t, e) {
  La[t] = e;
}
function d1(t, e, n) {
  if (!La[e])
    throw new Error("Font metrics not found for font: " + e + ".");
  var r = t.charCodeAt(0), a = La[e][r];
  if (!a && t[0] in Uv && (r = Uv[t[0]].charCodeAt(0), a = La[e][r]), !a && n === "text" && qx(r) && (a = La[e][77]), a)
    return {
      depth: a[0],
      height: a[1],
      italic: a[2],
      skew: a[3],
      width: a[4]
    };
}
var n_ = {};
function dV(t) {
  var e;
  if (t >= 5 ? e = 0 : t >= 3 ? e = 1 : e = 2, !n_[e]) {
    var n = n_[e] = {
      cssEmPerMu: Tu.quad[e] / 18
    };
    for (var r in Tu)
      Tu.hasOwnProperty(r) && (n[r] = Tu[r][e]);
  }
  return n_[e];
}
var pV = [
  // Each element contains [textsize, scriptsize, scriptscriptsize].
  // The size mappings are taken from TeX with \normalsize=10pt.
  [1, 1, 1],
  // size1: [5, 5, 5]              \tiny
  [2, 1, 1],
  // size2: [6, 5, 5]
  [3, 1, 1],
  // size3: [7, 5, 5]              \scriptsize
  [4, 2, 1],
  // size4: [8, 6, 5]              \footnotesize
  [5, 2, 1],
  // size5: [9, 6, 5]              \small
  [6, 3, 1],
  // size6: [10, 7, 5]             \normalsize
  [7, 4, 2],
  // size7: [12, 8, 6]             \large
  [8, 6, 3],
  // size8: [14.4, 10, 7]          \Large
  [9, 7, 6],
  // size9: [17.28, 12, 10]        \LARGE
  [10, 8, 7],
  // size10: [20.74, 14.4, 12]     \huge
  [11, 10, 9]
  // size11: [24.88, 20.74, 17.28] \HUGE
], Gv = [
  // fontMetrics.js:getGlobalMetrics also uses size indexes, so if
  // you change size indexes, change that function.
  0.5,
  0.6,
  0.7,
  0.8,
  0.9,
  1,
  1.2,
  1.44,
  1.728,
  2.074,
  2.488
], Hv = function(e, n) {
  return n.size < 2 ? e : pV[e - 1][n.size - 1];
};
class ai {
  // A font family applies to a group of fonts (i.e. SansSerif), while a font
  // represents a specific font (i.e. SansSerif Bold).
  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm
  /**
   * The base size index.
   */
  constructor(e) {
    this.style = void 0, this.color = void 0, this.size = void 0, this.textSize = void 0, this.phantom = void 0, this.font = void 0, this.fontFamily = void 0, this.fontWeight = void 0, this.fontShape = void 0, this.sizeMultiplier = void 0, this.maxSize = void 0, this.minRuleThickness = void 0, this._fontMetrics = void 0, this.style = e.style, this.color = e.color, this.size = e.size || ai.BASESIZE, this.textSize = e.textSize || this.size, this.phantom = !!e.phantom, this.font = e.font || "", this.fontFamily = e.fontFamily || "", this.fontWeight = e.fontWeight || "", this.fontShape = e.fontShape || "", this.sizeMultiplier = Gv[this.size - 1], this.maxSize = e.maxSize, this.minRuleThickness = e.minRuleThickness, this._fontMetrics = void 0;
  }
  /**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */
  extend(e) {
    var n = {
      style: this.style,
      size: this.size,
      textSize: this.textSize,
      color: this.color,
      phantom: this.phantom,
      font: this.font,
      fontFamily: this.fontFamily,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize,
      minRuleThickness: this.minRuleThickness
    };
    for (var r in e)
      e.hasOwnProperty(r) && (n[r] = e[r]);
    return new ai(n);
  }
  /**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */
  havingStyle(e) {
    return this.style === e ? this : this.extend({
      style: e,
      size: Hv(this.textSize, e)
    });
  }
  /**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */
  havingCrampedStyle() {
    return this.havingStyle(this.style.cramp());
  }
  /**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */
  havingSize(e) {
    return this.size === e && this.textSize === e ? this : this.extend({
      style: this.style.text(),
      size: e,
      textSize: e,
      sizeMultiplier: Gv[e - 1]
    });
  }
  /**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */
  havingBaseStyle(e) {
    e = e || this.style.text();
    var n = Hv(ai.BASESIZE, e);
    return this.size === n && this.textSize === ai.BASESIZE && this.style === e ? this : this.extend({
      style: e,
      size: n
    });
  }
  /**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */
  havingBaseSizing() {
    var e;
    switch (this.style.id) {
      case 4:
      case 5:
        e = 3;
        break;
      case 6:
      case 7:
        e = 1;
        break;
      default:
        e = 6;
    }
    return this.extend({
      style: this.style.text(),
      size: e
    });
  }
  /**
   * Create a new options object with the given color.
   */
  withColor(e) {
    return this.extend({
      color: e
    });
  }
  /**
   * Create a new options object with "phantom" set to true.
   */
  withPhantom() {
    return this.extend({
      phantom: !0
    });
  }
  /**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */
  withFont(e) {
    return this.extend({
      font: e
    });
  }
  /**
   * Create a new options objects with the given fontFamily.
   */
  withTextFontFamily(e) {
    return this.extend({
      fontFamily: e,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontWeight(e) {
    return this.extend({
      fontWeight: e,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontShape(e) {
    return this.extend({
      fontShape: e,
      font: ""
    });
  }
  /**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */
  sizingClasses(e) {
    return e.size !== this.size ? ["sizing", "reset-size" + e.size, "size" + this.size] : [];
  }
  /**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */
  baseSizingClasses() {
    return this.size !== ai.BASESIZE ? ["sizing", "reset-size" + this.size, "size" + ai.BASESIZE] : [];
  }
  /**
   * Return the font metrics for this size.
   */
  fontMetrics() {
    return this._fontMetrics || (this._fontMetrics = dV(this.size)), this._fontMetrics;
  }
  /**
   * Gets the CSS color of the current options object
   */
  getColor() {
    return this.phantom ? "transparent" : this.color;
  }
}
ai.BASESIZE = 6;
var $h = {
  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  pt: 1,
  // TeX point
  mm: 7227 / 2540,
  // millimeter
  cm: 7227 / 254,
  // centimeter
  in: 72.27,
  // inch
  bp: 803 / 800,
  // big (PostScript) points
  pc: 12,
  // pica
  dd: 1238 / 1157,
  // didot
  cc: 14856 / 1157,
  // cicero (12 didot)
  nd: 685 / 642,
  // new didot
  nc: 1370 / 107,
  // new cicero (12 new didot)
  sp: 1 / 65536,
  // scaled point (TeX's internal smallest unit)
  // https://tex.stackexchange.com/a/41371
  px: 803 / 800
  // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
}, _V = {
  ex: !0,
  em: !0,
  mu: !0
}, Vx = function(e) {
  return typeof e != "string" && (e = e.unit), e in $h || e in _V || e === "ex";
}, Tn = function(e, n) {
  var r;
  if (e.unit in $h)
    r = $h[e.unit] / n.fontMetrics().ptPerEm / n.sizeMultiplier;
  else if (e.unit === "mu")
    r = n.fontMetrics().cssEmPerMu;
  else {
    var a;
    if (n.style.isTight() ? a = n.havingStyle(n.style.text()) : a = n, e.unit === "ex")
      r = a.fontMetrics().xHeight;
    else if (e.unit === "em")
      r = a.fontMetrics().quad;
    else
      throw new ke("Invalid unit: '" + e.unit + "'");
    a !== n && (r *= a.sizeMultiplier / n.sizeMultiplier);
  }
  return Math.min(e.number * r, n.maxSize);
}, Ye = function(e) {
  return +e.toFixed(4) + "em";
}, Bi = function(e) {
  return e.filter((n) => n).join(" ");
}, $x = function(e, n, r) {
  if (this.classes = e || [], this.attributes = {}, this.height = 0, this.depth = 0, this.maxFontSize = 0, this.style = r || {}, n) {
    n.style.isTight() && this.classes.push("mtight");
    var a = n.getColor();
    a && (this.style.color = a);
  }
}, Wx = function(e) {
  var n = document.createElement(e);
  n.className = Bi(this.classes);
  for (var r in this.style)
    this.style.hasOwnProperty(r) && (n.style[r] = this.style[r]);
  for (var a in this.attributes)
    this.attributes.hasOwnProperty(a) && n.setAttribute(a, this.attributes[a]);
  for (var i = 0; i < this.children.length; i++)
    n.appendChild(this.children[i].toNode());
  return n;
}, Kx = function(e) {
  var n = "<" + e;
  this.classes.length && (n += ' class="' + tt.escape(Bi(this.classes)) + '"');
  var r = "";
  for (var a in this.style)
    this.style.hasOwnProperty(a) && (r += tt.hyphenate(a) + ":" + this.style[a] + ";");
  r && (n += ' style="' + tt.escape(r) + '"');
  for (var i in this.attributes)
    this.attributes.hasOwnProperty(i) && (n += " " + i + '="' + tt.escape(this.attributes[i]) + '"');
  n += ">";
  for (var s = 0; s < this.children.length; s++)
    n += this.children[s].toMarkup();
  return n += "</" + e + ">", n;
};
class ec {
  constructor(e, n, r, a) {
    this.children = void 0, this.attributes = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.width = void 0, this.maxFontSize = void 0, this.style = void 0, $x.call(this, e, r, a), this.children = n || [];
  }
  /**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */
  setAttribute(e, n) {
    this.attributes[e] = n;
  }
  hasClass(e) {
    return tt.contains(this.classes, e);
  }
  toNode() {
    return Wx.call(this, "span");
  }
  toMarkup() {
    return Kx.call(this, "span");
  }
}
class p1 {
  constructor(e, n, r, a) {
    this.children = void 0, this.attributes = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, $x.call(this, n, a), this.children = r || [], this.setAttribute("href", e);
  }
  setAttribute(e, n) {
    this.attributes[e] = n;
  }
  hasClass(e) {
    return tt.contains(this.classes, e);
  }
  toNode() {
    return Wx.call(this, "a");
  }
  toMarkup() {
    return Kx.call(this, "a");
  }
}
class mV {
  constructor(e, n, r) {
    this.src = void 0, this.alt = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, this.alt = n, this.src = e, this.classes = ["mord"], this.style = r;
  }
  hasClass(e) {
    return tt.contains(this.classes, e);
  }
  toNode() {
    var e = document.createElement("img");
    e.src = this.src, e.alt = this.alt, e.className = "mord";
    for (var n in this.style)
      this.style.hasOwnProperty(n) && (e.style[n] = this.style[n]);
    return e;
  }
  toMarkup() {
    var e = '<img src="' + tt.escape(this.src) + '"' + (' alt="' + tt.escape(this.alt) + '"'), n = "";
    for (var r in this.style)
      this.style.hasOwnProperty(r) && (n += tt.hyphenate(r) + ":" + this.style[r] + ";");
    return n && (e += ' style="' + tt.escape(n) + '"'), e += "'/>", e;
  }
}
var fV = {
  î: "ı̂",
  ï: "ı̈",
  í: "ı́",
  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
  ì: "ı̀"
};
class la {
  constructor(e, n, r, a, i, s, l, c) {
    this.text = void 0, this.height = void 0, this.depth = void 0, this.italic = void 0, this.skew = void 0, this.width = void 0, this.maxFontSize = void 0, this.classes = void 0, this.style = void 0, this.text = e, this.height = n || 0, this.depth = r || 0, this.italic = a || 0, this.skew = i || 0, this.width = s || 0, this.classes = l || [], this.style = c || {}, this.maxFontSize = 0;
    var d = Jq(this.text.charCodeAt(0));
    d && this.classes.push(d + "_fallback"), /[îïíì]/.test(this.text) && (this.text = fV[this.text]);
  }
  hasClass(e) {
    return tt.contains(this.classes, e);
  }
  /**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */
  toNode() {
    var e = document.createTextNode(this.text), n = null;
    this.italic > 0 && (n = document.createElement("span"), n.style.marginRight = Ye(this.italic)), this.classes.length > 0 && (n = n || document.createElement("span"), n.className = Bi(this.classes));
    for (var r in this.style)
      this.style.hasOwnProperty(r) && (n = n || document.createElement("span"), n.style[r] = this.style[r]);
    return n ? (n.appendChild(e), n) : e;
  }
  /**
   * Creates markup for a symbol node.
   */
  toMarkup() {
    var e = !1, n = "<span";
    this.classes.length && (e = !0, n += ' class="', n += tt.escape(Bi(this.classes)), n += '"');
    var r = "";
    this.italic > 0 && (r += "margin-right:" + this.italic + "em;");
    for (var a in this.style)
      this.style.hasOwnProperty(a) && (r += tt.hyphenate(a) + ":" + this.style[a] + ";");
    r && (e = !0, n += ' style="' + tt.escape(r) + '"');
    var i = tt.escape(this.text);
    return e ? (n += ">", n += i, n += "</span>", n) : i;
  }
}
class ci {
  constructor(e, n) {
    this.children = void 0, this.attributes = void 0, this.children = e || [], this.attributes = n || {};
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", n = document.createElementNS(e, "svg");
    for (var r in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r) && n.setAttribute(r, this.attributes[r]);
    for (var a = 0; a < this.children.length; a++)
      n.appendChild(this.children[a].toNode());
    return n;
  }
  toMarkup() {
    var e = '<svg xmlns="http://www.w3.org/2000/svg"';
    for (var n in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, n) && (e += " " + n + '="' + tt.escape(this.attributes[n]) + '"');
    e += ">";
    for (var r = 0; r < this.children.length; r++)
      e += this.children[r].toMarkup();
    return e += "</svg>", e;
  }
}
class Ui {
  constructor(e, n) {
    this.pathName = void 0, this.alternate = void 0, this.pathName = e, this.alternate = n;
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", n = document.createElementNS(e, "path");
    return this.alternate ? n.setAttribute("d", this.alternate) : n.setAttribute("d", Bv[this.pathName]), n;
  }
  toMarkup() {
    return this.alternate ? '<path d="' + tt.escape(this.alternate) + '"/>' : '<path d="' + tt.escape(Bv[this.pathName]) + '"/>';
  }
}
class Wh {
  constructor(e) {
    this.attributes = void 0, this.attributes = e || {};
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", n = document.createElementNS(e, "line");
    for (var r in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r) && n.setAttribute(r, this.attributes[r]);
    return n;
  }
  toMarkup() {
    var e = "<line";
    for (var n in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, n) && (e += " " + n + '="' + tt.escape(this.attributes[n]) + '"');
    return e += "/>", e;
  }
}
function Yv(t) {
  if (t instanceof la)
    return t;
  throw new Error("Expected symbolNode but got " + String(t) + ".");
}
function gV(t) {
  if (t instanceof ec)
    return t;
  throw new Error("Expected span<HtmlDomNode> but got " + String(t) + ".");
}
var hV = {
  bin: 1,
  close: 1,
  inner: 1,
  open: 1,
  punct: 1,
  rel: 1
}, EV = {
  "accent-token": 1,
  mathord: 1,
  "op-token": 1,
  spacing: 1,
  textord: 1
}, on = {
  math: {},
  text: {}
};
function S(t, e, n, r, a, i) {
  on[t][a] = {
    font: e,
    group: n,
    replace: r
  }, i && r && (on[t][r] = on[t][a]);
}
var y = "math", xe = "text", N = "main", G = "ams", gn = "accent-token", We = "bin", Sr = "close", ho = "inner", rt = "mathord", Pn = "op-token", Vr = "open", Fd = "punct", q = "rel", pi = "spacing", ee = "textord";
S(y, N, q, "≡", "\\equiv", !0);
S(y, N, q, "≺", "\\prec", !0);
S(y, N, q, "≻", "\\succ", !0);
S(y, N, q, "∼", "\\sim", !0);
S(y, N, q, "⊥", "\\perp");
S(y, N, q, "⪯", "\\preceq", !0);
S(y, N, q, "⪰", "\\succeq", !0);
S(y, N, q, "≃", "\\simeq", !0);
S(y, N, q, "∣", "\\mid", !0);
S(y, N, q, "≪", "\\ll", !0);
S(y, N, q, "≫", "\\gg", !0);
S(y, N, q, "≍", "\\asymp", !0);
S(y, N, q, "∥", "\\parallel");
S(y, N, q, "⋈", "\\bowtie", !0);
S(y, N, q, "⌣", "\\smile", !0);
S(y, N, q, "⊑", "\\sqsubseteq", !0);
S(y, N, q, "⊒", "\\sqsupseteq", !0);
S(y, N, q, "≐", "\\doteq", !0);
S(y, N, q, "⌢", "\\frown", !0);
S(y, N, q, "∋", "\\ni", !0);
S(y, N, q, "∝", "\\propto", !0);
S(y, N, q, "⊢", "\\vdash", !0);
S(y, N, q, "⊣", "\\dashv", !0);
S(y, N, q, "∋", "\\owns");
S(y, N, Fd, ".", "\\ldotp");
S(y, N, Fd, "⋅", "\\cdotp");
S(y, N, ee, "#", "\\#");
S(xe, N, ee, "#", "\\#");
S(y, N, ee, "&", "\\&");
S(xe, N, ee, "&", "\\&");
S(y, N, ee, "ℵ", "\\aleph", !0);
S(y, N, ee, "∀", "\\forall", !0);
S(y, N, ee, "ℏ", "\\hbar", !0);
S(y, N, ee, "∃", "\\exists", !0);
S(y, N, ee, "∇", "\\nabla", !0);
S(y, N, ee, "♭", "\\flat", !0);
S(y, N, ee, "ℓ", "\\ell", !0);
S(y, N, ee, "♮", "\\natural", !0);
S(y, N, ee, "♣", "\\clubsuit", !0);
S(y, N, ee, "℘", "\\wp", !0);
S(y, N, ee, "♯", "\\sharp", !0);
S(y, N, ee, "♢", "\\diamondsuit", !0);
S(y, N, ee, "ℜ", "\\Re", !0);
S(y, N, ee, "♡", "\\heartsuit", !0);
S(y, N, ee, "ℑ", "\\Im", !0);
S(y, N, ee, "♠", "\\spadesuit", !0);
S(y, N, ee, "§", "\\S", !0);
S(xe, N, ee, "§", "\\S");
S(y, N, ee, "¶", "\\P", !0);
S(xe, N, ee, "¶", "\\P");
S(y, N, ee, "†", "\\dag");
S(xe, N, ee, "†", "\\dag");
S(xe, N, ee, "†", "\\textdagger");
S(y, N, ee, "‡", "\\ddag");
S(xe, N, ee, "‡", "\\ddag");
S(xe, N, ee, "‡", "\\textdaggerdbl");
S(y, N, Sr, "⎱", "\\rmoustache", !0);
S(y, N, Vr, "⎰", "\\lmoustache", !0);
S(y, N, Sr, "⟯", "\\rgroup", !0);
S(y, N, Vr, "⟮", "\\lgroup", !0);
S(y, N, We, "∓", "\\mp", !0);
S(y, N, We, "⊖", "\\ominus", !0);
S(y, N, We, "⊎", "\\uplus", !0);
S(y, N, We, "⊓", "\\sqcap", !0);
S(y, N, We, "∗", "\\ast");
S(y, N, We, "⊔", "\\sqcup", !0);
S(y, N, We, "◯", "\\bigcirc", !0);
S(y, N, We, "∙", "\\bullet", !0);
S(y, N, We, "‡", "\\ddagger");
S(y, N, We, "≀", "\\wr", !0);
S(y, N, We, "⨿", "\\amalg");
S(y, N, We, "&", "\\And");
S(y, N, q, "⟵", "\\longleftarrow", !0);
S(y, N, q, "⇐", "\\Leftarrow", !0);
S(y, N, q, "⟸", "\\Longleftarrow", !0);
S(y, N, q, "⟶", "\\longrightarrow", !0);
S(y, N, q, "⇒", "\\Rightarrow", !0);
S(y, N, q, "⟹", "\\Longrightarrow", !0);
S(y, N, q, "↔", "\\leftrightarrow", !0);
S(y, N, q, "⟷", "\\longleftrightarrow", !0);
S(y, N, q, "⇔", "\\Leftrightarrow", !0);
S(y, N, q, "⟺", "\\Longleftrightarrow", !0);
S(y, N, q, "↦", "\\mapsto", !0);
S(y, N, q, "⟼", "\\longmapsto", !0);
S(y, N, q, "↗", "\\nearrow", !0);
S(y, N, q, "↩", "\\hookleftarrow", !0);
S(y, N, q, "↪", "\\hookrightarrow", !0);
S(y, N, q, "↘", "\\searrow", !0);
S(y, N, q, "↼", "\\leftharpoonup", !0);
S(y, N, q, "⇀", "\\rightharpoonup", !0);
S(y, N, q, "↙", "\\swarrow", !0);
S(y, N, q, "↽", "\\leftharpoondown", !0);
S(y, N, q, "⇁", "\\rightharpoondown", !0);
S(y, N, q, "↖", "\\nwarrow", !0);
S(y, N, q, "⇌", "\\rightleftharpoons", !0);
S(y, G, q, "≮", "\\nless", !0);
S(y, G, q, "", "\\@nleqslant");
S(y, G, q, "", "\\@nleqq");
S(y, G, q, "⪇", "\\lneq", !0);
S(y, G, q, "≨", "\\lneqq", !0);
S(y, G, q, "", "\\@lvertneqq");
S(y, G, q, "⋦", "\\lnsim", !0);
S(y, G, q, "⪉", "\\lnapprox", !0);
S(y, G, q, "⊀", "\\nprec", !0);
S(y, G, q, "⋠", "\\npreceq", !0);
S(y, G, q, "⋨", "\\precnsim", !0);
S(y, G, q, "⪹", "\\precnapprox", !0);
S(y, G, q, "≁", "\\nsim", !0);
S(y, G, q, "", "\\@nshortmid");
S(y, G, q, "∤", "\\nmid", !0);
S(y, G, q, "⊬", "\\nvdash", !0);
S(y, G, q, "⊭", "\\nvDash", !0);
S(y, G, q, "⋪", "\\ntriangleleft");
S(y, G, q, "⋬", "\\ntrianglelefteq", !0);
S(y, G, q, "⊊", "\\subsetneq", !0);
S(y, G, q, "", "\\@varsubsetneq");
S(y, G, q, "⫋", "\\subsetneqq", !0);
S(y, G, q, "", "\\@varsubsetneqq");
S(y, G, q, "≯", "\\ngtr", !0);
S(y, G, q, "", "\\@ngeqslant");
S(y, G, q, "", "\\@ngeqq");
S(y, G, q, "⪈", "\\gneq", !0);
S(y, G, q, "≩", "\\gneqq", !0);
S(y, G, q, "", "\\@gvertneqq");
S(y, G, q, "⋧", "\\gnsim", !0);
S(y, G, q, "⪊", "\\gnapprox", !0);
S(y, G, q, "⊁", "\\nsucc", !0);
S(y, G, q, "⋡", "\\nsucceq", !0);
S(y, G, q, "⋩", "\\succnsim", !0);
S(y, G, q, "⪺", "\\succnapprox", !0);
S(y, G, q, "≆", "\\ncong", !0);
S(y, G, q, "", "\\@nshortparallel");
S(y, G, q, "∦", "\\nparallel", !0);
S(y, G, q, "⊯", "\\nVDash", !0);
S(y, G, q, "⋫", "\\ntriangleright");
S(y, G, q, "⋭", "\\ntrianglerighteq", !0);
S(y, G, q, "", "\\@nsupseteqq");
S(y, G, q, "⊋", "\\supsetneq", !0);
S(y, G, q, "", "\\@varsupsetneq");
S(y, G, q, "⫌", "\\supsetneqq", !0);
S(y, G, q, "", "\\@varsupsetneqq");
S(y, G, q, "⊮", "\\nVdash", !0);
S(y, G, q, "⪵", "\\precneqq", !0);
S(y, G, q, "⪶", "\\succneqq", !0);
S(y, G, q, "", "\\@nsubseteqq");
S(y, G, We, "⊴", "\\unlhd");
S(y, G, We, "⊵", "\\unrhd");
S(y, G, q, "↚", "\\nleftarrow", !0);
S(y, G, q, "↛", "\\nrightarrow", !0);
S(y, G, q, "⇍", "\\nLeftarrow", !0);
S(y, G, q, "⇏", "\\nRightarrow", !0);
S(y, G, q, "↮", "\\nleftrightarrow", !0);
S(y, G, q, "⇎", "\\nLeftrightarrow", !0);
S(y, G, q, "△", "\\vartriangle");
S(y, G, ee, "ℏ", "\\hslash");
S(y, G, ee, "▽", "\\triangledown");
S(y, G, ee, "◊", "\\lozenge");
S(y, G, ee, "Ⓢ", "\\circledS");
S(y, G, ee, "®", "\\circledR");
S(xe, G, ee, "®", "\\circledR");
S(y, G, ee, "∡", "\\measuredangle", !0);
S(y, G, ee, "∄", "\\nexists");
S(y, G, ee, "℧", "\\mho");
S(y, G, ee, "Ⅎ", "\\Finv", !0);
S(y, G, ee, "⅁", "\\Game", !0);
S(y, G, ee, "‵", "\\backprime");
S(y, G, ee, "▲", "\\blacktriangle");
S(y, G, ee, "▼", "\\blacktriangledown");
S(y, G, ee, "■", "\\blacksquare");
S(y, G, ee, "⧫", "\\blacklozenge");
S(y, G, ee, "★", "\\bigstar");
S(y, G, ee, "∢", "\\sphericalangle", !0);
S(y, G, ee, "∁", "\\complement", !0);
S(y, G, ee, "ð", "\\eth", !0);
S(xe, N, ee, "ð", "ð");
S(y, G, ee, "╱", "\\diagup");
S(y, G, ee, "╲", "\\diagdown");
S(y, G, ee, "□", "\\square");
S(y, G, ee, "□", "\\Box");
S(y, G, ee, "◊", "\\Diamond");
S(y, G, ee, "¥", "\\yen", !0);
S(xe, G, ee, "¥", "\\yen", !0);
S(y, G, ee, "✓", "\\checkmark", !0);
S(xe, G, ee, "✓", "\\checkmark");
S(y, G, ee, "ℶ", "\\beth", !0);
S(y, G, ee, "ℸ", "\\daleth", !0);
S(y, G, ee, "ℷ", "\\gimel", !0);
S(y, G, ee, "ϝ", "\\digamma", !0);
S(y, G, ee, "ϰ", "\\varkappa");
S(y, G, Vr, "┌", "\\@ulcorner", !0);
S(y, G, Sr, "┐", "\\@urcorner", !0);
S(y, G, Vr, "└", "\\@llcorner", !0);
S(y, G, Sr, "┘", "\\@lrcorner", !0);
S(y, G, q, "≦", "\\leqq", !0);
S(y, G, q, "⩽", "\\leqslant", !0);
S(y, G, q, "⪕", "\\eqslantless", !0);
S(y, G, q, "≲", "\\lesssim", !0);
S(y, G, q, "⪅", "\\lessapprox", !0);
S(y, G, q, "≊", "\\approxeq", !0);
S(y, G, We, "⋖", "\\lessdot");
S(y, G, q, "⋘", "\\lll", !0);
S(y, G, q, "≶", "\\lessgtr", !0);
S(y, G, q, "⋚", "\\lesseqgtr", !0);
S(y, G, q, "⪋", "\\lesseqqgtr", !0);
S(y, G, q, "≑", "\\doteqdot");
S(y, G, q, "≓", "\\risingdotseq", !0);
S(y, G, q, "≒", "\\fallingdotseq", !0);
S(y, G, q, "∽", "\\backsim", !0);
S(y, G, q, "⋍", "\\backsimeq", !0);
S(y, G, q, "⫅", "\\subseteqq", !0);
S(y, G, q, "⋐", "\\Subset", !0);
S(y, G, q, "⊏", "\\sqsubset", !0);
S(y, G, q, "≼", "\\preccurlyeq", !0);
S(y, G, q, "⋞", "\\curlyeqprec", !0);
S(y, G, q, "≾", "\\precsim", !0);
S(y, G, q, "⪷", "\\precapprox", !0);
S(y, G, q, "⊲", "\\vartriangleleft");
S(y, G, q, "⊴", "\\trianglelefteq");
S(y, G, q, "⊨", "\\vDash", !0);
S(y, G, q, "⊪", "\\Vvdash", !0);
S(y, G, q, "⌣", "\\smallsmile");
S(y, G, q, "⌢", "\\smallfrown");
S(y, G, q, "≏", "\\bumpeq", !0);
S(y, G, q, "≎", "\\Bumpeq", !0);
S(y, G, q, "≧", "\\geqq", !0);
S(y, G, q, "⩾", "\\geqslant", !0);
S(y, G, q, "⪖", "\\eqslantgtr", !0);
S(y, G, q, "≳", "\\gtrsim", !0);
S(y, G, q, "⪆", "\\gtrapprox", !0);
S(y, G, We, "⋗", "\\gtrdot");
S(y, G, q, "⋙", "\\ggg", !0);
S(y, G, q, "≷", "\\gtrless", !0);
S(y, G, q, "⋛", "\\gtreqless", !0);
S(y, G, q, "⪌", "\\gtreqqless", !0);
S(y, G, q, "≖", "\\eqcirc", !0);
S(y, G, q, "≗", "\\circeq", !0);
S(y, G, q, "≜", "\\triangleq", !0);
S(y, G, q, "∼", "\\thicksim");
S(y, G, q, "≈", "\\thickapprox");
S(y, G, q, "⫆", "\\supseteqq", !0);
S(y, G, q, "⋑", "\\Supset", !0);
S(y, G, q, "⊐", "\\sqsupset", !0);
S(y, G, q, "≽", "\\succcurlyeq", !0);
S(y, G, q, "⋟", "\\curlyeqsucc", !0);
S(y, G, q, "≿", "\\succsim", !0);
S(y, G, q, "⪸", "\\succapprox", !0);
S(y, G, q, "⊳", "\\vartriangleright");
S(y, G, q, "⊵", "\\trianglerighteq");
S(y, G, q, "⊩", "\\Vdash", !0);
S(y, G, q, "∣", "\\shortmid");
S(y, G, q, "∥", "\\shortparallel");
S(y, G, q, "≬", "\\between", !0);
S(y, G, q, "⋔", "\\pitchfork", !0);
S(y, G, q, "∝", "\\varpropto");
S(y, G, q, "◀", "\\blacktriangleleft");
S(y, G, q, "∴", "\\therefore", !0);
S(y, G, q, "∍", "\\backepsilon");
S(y, G, q, "▶", "\\blacktriangleright");
S(y, G, q, "∵", "\\because", !0);
S(y, G, q, "⋘", "\\llless");
S(y, G, q, "⋙", "\\gggtr");
S(y, G, We, "⊲", "\\lhd");
S(y, G, We, "⊳", "\\rhd");
S(y, G, q, "≂", "\\eqsim", !0);
S(y, N, q, "⋈", "\\Join");
S(y, G, q, "≑", "\\Doteq", !0);
S(y, G, We, "∔", "\\dotplus", !0);
S(y, G, We, "∖", "\\smallsetminus");
S(y, G, We, "⋒", "\\Cap", !0);
S(y, G, We, "⋓", "\\Cup", !0);
S(y, G, We, "⩞", "\\doublebarwedge", !0);
S(y, G, We, "⊟", "\\boxminus", !0);
S(y, G, We, "⊞", "\\boxplus", !0);
S(y, G, We, "⋇", "\\divideontimes", !0);
S(y, G, We, "⋉", "\\ltimes", !0);
S(y, G, We, "⋊", "\\rtimes", !0);
S(y, G, We, "⋋", "\\leftthreetimes", !0);
S(y, G, We, "⋌", "\\rightthreetimes", !0);
S(y, G, We, "⋏", "\\curlywedge", !0);
S(y, G, We, "⋎", "\\curlyvee", !0);
S(y, G, We, "⊝", "\\circleddash", !0);
S(y, G, We, "⊛", "\\circledast", !0);
S(y, G, We, "⋅", "\\centerdot");
S(y, G, We, "⊺", "\\intercal", !0);
S(y, G, We, "⋒", "\\doublecap");
S(y, G, We, "⋓", "\\doublecup");
S(y, G, We, "⊠", "\\boxtimes", !0);
S(y, G, q, "⇢", "\\dashrightarrow", !0);
S(y, G, q, "⇠", "\\dashleftarrow", !0);
S(y, G, q, "⇇", "\\leftleftarrows", !0);
S(y, G, q, "⇆", "\\leftrightarrows", !0);
S(y, G, q, "⇚", "\\Lleftarrow", !0);
S(y, G, q, "↞", "\\twoheadleftarrow", !0);
S(y, G, q, "↢", "\\leftarrowtail", !0);
S(y, G, q, "↫", "\\looparrowleft", !0);
S(y, G, q, "⇋", "\\leftrightharpoons", !0);
S(y, G, q, "↶", "\\curvearrowleft", !0);
S(y, G, q, "↺", "\\circlearrowleft", !0);
S(y, G, q, "↰", "\\Lsh", !0);
S(y, G, q, "⇈", "\\upuparrows", !0);
S(y, G, q, "↿", "\\upharpoonleft", !0);
S(y, G, q, "⇃", "\\downharpoonleft", !0);
S(y, N, q, "⊶", "\\origof", !0);
S(y, N, q, "⊷", "\\imageof", !0);
S(y, G, q, "⊸", "\\multimap", !0);
S(y, G, q, "↭", "\\leftrightsquigarrow", !0);
S(y, G, q, "⇉", "\\rightrightarrows", !0);
S(y, G, q, "⇄", "\\rightleftarrows", !0);
S(y, G, q, "↠", "\\twoheadrightarrow", !0);
S(y, G, q, "↣", "\\rightarrowtail", !0);
S(y, G, q, "↬", "\\looparrowright", !0);
S(y, G, q, "↷", "\\curvearrowright", !0);
S(y, G, q, "↻", "\\circlearrowright", !0);
S(y, G, q, "↱", "\\Rsh", !0);
S(y, G, q, "⇊", "\\downdownarrows", !0);
S(y, G, q, "↾", "\\upharpoonright", !0);
S(y, G, q, "⇂", "\\downharpoonright", !0);
S(y, G, q, "⇝", "\\rightsquigarrow", !0);
S(y, G, q, "⇝", "\\leadsto");
S(y, G, q, "⇛", "\\Rrightarrow", !0);
S(y, G, q, "↾", "\\restriction");
S(y, N, ee, "‘", "`");
S(y, N, ee, "$", "\\$");
S(xe, N, ee, "$", "\\$");
S(xe, N, ee, "$", "\\textdollar");
S(y, N, ee, "%", "\\%");
S(xe, N, ee, "%", "\\%");
S(y, N, ee, "_", "\\_");
S(xe, N, ee, "_", "\\_");
S(xe, N, ee, "_", "\\textunderscore");
S(y, N, ee, "∠", "\\angle", !0);
S(y, N, ee, "∞", "\\infty", !0);
S(y, N, ee, "′", "\\prime");
S(y, N, ee, "△", "\\triangle");
S(y, N, ee, "Γ", "\\Gamma", !0);
S(y, N, ee, "Δ", "\\Delta", !0);
S(y, N, ee, "Θ", "\\Theta", !0);
S(y, N, ee, "Λ", "\\Lambda", !0);
S(y, N, ee, "Ξ", "\\Xi", !0);
S(y, N, ee, "Π", "\\Pi", !0);
S(y, N, ee, "Σ", "\\Sigma", !0);
S(y, N, ee, "Υ", "\\Upsilon", !0);
S(y, N, ee, "Φ", "\\Phi", !0);
S(y, N, ee, "Ψ", "\\Psi", !0);
S(y, N, ee, "Ω", "\\Omega", !0);
S(y, N, ee, "A", "Α");
S(y, N, ee, "B", "Β");
S(y, N, ee, "E", "Ε");
S(y, N, ee, "Z", "Ζ");
S(y, N, ee, "H", "Η");
S(y, N, ee, "I", "Ι");
S(y, N, ee, "K", "Κ");
S(y, N, ee, "M", "Μ");
S(y, N, ee, "N", "Ν");
S(y, N, ee, "O", "Ο");
S(y, N, ee, "P", "Ρ");
S(y, N, ee, "T", "Τ");
S(y, N, ee, "X", "Χ");
S(y, N, ee, "¬", "\\neg", !0);
S(y, N, ee, "¬", "\\lnot");
S(y, N, ee, "⊤", "\\top");
S(y, N, ee, "⊥", "\\bot");
S(y, N, ee, "∅", "\\emptyset");
S(y, G, ee, "∅", "\\varnothing");
S(y, N, rt, "α", "\\alpha", !0);
S(y, N, rt, "β", "\\beta", !0);
S(y, N, rt, "γ", "\\gamma", !0);
S(y, N, rt, "δ", "\\delta", !0);
S(y, N, rt, "ϵ", "\\epsilon", !0);
S(y, N, rt, "ζ", "\\zeta", !0);
S(y, N, rt, "η", "\\eta", !0);
S(y, N, rt, "θ", "\\theta", !0);
S(y, N, rt, "ι", "\\iota", !0);
S(y, N, rt, "κ", "\\kappa", !0);
S(y, N, rt, "λ", "\\lambda", !0);
S(y, N, rt, "μ", "\\mu", !0);
S(y, N, rt, "ν", "\\nu", !0);
S(y, N, rt, "ξ", "\\xi", !0);
S(y, N, rt, "ο", "\\omicron", !0);
S(y, N, rt, "π", "\\pi", !0);
S(y, N, rt, "ρ", "\\rho", !0);
S(y, N, rt, "σ", "\\sigma", !0);
S(y, N, rt, "τ", "\\tau", !0);
S(y, N, rt, "υ", "\\upsilon", !0);
S(y, N, rt, "ϕ", "\\phi", !0);
S(y, N, rt, "χ", "\\chi", !0);
S(y, N, rt, "ψ", "\\psi", !0);
S(y, N, rt, "ω", "\\omega", !0);
S(y, N, rt, "ε", "\\varepsilon", !0);
S(y, N, rt, "ϑ", "\\vartheta", !0);
S(y, N, rt, "ϖ", "\\varpi", !0);
S(y, N, rt, "ϱ", "\\varrho", !0);
S(y, N, rt, "ς", "\\varsigma", !0);
S(y, N, rt, "φ", "\\varphi", !0);
S(y, N, We, "∗", "*", !0);
S(y, N, We, "+", "+");
S(y, N, We, "−", "-", !0);
S(y, N, We, "⋅", "\\cdot", !0);
S(y, N, We, "∘", "\\circ", !0);
S(y, N, We, "÷", "\\div", !0);
S(y, N, We, "±", "\\pm", !0);
S(y, N, We, "×", "\\times", !0);
S(y, N, We, "∩", "\\cap", !0);
S(y, N, We, "∪", "\\cup", !0);
S(y, N, We, "∖", "\\setminus", !0);
S(y, N, We, "∧", "\\land");
S(y, N, We, "∨", "\\lor");
S(y, N, We, "∧", "\\wedge", !0);
S(y, N, We, "∨", "\\vee", !0);
S(y, N, ee, "√", "\\surd");
S(y, N, Vr, "⟨", "\\langle", !0);
S(y, N, Vr, "∣", "\\lvert");
S(y, N, Vr, "∥", "\\lVert");
S(y, N, Sr, "?", "?");
S(y, N, Sr, "!", "!");
S(y, N, Sr, "⟩", "\\rangle", !0);
S(y, N, Sr, "∣", "\\rvert");
S(y, N, Sr, "∥", "\\rVert");
S(y, N, q, "=", "=");
S(y, N, q, ":", ":");
S(y, N, q, "≈", "\\approx", !0);
S(y, N, q, "≅", "\\cong", !0);
S(y, N, q, "≥", "\\ge");
S(y, N, q, "≥", "\\geq", !0);
S(y, N, q, "←", "\\gets");
S(y, N, q, ">", "\\gt", !0);
S(y, N, q, "∈", "\\in", !0);
S(y, N, q, "", "\\@not");
S(y, N, q, "⊂", "\\subset", !0);
S(y, N, q, "⊃", "\\supset", !0);
S(y, N, q, "⊆", "\\subseteq", !0);
S(y, N, q, "⊇", "\\supseteq", !0);
S(y, G, q, "⊈", "\\nsubseteq", !0);
S(y, G, q, "⊉", "\\nsupseteq", !0);
S(y, N, q, "⊨", "\\models");
S(y, N, q, "←", "\\leftarrow", !0);
S(y, N, q, "≤", "\\le");
S(y, N, q, "≤", "\\leq", !0);
S(y, N, q, "<", "\\lt", !0);
S(y, N, q, "→", "\\rightarrow", !0);
S(y, N, q, "→", "\\to");
S(y, G, q, "≱", "\\ngeq", !0);
S(y, G, q, "≰", "\\nleq", !0);
S(y, N, pi, " ", "\\ ");
S(y, N, pi, " ", "\\space");
S(y, N, pi, " ", "\\nobreakspace");
S(xe, N, pi, " ", "\\ ");
S(xe, N, pi, " ", " ");
S(xe, N, pi, " ", "\\space");
S(xe, N, pi, " ", "\\nobreakspace");
S(y, N, pi, null, "\\nobreak");
S(y, N, pi, null, "\\allowbreak");
S(y, N, Fd, ",", ",");
S(y, N, Fd, ";", ";");
S(y, G, We, "⊼", "\\barwedge", !0);
S(y, G, We, "⊻", "\\veebar", !0);
S(y, N, We, "⊙", "\\odot", !0);
S(y, N, We, "⊕", "\\oplus", !0);
S(y, N, We, "⊗", "\\otimes", !0);
S(y, N, ee, "∂", "\\partial", !0);
S(y, N, We, "⊘", "\\oslash", !0);
S(y, G, We, "⊚", "\\circledcirc", !0);
S(y, G, We, "⊡", "\\boxdot", !0);
S(y, N, We, "△", "\\bigtriangleup");
S(y, N, We, "▽", "\\bigtriangledown");
S(y, N, We, "†", "\\dagger");
S(y, N, We, "⋄", "\\diamond");
S(y, N, We, "⋆", "\\star");
S(y, N, We, "◃", "\\triangleleft");
S(y, N, We, "▹", "\\triangleright");
S(y, N, Vr, "{", "\\{");
S(xe, N, ee, "{", "\\{");
S(xe, N, ee, "{", "\\textbraceleft");
S(y, N, Sr, "}", "\\}");
S(xe, N, ee, "}", "\\}");
S(xe, N, ee, "}", "\\textbraceright");
S(y, N, Vr, "{", "\\lbrace");
S(y, N, Sr, "}", "\\rbrace");
S(y, N, Vr, "[", "\\lbrack", !0);
S(xe, N, ee, "[", "\\lbrack", !0);
S(y, N, Sr, "]", "\\rbrack", !0);
S(xe, N, ee, "]", "\\rbrack", !0);
S(y, N, Vr, "(", "\\lparen", !0);
S(y, N, Sr, ")", "\\rparen", !0);
S(xe, N, ee, "<", "\\textless", !0);
S(xe, N, ee, ">", "\\textgreater", !0);
S(y, N, Vr, "⌊", "\\lfloor", !0);
S(y, N, Sr, "⌋", "\\rfloor", !0);
S(y, N, Vr, "⌈", "\\lceil", !0);
S(y, N, Sr, "⌉", "\\rceil", !0);
S(y, N, ee, "\\", "\\backslash");
S(y, N, ee, "∣", "|");
S(y, N, ee, "∣", "\\vert");
S(xe, N, ee, "|", "\\textbar", !0);
S(y, N, ee, "∥", "\\|");
S(y, N, ee, "∥", "\\Vert");
S(xe, N, ee, "∥", "\\textbardbl");
S(xe, N, ee, "~", "\\textasciitilde");
S(xe, N, ee, "\\", "\\textbackslash");
S(xe, N, ee, "^", "\\textasciicircum");
S(y, N, q, "↑", "\\uparrow", !0);
S(y, N, q, "⇑", "\\Uparrow", !0);
S(y, N, q, "↓", "\\downarrow", !0);
S(y, N, q, "⇓", "\\Downarrow", !0);
S(y, N, q, "↕", "\\updownarrow", !0);
S(y, N, q, "⇕", "\\Updownarrow", !0);
S(y, N, Pn, "∐", "\\coprod");
S(y, N, Pn, "⋁", "\\bigvee");
S(y, N, Pn, "⋀", "\\bigwedge");
S(y, N, Pn, "⨄", "\\biguplus");
S(y, N, Pn, "⋂", "\\bigcap");
S(y, N, Pn, "⋃", "\\bigcup");
S(y, N, Pn, "∫", "\\int");
S(y, N, Pn, "∫", "\\intop");
S(y, N, Pn, "∬", "\\iint");
S(y, N, Pn, "∭", "\\iiint");
S(y, N, Pn, "∏", "\\prod");
S(y, N, Pn, "∑", "\\sum");
S(y, N, Pn, "⨂", "\\bigotimes");
S(y, N, Pn, "⨁", "\\bigoplus");
S(y, N, Pn, "⨀", "\\bigodot");
S(y, N, Pn, "∮", "\\oint");
S(y, N, Pn, "∯", "\\oiint");
S(y, N, Pn, "∰", "\\oiiint");
S(y, N, Pn, "⨆", "\\bigsqcup");
S(y, N, Pn, "∫", "\\smallint");
S(xe, N, ho, "…", "\\textellipsis");
S(y, N, ho, "…", "\\mathellipsis");
S(xe, N, ho, "…", "\\ldots", !0);
S(y, N, ho, "…", "\\ldots", !0);
S(y, N, ho, "⋯", "\\@cdots", !0);
S(y, N, ho, "⋱", "\\ddots", !0);
S(y, N, ee, "⋮", "\\varvdots");
S(y, N, gn, "ˊ", "\\acute");
S(y, N, gn, "ˋ", "\\grave");
S(y, N, gn, "¨", "\\ddot");
S(y, N, gn, "~", "\\tilde");
S(y, N, gn, "ˉ", "\\bar");
S(y, N, gn, "˘", "\\breve");
S(y, N, gn, "ˇ", "\\check");
S(y, N, gn, "^", "\\hat");
S(y, N, gn, "⃗", "\\vec");
S(y, N, gn, "˙", "\\dot");
S(y, N, gn, "˚", "\\mathring");
S(y, N, rt, "", "\\@imath");
S(y, N, rt, "", "\\@jmath");
S(y, N, ee, "ı", "ı");
S(y, N, ee, "ȷ", "ȷ");
S(xe, N, ee, "ı", "\\i", !0);
S(xe, N, ee, "ȷ", "\\j", !0);
S(xe, N, ee, "ß", "\\ss", !0);
S(xe, N, ee, "æ", "\\ae", !0);
S(xe, N, ee, "œ", "\\oe", !0);
S(xe, N, ee, "ø", "\\o", !0);
S(xe, N, ee, "Æ", "\\AE", !0);
S(xe, N, ee, "Œ", "\\OE", !0);
S(xe, N, ee, "Ø", "\\O", !0);
S(xe, N, gn, "ˊ", "\\'");
S(xe, N, gn, "ˋ", "\\`");
S(xe, N, gn, "ˆ", "\\^");
S(xe, N, gn, "˜", "\\~");
S(xe, N, gn, "ˉ", "\\=");
S(xe, N, gn, "˘", "\\u");
S(xe, N, gn, "˙", "\\.");
S(xe, N, gn, "¸", "\\c");
S(xe, N, gn, "˚", "\\r");
S(xe, N, gn, "ˇ", "\\v");
S(xe, N, gn, "¨", '\\"');
S(xe, N, gn, "˝", "\\H");
S(xe, N, gn, "◯", "\\textcircled");
var Qx = {
  "--": !0,
  "---": !0,
  "``": !0,
  "''": !0
};
S(xe, N, ee, "–", "--", !0);
S(xe, N, ee, "–", "\\textendash");
S(xe, N, ee, "—", "---", !0);
S(xe, N, ee, "—", "\\textemdash");
S(xe, N, ee, "‘", "`", !0);
S(xe, N, ee, "‘", "\\textquoteleft");
S(xe, N, ee, "’", "'", !0);
S(xe, N, ee, "’", "\\textquoteright");
S(xe, N, ee, "“", "``", !0);
S(xe, N, ee, "“", "\\textquotedblleft");
S(xe, N, ee, "”", "''", !0);
S(xe, N, ee, "”", "\\textquotedblright");
S(y, N, ee, "°", "\\degree", !0);
S(xe, N, ee, "°", "\\degree");
S(xe, N, ee, "°", "\\textdegree", !0);
S(y, N, ee, "£", "\\pounds");
S(y, N, ee, "£", "\\mathsterling", !0);
S(xe, N, ee, "£", "\\pounds");
S(xe, N, ee, "£", "\\textsterling", !0);
S(y, G, ee, "✠", "\\maltese");
S(xe, G, ee, "✠", "\\maltese");
var zv = '0123456789/@."';
for (var r_ = 0; r_ < zv.length; r_++) {
  var qv = zv.charAt(r_);
  S(y, N, ee, qv, qv);
}
var Vv = '0123456789!@*()-=+";:?/.,';
for (var a_ = 0; a_ < Vv.length; a_++) {
  var $v = Vv.charAt(a_);
  S(xe, N, ee, $v, $v);
}
var sd = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
for (var i_ = 0; i_ < sd.length; i_++) {
  var yu = sd.charAt(i_);
  S(y, N, rt, yu, yu), S(xe, N, ee, yu, yu);
}
S(y, G, ee, "C", "ℂ");
S(xe, G, ee, "C", "ℂ");
S(y, G, ee, "H", "ℍ");
S(xe, G, ee, "H", "ℍ");
S(y, G, ee, "N", "ℕ");
S(xe, G, ee, "N", "ℕ");
S(y, G, ee, "P", "ℙ");
S(xe, G, ee, "P", "ℙ");
S(y, G, ee, "Q", "ℚ");
S(xe, G, ee, "Q", "ℚ");
S(y, G, ee, "R", "ℝ");
S(xe, G, ee, "R", "ℝ");
S(y, G, ee, "Z", "ℤ");
S(xe, G, ee, "Z", "ℤ");
S(y, N, rt, "h", "ℎ");
S(xe, N, rt, "h", "ℎ");
var ct = "";
for (var mr = 0; mr < sd.length; mr++) {
  var vn = sd.charAt(mr);
  ct = String.fromCharCode(55349, 56320 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56372 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56424 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56580 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56684 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56736 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56788 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56840 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56944 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), mr < 26 && (ct = String.fromCharCode(55349, 56632 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct), ct = String.fromCharCode(55349, 56476 + mr), S(y, N, rt, vn, ct), S(xe, N, ee, vn, ct));
}
ct = "𝕜";
S(y, N, rt, "k", ct);
S(xe, N, ee, "k", ct);
for (var as = 0; as < 10; as++) {
  var Ai = as.toString();
  ct = String.fromCharCode(55349, 57294 + as), S(y, N, rt, Ai, ct), S(xe, N, ee, Ai, ct), ct = String.fromCharCode(55349, 57314 + as), S(y, N, rt, Ai, ct), S(xe, N, ee, Ai, ct), ct = String.fromCharCode(55349, 57324 + as), S(y, N, rt, Ai, ct), S(xe, N, ee, Ai, ct), ct = String.fromCharCode(55349, 57334 + as), S(y, N, rt, Ai, ct), S(xe, N, ee, Ai, ct);
}
var Kh = "ÐÞþ";
for (var s_ = 0; s_ < Kh.length; s_++) {
  var vu = Kh.charAt(s_);
  S(y, N, rt, vu, vu), S(xe, N, ee, vu, vu);
}
var Cu = [
  ["mathbf", "textbf", "Main-Bold"],
  // A-Z bold upright
  ["mathbf", "textbf", "Main-Bold"],
  // a-z bold upright
  ["mathnormal", "textit", "Math-Italic"],
  // A-Z italic
  ["mathnormal", "textit", "Math-Italic"],
  // a-z italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // A-Z bold italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // a-z bold italic
  // Map fancy A-Z letters to script, not calligraphic.
  // This aligns with unicode-math and math fonts (except Cambria Math).
  ["mathscr", "textscr", "Script-Regular"],
  // A-Z script
  ["", "", ""],
  // a-z script.  No font
  ["", "", ""],
  // A-Z bold script. No font
  ["", "", ""],
  // a-z bold script. No font
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // A-Z Fraktur
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // a-z Fraktur
  ["mathbb", "textbb", "AMS-Regular"],
  // A-Z double-struck
  ["mathbb", "textbb", "AMS-Regular"],
  // k double-struck
  // Note that we are using a bold font, but font metrics for regular Fraktur.
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // A-Z bold Fraktur
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // a-z bold Fraktur
  ["mathsf", "textsf", "SansSerif-Regular"],
  // A-Z sans-serif
  ["mathsf", "textsf", "SansSerif-Regular"],
  // a-z sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // A-Z bold sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // a-z bold sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // A-Z italic sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // a-z italic sans-serif
  ["", "", ""],
  // A-Z bold italic sans. No font
  ["", "", ""],
  // a-z bold italic sans. No font
  ["mathtt", "texttt", "Typewriter-Regular"],
  // A-Z monospace
  ["mathtt", "texttt", "Typewriter-Regular"]
  // a-z monospace
], Wv = [
  ["mathbf", "textbf", "Main-Bold"],
  // 0-9 bold
  ["", "", ""],
  // 0-9 double-struck. No KaTeX font.
  ["mathsf", "textsf", "SansSerif-Regular"],
  // 0-9 sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // 0-9 bold sans-serif
  ["mathtt", "texttt", "Typewriter-Regular"]
  // 0-9 monospace
], SV = function(e, n) {
  var r = e.charCodeAt(0), a = e.charCodeAt(1), i = (r - 55296) * 1024 + (a - 56320) + 65536, s = n === "math" ? 0 : 1;
  if (119808 <= i && i < 120484) {
    var l = Math.floor((i - 119808) / 26);
    return [Cu[l][2], Cu[l][s]];
  } else if (120782 <= i && i <= 120831) {
    var c = Math.floor((i - 120782) / 10);
    return [Wv[c][2], Wv[c][s]];
  } else {
    if (i === 120485 || i === 120486)
      return [Cu[0][2], Cu[0][s]];
    if (120486 < i && i < 120782)
      return ["", ""];
    throw new ke("Unsupported character: " + e);
  }
}, Bd = function(e, n, r) {
  return on[r][e] && on[r][e].replace && (e = on[r][e].replace), {
    value: e,
    metrics: d1(e, n, r)
  };
}, ha = function(e, n, r, a, i) {
  var s = Bd(e, n, r), l = s.metrics;
  e = s.value;
  var c;
  if (l) {
    var d = l.italic;
    (r === "text" || a && a.font === "mathit") && (d = 0), c = new la(e, l.height, l.depth, d, l.skew, l.width, i);
  } else
    typeof console < "u" && console.warn("No character metrics " + ("for '" + e + "' in style '" + n + "' and mode '" + r + "'")), c = new la(e, 0, 0, 0, 0, 0, i);
  if (a) {
    c.maxFontSize = a.sizeMultiplier, a.style.isTight() && c.classes.push("mtight");
    var p = a.getColor();
    p && (c.style.color = p);
  }
  return c;
}, bV = function(e, n, r, a) {
  return a === void 0 && (a = []), r.font === "boldsymbol" && Bd(e, "Main-Bold", n).metrics ? ha(e, "Main-Bold", n, r, a.concat(["mathbf"])) : e === "\\" || on[n][e].font === "main" ? ha(e, "Main-Regular", n, r, a) : ha(e, "AMS-Regular", n, r, a.concat(["amsrm"]));
}, TV = function(e, n, r, a, i) {
  return i !== "textord" && Bd(e, "Math-BoldItalic", n).metrics ? {
    fontName: "Math-BoldItalic",
    fontClass: "boldsymbol"
  } : {
    fontName: "Main-Bold",
    fontClass: "mathbf"
  };
}, yV = function(e, n, r) {
  var a = e.mode, i = e.text, s = ["mord"], l = a === "math" || a === "text" && n.font, c = l ? n.font : n.fontFamily, d = "", p = "";
  if (i.charCodeAt(0) === 55349 && ([d, p] = SV(i, a)), d.length > 0)
    return ha(i, d, a, n, s.concat(p));
  if (c) {
    var _, f;
    if (c === "boldsymbol") {
      var g = TV(i, a, n, s, r);
      _ = g.fontName, f = [g.fontClass];
    } else l ? (_ = Zx[c].fontName, f = [c]) : (_ = Ru(c, n.fontWeight, n.fontShape), f = [c, n.fontWeight, n.fontShape]);
    if (Bd(i, _, a).metrics)
      return ha(i, _, a, n, s.concat(f));
    if (Qx.hasOwnProperty(i) && _.slice(0, 10) === "Typewriter") {
      for (var E = [], T = 0; T < i.length; T++)
        E.push(ha(i[T], _, a, n, s.concat(f)));
      return Xx(E);
    }
  }
  if (r === "mathord")
    return ha(i, "Math-Italic", a, n, s.concat(["mathnormal"]));
  if (r === "textord") {
    var R = on[a][i] && on[a][i].font;
    if (R === "ams") {
      var A = Ru("amsrm", n.fontWeight, n.fontShape);
      return ha(i, A, a, n, s.concat("amsrm", n.fontWeight, n.fontShape));
    } else if (R === "main" || !R) {
      var I = Ru("textrm", n.fontWeight, n.fontShape);
      return ha(i, I, a, n, s.concat(n.fontWeight, n.fontShape));
    } else {
      var x = Ru(R, n.fontWeight, n.fontShape);
      return ha(i, x, a, n, s.concat(x, n.fontWeight, n.fontShape));
    }
  } else
    throw new Error("unexpected type: " + r + " in makeOrd");
}, vV = (t, e) => {
  if (Bi(t.classes) !== Bi(e.classes) || t.skew !== e.skew || t.maxFontSize !== e.maxFontSize)
    return !1;
  if (t.classes.length === 1) {
    var n = t.classes[0];
    if (n === "mbin" || n === "mord")
      return !1;
  }
  for (var r in t.style)
    if (t.style.hasOwnProperty(r) && t.style[r] !== e.style[r])
      return !1;
  for (var a in e.style)
    if (e.style.hasOwnProperty(a) && t.style[a] !== e.style[a])
      return !1;
  return !0;
}, CV = (t) => {
  for (var e = 0; e < t.length - 1; e++) {
    var n = t[e], r = t[e + 1];
    n instanceof la && r instanceof la && vV(n, r) && (n.text += r.text, n.height = Math.max(n.height, r.height), n.depth = Math.max(n.depth, r.depth), n.italic = r.italic, t.splice(e + 1, 1), e--);
  }
  return t;
}, _1 = function(e) {
  for (var n = 0, r = 0, a = 0, i = 0; i < e.children.length; i++) {
    var s = e.children[i];
    s.height > n && (n = s.height), s.depth > r && (r = s.depth), s.maxFontSize > a && (a = s.maxFontSize);
  }
  e.height = n, e.depth = r, e.maxFontSize = a;
}, Nr = function(e, n, r, a) {
  var i = new ec(e, n, r, a);
  return _1(i), i;
}, jx = (t, e, n, r) => new ec(t, e, n, r), RV = function(e, n, r) {
  var a = Nr([e], [], n);
  return a.height = Math.max(r || n.fontMetrics().defaultRuleThickness, n.minRuleThickness), a.style.borderBottomWidth = Ye(a.height), a.maxFontSize = 1, a;
}, AV = function(e, n, r, a) {
  var i = new p1(e, n, r, a);
  return _1(i), i;
}, Xx = function(e) {
  var n = new Jl(e);
  return _1(n), n;
}, OV = function(e, n) {
  return e instanceof Jl ? Nr([], [e], n) : e;
}, NV = function(e) {
  if (e.positionType === "individualShift") {
    for (var n = e.children, r = [n[0]], a = -n[0].shift - n[0].elem.depth, i = a, s = 1; s < n.length; s++) {
      var l = -n[s].shift - i - n[s].elem.depth, c = l - (n[s - 1].elem.height + n[s - 1].elem.depth);
      i = i + l, r.push({
        type: "kern",
        size: c
      }), r.push(n[s]);
    }
    return {
      children: r,
      depth: a
    };
  }
  var d;
  if (e.positionType === "top") {
    for (var p = e.positionData, _ = 0; _ < e.children.length; _++) {
      var f = e.children[_];
      p -= f.type === "kern" ? f.size : f.elem.height + f.elem.depth;
    }
    d = p;
  } else if (e.positionType === "bottom")
    d = -e.positionData;
  else {
    var g = e.children[0];
    if (g.type !== "elem")
      throw new Error('First child must have type "elem".');
    if (e.positionType === "shift")
      d = -g.elem.depth - e.positionData;
    else if (e.positionType === "firstBaseline")
      d = -g.elem.depth;
    else
      throw new Error("Invalid positionType " + e.positionType + ".");
  }
  return {
    children: e.children,
    depth: d
  };
}, IV = function(e, n) {
  for (var {
    children: r,
    depth: a
  } = NV(e), i = 0, s = 0; s < r.length; s++) {
    var l = r[s];
    if (l.type === "elem") {
      var c = l.elem;
      i = Math.max(i, c.maxFontSize, c.height);
    }
  }
  i += 2;
  var d = Nr(["pstrut"], []);
  d.style.height = Ye(i);
  for (var p = [], _ = a, f = a, g = a, E = 0; E < r.length; E++) {
    var T = r[E];
    if (T.type === "kern")
      g += T.size;
    else {
      var R = T.elem, A = T.wrapperClasses || [], I = T.wrapperStyle || {}, x = Nr(A, [d, R], void 0, I);
      x.style.top = Ye(-i - g - R.depth), T.marginLeft && (x.style.marginLeft = T.marginLeft), T.marginRight && (x.style.marginRight = T.marginRight), p.push(x), g += R.height + R.depth;
    }
    _ = Math.min(_, g), f = Math.max(f, g);
  }
  var P = Nr(["vlist"], p);
  P.style.height = Ye(f);
  var D;
  if (_ < 0) {
    var L = Nr([], []), K = Nr(["vlist"], [L]);
    K.style.height = Ye(-_);
    var J = Nr(["vlist-s"], [new la("​")]);
    D = [Nr(["vlist-r"], [P, J]), Nr(["vlist-r"], [K])];
  } else
    D = [Nr(["vlist-r"], [P])];
  var X = Nr(["vlist-t"], D);
  return D.length === 2 && X.classes.push("vlist-t2"), X.height = f, X.depth = -_, X;
}, xV = (t, e) => {
  var n = Nr(["mspace"], [], e), r = Tn(t, e);
  return n.style.marginRight = Ye(r), n;
}, Ru = function(e, n, r) {
  var a = "";
  switch (e) {
    case "amsrm":
      a = "AMS";
      break;
    case "textrm":
      a = "Main";
      break;
    case "textsf":
      a = "SansSerif";
      break;
    case "texttt":
      a = "Typewriter";
      break;
    default:
      a = e;
  }
  var i;
  return n === "textbf" && r === "textit" ? i = "BoldItalic" : n === "textbf" ? i = "Bold" : n === "textit" ? i = "Italic" : i = "Regular", a + "-" + i;
}, Zx = {
  // styles
  mathbf: {
    variant: "bold",
    fontName: "Main-Bold"
  },
  mathrm: {
    variant: "normal",
    fontName: "Main-Regular"
  },
  textit: {
    variant: "italic",
    fontName: "Main-Italic"
  },
  mathit: {
    variant: "italic",
    fontName: "Main-Italic"
  },
  mathnormal: {
    variant: "italic",
    fontName: "Math-Italic"
  },
  // "boldsymbol" is missing because they require the use of multiple fonts:
  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
  // makeOrd which ends up calling boldsymbol.
  // families
  mathbb: {
    variant: "double-struck",
    fontName: "AMS-Regular"
  },
  mathcal: {
    variant: "script",
    fontName: "Caligraphic-Regular"
  },
  mathfrak: {
    variant: "fraktur",
    fontName: "Fraktur-Regular"
  },
  mathscr: {
    variant: "script",
    fontName: "Script-Regular"
  },
  mathsf: {
    variant: "sans-serif",
    fontName: "SansSerif-Regular"
  },
  mathtt: {
    variant: "monospace",
    fontName: "Typewriter-Regular"
  }
}, Jx = {
  //   path, width, height
  vec: ["vec", 0.471, 0.714],
  // values from the font glyph
  oiintSize1: ["oiintSize1", 0.957, 0.499],
  // oval to overlay the integrand
  oiintSize2: ["oiintSize2", 1.472, 0.659],
  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
}, DV = function(e, n) {
  var [r, a, i] = Jx[e], s = new Ui(r), l = new ci([s], {
    width: Ye(a),
    height: Ye(i),
    // Override CSS rule `.katex svg { width: 100% }`
    style: "width:" + Ye(a),
    viewBox: "0 0 " + 1e3 * a + " " + 1e3 * i,
    preserveAspectRatio: "xMinYMin"
  }), c = jx(["overlay"], [l], n);
  return c.height = i, c.style.height = Ye(i), c.style.width = Ye(a), c;
}, le = {
  fontMap: Zx,
  makeSymbol: ha,
  mathsym: bV,
  makeSpan: Nr,
  makeSvgSpan: jx,
  makeLineSpan: RV,
  makeAnchor: AV,
  makeFragment: Xx,
  wrapFragment: OV,
  makeVList: IV,
  makeOrd: yV,
  makeGlue: xV,
  staticSvg: DV,
  svgData: Jx,
  tryCombineChars: CV
}, Sn = {
  number: 3,
  unit: "mu"
}, is = {
  number: 4,
  unit: "mu"
}, ri = {
  number: 5,
  unit: "mu"
}, wV = {
  mord: {
    mop: Sn,
    mbin: is,
    mrel: ri,
    minner: Sn
  },
  mop: {
    mord: Sn,
    mop: Sn,
    mrel: ri,
    minner: Sn
  },
  mbin: {
    mord: is,
    mop: is,
    mopen: is,
    minner: is
  },
  mrel: {
    mord: ri,
    mop: ri,
    mopen: ri,
    minner: ri
  },
  mopen: {},
  mclose: {
    mop: Sn,
    mbin: is,
    mrel: ri,
    minner: Sn
  },
  mpunct: {
    mord: Sn,
    mop: Sn,
    mrel: ri,
    mopen: Sn,
    mclose: Sn,
    mpunct: Sn,
    minner: Sn
  },
  minner: {
    mord: Sn,
    mop: Sn,
    mbin: is,
    mrel: ri,
    mopen: Sn,
    mpunct: Sn,
    minner: Sn
  }
}, LV = {
  mord: {
    mop: Sn
  },
  mop: {
    mord: Sn,
    mop: Sn
  },
  mbin: {},
  mrel: {},
  mopen: {},
  mclose: {
    mop: Sn
  },
  mpunct: {},
  minner: {
    mop: Sn
  }
}, e4 = {}, od = {}, ld = {};
function Ve(t) {
  for (var {
    type: e,
    names: n,
    props: r,
    handler: a,
    htmlBuilder: i,
    mathmlBuilder: s
  } = t, l = {
    type: e,
    numArgs: r.numArgs,
    argTypes: r.argTypes,
    allowedInArgument: !!r.allowedInArgument,
    allowedInText: !!r.allowedInText,
    allowedInMath: r.allowedInMath === void 0 ? !0 : r.allowedInMath,
    numOptionalArgs: r.numOptionalArgs || 0,
    infix: !!r.infix,
    primitive: !!r.primitive,
    handler: a
  }, c = 0; c < n.length; ++c)
    e4[n[c]] = l;
  e && (i && (od[e] = i), s && (ld[e] = s));
}
function Ss(t) {
  var {
    type: e,
    htmlBuilder: n,
    mathmlBuilder: r
  } = t;
  Ve({
    type: e,
    names: [],
    props: {
      numArgs: 0
    },
    handler() {
      throw new Error("Should never be called.");
    },
    htmlBuilder: n,
    mathmlBuilder: r
  });
}
var cd = function(e) {
  return e.type === "ordgroup" && e.body.length === 1 ? e.body[0] : e;
}, Dn = function(e) {
  return e.type === "ordgroup" ? e.body : [e];
}, ui = le.makeSpan, MV = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"], kV = ["rightmost", "mrel", "mclose", "mpunct"], PV = {
  display: at.DISPLAY,
  text: at.TEXT,
  script: at.SCRIPT,
  scriptscript: at.SCRIPTSCRIPT
}, FV = {
  mord: "mord",
  mop: "mop",
  mbin: "mbin",
  mrel: "mrel",
  mopen: "mopen",
  mclose: "mclose",
  mpunct: "mpunct",
  minner: "minner"
}, zn = function(e, n, r, a) {
  a === void 0 && (a = [null, null]);
  for (var i = [], s = 0; s < e.length; s++) {
    var l = Ut(e[s], n);
    if (l instanceof Jl) {
      var c = l.children;
      i.push(...c);
    } else
      i.push(l);
  }
  if (le.tryCombineChars(i), !r)
    return i;
  var d = n;
  if (e.length === 1) {
    var p = e[0];
    p.type === "sizing" ? d = n.havingSize(p.size) : p.type === "styling" && (d = n.havingStyle(PV[p.style]));
  }
  var _ = ui([a[0] || "leftmost"], [], n), f = ui([a[1] || "rightmost"], [], n), g = r === "root";
  return Kv(i, (E, T) => {
    var R = T.classes[0], A = E.classes[0];
    R === "mbin" && tt.contains(kV, A) ? T.classes[0] = "mord" : A === "mbin" && tt.contains(MV, R) && (E.classes[0] = "mord");
  }, {
    node: _
  }, f, g), Kv(i, (E, T) => {
    var R = Qh(T), A = Qh(E), I = R && A ? E.hasClass("mtight") ? LV[R][A] : wV[R][A] : null;
    if (I)
      return le.makeGlue(I, d);
  }, {
    node: _
  }, f, g), i;
}, Kv = function t(e, n, r, a, i) {
  a && e.push(a);
  for (var s = 0; s < e.length; s++) {
    var l = e[s], c = t4(l);
    if (c) {
      t(c.children, n, r, null, i);
      continue;
    }
    var d = !l.hasClass("mspace");
    if (d) {
      var p = n(l, r.node);
      p && (r.insertAfter ? r.insertAfter(p) : (e.unshift(p), s++));
    }
    d ? r.node = l : i && l.hasClass("newline") && (r.node = ui(["leftmost"])), r.insertAfter = /* @__PURE__ */ ((_) => (f) => {
      e.splice(_ + 1, 0, f), s++;
    })(s);
  }
  a && e.pop();
}, t4 = function(e) {
  return e instanceof Jl || e instanceof p1 || e instanceof ec && e.hasClass("enclosing") ? e : null;
}, BV = function t(e, n) {
  var r = t4(e);
  if (r) {
    var a = r.children;
    if (a.length) {
      if (n === "right")
        return t(a[a.length - 1], "right");
      if (n === "left")
        return t(a[0], "left");
    }
  }
  return e;
}, Qh = function(e, n) {
  return e ? (n && (e = BV(e, n)), FV[e.classes[0]] || null) : null;
}, Fl = function(e, n) {
  var r = ["nulldelimiter"].concat(e.baseSizingClasses());
  return ui(n.concat(r));
}, Ut = function(e, n, r) {
  if (!e)
    return ui();
  if (od[e.type]) {
    var a = od[e.type](e, n);
    if (r && n.size !== r.size) {
      a = ui(n.sizingClasses(r), [a], n);
      var i = n.sizeMultiplier / r.sizeMultiplier;
      a.height *= i, a.depth *= i;
    }
    return a;
  } else
    throw new ke("Got group of unknown type: '" + e.type + "'");
};
function Au(t, e) {
  var n = ui(["base"], t, e), r = ui(["strut"]);
  return r.style.height = Ye(n.height + n.depth), n.depth && (r.style.verticalAlign = Ye(-n.depth)), n.children.unshift(r), n;
}
function jh(t, e) {
  var n = null;
  t.length === 1 && t[0].type === "tag" && (n = t[0].tag, t = t[0].body);
  var r = zn(t, e, "root"), a;
  r.length === 2 && r[1].hasClass("tag") && (a = r.pop());
  for (var i = [], s = [], l = 0; l < r.length; l++)
    if (s.push(r[l]), r[l].hasClass("mbin") || r[l].hasClass("mrel") || r[l].hasClass("allowbreak")) {
      for (var c = !1; l < r.length - 1 && r[l + 1].hasClass("mspace") && !r[l + 1].hasClass("newline"); )
        l++, s.push(r[l]), r[l].hasClass("nobreak") && (c = !0);
      c || (i.push(Au(s, e)), s = []);
    } else r[l].hasClass("newline") && (s.pop(), s.length > 0 && (i.push(Au(s, e)), s = []), i.push(r[l]));
  s.length > 0 && i.push(Au(s, e));
  var d;
  n ? (d = Au(zn(n, e, !0)), d.classes = ["tag"], i.push(d)) : a && i.push(a);
  var p = ui(["katex-html"], i);
  if (p.setAttribute("aria-hidden", "true"), d) {
    var _ = d.children[0];
    _.style.height = Ye(p.height + p.depth), p.depth && (_.style.verticalAlign = Ye(-p.depth));
  }
  return p;
}
function n4(t) {
  return new Jl(t);
}
class aa {
  constructor(e, n, r) {
    this.type = void 0, this.attributes = void 0, this.children = void 0, this.classes = void 0, this.type = e, this.attributes = {}, this.children = n || [], this.classes = r || [];
  }
  /**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */
  setAttribute(e, n) {
    this.attributes[e] = n;
  }
  /**
   * Gets an attribute on a MathML node.
   */
  getAttribute(e) {
    return this.attributes[e];
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    var e = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);
    for (var n in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, n) && e.setAttribute(n, this.attributes[n]);
    this.classes.length > 0 && (e.className = Bi(this.classes));
    for (var r = 0; r < this.children.length; r++)
      e.appendChild(this.children[r].toNode());
    return e;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    var e = "<" + this.type;
    for (var n in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, n) && (e += " " + n + '="', e += tt.escape(this.attributes[n]), e += '"');
    this.classes.length > 0 && (e += ' class ="' + tt.escape(Bi(this.classes)) + '"'), e += ">";
    for (var r = 0; r < this.children.length; r++)
      e += this.children[r].toMarkup();
    return e += "</" + this.type + ">", e;
  }
  /**
   * Converts the math node into a string, similar to innerText, but escaped.
   */
  toText() {
    return this.children.map((e) => e.toText()).join("");
  }
}
class bl {
  constructor(e) {
    this.text = void 0, this.text = e;
  }
  /**
   * Converts the text node into a DOM text node.
   */
  toNode() {
    return document.createTextNode(this.text);
  }
  /**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */
  toMarkup() {
    return tt.escape(this.toText());
  }
  /**
   * Converts the text node into a string
   * (representing the text itself).
   */
  toText() {
    return this.text;
  }
}
class UV {
  /**
   * Create a Space node with width given in CSS ems.
   */
  constructor(e) {
    this.width = void 0, this.character = void 0, this.width = e, e >= 0.05555 && e <= 0.05556 ? this.character = " " : e >= 0.1666 && e <= 0.1667 ? this.character = " " : e >= 0.2222 && e <= 0.2223 ? this.character = " " : e >= 0.2777 && e <= 0.2778 ? this.character = "  " : e >= -0.05556 && e <= -0.05555 ? this.character = " ⁣" : e >= -0.1667 && e <= -0.1666 ? this.character = " ⁣" : e >= -0.2223 && e <= -0.2222 ? this.character = " ⁣" : e >= -0.2778 && e <= -0.2777 ? this.character = " ⁣" : this.character = null;
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    if (this.character)
      return document.createTextNode(this.character);
    var e = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
    return e.setAttribute("width", Ye(this.width)), e;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    return this.character ? "<mtext>" + this.character + "</mtext>" : '<mspace width="' + Ye(this.width) + '"/>';
  }
  /**
   * Converts the math node into a string, similar to innerText.
   */
  toText() {
    return this.character ? this.character : " ";
  }
}
var Le = {
  MathNode: aa,
  TextNode: bl,
  SpaceNode: UV,
  newDocumentFragment: n4
}, ca = function(e, n, r) {
  return on[n][e] && on[n][e].replace && e.charCodeAt(0) !== 55349 && !(Qx.hasOwnProperty(e) && r && (r.fontFamily && r.fontFamily.slice(4, 6) === "tt" || r.font && r.font.slice(4, 6) === "tt")) && (e = on[n][e].replace), new Le.TextNode(e);
}, m1 = function(e) {
  return e.length === 1 ? e[0] : new Le.MathNode("mrow", e);
}, f1 = function(e, n) {
  if (n.fontFamily === "texttt")
    return "monospace";
  if (n.fontFamily === "textsf")
    return n.fontShape === "textit" && n.fontWeight === "textbf" ? "sans-serif-bold-italic" : n.fontShape === "textit" ? "sans-serif-italic" : n.fontWeight === "textbf" ? "bold-sans-serif" : "sans-serif";
  if (n.fontShape === "textit" && n.fontWeight === "textbf")
    return "bold-italic";
  if (n.fontShape === "textit")
    return "italic";
  if (n.fontWeight === "textbf")
    return "bold";
  var r = n.font;
  if (!r || r === "mathnormal")
    return null;
  var a = e.mode;
  if (r === "mathit")
    return "italic";
  if (r === "boldsymbol")
    return e.type === "textord" ? "bold" : "bold-italic";
  if (r === "mathbf")
    return "bold";
  if (r === "mathbb")
    return "double-struck";
  if (r === "mathfrak")
    return "fraktur";
  if (r === "mathscr" || r === "mathcal")
    return "script";
  if (r === "mathsf")
    return "sans-serif";
  if (r === "mathtt")
    return "monospace";
  var i = e.text;
  if (tt.contains(["\\imath", "\\jmath"], i))
    return null;
  on[a][i] && on[a][i].replace && (i = on[a][i].replace);
  var s = le.fontMap[r].fontName;
  return d1(i, s, a) ? le.fontMap[r].variant : null;
}, Dr = function(e, n, r) {
  if (e.length === 1) {
    var a = tn(e[0], n);
    return r && a instanceof aa && a.type === "mo" && (a.setAttribute("lspace", "0em"), a.setAttribute("rspace", "0em")), [a];
  }
  for (var i = [], s, l = 0; l < e.length; l++) {
    var c = tn(e[l], n);
    if (c instanceof aa && s instanceof aa) {
      if (c.type === "mtext" && s.type === "mtext" && c.getAttribute("mathvariant") === s.getAttribute("mathvariant")) {
        s.children.push(...c.children);
        continue;
      } else if (c.type === "mn" && s.type === "mn") {
        s.children.push(...c.children);
        continue;
      } else if (c.type === "mi" && c.children.length === 1 && s.type === "mn") {
        var d = c.children[0];
        if (d instanceof bl && d.text === ".") {
          s.children.push(...c.children);
          continue;
        }
      } else if (s.type === "mi" && s.children.length === 1) {
        var p = s.children[0];
        if (p instanceof bl && p.text === "̸" && (c.type === "mo" || c.type === "mi" || c.type === "mn")) {
          var _ = c.children[0];
          _ instanceof bl && _.text.length > 0 && (_.text = _.text.slice(0, 1) + "̸" + _.text.slice(1), i.pop());
        }
      }
    }
    i.push(c), s = c;
  }
  return i;
}, Gi = function(e, n, r) {
  return m1(Dr(e, n, r));
}, tn = function(e, n) {
  if (!e)
    return new Le.MathNode("mrow");
  if (ld[e.type]) {
    var r = ld[e.type](e, n);
    return r;
  } else
    throw new ke("Got group of unknown type: '" + e.type + "'");
};
function Qv(t, e, n, r, a) {
  var i = Dr(t, n), s;
  i.length === 1 && i[0] instanceof aa && tt.contains(["mrow", "mtable"], i[0].type) ? s = i[0] : s = new Le.MathNode("mrow", i);
  var l = new Le.MathNode("annotation", [new Le.TextNode(e)]);
  l.setAttribute("encoding", "application/x-tex");
  var c = new Le.MathNode("semantics", [s, l]), d = new Le.MathNode("math", [c]);
  d.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML"), r && d.setAttribute("display", "block");
  var p = a ? "katex" : "katex-mathml";
  return le.makeSpan([p], [d]);
}
var r4 = function(e) {
  return new ai({
    style: e.displayMode ? at.DISPLAY : at.TEXT,
    maxSize: e.maxSize,
    minRuleThickness: e.minRuleThickness
  });
}, a4 = function(e, n) {
  if (n.displayMode) {
    var r = ["katex-display"];
    n.leqno && r.push("leqno"), n.fleqn && r.push("fleqn"), e = le.makeSpan(r, [e]);
  }
  return e;
}, GV = function(e, n, r) {
  var a = r4(r), i;
  if (r.output === "mathml")
    return Qv(e, n, a, r.displayMode, !0);
  if (r.output === "html") {
    var s = jh(e, a);
    i = le.makeSpan(["katex"], [s]);
  } else {
    var l = Qv(e, n, a, r.displayMode, !1), c = jh(e, a);
    i = le.makeSpan(["katex"], [l, c]);
  }
  return a4(i, r);
}, HV = function(e, n, r) {
  var a = r4(r), i = jh(e, a), s = le.makeSpan(["katex"], [i]);
  return a4(s, r);
}, YV = {
  widehat: "^",
  widecheck: "ˇ",
  widetilde: "~",
  utilde: "~",
  overleftarrow: "←",
  underleftarrow: "←",
  xleftarrow: "←",
  overrightarrow: "→",
  underrightarrow: "→",
  xrightarrow: "→",
  underbrace: "⏟",
  overbrace: "⏞",
  overgroup: "⏠",
  undergroup: "⏡",
  overleftrightarrow: "↔",
  underleftrightarrow: "↔",
  xleftrightarrow: "↔",
  Overrightarrow: "⇒",
  xRightarrow: "⇒",
  overleftharpoon: "↼",
  xleftharpoonup: "↼",
  overrightharpoon: "⇀",
  xrightharpoonup: "⇀",
  xLeftarrow: "⇐",
  xLeftrightarrow: "⇔",
  xhookleftarrow: "↩",
  xhookrightarrow: "↪",
  xmapsto: "↦",
  xrightharpoondown: "⇁",
  xleftharpoondown: "↽",
  xrightleftharpoons: "⇌",
  xleftrightharpoons: "⇋",
  xtwoheadleftarrow: "↞",
  xtwoheadrightarrow: "↠",
  xlongequal: "=",
  xtofrom: "⇄",
  xrightleftarrows: "⇄",
  xrightequilibrium: "⇌",
  // Not a perfect match.
  xleftequilibrium: "⇋",
  // None better available.
  "\\cdrightarrow": "→",
  "\\cdleftarrow": "←",
  "\\cdlongequal": "="
}, zV = function(e) {
  var n = new Le.MathNode("mo", [new Le.TextNode(YV[e.replace(/^\\/, "")])]);
  return n.setAttribute("stretchy", "true"), n;
}, qV = {
  //   path(s), minWidth, height, align
  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
  "\\cdrightarrow": [["rightarrow"], 3, 522, "xMaxYMin"],
  // CD minwwidth2.5pc
  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
  "\\cdleftarrow": [["leftarrow"], 3, 522, "xMinYMin"],
  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
  "\\cdlongequal": [["longequal"], 3, 334, "xMinYMin"],
  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
  // The next three arrows are from the mhchem package.
  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
  // document as \xrightarrow or \xrightleftharpoons. Those have
  // min-length = 1.75em, so we set min-length on these next three to match.
  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
}, VV = function(e) {
  return e.type === "ordgroup" ? e.body.length : 1;
}, $V = function(e, n) {
  function r() {
    var l = 4e5, c = e.label.slice(1);
    if (tt.contains(["widehat", "widecheck", "widetilde", "utilde"], c)) {
      var d = e, p = VV(d.base), _, f, g;
      if (p > 5)
        c === "widehat" || c === "widecheck" ? (_ = 420, l = 2364, g = 0.42, f = c + "4") : (_ = 312, l = 2340, g = 0.34, f = "tilde4");
      else {
        var E = [1, 1, 2, 2, 3, 3][p];
        c === "widehat" || c === "widecheck" ? (l = [0, 1062, 2364, 2364, 2364][E], _ = [0, 239, 300, 360, 420][E], g = [0, 0.24, 0.3, 0.3, 0.36, 0.42][E], f = c + E) : (l = [0, 600, 1033, 2339, 2340][E], _ = [0, 260, 286, 306, 312][E], g = [0, 0.26, 0.286, 0.3, 0.306, 0.34][E], f = "tilde" + E);
      }
      var T = new Ui(f), R = new ci([T], {
        width: "100%",
        height: Ye(g),
        viewBox: "0 0 " + l + " " + _,
        preserveAspectRatio: "none"
      });
      return {
        span: le.makeSvgSpan([], [R], n),
        minWidth: 0,
        height: g
      };
    } else {
      var A = [], I = qV[c], [x, P, D] = I, L = D / 1e3, K = x.length, J, X;
      if (K === 1) {
        var $ = I[3];
        J = ["hide-tail"], X = [$];
      } else if (K === 2)
        J = ["halfarrow-left", "halfarrow-right"], X = ["xMinYMin", "xMaxYMin"];
      else if (K === 3)
        J = ["brace-left", "brace-center", "brace-right"], X = ["xMinYMin", "xMidYMin", "xMaxYMin"];
      else
        throw new Error(`Correct katexImagesData or update code here to support
                    ` + K + " children.");
      for (var ae = 0; ae < K; ae++) {
        var ce = new Ui(x[ae]), ve = new ci([ce], {
          width: "400em",
          height: Ye(L),
          viewBox: "0 0 " + l + " " + D,
          preserveAspectRatio: X[ae] + " slice"
        }), ge = le.makeSvgSpan([J[ae]], [ve], n);
        if (K === 1)
          return {
            span: ge,
            minWidth: P,
            height: L
          };
        ge.style.height = Ye(L), A.push(ge);
      }
      return {
        span: le.makeSpan(["stretchy"], A, n),
        minWidth: P,
        height: L
      };
    }
  }
  var {
    span: a,
    minWidth: i,
    height: s
  } = r();
  return a.height = s, a.style.height = Ye(s), i > 0 && (a.style.minWidth = Ye(i)), a;
}, WV = function(e, n, r, a, i) {
  var s, l = e.height + e.depth + r + a;
  if (/fbox|color|angl/.test(n)) {
    if (s = le.makeSpan(["stretchy", n], [], i), n === "fbox") {
      var c = i.color && i.getColor();
      c && (s.style.borderColor = c);
    }
  } else {
    var d = [];
    /^[bx]cancel$/.test(n) && d.push(new Wh({
      x1: "0",
      y1: "0",
      x2: "100%",
      y2: "100%",
      "stroke-width": "0.046em"
    })), /^x?cancel$/.test(n) && d.push(new Wh({
      x1: "0",
      y1: "100%",
      x2: "100%",
      y2: "0",
      "stroke-width": "0.046em"
    }));
    var p = new ci(d, {
      width: "100%",
      height: Ye(l)
    });
    s = le.makeSvgSpan([], [p], i);
  }
  return s.height = l, s.style.height = Ye(l), s;
}, di = {
  encloseSpan: WV,
  mathMLnode: zV,
  svgSpan: $V
};
function St(t, e) {
  if (!t || t.type !== e)
    throw new Error("Expected node of type " + e + ", but got " + (t ? "node of type " + t.type : String(t)));
  return t;
}
function g1(t) {
  var e = Ud(t);
  if (!e)
    throw new Error("Expected node of symbol group type, but got " + (t ? "node of type " + t.type : String(t)));
  return e;
}
function Ud(t) {
  return t && (t.type === "atom" || EV.hasOwnProperty(t.type)) ? t : null;
}
var h1 = (t, e) => {
  var n, r, a;
  t && t.type === "supsub" ? (r = St(t.base, "accent"), n = r.base, t.base = n, a = gV(Ut(t, e)), t.base = r) : (r = St(t, "accent"), n = r.base);
  var i = Ut(n, e.havingCrampedStyle()), s = r.isShifty && tt.isCharacterBox(n), l = 0;
  if (s) {
    var c = tt.getBaseElem(n), d = Ut(c, e.havingCrampedStyle());
    l = Yv(d).skew;
  }
  var p = r.label === "\\c", _ = p ? i.height + i.depth : Math.min(i.height, e.fontMetrics().xHeight), f;
  if (r.isStretchy)
    f = di.svgSpan(r, e), f = le.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: i
      }, {
        type: "elem",
        elem: f,
        wrapperClasses: ["svg-align"],
        wrapperStyle: l > 0 ? {
          width: "calc(100% - " + Ye(2 * l) + ")",
          marginLeft: Ye(2 * l)
        } : void 0
      }]
    }, e);
  else {
    var g, E;
    r.label === "\\vec" ? (g = le.staticSvg("vec", e), E = le.svgData.vec[1]) : (g = le.makeOrd({
      mode: r.mode,
      text: r.label
    }, e, "textord"), g = Yv(g), g.italic = 0, E = g.width, p && (_ += g.depth)), f = le.makeSpan(["accent-body"], [g]);
    var T = r.label === "\\textcircled";
    T && (f.classes.push("accent-full"), _ = i.height);
    var R = l;
    T || (R -= E / 2), f.style.left = Ye(R), r.label === "\\textcircled" && (f.style.top = ".2em"), f = le.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: i
      }, {
        type: "kern",
        size: -_
      }, {
        type: "elem",
        elem: f
      }]
    }, e);
  }
  var A = le.makeSpan(["mord", "accent"], [f], e);
  return a ? (a.children[0] = A, a.height = Math.max(A.height, a.height), a.classes[0] = "mord", a) : A;
}, i4 = (t, e) => {
  var n = t.isStretchy ? di.mathMLnode(t.label) : new Le.MathNode("mo", [ca(t.label, t.mode)]), r = new Le.MathNode("mover", [tn(t.base, e), n]);
  return r.setAttribute("accent", "true"), r;
}, KV = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map((t) => "\\" + t).join("|"));
Ve({
  type: "accent",
  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
  props: {
    numArgs: 1
  },
  handler: (t, e) => {
    var n = cd(e[0]), r = !KV.test(t.funcName), a = !r || t.funcName === "\\widehat" || t.funcName === "\\widetilde" || t.funcName === "\\widecheck";
    return {
      type: "accent",
      mode: t.parser.mode,
      label: t.funcName,
      isStretchy: r,
      isShifty: a,
      base: n
    };
  },
  htmlBuilder: h1,
  mathmlBuilder: i4
});
Ve({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
  props: {
    numArgs: 1,
    allowedInText: !0,
    allowedInMath: !0,
    // unless in strict mode
    argTypes: ["primitive"]
  },
  handler: (t, e) => {
    var n = e[0], r = t.parser.mode;
    return r === "math" && (t.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + t.funcName + " works only in text mode"), r = "text"), {
      type: "accent",
      mode: r,
      label: t.funcName,
      isStretchy: !1,
      isShifty: !0,
      base: n
    };
  },
  htmlBuilder: h1,
  mathmlBuilder: i4
});
Ve({
  type: "accentUnder",
  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
  props: {
    numArgs: 1
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0];
    return {
      type: "accentUnder",
      mode: n.mode,
      label: r,
      base: a
    };
  },
  htmlBuilder: (t, e) => {
    var n = Ut(t.base, e), r = di.svgSpan(t, e), a = t.label === "\\utilde" ? 0.12 : 0, i = le.makeVList({
      positionType: "top",
      positionData: n.height,
      children: [{
        type: "elem",
        elem: r,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: a
      }, {
        type: "elem",
        elem: n
      }]
    }, e);
    return le.makeSpan(["mord", "accentunder"], [i], e);
  },
  mathmlBuilder: (t, e) => {
    var n = di.mathMLnode(t.label), r = new Le.MathNode("munder", [tn(t.base, e), n]);
    return r.setAttribute("accentunder", "true"), r;
  }
});
var Ou = (t) => {
  var e = new Le.MathNode("mpadded", t ? [t] : []);
  return e.setAttribute("width", "+0.6em"), e.setAttribute("lspace", "0.3em"), e;
};
Ve({
  type: "xArrow",
  names: [
    "\\xleftarrow",
    "\\xrightarrow",
    "\\xLeftarrow",
    "\\xRightarrow",
    "\\xleftrightarrow",
    "\\xLeftrightarrow",
    "\\xhookleftarrow",
    "\\xhookrightarrow",
    "\\xmapsto",
    "\\xrightharpoondown",
    "\\xrightharpoonup",
    "\\xleftharpoondown",
    "\\xleftharpoonup",
    "\\xrightleftharpoons",
    "\\xleftrightharpoons",
    "\\xlongequal",
    "\\xtwoheadrightarrow",
    "\\xtwoheadleftarrow",
    "\\xtofrom",
    // The next 3 functions are here to support the mhchem extension.
    // Direct use of these functions is discouraged and may break someday.
    "\\xrightleftarrows",
    "\\xrightequilibrium",
    "\\xleftequilibrium",
    // The next 3 functions are here only to support the {CD} environment.
    "\\\\cdrightarrow",
    "\\\\cdleftarrow",
    "\\\\cdlongequal"
  ],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(t, e, n) {
    var {
      parser: r,
      funcName: a
    } = t;
    return {
      type: "xArrow",
      mode: r.mode,
      label: a,
      body: e[0],
      below: n[0]
    };
  },
  // Flow is unable to correctly infer the type of `group`, even though it's
  // unambiguously determined from the passed-in `type` above.
  htmlBuilder(t, e) {
    var n = e.style, r = e.havingStyle(n.sup()), a = le.wrapFragment(Ut(t.body, r, e), e), i = t.label.slice(0, 2) === "\\x" ? "x" : "cd";
    a.classes.push(i + "-arrow-pad");
    var s;
    t.below && (r = e.havingStyle(n.sub()), s = le.wrapFragment(Ut(t.below, r, e), e), s.classes.push(i + "-arrow-pad"));
    var l = di.svgSpan(t, e), c = -e.fontMetrics().axisHeight + 0.5 * l.height, d = -e.fontMetrics().axisHeight - 0.5 * l.height - 0.111;
    (a.depth > 0.25 || t.label === "\\xleftequilibrium") && (d -= a.depth);
    var p;
    if (s) {
      var _ = -e.fontMetrics().axisHeight + s.height + 0.5 * l.height + 0.111;
      p = le.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: a,
          shift: d
        }, {
          type: "elem",
          elem: l,
          shift: c
        }, {
          type: "elem",
          elem: s,
          shift: _
        }]
      }, e);
    } else
      p = le.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: a,
          shift: d
        }, {
          type: "elem",
          elem: l,
          shift: c
        }]
      }, e);
    return p.children[0].children[0].children[1].classes.push("svg-align"), le.makeSpan(["mrel", "x-arrow"], [p], e);
  },
  mathmlBuilder(t, e) {
    var n = di.mathMLnode(t.label);
    n.setAttribute("minsize", t.label.charAt(0) === "x" ? "1.75em" : "3.0em");
    var r;
    if (t.body) {
      var a = Ou(tn(t.body, e));
      if (t.below) {
        var i = Ou(tn(t.below, e));
        r = new Le.MathNode("munderover", [n, i, a]);
      } else
        r = new Le.MathNode("mover", [n, a]);
    } else if (t.below) {
      var s = Ou(tn(t.below, e));
      r = new Le.MathNode("munder", [n, s]);
    } else
      r = Ou(), r = new Le.MathNode("mover", [n, r]);
    return r;
  }
});
var QV = le.makeSpan;
function s4(t, e) {
  var n = zn(t.body, e, !0);
  return QV([t.mclass], n, e);
}
function o4(t, e) {
  var n, r = Dr(t.body, e);
  return t.mclass === "minner" ? n = new Le.MathNode("mpadded", r) : t.mclass === "mord" ? t.isCharacterBox ? (n = r[0], n.type = "mi") : n = new Le.MathNode("mi", r) : (t.isCharacterBox ? (n = r[0], n.type = "mo") : n = new Le.MathNode("mo", r), t.mclass === "mbin" ? (n.attributes.lspace = "0.22em", n.attributes.rspace = "0.22em") : t.mclass === "mpunct" ? (n.attributes.lspace = "0em", n.attributes.rspace = "0.17em") : t.mclass === "mopen" || t.mclass === "mclose" ? (n.attributes.lspace = "0em", n.attributes.rspace = "0em") : t.mclass === "minner" && (n.attributes.lspace = "0.0556em", n.attributes.width = "+0.1111em")), n;
}
Ve({
  type: "mclass",
  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0];
    return {
      type: "mclass",
      mode: n.mode,
      mclass: "m" + r.slice(5),
      // TODO(kevinb): don't prefix with 'm'
      body: Dn(a),
      isCharacterBox: tt.isCharacterBox(a)
    };
  },
  htmlBuilder: s4,
  mathmlBuilder: o4
});
var Gd = (t) => {
  var e = t.type === "ordgroup" && t.body.length ? t.body[0] : t;
  return e.type === "atom" && (e.family === "bin" || e.family === "rel") ? "m" + e.family : "mord";
};
Ve({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "mclass",
      mode: n.mode,
      mclass: Gd(e[0]),
      body: Dn(e[1]),
      isCharacterBox: tt.isCharacterBox(e[1])
    };
  }
});
Ve({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t, a = e[1], i = e[0], s;
    r !== "\\stackrel" ? s = Gd(a) : s = "mrel";
    var l = {
      type: "op",
      mode: a.mode,
      limits: !0,
      alwaysHandleSupSub: !0,
      parentIsSupSub: !1,
      symbol: !1,
      suppressBaseShift: r !== "\\stackrel",
      body: Dn(a)
    }, c = {
      type: "supsub",
      mode: i.mode,
      base: l,
      sup: r === "\\underset" ? null : i,
      sub: r === "\\underset" ? i : null
    };
    return {
      type: "mclass",
      mode: n.mode,
      mclass: s,
      body: [c],
      isCharacterBox: tt.isCharacterBox(c)
    };
  },
  htmlBuilder: s4,
  mathmlBuilder: o4
});
Ve({
  type: "pmb",
  names: ["\\pmb"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "pmb",
      mode: n.mode,
      mclass: Gd(e[0]),
      body: Dn(e[0])
    };
  },
  htmlBuilder(t, e) {
    var n = zn(t.body, e, !0), r = le.makeSpan([t.mclass], n, e);
    return r.style.textShadow = "0.02em 0.01em 0.04px", r;
  },
  mathmlBuilder(t, e) {
    var n = Dr(t.body, e), r = new Le.MathNode("mstyle", n);
    return r.setAttribute("style", "text-shadow: 0.02em 0.01em 0.04px"), r;
  }
});
var jV = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  A: "\\uparrow",
  V: "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
}, jv = () => ({
  type: "styling",
  body: [],
  mode: "math",
  style: "display"
}), Xv = (t) => t.type === "textord" && t.text === "@", XV = (t, e) => (t.type === "mathord" || t.type === "atom") && t.text === e;
function ZV(t, e, n) {
  var r = jV[t];
  switch (r) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return n.callFunction(r, [e[0]], [e[1]]);
    case "\\uparrow":
    case "\\downarrow": {
      var a = n.callFunction("\\\\cdleft", [e[0]], []), i = {
        type: "atom",
        text: r,
        mode: "math",
        family: "rel"
      }, s = n.callFunction("\\Big", [i], []), l = n.callFunction("\\\\cdright", [e[1]], []), c = {
        type: "ordgroup",
        mode: "math",
        body: [a, s, l]
      };
      return n.callFunction("\\\\cdparent", [c], []);
    }
    case "\\\\cdlongequal":
      return n.callFunction("\\\\cdlongequal", [], []);
    case "\\Vert": {
      var d = {
        type: "textord",
        text: "\\Vert",
        mode: "math"
      };
      return n.callFunction("\\Big", [d], []);
    }
    default:
      return {
        type: "textord",
        text: " ",
        mode: "math"
      };
  }
}
function JV(t) {
  var e = [];
  for (t.gullet.beginGroup(), t.gullet.macros.set("\\cr", "\\\\\\relax"), t.gullet.beginGroup(); ; ) {
    e.push(t.parseExpression(!1, "\\\\")), t.gullet.endGroup(), t.gullet.beginGroup();
    var n = t.fetch().text;
    if (n === "&" || n === "\\\\")
      t.consume();
    else if (n === "\\end") {
      e[e.length - 1].length === 0 && e.pop();
      break;
    } else
      throw new ke("Expected \\\\ or \\cr or \\end", t.nextToken);
  }
  for (var r = [], a = [r], i = 0; i < e.length; i++) {
    for (var s = e[i], l = jv(), c = 0; c < s.length; c++)
      if (!Xv(s[c]))
        l.body.push(s[c]);
      else {
        r.push(l), c += 1;
        var d = g1(s[c]).text, p = new Array(2);
        if (p[0] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }, p[1] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }, !("=|.".indexOf(d) > -1)) if ("<>AV".indexOf(d) > -1)
          for (var _ = 0; _ < 2; _++) {
            for (var f = !0, g = c + 1; g < s.length; g++) {
              if (XV(s[g], d)) {
                f = !1, c = g;
                break;
              }
              if (Xv(s[g]))
                throw new ke("Missing a " + d + " character to complete a CD arrow.", s[g]);
              p[_].body.push(s[g]);
            }
            if (f)
              throw new ke("Missing a " + d + " character to complete a CD arrow.", s[c]);
          }
        else
          throw new ke('Expected one of "<>AV=|." after @', s[c]);
        var E = ZV(d, p, t), T = {
          type: "styling",
          body: [E],
          mode: "math",
          style: "display"
          // CD is always displaystyle.
        };
        r.push(T), l = jv();
      }
    i % 2 === 0 ? r.push(l) : r.shift(), r = [], a.push(r);
  }
  t.gullet.endGroup(), t.gullet.endGroup();
  var R = new Array(a[0].length).fill({
    type: "align",
    align: "c",
    pregap: 0.25,
    // CD package sets \enskip between columns.
    postgap: 0.25
    // So pre and post each get half an \enskip, i.e. 0.25em.
  });
  return {
    type: "array",
    mode: "math",
    body: a,
    arraystretch: 1,
    addJot: !0,
    rowGaps: [null],
    cols: R,
    colSeparationType: "CD",
    hLinesBeforeRow: new Array(a.length + 1).fill([])
  };
}
Ve({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t;
    return {
      type: "cdlabel",
      mode: n.mode,
      side: r.slice(4),
      label: e[0]
    };
  },
  htmlBuilder(t, e) {
    var n = e.havingStyle(e.style.sup()), r = le.wrapFragment(Ut(t.label, n, e), e);
    return r.classes.push("cd-label-" + t.side), r.style.bottom = Ye(0.8 - r.depth), r.height = 0, r.depth = 0, r;
  },
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mrow", [tn(t.label, e)]);
    return n = new Le.MathNode("mpadded", [n]), n.setAttribute("width", "0"), t.side === "left" && n.setAttribute("lspace", "-1width"), n.setAttribute("voffset", "0.7em"), n = new Le.MathNode("mstyle", [n]), n.setAttribute("displaystyle", "false"), n.setAttribute("scriptlevel", "1"), n;
  }
});
Ve({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "cdlabelparent",
      mode: n.mode,
      fragment: e[0]
    };
  },
  htmlBuilder(t, e) {
    var n = le.wrapFragment(Ut(t.fragment, e), e);
    return n.classes.push("cd-vert-arrow"), n;
  },
  mathmlBuilder(t, e) {
    return new Le.MathNode("mrow", [tn(t.fragment, e)]);
  }
});
Ve({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(t, e) {
    for (var {
      parser: n
    } = t, r = St(e[0], "ordgroup"), a = r.body, i = "", s = 0; s < a.length; s++) {
      var l = St(a[s], "textord");
      i += l.text;
    }
    var c = parseInt(i), d;
    if (isNaN(c))
      throw new ke("\\@char has non-numeric argument " + i);
    if (c < 0 || c >= 1114111)
      throw new ke("\\@char with invalid code point " + i);
    return c <= 65535 ? d = String.fromCharCode(c) : (c -= 65536, d = String.fromCharCode((c >> 10) + 55296, (c & 1023) + 56320)), {
      type: "textord",
      mode: n.mode,
      text: d
    };
  }
});
var l4 = (t, e) => {
  var n = zn(t.body, e.withColor(t.color), !1);
  return le.makeFragment(n);
}, c4 = (t, e) => {
  var n = Dr(t.body, e.withColor(t.color)), r = new Le.MathNode("mstyle", n);
  return r.setAttribute("mathcolor", t.color), r;
};
Ve({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    allowedInText: !0,
    argTypes: ["color", "original"]
  },
  handler(t, e) {
    var {
      parser: n
    } = t, r = St(e[0], "color-token").color, a = e[1];
    return {
      type: "color",
      mode: n.mode,
      color: r,
      body: Dn(a)
    };
  },
  htmlBuilder: l4,
  mathmlBuilder: c4
});
Ve({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    allowedInText: !0,
    argTypes: ["color"]
  },
  handler(t, e) {
    var {
      parser: n,
      breakOnTokenText: r
    } = t, a = St(e[0], "color-token").color;
    n.gullet.macros.set("\\current@color", a);
    var i = n.parseExpression(!0, r);
    return {
      type: "color",
      mode: n.mode,
      color: a,
      body: i
    };
  },
  htmlBuilder: l4,
  mathmlBuilder: c4
});
Ve({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 0,
    allowedInText: !0
  },
  handler(t, e, n) {
    var {
      parser: r
    } = t, a = r.gullet.future().text === "[" ? r.parseSizeGroup(!0) : null, i = !r.settings.displayMode || !r.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline does nothing in display mode");
    return {
      type: "cr",
      mode: r.mode,
      newLine: i,
      size: a && St(a, "size").value
    };
  },
  // The following builders are called only at the top level,
  // not within tabular/array environments.
  htmlBuilder(t, e) {
    var n = le.makeSpan(["mspace"], [], e);
    return t.newLine && (n.classes.push("newline"), t.size && (n.style.marginTop = Ye(Tn(t.size, e)))), n;
  },
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mspace");
    return t.newLine && (n.setAttribute("linebreak", "newline"), t.size && n.setAttribute("height", Ye(Tn(t.size, e)))), n;
  }
});
var Xh = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
}, u4 = (t) => {
  var e = t.text;
  if (/^(?:[\\{}$&#^_]|EOF)$/.test(e))
    throw new ke("Expected a control sequence", t);
  return e;
}, e$ = (t) => {
  var e = t.gullet.popToken();
  return e.text === "=" && (e = t.gullet.popToken(), e.text === " " && (e = t.gullet.popToken())), e;
}, d4 = (t, e, n, r) => {
  var a = t.gullet.macros.get(n.text);
  a == null && (n.noexpand = !0, a = {
    tokens: [n],
    numArgs: 0,
    // reproduce the same behavior in expansion
    unexpandable: !t.gullet.isExpandable(n.text)
  }), t.gullet.macros.set(e, a, r);
};
Ve({
  type: "internal",
  names: [
    "\\global",
    "\\long",
    "\\\\globallong"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n
    } = t;
    e.consumeSpaces();
    var r = e.fetch();
    if (Xh[r.text])
      return (n === "\\global" || n === "\\\\globallong") && (r.text = Xh[r.text]), St(e.parseFunction(), "internal");
    throw new ke("Invalid token after macro prefix", r);
  }
});
Ve({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n
    } = t, r = e.gullet.popToken(), a = r.text;
    if (/^(?:[\\{}$&#^_]|EOF)$/.test(a))
      throw new ke("Expected a control sequence", r);
    for (var i = 0, s, l = [[]]; e.gullet.future().text !== "{"; )
      if (r = e.gullet.popToken(), r.text === "#") {
        if (e.gullet.future().text === "{") {
          s = e.gullet.future(), l[i].push("{");
          break;
        }
        if (r = e.gullet.popToken(), !/^[1-9]$/.test(r.text))
          throw new ke('Invalid argument number "' + r.text + '"');
        if (parseInt(r.text) !== i + 1)
          throw new ke('Argument number "' + r.text + '" out of order');
        i++, l.push([]);
      } else {
        if (r.text === "EOF")
          throw new ke("Expected a macro definition");
        l[i].push(r.text);
      }
    var {
      tokens: c
    } = e.gullet.consumeArg();
    return s && c.unshift(s), (n === "\\edef" || n === "\\xdef") && (c = e.gullet.expandTokens(c), c.reverse()), e.gullet.macros.set(a, {
      tokens: c,
      numArgs: i,
      delimiters: l
    }, n === Xh[n]), {
      type: "internal",
      mode: e.mode
    };
  }
});
Ve({
  type: "internal",
  names: [
    "\\let",
    "\\\\globallet"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n
    } = t, r = u4(e.gullet.popToken());
    e.gullet.consumeSpaces();
    var a = e$(e);
    return d4(e, r, a, n === "\\\\globallet"), {
      type: "internal",
      mode: e.mode
    };
  }
});
Ve({
  type: "internal",
  names: [
    "\\futurelet",
    "\\\\globalfuture"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n
    } = t, r = u4(e.gullet.popToken()), a = e.gullet.popToken(), i = e.gullet.popToken();
    return d4(e, r, i, n === "\\\\globalfuture"), e.gullet.pushToken(i), e.gullet.pushToken(a), {
      type: "internal",
      mode: e.mode
    };
  }
});
var ml = function(e, n, r) {
  var a = on.math[e] && on.math[e].replace, i = d1(a || e, n, r);
  if (!i)
    throw new Error("Unsupported symbol " + e + " and font size " + n + ".");
  return i;
}, E1 = function(e, n, r, a) {
  var i = r.havingBaseStyle(n), s = le.makeSpan(a.concat(i.sizingClasses(r)), [e], r), l = i.sizeMultiplier / r.sizeMultiplier;
  return s.height *= l, s.depth *= l, s.maxFontSize = i.sizeMultiplier, s;
}, p4 = function(e, n, r) {
  var a = n.havingBaseStyle(r), i = (1 - n.sizeMultiplier / a.sizeMultiplier) * n.fontMetrics().axisHeight;
  e.classes.push("delimcenter"), e.style.top = Ye(i), e.height -= i, e.depth += i;
}, t$ = function(e, n, r, a, i, s) {
  var l = le.makeSymbol(e, "Main-Regular", i, a), c = E1(l, n, a, s);
  return r && p4(c, a, n), c;
}, n$ = function(e, n, r, a) {
  return le.makeSymbol(e, "Size" + n + "-Regular", r, a);
}, _4 = function(e, n, r, a, i, s) {
  var l = n$(e, n, i, a), c = E1(le.makeSpan(["delimsizing", "size" + n], [l], a), at.TEXT, a, s);
  return r && p4(c, a, at.TEXT), c;
}, o_ = function(e, n, r) {
  var a;
  n === "Size1-Regular" ? a = "delim-size1" : a = "delim-size4";
  var i = le.makeSpan(["delimsizinginner", a], [le.makeSpan([], [le.makeSymbol(e, n, r)])]);
  return {
    type: "elem",
    elem: i
  };
}, l_ = function(e, n, r) {
  var a = La["Size4-Regular"][e.charCodeAt(0)] ? La["Size4-Regular"][e.charCodeAt(0)][4] : La["Size1-Regular"][e.charCodeAt(0)][4], i = new Ui("inner", lV(e, Math.round(1e3 * n))), s = new ci([i], {
    width: Ye(a),
    height: Ye(n),
    // Override CSS rule `.katex svg { width: 100% }`
    style: "width:" + Ye(a),
    viewBox: "0 0 " + 1e3 * a + " " + Math.round(1e3 * n),
    preserveAspectRatio: "xMinYMin"
  }), l = le.makeSvgSpan([], [s], r);
  return l.height = n, l.style.height = Ye(n), l.style.width = Ye(a), {
    type: "elem",
    elem: l
  };
}, Zh = 8e-3, Nu = {
  type: "kern",
  size: -1 * Zh
}, r$ = ["|", "\\lvert", "\\rvert", "\\vert"], a$ = ["\\|", "\\lVert", "\\rVert", "\\Vert"], m4 = function(e, n, r, a, i, s) {
  var l, c, d, p, _ = "", f = 0;
  l = d = p = e, c = null;
  var g = "Size1-Regular";
  e === "\\uparrow" ? d = p = "⏐" : e === "\\Uparrow" ? d = p = "‖" : e === "\\downarrow" ? l = d = "⏐" : e === "\\Downarrow" ? l = d = "‖" : e === "\\updownarrow" ? (l = "\\uparrow", d = "⏐", p = "\\downarrow") : e === "\\Updownarrow" ? (l = "\\Uparrow", d = "‖", p = "\\Downarrow") : tt.contains(r$, e) ? (d = "∣", _ = "vert", f = 333) : tt.contains(a$, e) ? (d = "∥", _ = "doublevert", f = 556) : e === "[" || e === "\\lbrack" ? (l = "⎡", d = "⎢", p = "⎣", g = "Size4-Regular", _ = "lbrack", f = 667) : e === "]" || e === "\\rbrack" ? (l = "⎤", d = "⎥", p = "⎦", g = "Size4-Regular", _ = "rbrack", f = 667) : e === "\\lfloor" || e === "⌊" ? (d = l = "⎢", p = "⎣", g = "Size4-Regular", _ = "lfloor", f = 667) : e === "\\lceil" || e === "⌈" ? (l = "⎡", d = p = "⎢", g = "Size4-Regular", _ = "lceil", f = 667) : e === "\\rfloor" || e === "⌋" ? (d = l = "⎥", p = "⎦", g = "Size4-Regular", _ = "rfloor", f = 667) : e === "\\rceil" || e === "⌉" ? (l = "⎤", d = p = "⎥", g = "Size4-Regular", _ = "rceil", f = 667) : e === "(" || e === "\\lparen" ? (l = "⎛", d = "⎜", p = "⎝", g = "Size4-Regular", _ = "lparen", f = 875) : e === ")" || e === "\\rparen" ? (l = "⎞", d = "⎟", p = "⎠", g = "Size4-Regular", _ = "rparen", f = 875) : e === "\\{" || e === "\\lbrace" ? (l = "⎧", c = "⎨", p = "⎩", d = "⎪", g = "Size4-Regular") : e === "\\}" || e === "\\rbrace" ? (l = "⎫", c = "⎬", p = "⎭", d = "⎪", g = "Size4-Regular") : e === "\\lgroup" || e === "⟮" ? (l = "⎧", p = "⎩", d = "⎪", g = "Size4-Regular") : e === "\\rgroup" || e === "⟯" ? (l = "⎫", p = "⎭", d = "⎪", g = "Size4-Regular") : e === "\\lmoustache" || e === "⎰" ? (l = "⎧", p = "⎭", d = "⎪", g = "Size4-Regular") : (e === "\\rmoustache" || e === "⎱") && (l = "⎫", p = "⎩", d = "⎪", g = "Size4-Regular");
  var E = ml(l, g, i), T = E.height + E.depth, R = ml(d, g, i), A = R.height + R.depth, I = ml(p, g, i), x = I.height + I.depth, P = 0, D = 1;
  if (c !== null) {
    var L = ml(c, g, i);
    P = L.height + L.depth, D = 2;
  }
  var K = T + x + P, J = Math.max(0, Math.ceil((n - K) / (D * A))), X = K + J * D * A, $ = a.fontMetrics().axisHeight;
  r && ($ *= a.sizeMultiplier);
  var ae = X / 2 - $, ce = [];
  if (_.length > 0) {
    var ve = X - T - x, ge = Math.round(X * 1e3), fe = cV(_, Math.round(ve * 1e3)), Fe = new Ui(_, fe), ne = (f / 1e3).toFixed(3) + "em", se = (ge / 1e3).toFixed(3) + "em", z = new ci([Fe], {
      width: ne,
      height: se,
      viewBox: "0 0 " + f + " " + ge
    }), v = le.makeSvgSpan([], [z], a);
    v.height = ge / 1e3, v.style.width = ne, v.style.height = se, ce.push({
      type: "elem",
      elem: v
    });
  } else {
    if (ce.push(o_(p, g, i)), ce.push(Nu), c === null) {
      var H = X - T - x + 2 * Zh;
      ce.push(l_(d, H, a));
    } else {
      var oe = (X - T - x - P) / 2 + 2 * Zh;
      ce.push(l_(d, oe, a)), ce.push(Nu), ce.push(o_(c, g, i)), ce.push(Nu), ce.push(l_(d, oe, a));
    }
    ce.push(Nu), ce.push(o_(l, g, i));
  }
  var k = a.havingBaseStyle(at.TEXT), me = le.makeVList({
    positionType: "bottom",
    positionData: ae,
    children: ce
  }, k);
  return E1(le.makeSpan(["delimsizing", "mult"], [me], k), at.TEXT, a, s);
}, c_ = 80, u_ = 0.08, d_ = function(e, n, r, a, i) {
  var s = oV(e, a, r), l = new Ui(e, s), c = new ci([l], {
    // Note: 1000:1 ratio of viewBox to document em width.
    width: "400em",
    height: Ye(n),
    viewBox: "0 0 400000 " + r,
    preserveAspectRatio: "xMinYMin slice"
  });
  return le.makeSvgSpan(["hide-tail"], [c], i);
}, i$ = function(e, n) {
  var r = n.havingBaseSizing(), a = E4("\\surd", e * r.sizeMultiplier, h4, r), i = r.sizeMultiplier, s = Math.max(0, n.minRuleThickness - n.fontMetrics().sqrtRuleThickness), l, c = 0, d = 0, p = 0, _;
  return a.type === "small" ? (p = 1e3 + 1e3 * s + c_, e < 1 ? i = 1 : e < 1.4 && (i = 0.7), c = (1 + s + u_) / i, d = (1 + s) / i, l = d_("sqrtMain", c, p, s, n), l.style.minWidth = "0.853em", _ = 0.833 / i) : a.type === "large" ? (p = (1e3 + c_) * Tl[a.size], d = (Tl[a.size] + s) / i, c = (Tl[a.size] + s + u_) / i, l = d_("sqrtSize" + a.size, c, p, s, n), l.style.minWidth = "1.02em", _ = 1 / i) : (c = e + s + u_, d = e + s, p = Math.floor(1e3 * e + s) + c_, l = d_("sqrtTall", c, p, s, n), l.style.minWidth = "0.742em", _ = 1.056), l.height = d, l.style.height = Ye(c), {
    span: l,
    advanceWidth: _,
    // Calculate the actual line width.
    // This actually should depend on the chosen font -- e.g. \boldmath
    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
    // have thicker rules.
    ruleWidth: (n.fontMetrics().sqrtRuleThickness + s) * i
  };
}, f4 = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "\\surd"], s$ = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱"], g4 = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"], Tl = [0, 1.2, 1.8, 2.4, 3], o$ = function(e, n, r, a, i) {
  if (e === "<" || e === "\\lt" || e === "⟨" ? e = "\\langle" : (e === ">" || e === "\\gt" || e === "⟩") && (e = "\\rangle"), tt.contains(f4, e) || tt.contains(g4, e))
    return _4(e, n, !1, r, a, i);
  if (tt.contains(s$, e))
    return m4(e, Tl[n], !1, r, a, i);
  throw new ke("Illegal delimiter: '" + e + "'");
}, l$ = [{
  type: "small",
  style: at.SCRIPTSCRIPT
}, {
  type: "small",
  style: at.SCRIPT
}, {
  type: "small",
  style: at.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}], c$ = [{
  type: "small",
  style: at.SCRIPTSCRIPT
}, {
  type: "small",
  style: at.SCRIPT
}, {
  type: "small",
  style: at.TEXT
}, {
  type: "stack"
}], h4 = [{
  type: "small",
  style: at.SCRIPTSCRIPT
}, {
  type: "small",
  style: at.SCRIPT
}, {
  type: "small",
  style: at.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}, {
  type: "stack"
}], u$ = function(e) {
  if (e.type === "small")
    return "Main-Regular";
  if (e.type === "large")
    return "Size" + e.size + "-Regular";
  if (e.type === "stack")
    return "Size4-Regular";
  throw new Error("Add support for delim type '" + e.type + "' here.");
}, E4 = function(e, n, r, a) {
  for (var i = Math.min(2, 3 - a.style.size), s = i; s < r.length && r[s].type !== "stack"; s++) {
    var l = ml(e, u$(r[s]), "math"), c = l.height + l.depth;
    if (r[s].type === "small") {
      var d = a.havingBaseStyle(r[s].style);
      c *= d.sizeMultiplier;
    }
    if (c > n)
      return r[s];
  }
  return r[r.length - 1];
}, S4 = function(e, n, r, a, i, s) {
  e === "<" || e === "\\lt" || e === "⟨" ? e = "\\langle" : (e === ">" || e === "\\gt" || e === "⟩") && (e = "\\rangle");
  var l;
  tt.contains(g4, e) ? l = l$ : tt.contains(f4, e) ? l = h4 : l = c$;
  var c = E4(e, n, l, a);
  return c.type === "small" ? t$(e, c.style, r, a, i, s) : c.type === "large" ? _4(e, c.size, r, a, i, s) : m4(e, n, r, a, i, s);
}, d$ = function(e, n, r, a, i, s) {
  var l = a.fontMetrics().axisHeight * a.sizeMultiplier, c = 901, d = 5 / a.fontMetrics().ptPerEm, p = Math.max(n - l, r + l), _ = Math.max(
    // In real TeX, calculations are done using integral values which are
    // 65536 per pt, or 655360 per em. So, the division here truncates in
    // TeX but doesn't here, producing different results. If we wanted to
    // exactly match TeX's calculation, we could do
    //   Math.floor(655360 * maxDistFromAxis / 500) *
    //    delimiterFactor / 655360
    // (To see the difference, compare
    //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
    // in TeX and KaTeX)
    p / 500 * c,
    2 * p - d
  );
  return S4(e, _, !0, a, i, s);
}, li = {
  sqrtImage: i$,
  sizedDelim: o$,
  sizeToMaxHeight: Tl,
  customSizedDelim: S4,
  leftRightDelim: d$
}, Zv = {
  "\\bigl": {
    mclass: "mopen",
    size: 1
  },
  "\\Bigl": {
    mclass: "mopen",
    size: 2
  },
  "\\biggl": {
    mclass: "mopen",
    size: 3
  },
  "\\Biggl": {
    mclass: "mopen",
    size: 4
  },
  "\\bigr": {
    mclass: "mclose",
    size: 1
  },
  "\\Bigr": {
    mclass: "mclose",
    size: 2
  },
  "\\biggr": {
    mclass: "mclose",
    size: 3
  },
  "\\Biggr": {
    mclass: "mclose",
    size: 4
  },
  "\\bigm": {
    mclass: "mrel",
    size: 1
  },
  "\\Bigm": {
    mclass: "mrel",
    size: 2
  },
  "\\biggm": {
    mclass: "mrel",
    size: 3
  },
  "\\Biggm": {
    mclass: "mrel",
    size: 4
  },
  "\\big": {
    mclass: "mord",
    size: 1
  },
  "\\Big": {
    mclass: "mord",
    size: 2
  },
  "\\bigg": {
    mclass: "mord",
    size: 3
  },
  "\\Bigg": {
    mclass: "mord",
    size: 4
  }
}, p$ = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "<", ">", "\\langle", "⟨", "\\rangle", "⟩", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];
function Hd(t, e) {
  var n = Ud(t);
  if (n && tt.contains(p$, n.text))
    return n;
  throw n ? new ke("Invalid delimiter '" + n.text + "' after '" + e.funcName + "'", t) : new ke("Invalid delimiter type '" + t.type + "'", t);
}
Ve({
  type: "delimsizing",
  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (t, e) => {
    var n = Hd(e[0], t);
    return {
      type: "delimsizing",
      mode: t.parser.mode,
      size: Zv[t.funcName].size,
      mclass: Zv[t.funcName].mclass,
      delim: n.text
    };
  },
  htmlBuilder: (t, e) => t.delim === "." ? le.makeSpan([t.mclass]) : li.sizedDelim(t.delim, t.size, e, t.mode, [t.mclass]),
  mathmlBuilder: (t) => {
    var e = [];
    t.delim !== "." && e.push(ca(t.delim, t.mode));
    var n = new Le.MathNode("mo", e);
    t.mclass === "mopen" || t.mclass === "mclose" ? n.setAttribute("fence", "true") : n.setAttribute("fence", "false"), n.setAttribute("stretchy", "true");
    var r = Ye(li.sizeToMaxHeight[t.size]);
    return n.setAttribute("minsize", r), n.setAttribute("maxsize", r), n;
  }
});
function Jv(t) {
  if (!t.body)
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
}
Ve({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (t, e) => {
    var n = t.parser.gullet.macros.get("\\current@color");
    if (n && typeof n != "string")
      throw new ke("\\current@color set to non-string in \\right");
    return {
      type: "leftright-right",
      mode: t.parser.mode,
      delim: Hd(e[0], t).text,
      color: n
      // undefined if not set via \color
    };
  }
});
Ve({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (t, e) => {
    var n = Hd(e[0], t), r = t.parser;
    ++r.leftrightDepth;
    var a = r.parseExpression(!1);
    --r.leftrightDepth, r.expect("\\right", !1);
    var i = St(r.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: r.mode,
      body: a,
      left: n.text,
      right: i.delim,
      rightColor: i.color
    };
  },
  htmlBuilder: (t, e) => {
    Jv(t);
    for (var n = zn(t.body, e, !0, ["mopen", "mclose"]), r = 0, a = 0, i = !1, s = 0; s < n.length; s++)
      n[s].isMiddle ? i = !0 : (r = Math.max(n[s].height, r), a = Math.max(n[s].depth, a));
    r *= e.sizeMultiplier, a *= e.sizeMultiplier;
    var l;
    if (t.left === "." ? l = Fl(e, ["mopen"]) : l = li.leftRightDelim(t.left, r, a, e, t.mode, ["mopen"]), n.unshift(l), i)
      for (var c = 1; c < n.length; c++) {
        var d = n[c], p = d.isMiddle;
        p && (n[c] = li.leftRightDelim(p.delim, r, a, p.options, t.mode, []));
      }
    var _;
    if (t.right === ".")
      _ = Fl(e, ["mclose"]);
    else {
      var f = t.rightColor ? e.withColor(t.rightColor) : e;
      _ = li.leftRightDelim(t.right, r, a, f, t.mode, ["mclose"]);
    }
    return n.push(_), le.makeSpan(["minner"], n, e);
  },
  mathmlBuilder: (t, e) => {
    Jv(t);
    var n = Dr(t.body, e);
    if (t.left !== ".") {
      var r = new Le.MathNode("mo", [ca(t.left, t.mode)]);
      r.setAttribute("fence", "true"), n.unshift(r);
    }
    if (t.right !== ".") {
      var a = new Le.MathNode("mo", [ca(t.right, t.mode)]);
      a.setAttribute("fence", "true"), t.rightColor && a.setAttribute("mathcolor", t.rightColor), n.push(a);
    }
    return m1(n);
  }
});
Ve({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (t, e) => {
    var n = Hd(e[0], t);
    if (!t.parser.leftrightDepth)
      throw new ke("\\middle without preceding \\left", n);
    return {
      type: "middle",
      mode: t.parser.mode,
      delim: n.text
    };
  },
  htmlBuilder: (t, e) => {
    var n;
    if (t.delim === ".")
      n = Fl(e, []);
    else {
      n = li.sizedDelim(t.delim, 1, e, t.mode, []);
      var r = {
        delim: t.delim,
        options: e
      };
      n.isMiddle = r;
    }
    return n;
  },
  mathmlBuilder: (t, e) => {
    var n = t.delim === "\\vert" || t.delim === "|" ? ca("|", "text") : ca(t.delim, t.mode), r = new Le.MathNode("mo", [n]);
    return r.setAttribute("fence", "true"), r.setAttribute("lspace", "0.05em"), r.setAttribute("rspace", "0.05em"), r;
  }
});
var S1 = (t, e) => {
  var n = le.wrapFragment(Ut(t.body, e), e), r = t.label.slice(1), a = e.sizeMultiplier, i, s = 0, l = tt.isCharacterBox(t.body);
  if (r === "sout")
    i = le.makeSpan(["stretchy", "sout"]), i.height = e.fontMetrics().defaultRuleThickness / a, s = -0.5 * e.fontMetrics().xHeight;
  else if (r === "phase") {
    var c = Tn({
      number: 0.6,
      unit: "pt"
    }, e), d = Tn({
      number: 0.35,
      unit: "ex"
    }, e), p = e.havingBaseSizing();
    a = a / p.sizeMultiplier;
    var _ = n.height + n.depth + c + d;
    n.style.paddingLeft = Ye(_ / 2 + c);
    var f = Math.floor(1e3 * _ * a), g = iV(f), E = new ci([new Ui("phase", g)], {
      width: "400em",
      height: Ye(f / 1e3),
      viewBox: "0 0 400000 " + f,
      preserveAspectRatio: "xMinYMin slice"
    });
    i = le.makeSvgSpan(["hide-tail"], [E], e), i.style.height = Ye(_), s = n.depth + c + d;
  } else {
    /cancel/.test(r) ? l || n.classes.push("cancel-pad") : r === "angl" ? n.classes.push("anglpad") : n.classes.push("boxpad");
    var T = 0, R = 0, A = 0;
    /box/.test(r) ? (A = Math.max(
      e.fontMetrics().fboxrule,
      // default
      e.minRuleThickness
      // User override.
    ), T = e.fontMetrics().fboxsep + (r === "colorbox" ? 0 : A), R = T) : r === "angl" ? (A = Math.max(e.fontMetrics().defaultRuleThickness, e.minRuleThickness), T = 4 * A, R = Math.max(0, 0.25 - n.depth)) : (T = l ? 0.2 : 0, R = T), i = di.encloseSpan(n, r, T, R, e), /fbox|boxed|fcolorbox/.test(r) ? (i.style.borderStyle = "solid", i.style.borderWidth = Ye(A)) : r === "angl" && A !== 0.049 && (i.style.borderTopWidth = Ye(A), i.style.borderRightWidth = Ye(A)), s = n.depth + R, t.backgroundColor && (i.style.backgroundColor = t.backgroundColor, t.borderColor && (i.style.borderColor = t.borderColor));
  }
  var I;
  if (t.backgroundColor)
    I = le.makeVList({
      positionType: "individualShift",
      children: [
        // Put the color background behind inner;
        {
          type: "elem",
          elem: i,
          shift: s
        },
        {
          type: "elem",
          elem: n,
          shift: 0
        }
      ]
    }, e);
  else {
    var x = /cancel|phase/.test(r) ? ["svg-align"] : [];
    I = le.makeVList({
      positionType: "individualShift",
      children: [
        // Write the \cancel stroke on top of inner.
        {
          type: "elem",
          elem: n,
          shift: 0
        },
        {
          type: "elem",
          elem: i,
          shift: s,
          wrapperClasses: x
        }
      ]
    }, e);
  }
  return /cancel/.test(r) && (I.height = n.height, I.depth = n.depth), /cancel/.test(r) && !l ? le.makeSpan(["mord", "cancel-lap"], [I], e) : le.makeSpan(["mord"], [I], e);
}, b1 = (t, e) => {
  var n = 0, r = new Le.MathNode(t.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [tn(t.body, e)]);
  switch (t.label) {
    case "\\cancel":
      r.setAttribute("notation", "updiagonalstrike");
      break;
    case "\\bcancel":
      r.setAttribute("notation", "downdiagonalstrike");
      break;
    case "\\phase":
      r.setAttribute("notation", "phasorangle");
      break;
    case "\\sout":
      r.setAttribute("notation", "horizontalstrike");
      break;
    case "\\fbox":
      r.setAttribute("notation", "box");
      break;
    case "\\angl":
      r.setAttribute("notation", "actuarial");
      break;
    case "\\fcolorbox":
    case "\\colorbox":
      if (n = e.fontMetrics().fboxsep * e.fontMetrics().ptPerEm, r.setAttribute("width", "+" + 2 * n + "pt"), r.setAttribute("height", "+" + 2 * n + "pt"), r.setAttribute("lspace", n + "pt"), r.setAttribute("voffset", n + "pt"), t.label === "\\fcolorbox") {
        var a = Math.max(
          e.fontMetrics().fboxrule,
          // default
          e.minRuleThickness
          // user override
        );
        r.setAttribute("style", "border: " + a + "em solid " + String(t.borderColor));
      }
      break;
    case "\\xcancel":
      r.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      break;
  }
  return t.backgroundColor && r.setAttribute("mathbackground", t.backgroundColor), r;
};
Ve({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    allowedInText: !0,
    argTypes: ["color", "text"]
  },
  handler(t, e, n) {
    var {
      parser: r,
      funcName: a
    } = t, i = St(e[0], "color-token").color, s = e[1];
    return {
      type: "enclose",
      mode: r.mode,
      label: a,
      backgroundColor: i,
      body: s
    };
  },
  htmlBuilder: S1,
  mathmlBuilder: b1
});
Ve({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    allowedInText: !0,
    argTypes: ["color", "color", "text"]
  },
  handler(t, e, n) {
    var {
      parser: r,
      funcName: a
    } = t, i = St(e[0], "color-token").color, s = St(e[1], "color-token").color, l = e[2];
    return {
      type: "enclose",
      mode: r.mode,
      label: a,
      backgroundColor: s,
      borderColor: i,
      body: l
    };
  },
  htmlBuilder: S1,
  mathmlBuilder: b1
});
Ve({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: !0
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "enclose",
      mode: n.mode,
      label: "\\fbox",
      body: e[0]
    };
  }
});
Ve({
  type: "enclose",
  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
  props: {
    numArgs: 1
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0];
    return {
      type: "enclose",
      mode: n.mode,
      label: r,
      body: a
    };
  },
  htmlBuilder: S1,
  mathmlBuilder: b1
});
Ve({
  type: "enclose",
  names: ["\\angl"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: !1
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "enclose",
      mode: n.mode,
      label: "\\angl",
      body: e[0]
    };
  }
});
var b4 = {};
function Ha(t) {
  for (var {
    type: e,
    names: n,
    props: r,
    handler: a,
    htmlBuilder: i,
    mathmlBuilder: s
  } = t, l = {
    type: e,
    numArgs: r.numArgs || 0,
    allowedInText: !1,
    numOptionalArgs: 0,
    handler: a
  }, c = 0; c < n.length; ++c)
    b4[n[c]] = l;
  i && (od[e] = i), s && (ld[e] = s);
}
var T4 = {};
function M(t, e) {
  T4[t] = e;
}
function eC(t) {
  var e = [];
  t.consumeSpaces();
  var n = t.fetch().text;
  for (n === "\\relax" && (t.consume(), t.consumeSpaces(), n = t.fetch().text); n === "\\hline" || n === "\\hdashline"; )
    t.consume(), e.push(n === "\\hdashline"), t.consumeSpaces(), n = t.fetch().text;
  return e;
}
var Yd = (t) => {
  var e = t.parser.settings;
  if (!e.displayMode)
    throw new ke("{" + t.envName + "} can be used only in display mode.");
};
function T1(t) {
  if (t.indexOf("ed") === -1)
    return t.indexOf("*") === -1;
}
function $i(t, e, n) {
  var {
    hskipBeforeAndAfter: r,
    addJot: a,
    cols: i,
    arraystretch: s,
    colSeparationType: l,
    autoTag: c,
    singleRow: d,
    emptySingleRow: p,
    maxNumCols: _,
    leqno: f
  } = e;
  if (t.gullet.beginGroup(), d || t.gullet.macros.set("\\cr", "\\\\\\relax"), !s) {
    var g = t.gullet.expandMacroAsText("\\arraystretch");
    if (g == null)
      s = 1;
    else if (s = parseFloat(g), !s || s < 0)
      throw new ke("Invalid \\arraystretch: " + g);
  }
  t.gullet.beginGroup();
  var E = [], T = [E], R = [], A = [], I = c != null ? [] : void 0;
  function x() {
    c && t.gullet.macros.set("\\@eqnsw", "1", !0);
  }
  function P() {
    I && (t.gullet.macros.get("\\df@tag") ? (I.push(t.subparse([new oa("\\df@tag")])), t.gullet.macros.set("\\df@tag", void 0, !0)) : I.push(!!c && t.gullet.macros.get("\\@eqnsw") === "1"));
  }
  for (x(), A.push(eC(t)); ; ) {
    var D = t.parseExpression(!1, d ? "\\end" : "\\\\");
    t.gullet.endGroup(), t.gullet.beginGroup(), D = {
      type: "ordgroup",
      mode: t.mode,
      body: D
    }, n && (D = {
      type: "styling",
      mode: t.mode,
      style: n,
      body: [D]
    }), E.push(D);
    var L = t.fetch().text;
    if (L === "&") {
      if (_ && E.length === _) {
        if (d || l)
          throw new ke("Too many tab characters: &", t.nextToken);
        t.settings.reportNonstrict("textEnv", "Too few columns specified in the {array} column argument.");
      }
      t.consume();
    } else if (L === "\\end") {
      P(), E.length === 1 && D.type === "styling" && D.body[0].body.length === 0 && (T.length > 1 || !p) && T.pop(), A.length < T.length + 1 && A.push([]);
      break;
    } else if (L === "\\\\") {
      t.consume();
      var K = void 0;
      t.gullet.future().text !== " " && (K = t.parseSizeGroup(!0)), R.push(K ? K.value : null), P(), A.push(eC(t)), E = [], T.push(E), x();
    } else
      throw new ke("Expected & or \\\\ or \\cr or \\end", t.nextToken);
  }
  return t.gullet.endGroup(), t.gullet.endGroup(), {
    type: "array",
    mode: t.mode,
    addJot: a,
    arraystretch: s,
    body: T,
    cols: i,
    rowGaps: R,
    hskipBeforeAndAfter: r,
    hLinesBeforeRow: A,
    colSeparationType: l,
    tags: I,
    leqno: f
  };
}
function y1(t) {
  return t.slice(0, 1) === "d" ? "display" : "text";
}
var Ya = function(e, n) {
  var r, a, i = e.body.length, s = e.hLinesBeforeRow, l = 0, c = new Array(i), d = [], p = Math.max(
    // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
    n.fontMetrics().arrayRuleWidth,
    n.minRuleThickness
    // User override.
  ), _ = 1 / n.fontMetrics().ptPerEm, f = 5 * _;
  if (e.colSeparationType && e.colSeparationType === "small") {
    var g = n.havingStyle(at.SCRIPT).sizeMultiplier;
    f = 0.2778 * (g / n.sizeMultiplier);
  }
  var E = e.colSeparationType === "CD" ? Tn({
    number: 3,
    unit: "ex"
  }, n) : 12 * _, T = 3 * _, R = e.arraystretch * E, A = 0.7 * R, I = 0.3 * R, x = 0;
  function P(_t) {
    for (var He = 0; He < _t.length; ++He)
      He > 0 && (x += 0.25), d.push({
        pos: x,
        isDashed: _t[He]
      });
  }
  for (P(s[0]), r = 0; r < e.body.length; ++r) {
    var D = e.body[r], L = A, K = I;
    l < D.length && (l = D.length);
    var J = new Array(D.length);
    for (a = 0; a < D.length; ++a) {
      var X = Ut(D[a], n);
      K < X.depth && (K = X.depth), L < X.height && (L = X.height), J[a] = X;
    }
    var $ = e.rowGaps[r], ae = 0;
    $ && (ae = Tn($, n), ae > 0 && (ae += I, K < ae && (K = ae), ae = 0)), e.addJot && (K += T), J.height = L, J.depth = K, x += L, J.pos = x, x += K + ae, c[r] = J, P(s[r + 1]);
  }
  var ce = x / 2 + n.fontMetrics().axisHeight, ve = e.cols || [], ge = [], fe, Fe, ne = [];
  if (e.tags && e.tags.some((_t) => _t))
    for (r = 0; r < i; ++r) {
      var se = c[r], z = se.pos - ce, v = e.tags[r], H = void 0;
      v === !0 ? H = le.makeSpan(["eqn-num"], [], n) : v === !1 ? H = le.makeSpan([], [], n) : H = le.makeSpan([], zn(v, n, !0), n), H.depth = se.depth, H.height = se.height, ne.push({
        type: "elem",
        elem: H,
        shift: z
      });
    }
  for (
    a = 0, Fe = 0;
    // Continue while either there are more columns or more column
    // descriptions, so trailing separators don't get lost.
    a < l || Fe < ve.length;
    ++a, ++Fe
  ) {
    for (var oe = ve[Fe] || {}, k = !0; oe.type === "separator"; ) {
      if (k || (fe = le.makeSpan(["arraycolsep"], []), fe.style.width = Ye(n.fontMetrics().doubleRuleSep), ge.push(fe)), oe.separator === "|" || oe.separator === ":") {
        var me = oe.separator === "|" ? "solid" : "dashed", Ce = le.makeSpan(["vertical-separator"], [], n);
        Ce.style.height = Ye(x), Ce.style.borderRightWidth = Ye(p), Ce.style.borderRightStyle = me, Ce.style.margin = "0 " + Ye(-p / 2);
        var he = x - ce;
        he && (Ce.style.verticalAlign = Ye(-he)), ge.push(Ce);
      } else
        throw new ke("Invalid separator type: " + oe.separator);
      Fe++, oe = ve[Fe] || {}, k = !1;
    }
    if (!(a >= l)) {
      var Ne = void 0;
      (a > 0 || e.hskipBeforeAndAfter) && (Ne = tt.deflt(oe.pregap, f), Ne !== 0 && (fe = le.makeSpan(["arraycolsep"], []), fe.style.width = Ye(Ne), ge.push(fe)));
      var ye = [];
      for (r = 0; r < i; ++r) {
        var Ue = c[r], Me = Ue[a];
        if (Me) {
          var Qe = Ue.pos - ce;
          Me.depth = Ue.depth, Me.height = Ue.height, ye.push({
            type: "elem",
            elem: Me,
            shift: Qe
          });
        }
      }
      ye = le.makeVList({
        positionType: "individualShift",
        children: ye
      }, n), ye = le.makeSpan(["col-align-" + (oe.align || "c")], [ye]), ge.push(ye), (a < l - 1 || e.hskipBeforeAndAfter) && (Ne = tt.deflt(oe.postgap, f), Ne !== 0 && (fe = le.makeSpan(["arraycolsep"], []), fe.style.width = Ye(Ne), ge.push(fe)));
    }
  }
  if (c = le.makeSpan(["mtable"], ge), d.length > 0) {
    for (var _e = le.makeLineSpan("hline", n, p), je = le.makeLineSpan("hdashline", n, p), et = [{
      type: "elem",
      elem: c,
      shift: 0
    }]; d.length > 0; ) {
      var nt = d.pop(), mt = nt.pos - ce;
      nt.isDashed ? et.push({
        type: "elem",
        elem: je,
        shift: mt
      }) : et.push({
        type: "elem",
        elem: _e,
        shift: mt
      });
    }
    c = le.makeVList({
      positionType: "individualShift",
      children: et
    }, n);
  }
  if (ne.length === 0)
    return le.makeSpan(["mord"], [c], n);
  var bt = le.makeVList({
    positionType: "individualShift",
    children: ne
  }, n);
  return bt = le.makeSpan(["tag"], [bt], n), le.makeFragment([c, bt]);
}, _$ = {
  c: "center ",
  l: "left ",
  r: "right "
}, za = function(e, n) {
  for (var r = [], a = new Le.MathNode("mtd", [], ["mtr-glue"]), i = new Le.MathNode("mtd", [], ["mml-eqn-num"]), s = 0; s < e.body.length; s++) {
    for (var l = e.body[s], c = [], d = 0; d < l.length; d++)
      c.push(new Le.MathNode("mtd", [tn(l[d], n)]));
    e.tags && e.tags[s] && (c.unshift(a), c.push(a), e.leqno ? c.unshift(i) : c.push(i)), r.push(new Le.MathNode("mtr", c));
  }
  var p = new Le.MathNode("mtable", r), _ = e.arraystretch === 0.5 ? 0.1 : 0.16 + e.arraystretch - 1 + (e.addJot ? 0.09 : 0);
  p.setAttribute("rowspacing", Ye(_));
  var f = "", g = "";
  if (e.cols && e.cols.length > 0) {
    var E = e.cols, T = "", R = !1, A = 0, I = E.length;
    E[0].type === "separator" && (f += "top ", A = 1), E[E.length - 1].type === "separator" && (f += "bottom ", I -= 1);
    for (var x = A; x < I; x++)
      E[x].type === "align" ? (g += _$[E[x].align], R && (T += "none "), R = !0) : E[x].type === "separator" && R && (T += E[x].separator === "|" ? "solid " : "dashed ", R = !1);
    p.setAttribute("columnalign", g.trim()), /[sd]/.test(T) && p.setAttribute("columnlines", T.trim());
  }
  if (e.colSeparationType === "align") {
    for (var P = e.cols || [], D = "", L = 1; L < P.length; L++)
      D += L % 2 ? "0em " : "1em ";
    p.setAttribute("columnspacing", D.trim());
  } else e.colSeparationType === "alignat" || e.colSeparationType === "gather" ? p.setAttribute("columnspacing", "0em") : e.colSeparationType === "small" ? p.setAttribute("columnspacing", "0.2778em") : e.colSeparationType === "CD" ? p.setAttribute("columnspacing", "0.5em") : p.setAttribute("columnspacing", "1em");
  var K = "", J = e.hLinesBeforeRow;
  f += J[0].length > 0 ? "left " : "", f += J[J.length - 1].length > 0 ? "right " : "";
  for (var X = 1; X < J.length - 1; X++)
    K += J[X].length === 0 ? "none " : J[X][0] ? "dashed " : "solid ";
  return /[sd]/.test(K) && p.setAttribute("rowlines", K.trim()), f !== "" && (p = new Le.MathNode("menclose", [p]), p.setAttribute("notation", f.trim())), e.arraystretch && e.arraystretch < 1 && (p = new Le.MathNode("mstyle", [p]), p.setAttribute("scriptlevel", "1")), p;
}, y4 = function(e, n) {
  e.envName.indexOf("ed") === -1 && Yd(e);
  var r = [], a = e.envName.indexOf("at") > -1 ? "alignat" : "align", i = e.envName === "split", s = $i(e.parser, {
    cols: r,
    addJot: !0,
    autoTag: i ? void 0 : T1(e.envName),
    emptySingleRow: !0,
    colSeparationType: a,
    maxNumCols: i ? 2 : void 0,
    leqno: e.parser.settings.leqno
  }, "display"), l, c = 0, d = {
    type: "ordgroup",
    mode: e.mode,
    body: []
  };
  if (n[0] && n[0].type === "ordgroup") {
    for (var p = "", _ = 0; _ < n[0].body.length; _++) {
      var f = St(n[0].body[_], "textord");
      p += f.text;
    }
    l = Number(p), c = l * 2;
  }
  var g = !c;
  s.body.forEach(function(A) {
    for (var I = 1; I < A.length; I += 2) {
      var x = St(A[I], "styling"), P = St(x.body[0], "ordgroup");
      P.body.unshift(d);
    }
    if (g)
      c < A.length && (c = A.length);
    else {
      var D = A.length / 2;
      if (l < D)
        throw new ke("Too many math in a row: " + ("expected " + l + ", but got " + D), A[0]);
    }
  });
  for (var E = 0; E < c; ++E) {
    var T = "r", R = 0;
    E % 2 === 1 ? T = "l" : E > 0 && g && (R = 1), r[E] = {
      type: "align",
      align: T,
      pregap: R,
      postgap: 0
    };
  }
  return s.colSeparationType = g ? "align" : "alignat", s;
};
Ha({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler(t, e) {
    var n = Ud(e[0]), r = n ? [e[0]] : St(e[0], "ordgroup").body, a = r.map(function(s) {
      var l = g1(s), c = l.text;
      if ("lcr".indexOf(c) !== -1)
        return {
          type: "align",
          align: c
        };
      if (c === "|")
        return {
          type: "separator",
          separator: "|"
        };
      if (c === ":")
        return {
          type: "separator",
          separator: ":"
        };
      throw new ke("Unknown column alignment: " + c, s);
    }), i = {
      cols: a,
      hskipBeforeAndAfter: !0,
      // \@preamble in lttab.dtx
      maxNumCols: a.length
    };
    return $i(t.parser, i, y1(t.envName));
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
  props: {
    numArgs: 0
  },
  handler(t) {
    var e = {
      matrix: null,
      pmatrix: ["(", ")"],
      bmatrix: ["[", "]"],
      Bmatrix: ["\\{", "\\}"],
      vmatrix: ["|", "|"],
      Vmatrix: ["\\Vert", "\\Vert"]
    }[t.envName.replace("*", "")], n = "c", r = {
      hskipBeforeAndAfter: !1,
      cols: [{
        type: "align",
        align: n
      }]
    };
    if (t.envName.charAt(t.envName.length - 1) === "*") {
      var a = t.parser;
      if (a.consumeSpaces(), a.fetch().text === "[") {
        if (a.consume(), a.consumeSpaces(), n = a.fetch().text, "lcr".indexOf(n) === -1)
          throw new ke("Expected l or c or r", a.nextToken);
        a.consume(), a.consumeSpaces(), a.expect("]"), a.consume(), r.cols = [{
          type: "align",
          align: n
        }];
      }
    }
    var i = $i(t.parser, r, y1(t.envName)), s = Math.max(0, ...i.body.map((l) => l.length));
    return i.cols = new Array(s).fill({
      type: "align",
      align: n
    }), e ? {
      type: "leftright",
      mode: t.mode,
      body: [i],
      left: e[0],
      right: e[1],
      rightColor: void 0
      // \right uninfluenced by \color in array
    } : i;
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler(t) {
    var e = {
      arraystretch: 0.5
    }, n = $i(t.parser, e, "script");
    return n.colSeparationType = "small", n;
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler(t, e) {
    var n = Ud(e[0]), r = n ? [e[0]] : St(e[0], "ordgroup").body, a = r.map(function(s) {
      var l = g1(s), c = l.text;
      if ("lc".indexOf(c) !== -1)
        return {
          type: "align",
          align: c
        };
      throw new ke("Unknown column alignment: " + c, s);
    });
    if (a.length > 1)
      throw new ke("{subarray} can contain only one column");
    var i = {
      cols: a,
      hskipBeforeAndAfter: !1,
      arraystretch: 0.5
    };
    if (i = $i(t.parser, i, "script"), i.body.length > 0 && i.body[0].length > 1)
      throw new ke("{subarray} can contain only one column");
    return i;
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler(t) {
    var e = {
      arraystretch: 1.2,
      cols: [{
        type: "align",
        align: "l",
        pregap: 0,
        // TODO(kevinb) get the current style.
        // For now we use the metrics for TEXT style which is what we were
        // doing before.  Before attempting to get the current style we
        // should look at TeX's behavior especially for \over and matrices.
        postgap: 1
        /* 1em quad */
      }, {
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 0
      }]
    }, n = $i(t.parser, e, y1(t.envName));
    return {
      type: "leftright",
      mode: t.mode,
      body: [n],
      left: t.envName.indexOf("r") > -1 ? "." : "\\{",
      right: t.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: void 0
    };
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: y4,
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler(t) {
    tt.contains(["gather", "gather*"], t.envName) && Yd(t);
    var e = {
      cols: [{
        type: "align",
        align: "c"
      }],
      addJot: !0,
      colSeparationType: "gather",
      autoTag: T1(t.envName),
      emptySingleRow: !0,
      leqno: t.parser.settings.leqno
    };
    return $i(t.parser, e, "display");
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: y4,
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler(t) {
    Yd(t);
    var e = {
      autoTag: T1(t.envName),
      emptySingleRow: !0,
      singleRow: !0,
      maxNumCols: 1,
      leqno: t.parser.settings.leqno
    };
    return $i(t.parser, e, "display");
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
Ha({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler(t) {
    return Yd(t), JV(t.parser);
  },
  htmlBuilder: Ya,
  mathmlBuilder: za
});
M("\\nonumber", "\\gdef\\@eqnsw{0}");
M("\\notag", "\\nonumber");
Ve({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !0
  },
  handler(t, e) {
    throw new ke(t.funcName + " valid only within array environment");
  }
});
var tC = b4;
Ve({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0];
    if (a.type !== "ordgroup")
      throw new ke("Invalid environment name", a);
    for (var i = "", s = 0; s < a.body.length; ++s)
      i += St(a.body[s], "textord").text;
    if (r === "\\begin") {
      if (!tC.hasOwnProperty(i))
        throw new ke("No such environment: " + i, a);
      var l = tC[i], {
        args: c,
        optArgs: d
      } = n.parseArguments("\\begin{" + i + "}", l), p = {
        mode: n.mode,
        envName: i,
        parser: n
      }, _ = l.handler(p, c, d);
      n.expect("\\end", !1);
      var f = n.nextToken, g = St(n.parseFunction(), "environment");
      if (g.name !== i)
        throw new ke("Mismatch: \\begin{" + i + "} matched by \\end{" + g.name + "}", f);
      return _;
    }
    return {
      type: "environment",
      mode: n.mode,
      name: i,
      nameGroup: a
    };
  }
});
var v4 = (t, e) => {
  var n = t.font, r = e.withFont(n);
  return Ut(t.body, r);
}, C4 = (t, e) => {
  var n = t.font, r = e.withFont(n);
  return tn(t.body, r);
}, nC = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};
Ve({
  type: "font",
  names: [
    // styles, except \boldsymbol defined below
    "\\mathrm",
    "\\mathit",
    "\\mathbf",
    "\\mathnormal",
    // families
    "\\mathbb",
    "\\mathcal",
    "\\mathfrak",
    "\\mathscr",
    "\\mathsf",
    "\\mathtt",
    // aliases, except \bm defined below
    "\\Bbb",
    "\\bold",
    "\\frak"
  ],
  props: {
    numArgs: 1,
    allowedInArgument: !0
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = cd(e[0]), i = r;
    return i in nC && (i = nC[i]), {
      type: "font",
      mode: n.mode,
      font: i.slice(1),
      body: a
    };
  },
  htmlBuilder: v4,
  mathmlBuilder: C4
});
Ve({
  type: "mclass",
  names: ["\\boldsymbol", "\\bm"],
  props: {
    numArgs: 1
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t, r = e[0], a = tt.isCharacterBox(r);
    return {
      type: "mclass",
      mode: n.mode,
      mclass: Gd(r),
      body: [{
        type: "font",
        mode: n.mode,
        font: "boldsymbol",
        body: r
      }],
      isCharacterBox: a
    };
  }
});
Ve({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r,
      breakOnTokenText: a
    } = t, {
      mode: i
    } = n, s = n.parseExpression(!0, a), l = "math" + r.slice(1);
    return {
      type: "font",
      mode: i,
      font: l,
      body: {
        type: "ordgroup",
        mode: n.mode,
        body: s
      }
    };
  },
  htmlBuilder: v4,
  mathmlBuilder: C4
});
var R4 = (t, e) => {
  var n = e;
  return t === "display" ? n = n.id >= at.SCRIPT.id ? n.text() : at.DISPLAY : t === "text" && n.size === at.DISPLAY.size ? n = at.TEXT : t === "script" ? n = at.SCRIPT : t === "scriptscript" && (n = at.SCRIPTSCRIPT), n;
}, v1 = (t, e) => {
  var n = R4(t.size, e.style), r = n.fracNum(), a = n.fracDen(), i;
  i = e.havingStyle(r);
  var s = Ut(t.numer, i, e);
  if (t.continued) {
    var l = 8.5 / e.fontMetrics().ptPerEm, c = 3.5 / e.fontMetrics().ptPerEm;
    s.height = s.height < l ? l : s.height, s.depth = s.depth < c ? c : s.depth;
  }
  i = e.havingStyle(a);
  var d = Ut(t.denom, i, e), p, _, f;
  t.hasBarLine ? (t.barSize ? (_ = Tn(t.barSize, e), p = le.makeLineSpan("frac-line", e, _)) : p = le.makeLineSpan("frac-line", e), _ = p.height, f = p.height) : (p = null, _ = 0, f = e.fontMetrics().defaultRuleThickness);
  var g, E, T;
  n.size === at.DISPLAY.size || t.size === "display" ? (g = e.fontMetrics().num1, _ > 0 ? E = 3 * f : E = 7 * f, T = e.fontMetrics().denom1) : (_ > 0 ? (g = e.fontMetrics().num2, E = f) : (g = e.fontMetrics().num3, E = 3 * f), T = e.fontMetrics().denom2);
  var R;
  if (p) {
    var I = e.fontMetrics().axisHeight;
    g - s.depth - (I + 0.5 * _) < E && (g += E - (g - s.depth - (I + 0.5 * _))), I - 0.5 * _ - (d.height - T) < E && (T += E - (I - 0.5 * _ - (d.height - T)));
    var x = -(I - 0.5 * _);
    R = le.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: d,
        shift: T
      }, {
        type: "elem",
        elem: p,
        shift: x
      }, {
        type: "elem",
        elem: s,
        shift: -g
      }]
    }, e);
  } else {
    var A = g - s.depth - (d.height - T);
    A < E && (g += 0.5 * (E - A), T += 0.5 * (E - A)), R = le.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: d,
        shift: T
      }, {
        type: "elem",
        elem: s,
        shift: -g
      }]
    }, e);
  }
  i = e.havingStyle(n), R.height *= i.sizeMultiplier / e.sizeMultiplier, R.depth *= i.sizeMultiplier / e.sizeMultiplier;
  var P;
  n.size === at.DISPLAY.size ? P = e.fontMetrics().delim1 : n.size === at.SCRIPTSCRIPT.size ? P = e.havingStyle(at.SCRIPT).fontMetrics().delim2 : P = e.fontMetrics().delim2;
  var D, L;
  return t.leftDelim == null ? D = Fl(e, ["mopen"]) : D = li.customSizedDelim(t.leftDelim, P, !0, e.havingStyle(n), t.mode, ["mopen"]), t.continued ? L = le.makeSpan([]) : t.rightDelim == null ? L = Fl(e, ["mclose"]) : L = li.customSizedDelim(t.rightDelim, P, !0, e.havingStyle(n), t.mode, ["mclose"]), le.makeSpan(["mord"].concat(i.sizingClasses(e)), [D, le.makeSpan(["mfrac"], [R]), L], e);
}, C1 = (t, e) => {
  var n = new Le.MathNode("mfrac", [tn(t.numer, e), tn(t.denom, e)]);
  if (!t.hasBarLine)
    n.setAttribute("linethickness", "0px");
  else if (t.barSize) {
    var r = Tn(t.barSize, e);
    n.setAttribute("linethickness", Ye(r));
  }
  var a = R4(t.size, e.style);
  if (a.size !== e.style.size) {
    n = new Le.MathNode("mstyle", [n]);
    var i = a.size === at.DISPLAY.size ? "true" : "false";
    n.setAttribute("displaystyle", i), n.setAttribute("scriptlevel", "0");
  }
  if (t.leftDelim != null || t.rightDelim != null) {
    var s = [];
    if (t.leftDelim != null) {
      var l = new Le.MathNode("mo", [new Le.TextNode(t.leftDelim.replace("\\", ""))]);
      l.setAttribute("fence", "true"), s.push(l);
    }
    if (s.push(n), t.rightDelim != null) {
      var c = new Le.MathNode("mo", [new Le.TextNode(t.rightDelim.replace("\\", ""))]);
      c.setAttribute("fence", "true"), s.push(c);
    }
    return m1(s);
  }
  return n;
};
Ve({
  type: "genfrac",
  names: [
    "\\dfrac",
    "\\frac",
    "\\tfrac",
    "\\dbinom",
    "\\binom",
    "\\tbinom",
    "\\\\atopfrac",
    // can’t be entered directly
    "\\\\bracefrac",
    "\\\\brackfrac"
    // ditto
  ],
  props: {
    numArgs: 2,
    allowedInArgument: !0
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0], i = e[1], s, l = null, c = null, d = "auto";
    switch (r) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        s = !0;
        break;
      case "\\\\atopfrac":
        s = !1;
        break;
      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        s = !1, l = "(", c = ")";
        break;
      case "\\\\bracefrac":
        s = !1, l = "\\{", c = "\\}";
        break;
      case "\\\\brackfrac":
        s = !1, l = "[", c = "]";
        break;
      default:
        throw new Error("Unrecognized genfrac command");
    }
    switch (r) {
      case "\\dfrac":
      case "\\dbinom":
        d = "display";
        break;
      case "\\tfrac":
      case "\\tbinom":
        d = "text";
        break;
    }
    return {
      type: "genfrac",
      mode: n.mode,
      continued: !1,
      numer: a,
      denom: i,
      hasBarLine: s,
      leftDelim: l,
      rightDelim: c,
      size: d,
      barSize: null
    };
  },
  htmlBuilder: v1,
  mathmlBuilder: C1
});
Ve({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0], i = e[1];
    return {
      type: "genfrac",
      mode: n.mode,
      continued: !0,
      numer: a,
      denom: i,
      hasBarLine: !0,
      leftDelim: null,
      rightDelim: null,
      size: "display",
      barSize: null
    };
  }
});
Ve({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: !0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n,
      token: r
    } = t, a;
    switch (n) {
      case "\\over":
        a = "\\frac";
        break;
      case "\\choose":
        a = "\\binom";
        break;
      case "\\atop":
        a = "\\\\atopfrac";
        break;
      case "\\brace":
        a = "\\\\bracefrac";
        break;
      case "\\brack":
        a = "\\\\brackfrac";
        break;
      default:
        throw new Error("Unrecognized infix genfrac command");
    }
    return {
      type: "infix",
      mode: e.mode,
      replaceWith: a,
      token: r
    };
  }
});
var rC = ["display", "text", "script", "scriptscript"], aC = function(e) {
  var n = null;
  return e.length > 0 && (n = e, n = n === "." ? null : n), n;
};
Ve({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: !0,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler(t, e) {
    var {
      parser: n
    } = t, r = e[4], a = e[5], i = cd(e[0]), s = i.type === "atom" && i.family === "open" ? aC(i.text) : null, l = cd(e[1]), c = l.type === "atom" && l.family === "close" ? aC(l.text) : null, d = St(e[2], "size"), p, _ = null;
    d.isBlank ? p = !0 : (_ = d.value, p = _.number > 0);
    var f = "auto", g = e[3];
    if (g.type === "ordgroup") {
      if (g.body.length > 0) {
        var E = St(g.body[0], "textord");
        f = rC[Number(E.text)];
      }
    } else
      g = St(g, "textord"), f = rC[Number(g.text)];
    return {
      type: "genfrac",
      mode: n.mode,
      numer: r,
      denom: a,
      continued: !1,
      hasBarLine: p,
      barSize: _,
      leftDelim: s,
      rightDelim: c,
      size: f
    };
  },
  htmlBuilder: v1,
  mathmlBuilder: C1
});
Ve({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: !0
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r,
      token: a
    } = t;
    return {
      type: "infix",
      mode: n.mode,
      replaceWith: "\\\\abovefrac",
      size: St(e[0], "size").value,
      token: a
    };
  }
});
Ve({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0], i = qq(St(e[1], "infix").size), s = e[2], l = i.number > 0;
    return {
      type: "genfrac",
      mode: n.mode,
      numer: a,
      denom: s,
      continued: !1,
      hasBarLine: l,
      barSize: i,
      leftDelim: null,
      rightDelim: null,
      size: "auto"
    };
  },
  htmlBuilder: v1,
  mathmlBuilder: C1
});
var A4 = (t, e) => {
  var n = e.style, r, a;
  t.type === "supsub" ? (r = t.sup ? Ut(t.sup, e.havingStyle(n.sup()), e) : Ut(t.sub, e.havingStyle(n.sub()), e), a = St(t.base, "horizBrace")) : a = St(t, "horizBrace");
  var i = Ut(a.base, e.havingBaseStyle(at.DISPLAY)), s = di.svgSpan(a, e), l;
  if (a.isOver ? (l = le.makeVList({
    positionType: "firstBaseline",
    children: [{
      type: "elem",
      elem: i
    }, {
      type: "kern",
      size: 0.1
    }, {
      type: "elem",
      elem: s
    }]
  }, e), l.children[0].children[0].children[1].classes.push("svg-align")) : (l = le.makeVList({
    positionType: "bottom",
    positionData: i.depth + 0.1 + s.height,
    children: [{
      type: "elem",
      elem: s
    }, {
      type: "kern",
      size: 0.1
    }, {
      type: "elem",
      elem: i
    }]
  }, e), l.children[0].children[0].children[0].classes.push("svg-align")), r) {
    var c = le.makeSpan(["mord", a.isOver ? "mover" : "munder"], [l], e);
    a.isOver ? l = le.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: c
      }, {
        type: "kern",
        size: 0.2
      }, {
        type: "elem",
        elem: r
      }]
    }, e) : l = le.makeVList({
      positionType: "bottom",
      positionData: c.depth + 0.2 + r.height + r.depth,
      children: [{
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: 0.2
      }, {
        type: "elem",
        elem: c
      }]
    }, e);
  }
  return le.makeSpan(["mord", a.isOver ? "mover" : "munder"], [l], e);
}, m$ = (t, e) => {
  var n = di.mathMLnode(t.label);
  return new Le.MathNode(t.isOver ? "mover" : "munder", [tn(t.base, e), n]);
};
Ve({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t;
    return {
      type: "horizBrace",
      mode: n.mode,
      label: r,
      isOver: /^\\over/.test(r),
      base: e[0]
    };
  },
  htmlBuilder: A4,
  mathmlBuilder: m$
});
Ve({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t, r = e[1], a = St(e[0], "url").url;
    return n.settings.isTrusted({
      command: "\\href",
      url: a
    }) ? {
      type: "href",
      mode: n.mode,
      href: a,
      body: Dn(r)
    } : n.formatUnsupportedCmd("\\href");
  },
  htmlBuilder: (t, e) => {
    var n = zn(t.body, e, !1);
    return le.makeAnchor(t.href, [], n, e);
  },
  mathmlBuilder: (t, e) => {
    var n = Gi(t.body, e);
    return n instanceof aa || (n = new aa("mrow", [n])), n.setAttribute("href", t.href), n;
  }
});
Ve({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t, r = St(e[0], "url").url;
    if (!n.settings.isTrusted({
      command: "\\url",
      url: r
    }))
      return n.formatUnsupportedCmd("\\url");
    for (var a = [], i = 0; i < r.length; i++) {
      var s = r[i];
      s === "~" && (s = "\\textasciitilde"), a.push({
        type: "textord",
        mode: "text",
        text: s
      });
    }
    var l = {
      type: "text",
      mode: n.mode,
      font: "\\texttt",
      body: a
    };
    return {
      type: "href",
      mode: n.mode,
      href: r,
      body: Dn(l)
    };
  }
});
Ve({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInText: !0,
    primitive: !0
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "hbox",
      mode: n.mode,
      body: Dn(e[0])
    };
  },
  htmlBuilder(t, e) {
    var n = zn(t.body, e, !1);
    return le.makeFragment(n);
  },
  mathmlBuilder(t, e) {
    return new Le.MathNode("mrow", Dr(t.body, e));
  }
});
Ve({
  type: "html",
  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r,
      token: a
    } = t, i = St(e[0], "raw").string, s = e[1];
    n.settings.strict && n.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
    var l, c = {};
    switch (r) {
      case "\\htmlClass":
        c.class = i, l = {
          command: "\\htmlClass",
          class: i
        };
        break;
      case "\\htmlId":
        c.id = i, l = {
          command: "\\htmlId",
          id: i
        };
        break;
      case "\\htmlStyle":
        c.style = i, l = {
          command: "\\htmlStyle",
          style: i
        };
        break;
      case "\\htmlData": {
        for (var d = i.split(","), p = 0; p < d.length; p++) {
          var _ = d[p].split("=");
          if (_.length !== 2)
            throw new ke("Error parsing key-value for \\htmlData");
          c["data-" + _[0].trim()] = _[1].trim();
        }
        l = {
          command: "\\htmlData",
          attributes: c
        };
        break;
      }
      default:
        throw new Error("Unrecognized html command");
    }
    return n.settings.isTrusted(l) ? {
      type: "html",
      mode: n.mode,
      attributes: c,
      body: Dn(s)
    } : n.formatUnsupportedCmd(r);
  },
  htmlBuilder: (t, e) => {
    var n = zn(t.body, e, !1), r = ["enclosing"];
    t.attributes.class && r.push(...t.attributes.class.trim().split(/\s+/));
    var a = le.makeSpan(r, n, e);
    for (var i in t.attributes)
      i !== "class" && t.attributes.hasOwnProperty(i) && a.setAttribute(i, t.attributes[i]);
    return a;
  },
  mathmlBuilder: (t, e) => Gi(t.body, e)
});
Ve({
  type: "htmlmathml",
  names: ["\\html@mathml"],
  props: {
    numArgs: 2,
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t;
    return {
      type: "htmlmathml",
      mode: n.mode,
      html: Dn(e[0]),
      mathml: Dn(e[1])
    };
  },
  htmlBuilder: (t, e) => {
    var n = zn(t.html, e, !1);
    return le.makeFragment(n);
  },
  mathmlBuilder: (t, e) => Gi(t.mathml, e)
});
var p_ = function(e) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e))
    return {
      number: +e,
      unit: "bp"
    };
  var n = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);
  if (!n)
    throw new ke("Invalid size: '" + e + "' in \\includegraphics");
  var r = {
    number: +(n[1] + n[2]),
    // sign + magnitude, cast to number
    unit: n[3]
  };
  if (!Vx(r))
    throw new ke("Invalid unit: '" + r.unit + "' in \\includegraphics.");
  return r;
};
Ve({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: !1
  },
  handler: (t, e, n) => {
    var {
      parser: r
    } = t, a = {
      number: 0,
      unit: "em"
    }, i = {
      number: 0.9,
      unit: "em"
    }, s = {
      number: 0,
      unit: "em"
    }, l = "";
    if (n[0])
      for (var c = St(n[0], "raw").string, d = c.split(","), p = 0; p < d.length; p++) {
        var _ = d[p].split("=");
        if (_.length === 2) {
          var f = _[1].trim();
          switch (_[0].trim()) {
            case "alt":
              l = f;
              break;
            case "width":
              a = p_(f);
              break;
            case "height":
              i = p_(f);
              break;
            case "totalheight":
              s = p_(f);
              break;
            default:
              throw new ke("Invalid key: '" + _[0] + "' in \\includegraphics.");
          }
        }
      }
    var g = St(e[0], "url").url;
    return l === "" && (l = g, l = l.replace(/^.*[\\/]/, ""), l = l.substring(0, l.lastIndexOf("."))), r.settings.isTrusted({
      command: "\\includegraphics",
      url: g
    }) ? {
      type: "includegraphics",
      mode: r.mode,
      alt: l,
      width: a,
      height: i,
      totalheight: s,
      src: g
    } : r.formatUnsupportedCmd("\\includegraphics");
  },
  htmlBuilder: (t, e) => {
    var n = Tn(t.height, e), r = 0;
    t.totalheight.number > 0 && (r = Tn(t.totalheight, e) - n);
    var a = 0;
    t.width.number > 0 && (a = Tn(t.width, e));
    var i = {
      height: Ye(n + r)
    };
    a > 0 && (i.width = Ye(a)), r > 0 && (i.verticalAlign = Ye(-r));
    var s = new mV(t.src, t.alt, i);
    return s.height = n, s.depth = r, s;
  },
  mathmlBuilder: (t, e) => {
    var n = new Le.MathNode("mglyph", []);
    n.setAttribute("alt", t.alt);
    var r = Tn(t.height, e), a = 0;
    if (t.totalheight.number > 0 && (a = Tn(t.totalheight, e) - r, n.setAttribute("valign", Ye(-a))), n.setAttribute("height", Ye(r + a)), t.width.number > 0) {
      var i = Tn(t.width, e);
      n.setAttribute("width", Ye(i));
    }
    return n.setAttribute("src", t.src), n;
  }
});
Ve({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: !0,
    allowedInText: !0
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t, a = St(e[0], "size");
    if (n.settings.strict) {
      var i = r[1] === "m", s = a.value.unit === "mu";
      i ? (s || n.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " supports only mu units, " + ("not " + a.value.unit + " units")), n.mode !== "math" && n.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " works only in math mode")) : s && n.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " doesn't support mu units");
    }
    return {
      type: "kern",
      mode: n.mode,
      dimension: a.value
    };
  },
  htmlBuilder(t, e) {
    return le.makeGlue(t.dimension, e);
  },
  mathmlBuilder(t, e) {
    var n = Tn(t.dimension, e);
    return new Le.SpaceNode(n);
  }
});
Ve({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0];
    return {
      type: "lap",
      mode: n.mode,
      alignment: r.slice(5),
      body: a
    };
  },
  htmlBuilder: (t, e) => {
    var n;
    t.alignment === "clap" ? (n = le.makeSpan([], [Ut(t.body, e)]), n = le.makeSpan(["inner"], [n], e)) : n = le.makeSpan(["inner"], [Ut(t.body, e)]);
    var r = le.makeSpan(["fix"], []), a = le.makeSpan([t.alignment], [n, r], e), i = le.makeSpan(["strut"]);
    return i.style.height = Ye(a.height + a.depth), a.depth && (i.style.verticalAlign = Ye(-a.depth)), a.children.unshift(i), a = le.makeSpan(["thinbox"], [a], e), le.makeSpan(["mord", "vbox"], [a], e);
  },
  mathmlBuilder: (t, e) => {
    var n = new Le.MathNode("mpadded", [tn(t.body, e)]);
    if (t.alignment !== "rlap") {
      var r = t.alignment === "llap" ? "-1" : "-0.5";
      n.setAttribute("lspace", r + "width");
    }
    return n.setAttribute("width", "0px"), n;
  }
});
Ve({
  type: "styling",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !1
  },
  handler(t, e) {
    var {
      funcName: n,
      parser: r
    } = t, a = r.mode;
    r.switchMode("math");
    var i = n === "\\(" ? "\\)" : "$", s = r.parseExpression(!1, i);
    return r.expect(i), r.switchMode(a), {
      type: "styling",
      mode: r.mode,
      style: "text",
      body: s
    };
  }
});
Ve({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !1
  },
  handler(t, e) {
    throw new ke("Mismatched " + t.funcName);
  }
});
var iC = (t, e) => {
  switch (e.style.size) {
    case at.DISPLAY.size:
      return t.display;
    case at.TEXT.size:
      return t.text;
    case at.SCRIPT.size:
      return t.script;
    case at.SCRIPTSCRIPT.size:
      return t.scriptscript;
    default:
      return t.text;
  }
};
Ve({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t;
    return {
      type: "mathchoice",
      mode: n.mode,
      display: Dn(e[0]),
      text: Dn(e[1]),
      script: Dn(e[2]),
      scriptscript: Dn(e[3])
    };
  },
  htmlBuilder: (t, e) => {
    var n = iC(t, e), r = zn(n, e, !1);
    return le.makeFragment(r);
  },
  mathmlBuilder: (t, e) => {
    var n = iC(t, e);
    return Gi(n, e);
  }
});
var O4 = (t, e, n, r, a, i, s) => {
  t = le.makeSpan([], [t]);
  var l = n && tt.isCharacterBox(n), c, d;
  if (e) {
    var p = Ut(e, r.havingStyle(a.sup()), r);
    d = {
      elem: p,
      kern: Math.max(r.fontMetrics().bigOpSpacing1, r.fontMetrics().bigOpSpacing3 - p.depth)
    };
  }
  if (n) {
    var _ = Ut(n, r.havingStyle(a.sub()), r);
    c = {
      elem: _,
      kern: Math.max(r.fontMetrics().bigOpSpacing2, r.fontMetrics().bigOpSpacing4 - _.height)
    };
  }
  var f;
  if (d && c) {
    var g = r.fontMetrics().bigOpSpacing5 + c.elem.height + c.elem.depth + c.kern + t.depth + s;
    f = le.makeVList({
      positionType: "bottom",
      positionData: g,
      children: [{
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: c.elem,
        marginLeft: Ye(-i)
      }, {
        type: "kern",
        size: c.kern
      }, {
        type: "elem",
        elem: t
      }, {
        type: "kern",
        size: d.kern
      }, {
        type: "elem",
        elem: d.elem,
        marginLeft: Ye(i)
      }, {
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }]
    }, r);
  } else if (c) {
    var E = t.height - s;
    f = le.makeVList({
      positionType: "top",
      positionData: E,
      children: [{
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: c.elem,
        marginLeft: Ye(-i)
      }, {
        type: "kern",
        size: c.kern
      }, {
        type: "elem",
        elem: t
      }]
    }, r);
  } else if (d) {
    var T = t.depth + s;
    f = le.makeVList({
      positionType: "bottom",
      positionData: T,
      children: [{
        type: "elem",
        elem: t
      }, {
        type: "kern",
        size: d.kern
      }, {
        type: "elem",
        elem: d.elem,
        marginLeft: Ye(i)
      }, {
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }]
    }, r);
  } else
    return t;
  var R = [f];
  if (c && i !== 0 && !l) {
    var A = le.makeSpan(["mspace"], [], r);
    A.style.marginRight = Ye(i), R.unshift(A);
  }
  return le.makeSpan(["mop", "op-limits"], R, r);
}, N4 = ["\\smallint"], Eo = (t, e) => {
  var n, r, a = !1, i;
  t.type === "supsub" ? (n = t.sup, r = t.sub, i = St(t.base, "op"), a = !0) : i = St(t, "op");
  var s = e.style, l = !1;
  s.size === at.DISPLAY.size && i.symbol && !tt.contains(N4, i.name) && (l = !0);
  var c;
  if (i.symbol) {
    var d = l ? "Size2-Regular" : "Size1-Regular", p = "";
    if ((i.name === "\\oiint" || i.name === "\\oiiint") && (p = i.name.slice(1), i.name = p === "oiint" ? "\\iint" : "\\iiint"), c = le.makeSymbol(i.name, d, "math", e, ["mop", "op-symbol", l ? "large-op" : "small-op"]), p.length > 0) {
      var _ = c.italic, f = le.staticSvg(p + "Size" + (l ? "2" : "1"), e);
      c = le.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: c,
          shift: 0
        }, {
          type: "elem",
          elem: f,
          shift: l ? 0.08 : 0
        }]
      }, e), i.name = "\\" + p, c.classes.unshift("mop"), c.italic = _;
    }
  } else if (i.body) {
    var g = zn(i.body, e, !0);
    g.length === 1 && g[0] instanceof la ? (c = g[0], c.classes[0] = "mop") : c = le.makeSpan(["mop"], g, e);
  } else {
    for (var E = [], T = 1; T < i.name.length; T++)
      E.push(le.mathsym(i.name[T], i.mode, e));
    c = le.makeSpan(["mop"], E, e);
  }
  var R = 0, A = 0;
  return (c instanceof la || i.name === "\\oiint" || i.name === "\\oiiint") && !i.suppressBaseShift && (R = (c.height - c.depth) / 2 - e.fontMetrics().axisHeight, A = c.italic), a ? O4(c, n, r, e, s, A, R) : (R && (c.style.position = "relative", c.style.top = Ye(R)), c);
}, tc = (t, e) => {
  var n;
  if (t.symbol)
    n = new aa("mo", [ca(t.name, t.mode)]), tt.contains(N4, t.name) && n.setAttribute("largeop", "false");
  else if (t.body)
    n = new aa("mo", Dr(t.body, e));
  else {
    n = new aa("mi", [new bl(t.name.slice(1))]);
    var r = new aa("mo", [ca("⁡", "text")]);
    t.parentIsSupSub ? n = new aa("mrow", [n, r]) : n = n4([n, r]);
  }
  return n;
}, f$ = {
  "∏": "\\prod",
  "∐": "\\coprod",
  "∑": "\\sum",
  "⋀": "\\bigwedge",
  "⋁": "\\bigvee",
  "⋂": "\\bigcap",
  "⋃": "\\bigcup",
  "⨀": "\\bigodot",
  "⨁": "\\bigoplus",
  "⨂": "\\bigotimes",
  "⨄": "\\biguplus",
  "⨆": "\\bigsqcup"
};
Ve({
  type: "op",
  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "∏", "∐", "∑", "⋀", "⋁", "⋂", "⋃", "⨀", "⨁", "⨂", "⨄", "⨆"],
  props: {
    numArgs: 0
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = r;
    return a.length === 1 && (a = f$[a]), {
      type: "op",
      mode: n.mode,
      limits: !0,
      parentIsSupSub: !1,
      symbol: !0,
      name: a
    };
  },
  htmlBuilder: Eo,
  mathmlBuilder: tc
});
Ve({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t, r = e[0];
    return {
      type: "op",
      mode: n.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !1,
      body: Dn(r)
    };
  },
  htmlBuilder: Eo,
  mathmlBuilder: tc
});
var g$ = {
  "∫": "\\int",
  "∬": "\\iint",
  "∭": "\\iiint",
  "∮": "\\oint",
  "∯": "\\oiint",
  "∰": "\\oiiint"
};
Ve({
  type: "op",
  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
  props: {
    numArgs: 0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n
    } = t;
    return {
      type: "op",
      mode: e.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !1,
      name: n
    };
  },
  htmlBuilder: Eo,
  mathmlBuilder: tc
});
Ve({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n
    } = t;
    return {
      type: "op",
      mode: e.mode,
      limits: !0,
      parentIsSupSub: !1,
      symbol: !1,
      name: n
    };
  },
  htmlBuilder: Eo,
  mathmlBuilder: tc
});
Ve({
  type: "op",
  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "∫", "∬", "∭", "∮", "∯", "∰"],
  props: {
    numArgs: 0
  },
  handler(t) {
    var {
      parser: e,
      funcName: n
    } = t, r = n;
    return r.length === 1 && (r = g$[r]), {
      type: "op",
      mode: e.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !0,
      name: r
    };
  },
  htmlBuilder: Eo,
  mathmlBuilder: tc
});
var I4 = (t, e) => {
  var n, r, a = !1, i;
  t.type === "supsub" ? (n = t.sup, r = t.sub, i = St(t.base, "operatorname"), a = !0) : i = St(t, "operatorname");
  var s;
  if (i.body.length > 0) {
    for (var l = i.body.map((_) => {
      var f = _.text;
      return typeof f == "string" ? {
        type: "textord",
        mode: _.mode,
        text: f
      } : _;
    }), c = zn(l, e.withFont("mathrm"), !0), d = 0; d < c.length; d++) {
      var p = c[d];
      p instanceof la && (p.text = p.text.replace(/\u2212/, "-").replace(/\u2217/, "*"));
    }
    s = le.makeSpan(["mop"], c, e);
  } else
    s = le.makeSpan(["mop"], [], e);
  return a ? O4(s, n, r, e, e.style, 0, 0) : s;
}, h$ = (t, e) => {
  for (var n = Dr(t.body, e.withFont("mathrm")), r = !0, a = 0; a < n.length; a++) {
    var i = n[a];
    if (!(i instanceof Le.SpaceNode)) if (i instanceof Le.MathNode)
      switch (i.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mspace":
        case "mtext":
          break;
        case "mo": {
          var s = i.children[0];
          i.children.length === 1 && s instanceof Le.TextNode ? s.text = s.text.replace(/\u2212/, "-").replace(/\u2217/, "*") : r = !1;
          break;
        }
        default:
          r = !1;
      }
    else
      r = !1;
  }
  if (r) {
    var l = n.map((p) => p.toText()).join("");
    n = [new Le.TextNode(l)];
  }
  var c = new Le.MathNode("mi", n);
  c.setAttribute("mathvariant", "normal");
  var d = new Le.MathNode("mo", [ca("⁡", "text")]);
  return t.parentIsSupSub ? new Le.MathNode("mrow", [c, d]) : Le.newDocumentFragment([c, d]);
};
Ve({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1
  },
  handler: (t, e) => {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0];
    return {
      type: "operatorname",
      mode: n.mode,
      body: Dn(a),
      alwaysHandleSupSub: r === "\\operatornamewithlimits",
      limits: !1,
      parentIsSupSub: !1
    };
  },
  htmlBuilder: I4,
  mathmlBuilder: h$
});
M("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
Ss({
  type: "ordgroup",
  htmlBuilder(t, e) {
    return t.semisimple ? le.makeFragment(zn(t.body, e, !1)) : le.makeSpan(["mord"], zn(t.body, e, !0), e);
  },
  mathmlBuilder(t, e) {
    return Gi(t.body, e, !0);
  }
});
Ve({
  type: "overline",
  names: ["\\overline"],
  props: {
    numArgs: 1
  },
  handler(t, e) {
    var {
      parser: n
    } = t, r = e[0];
    return {
      type: "overline",
      mode: n.mode,
      body: r
    };
  },
  htmlBuilder(t, e) {
    var n = Ut(t.body, e.havingCrampedStyle()), r = le.makeLineSpan("overline-line", e), a = e.fontMetrics().defaultRuleThickness, i = le.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: n
      }, {
        type: "kern",
        size: 3 * a
      }, {
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: a
      }]
    }, e);
    return le.makeSpan(["mord", "overline"], [i], e);
  },
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mo", [new Le.TextNode("‾")]);
    n.setAttribute("stretchy", "true");
    var r = new Le.MathNode("mover", [tn(t.body, e), n]);
    return r.setAttribute("accent", "true"), r;
  }
});
Ve({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t, r = e[0];
    return {
      type: "phantom",
      mode: n.mode,
      body: Dn(r)
    };
  },
  htmlBuilder: (t, e) => {
    var n = zn(t.body, e.withPhantom(), !1);
    return le.makeFragment(n);
  },
  mathmlBuilder: (t, e) => {
    var n = Dr(t.body, e);
    return new Le.MathNode("mphantom", n);
  }
});
Ve({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t, r = e[0];
    return {
      type: "hphantom",
      mode: n.mode,
      body: r
    };
  },
  htmlBuilder: (t, e) => {
    var n = le.makeSpan([], [Ut(t.body, e.withPhantom())]);
    if (n.height = 0, n.depth = 0, n.children)
      for (var r = 0; r < n.children.length; r++)
        n.children[r].height = 0, n.children[r].depth = 0;
    return n = le.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: n
      }]
    }, e), le.makeSpan(["mord"], [n], e);
  },
  mathmlBuilder: (t, e) => {
    var n = Dr(Dn(t.body), e), r = new Le.MathNode("mphantom", n), a = new Le.MathNode("mpadded", [r]);
    return a.setAttribute("height", "0px"), a.setAttribute("depth", "0px"), a;
  }
});
Ve({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      parser: n
    } = t, r = e[0];
    return {
      type: "vphantom",
      mode: n.mode,
      body: r
    };
  },
  htmlBuilder: (t, e) => {
    var n = le.makeSpan(["inner"], [Ut(t.body, e.withPhantom())]), r = le.makeSpan(["fix"], []);
    return le.makeSpan(["mord", "rlap"], [n, r], e);
  },
  mathmlBuilder: (t, e) => {
    var n = Dr(Dn(t.body), e), r = new Le.MathNode("mphantom", n), a = new Le.MathNode("mpadded", [r]);
    return a.setAttribute("width", "0px"), a;
  }
});
Ve({
  type: "raisebox",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: !0
  },
  handler(t, e) {
    var {
      parser: n
    } = t, r = St(e[0], "size").value, a = e[1];
    return {
      type: "raisebox",
      mode: n.mode,
      dy: r,
      body: a
    };
  },
  htmlBuilder(t, e) {
    var n = Ut(t.body, e), r = Tn(t.dy, e);
    return le.makeVList({
      positionType: "shift",
      positionData: -r,
      children: [{
        type: "elem",
        elem: n
      }]
    }, e);
  },
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mpadded", [tn(t.body, e)]), r = t.dy.number + t.dy.unit;
    return n.setAttribute("voffset", r), n;
  }
});
Ve({
  type: "internal",
  names: ["\\relax"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(t) {
    var {
      parser: e
    } = t;
    return {
      type: "internal",
      mode: e.mode
    };
  }
});
Ve({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    argTypes: ["size", "size", "size"]
  },
  handler(t, e, n) {
    var {
      parser: r
    } = t, a = n[0], i = St(e[0], "size"), s = St(e[1], "size");
    return {
      type: "rule",
      mode: r.mode,
      shift: a && St(a, "size").value,
      width: i.value,
      height: s.value
    };
  },
  htmlBuilder(t, e) {
    var n = le.makeSpan(["mord", "rule"], [], e), r = Tn(t.width, e), a = Tn(t.height, e), i = t.shift ? Tn(t.shift, e) : 0;
    return n.style.borderRightWidth = Ye(r), n.style.borderTopWidth = Ye(a), n.style.bottom = Ye(i), n.width = r, n.height = a + i, n.depth = -i, n.maxFontSize = a * 1.125 * e.sizeMultiplier, n;
  },
  mathmlBuilder(t, e) {
    var n = Tn(t.width, e), r = Tn(t.height, e), a = t.shift ? Tn(t.shift, e) : 0, i = e.color && e.getColor() || "black", s = new Le.MathNode("mspace");
    s.setAttribute("mathbackground", i), s.setAttribute("width", Ye(n)), s.setAttribute("height", Ye(r));
    var l = new Le.MathNode("mpadded", [s]);
    return a >= 0 ? l.setAttribute("height", Ye(a)) : (l.setAttribute("height", Ye(a)), l.setAttribute("depth", Ye(-a))), l.setAttribute("voffset", Ye(a)), l;
  }
});
function x4(t, e, n) {
  for (var r = zn(t, e, !1), a = e.sizeMultiplier / n.sizeMultiplier, i = 0; i < r.length; i++) {
    var s = r[i].classes.indexOf("sizing");
    s < 0 ? Array.prototype.push.apply(r[i].classes, e.sizingClasses(n)) : r[i].classes[s + 1] === "reset-size" + e.size && (r[i].classes[s + 1] = "reset-size" + n.size), r[i].height *= a, r[i].depth *= a;
  }
  return le.makeFragment(r);
}
var sC = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"], E$ = (t, e) => {
  var n = e.havingSize(t.size);
  return x4(t.body, n, e);
};
Ve({
  type: "sizing",
  names: sC,
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler: (t, e) => {
    var {
      breakOnTokenText: n,
      funcName: r,
      parser: a
    } = t, i = a.parseExpression(!1, n);
    return {
      type: "sizing",
      mode: a.mode,
      // Figure out what size to use based on the list of functions above
      size: sC.indexOf(r) + 1,
      body: i
    };
  },
  htmlBuilder: E$,
  mathmlBuilder: (t, e) => {
    var n = e.havingSize(t.size), r = Dr(t.body, n), a = new Le.MathNode("mstyle", r);
    return a.setAttribute("mathsize", Ye(n.sizeMultiplier)), a;
  }
});
Ve({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: !0
  },
  handler: (t, e, n) => {
    var {
      parser: r
    } = t, a = !1, i = !1, s = n[0] && St(n[0], "ordgroup");
    if (s)
      for (var l = "", c = 0; c < s.body.length; ++c) {
        var d = s.body[c];
        if (l = d.text, l === "t")
          a = !0;
        else if (l === "b")
          i = !0;
        else {
          a = !1, i = !1;
          break;
        }
      }
    else
      a = !0, i = !0;
    var p = e[0];
    return {
      type: "smash",
      mode: r.mode,
      body: p,
      smashHeight: a,
      smashDepth: i
    };
  },
  htmlBuilder: (t, e) => {
    var n = le.makeSpan([], [Ut(t.body, e)]);
    if (!t.smashHeight && !t.smashDepth)
      return n;
    if (t.smashHeight && (n.height = 0, n.children))
      for (var r = 0; r < n.children.length; r++)
        n.children[r].height = 0;
    if (t.smashDepth && (n.depth = 0, n.children))
      for (var a = 0; a < n.children.length; a++)
        n.children[a].depth = 0;
    var i = le.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: n
      }]
    }, e);
    return le.makeSpan(["mord"], [i], e);
  },
  mathmlBuilder: (t, e) => {
    var n = new Le.MathNode("mpadded", [tn(t.body, e)]);
    return t.smashHeight && n.setAttribute("height", "0px"), t.smashDepth && n.setAttribute("depth", "0px"), n;
  }
});
Ve({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(t, e, n) {
    var {
      parser: r
    } = t, a = n[0], i = e[0];
    return {
      type: "sqrt",
      mode: r.mode,
      body: i,
      index: a
    };
  },
  htmlBuilder(t, e) {
    var n = Ut(t.body, e.havingCrampedStyle());
    n.height === 0 && (n.height = e.fontMetrics().xHeight), n = le.wrapFragment(n, e);
    var r = e.fontMetrics(), a = r.defaultRuleThickness, i = a;
    e.style.id < at.TEXT.id && (i = e.fontMetrics().xHeight);
    var s = a + i / 4, l = n.height + n.depth + s + a, {
      span: c,
      ruleWidth: d,
      advanceWidth: p
    } = li.sqrtImage(l, e), _ = c.height - d;
    _ > n.height + n.depth + s && (s = (s + _ - n.height - n.depth) / 2);
    var f = c.height - n.height - s - d;
    n.style.paddingLeft = Ye(p);
    var g = le.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: n,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: -(n.height + f)
      }, {
        type: "elem",
        elem: c
      }, {
        type: "kern",
        size: d
      }]
    }, e);
    if (t.index) {
      var E = e.havingStyle(at.SCRIPTSCRIPT), T = Ut(t.index, E, e), R = 0.6 * (g.height - g.depth), A = le.makeVList({
        positionType: "shift",
        positionData: -R,
        children: [{
          type: "elem",
          elem: T
        }]
      }, e), I = le.makeSpan(["root"], [A]);
      return le.makeSpan(["mord", "sqrt"], [I, g], e);
    } else
      return le.makeSpan(["mord", "sqrt"], [g], e);
  },
  mathmlBuilder(t, e) {
    var {
      body: n,
      index: r
    } = t;
    return r ? new Le.MathNode("mroot", [tn(n, e), tn(r, e)]) : new Le.MathNode("msqrt", [tn(n, e)]);
  }
});
var oC = {
  display: at.DISPLAY,
  text: at.TEXT,
  script: at.SCRIPT,
  scriptscript: at.SCRIPTSCRIPT
};
Ve({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(t, e) {
    var {
      breakOnTokenText: n,
      funcName: r,
      parser: a
    } = t, i = a.parseExpression(!0, n), s = r.slice(1, r.length - 5);
    return {
      type: "styling",
      mode: a.mode,
      // Figure out what style to use by pulling out the style from
      // the function name
      style: s,
      body: i
    };
  },
  htmlBuilder(t, e) {
    var n = oC[t.style], r = e.havingStyle(n).withFont("");
    return x4(t.body, r, e);
  },
  mathmlBuilder(t, e) {
    var n = oC[t.style], r = e.havingStyle(n), a = Dr(t.body, r), i = new Le.MathNode("mstyle", a), s = {
      display: ["0", "true"],
      text: ["0", "false"],
      script: ["1", "false"],
      scriptscript: ["2", "false"]
    }, l = s[t.style];
    return i.setAttribute("scriptlevel", l[0]), i.setAttribute("displaystyle", l[1]), i;
  }
});
var S$ = function(e, n) {
  var r = e.base;
  if (r)
    if (r.type === "op") {
      var a = r.limits && (n.style.size === at.DISPLAY.size || r.alwaysHandleSupSub);
      return a ? Eo : null;
    } else if (r.type === "operatorname") {
      var i = r.alwaysHandleSupSub && (n.style.size === at.DISPLAY.size || r.limits);
      return i ? I4 : null;
    } else {
      if (r.type === "accent")
        return tt.isCharacterBox(r.base) ? h1 : null;
      if (r.type === "horizBrace") {
        var s = !e.sub;
        return s === r.isOver ? A4 : null;
      } else
        return null;
    }
  else return null;
};
Ss({
  type: "supsub",
  htmlBuilder(t, e) {
    var n = S$(t, e);
    if (n)
      return n(t, e);
    var {
      base: r,
      sup: a,
      sub: i
    } = t, s = Ut(r, e), l, c, d = e.fontMetrics(), p = 0, _ = 0, f = r && tt.isCharacterBox(r);
    if (a) {
      var g = e.havingStyle(e.style.sup());
      l = Ut(a, g, e), f || (p = s.height - g.fontMetrics().supDrop * g.sizeMultiplier / e.sizeMultiplier);
    }
    if (i) {
      var E = e.havingStyle(e.style.sub());
      c = Ut(i, E, e), f || (_ = s.depth + E.fontMetrics().subDrop * E.sizeMultiplier / e.sizeMultiplier);
    }
    var T;
    e.style === at.DISPLAY ? T = d.sup1 : e.style.cramped ? T = d.sup3 : T = d.sup2;
    var R = e.sizeMultiplier, A = Ye(0.5 / d.ptPerEm / R), I = null;
    if (c) {
      var x = t.base && t.base.type === "op" && t.base.name && (t.base.name === "\\oiint" || t.base.name === "\\oiiint");
      (s instanceof la || x) && (I = Ye(-s.italic));
    }
    var P;
    if (l && c) {
      p = Math.max(p, T, l.depth + 0.25 * d.xHeight), _ = Math.max(_, d.sub2);
      var D = d.defaultRuleThickness, L = 4 * D;
      if (p - l.depth - (c.height - _) < L) {
        _ = L - (p - l.depth) + c.height;
        var K = 0.8 * d.xHeight - (p - l.depth);
        K > 0 && (p += K, _ -= K);
      }
      var J = [{
        type: "elem",
        elem: c,
        shift: _,
        marginRight: A,
        marginLeft: I
      }, {
        type: "elem",
        elem: l,
        shift: -p,
        marginRight: A
      }];
      P = le.makeVList({
        positionType: "individualShift",
        children: J
      }, e);
    } else if (c) {
      _ = Math.max(_, d.sub1, c.height - 0.8 * d.xHeight);
      var X = [{
        type: "elem",
        elem: c,
        marginLeft: I,
        marginRight: A
      }];
      P = le.makeVList({
        positionType: "shift",
        positionData: _,
        children: X
      }, e);
    } else if (l)
      p = Math.max(p, T, l.depth + 0.25 * d.xHeight), P = le.makeVList({
        positionType: "shift",
        positionData: -p,
        children: [{
          type: "elem",
          elem: l,
          marginRight: A
        }]
      }, e);
    else
      throw new Error("supsub must have either sup or sub.");
    var $ = Qh(s, "right") || "mord";
    return le.makeSpan([$], [s, le.makeSpan(["msupsub"], [P])], e);
  },
  mathmlBuilder(t, e) {
    var n = !1, r, a;
    t.base && t.base.type === "horizBrace" && (a = !!t.sup, a === t.base.isOver && (n = !0, r = t.base.isOver)), t.base && (t.base.type === "op" || t.base.type === "operatorname") && (t.base.parentIsSupSub = !0);
    var i = [tn(t.base, e)];
    t.sub && i.push(tn(t.sub, e)), t.sup && i.push(tn(t.sup, e));
    var s;
    if (n)
      s = r ? "mover" : "munder";
    else if (t.sub)
      if (t.sup) {
        var d = t.base;
        d && d.type === "op" && d.limits && e.style === at.DISPLAY || d && d.type === "operatorname" && d.alwaysHandleSupSub && (e.style === at.DISPLAY || d.limits) ? s = "munderover" : s = "msubsup";
      } else {
        var c = t.base;
        c && c.type === "op" && c.limits && (e.style === at.DISPLAY || c.alwaysHandleSupSub) || c && c.type === "operatorname" && c.alwaysHandleSupSub && (c.limits || e.style === at.DISPLAY) ? s = "munder" : s = "msub";
      }
    else {
      var l = t.base;
      l && l.type === "op" && l.limits && (e.style === at.DISPLAY || l.alwaysHandleSupSub) || l && l.type === "operatorname" && l.alwaysHandleSupSub && (l.limits || e.style === at.DISPLAY) ? s = "mover" : s = "msup";
    }
    return new Le.MathNode(s, i);
  }
});
Ss({
  type: "atom",
  htmlBuilder(t, e) {
    return le.mathsym(t.text, t.mode, e, ["m" + t.family]);
  },
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mo", [ca(t.text, t.mode)]);
    if (t.family === "bin") {
      var r = f1(t, e);
      r === "bold-italic" && n.setAttribute("mathvariant", r);
    } else t.family === "punct" ? n.setAttribute("separator", "true") : (t.family === "open" || t.family === "close") && n.setAttribute("stretchy", "false");
    return n;
  }
});
var D4 = {
  mi: "italic",
  mn: "normal",
  mtext: "normal"
};
Ss({
  type: "mathord",
  htmlBuilder(t, e) {
    return le.makeOrd(t, e, "mathord");
  },
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mi", [ca(t.text, t.mode, e)]), r = f1(t, e) || "italic";
    return r !== D4[n.type] && n.setAttribute("mathvariant", r), n;
  }
});
Ss({
  type: "textord",
  htmlBuilder(t, e) {
    return le.makeOrd(t, e, "textord");
  },
  mathmlBuilder(t, e) {
    var n = ca(t.text, t.mode, e), r = f1(t, e) || "normal", a;
    return t.mode === "text" ? a = new Le.MathNode("mtext", [n]) : /[0-9]/.test(t.text) ? a = new Le.MathNode("mn", [n]) : t.text === "\\prime" ? a = new Le.MathNode("mo", [n]) : a = new Le.MathNode("mi", [n]), r !== D4[a.type] && a.setAttribute("mathvariant", r), a;
  }
});
var __ = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
}, m_ = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
};
Ss({
  type: "spacing",
  htmlBuilder(t, e) {
    if (m_.hasOwnProperty(t.text)) {
      var n = m_[t.text].className || "";
      if (t.mode === "text") {
        var r = le.makeOrd(t, e, "textord");
        return r.classes.push(n), r;
      } else
        return le.makeSpan(["mspace", n], [le.mathsym(t.text, t.mode, e)], e);
    } else {
      if (__.hasOwnProperty(t.text))
        return le.makeSpan(["mspace", __[t.text]], [], e);
      throw new ke('Unknown type of space "' + t.text + '"');
    }
  },
  mathmlBuilder(t, e) {
    var n;
    if (m_.hasOwnProperty(t.text))
      n = new Le.MathNode("mtext", [new Le.TextNode(" ")]);
    else {
      if (__.hasOwnProperty(t.text))
        return new Le.MathNode("mspace");
      throw new ke('Unknown type of space "' + t.text + '"');
    }
    return n;
  }
});
var lC = () => {
  var t = new Le.MathNode("mtd", []);
  return t.setAttribute("width", "50%"), t;
};
Ss({
  type: "tag",
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mtable", [new Le.MathNode("mtr", [lC(), new Le.MathNode("mtd", [Gi(t.body, e)]), lC(), new Le.MathNode("mtd", [Gi(t.tag, e)])])]);
    return n.setAttribute("width", "100%"), n;
  }
});
var cC = {
  "\\text": void 0,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm"
}, uC = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
}, b$ = {
  "\\textit": "textit",
  "\\textup": "textup"
}, dC = (t, e) => {
  var n = t.font;
  if (n) {
    if (cC[n])
      return e.withTextFontFamily(cC[n]);
    if (uC[n])
      return e.withTextFontWeight(uC[n]);
    if (n === "\\emph")
      return e.fontShape === "textit" ? e.withTextFontShape("textup") : e.withTextFontShape("textit");
  } else return e;
  return e.withTextFontShape(b$[n]);
};
Ve({
  type: "text",
  names: [
    // Font families
    "\\text",
    "\\textrm",
    "\\textsf",
    "\\texttt",
    "\\textnormal",
    // Font weights
    "\\textbf",
    "\\textmd",
    // Font Shapes
    "\\textit",
    "\\textup",
    "\\emph"
  ],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: !0,
    allowedInText: !0
  },
  handler(t, e) {
    var {
      parser: n,
      funcName: r
    } = t, a = e[0];
    return {
      type: "text",
      mode: n.mode,
      body: Dn(a),
      font: r
    };
  },
  htmlBuilder(t, e) {
    var n = dC(t, e), r = zn(t.body, n, !0);
    return le.makeSpan(["mord", "text"], r, n);
  },
  mathmlBuilder(t, e) {
    var n = dC(t, e);
    return Gi(t.body, n);
  }
});
Ve({
  type: "underline",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "underline",
      mode: n.mode,
      body: e[0]
    };
  },
  htmlBuilder(t, e) {
    var n = Ut(t.body, e), r = le.makeLineSpan("underline-line", e), a = e.fontMetrics().defaultRuleThickness, i = le.makeVList({
      positionType: "top",
      positionData: n.height,
      children: [{
        type: "kern",
        size: a
      }, {
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: 3 * a
      }, {
        type: "elem",
        elem: n
      }]
    }, e);
    return le.makeSpan(["mord", "underline"], [i], e);
  },
  mathmlBuilder(t, e) {
    var n = new Le.MathNode("mo", [new Le.TextNode("‾")]);
    n.setAttribute("stretchy", "true");
    var r = new Le.MathNode("munder", [tn(t.body, e), n]);
    return r.setAttribute("accentunder", "true"), r;
  }
});
Ve({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    // In LaTeX, \vcenter can act only on a box.
    allowedInText: !1
  },
  handler(t, e) {
    var {
      parser: n
    } = t;
    return {
      type: "vcenter",
      mode: n.mode,
      body: e[0]
    };
  },
  htmlBuilder(t, e) {
    var n = Ut(t.body, e), r = e.fontMetrics().axisHeight, a = 0.5 * (n.height - r - (n.depth + r));
    return le.makeVList({
      positionType: "shift",
      positionData: a,
      children: [{
        type: "elem",
        elem: n
      }]
    }, e);
  },
  mathmlBuilder(t, e) {
    return new Le.MathNode("mpadded", [tn(t.body, e)], ["vcenter"]);
  }
});
Ve({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(t, e, n) {
    throw new ke("\\verb ended by end of line instead of matching delimiter");
  },
  htmlBuilder(t, e) {
    for (var n = pC(t), r = [], a = e.havingStyle(e.style.text()), i = 0; i < n.length; i++) {
      var s = n[i];
      s === "~" && (s = "\\textasciitilde"), r.push(le.makeSymbol(s, "Typewriter-Regular", t.mode, a, ["mord", "texttt"]));
    }
    return le.makeSpan(["mord", "text"].concat(a.sizingClasses(e)), le.tryCombineChars(r), a);
  },
  mathmlBuilder(t, e) {
    var n = new Le.TextNode(pC(t)), r = new Le.MathNode("mtext", [n]);
    return r.setAttribute("mathvariant", "monospace"), r;
  }
});
var pC = (t) => t.body.replace(/ /g, t.star ? "␣" : " "), xi = e4, w4 = `[ \r
	]`, T$ = "\\\\[a-zA-Z@]+", y$ = "\\\\[^\uD800-\uDFFF]", v$ = "(" + T$ + ")" + w4 + "*", C$ = `\\\\(
|[ \r	]+
?)[ \r	]*`, Jh = "[̀-ͯ]", R$ = new RegExp(Jh + "+$"), A$ = "(" + w4 + "+)|" + // whitespace
(C$ + "|") + // \whitespace
"([!-\\[\\]-‧‪-퟿豈-￿]" + // single codepoint
(Jh + "*") + // ...plus accents
"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + // surrogate pair
(Jh + "*") + // ...plus accents
"|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5" + // \verb unstarred
("|" + v$) + // \macroName + spaces
("|" + y$ + ")");
class _C {
  // Category codes. The lexer only supports comment characters (14) for now.
  // MacroExpander additionally distinguishes active (13).
  constructor(e, n) {
    this.input = void 0, this.settings = void 0, this.tokenRegex = void 0, this.catcodes = void 0, this.input = e, this.settings = n, this.tokenRegex = new RegExp(A$, "g"), this.catcodes = {
      "%": 14,
      // comment character
      "~": 13
      // active character
    };
  }
  setCatcode(e, n) {
    this.catcodes[e] = n;
  }
  /**
   * This function lexes a single token.
   */
  lex() {
    var e = this.input, n = this.tokenRegex.lastIndex;
    if (n === e.length)
      return new oa("EOF", new Hr(this, n, n));
    var r = this.tokenRegex.exec(e);
    if (r === null || r.index !== n)
      throw new ke("Unexpected character: '" + e[n] + "'", new oa(e[n], new Hr(this, n, n + 1)));
    var a = r[6] || r[3] || (r[2] ? "\\ " : " ");
    if (this.catcodes[a] === 14) {
      var i = e.indexOf(`
`, this.tokenRegex.lastIndex);
      return i === -1 ? (this.tokenRegex.lastIndex = e.length, this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)")) : this.tokenRegex.lastIndex = i + 1, this.lex();
    }
    return new oa(a, new Hr(this, n, this.tokenRegex.lastIndex));
  }
}
class O$ {
  /**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */
  constructor(e, n) {
    e === void 0 && (e = {}), n === void 0 && (n = {}), this.current = void 0, this.builtins = void 0, this.undefStack = void 0, this.current = n, this.builtins = e, this.undefStack = [];
  }
  /**
   * Start a new nested group, affecting future local `set`s.
   */
  beginGroup() {
    this.undefStack.push({});
  }
  /**
   * End current nested group, restoring values before the group began.
   */
  endGroup() {
    if (this.undefStack.length === 0)
      throw new ke("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");
    var e = this.undefStack.pop();
    for (var n in e)
      e.hasOwnProperty(n) && (e[n] == null ? delete this.current[n] : this.current[n] = e[n]);
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    for (; this.undefStack.length > 0; )
      this.endGroup();
  }
  /**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */
  has(e) {
    return this.current.hasOwnProperty(e) || this.builtins.hasOwnProperty(e);
  }
  /**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */
  get(e) {
    return this.current.hasOwnProperty(e) ? this.current[e] : this.builtins[e];
  }
  /**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   * A value of undefined means to delete existing definitions.
   */
  set(e, n, r) {
    if (r === void 0 && (r = !1), r) {
      for (var a = 0; a < this.undefStack.length; a++)
        delete this.undefStack[a][e];
      this.undefStack.length > 0 && (this.undefStack[this.undefStack.length - 1][e] = n);
    } else {
      var i = this.undefStack[this.undefStack.length - 1];
      i && !i.hasOwnProperty(e) && (i[e] = this.current[e]);
    }
    n == null ? delete this.current[e] : this.current[e] = n;
  }
}
var N$ = T4;
M("\\noexpand", function(t) {
  var e = t.popToken();
  return t.isExpandable(e.text) && (e.noexpand = !0, e.treatAsRelax = !0), {
    tokens: [e],
    numArgs: 0
  };
});
M("\\expandafter", function(t) {
  var e = t.popToken();
  return t.expandOnce(!0), {
    tokens: [e],
    numArgs: 0
  };
});
M("\\@firstoftwo", function(t) {
  var e = t.consumeArgs(2);
  return {
    tokens: e[0],
    numArgs: 0
  };
});
M("\\@secondoftwo", function(t) {
  var e = t.consumeArgs(2);
  return {
    tokens: e[1],
    numArgs: 0
  };
});
M("\\@ifnextchar", function(t) {
  var e = t.consumeArgs(3);
  t.consumeSpaces();
  var n = t.future();
  return e[0].length === 1 && e[0][0].text === n.text ? {
    tokens: e[1],
    numArgs: 0
  } : {
    tokens: e[2],
    numArgs: 0
  };
});
M("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}");
M("\\TextOrMath", function(t) {
  var e = t.consumeArgs(2);
  return t.mode === "text" ? {
    tokens: e[0],
    numArgs: 0
  } : {
    tokens: e[1],
    numArgs: 0
  };
});
var mC = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  a: 10,
  A: 10,
  b: 11,
  B: 11,
  c: 12,
  C: 12,
  d: 13,
  D: 13,
  e: 14,
  E: 14,
  f: 15,
  F: 15
};
M("\\char", function(t) {
  var e = t.popToken(), n, r = "";
  if (e.text === "'")
    n = 8, e = t.popToken();
  else if (e.text === '"')
    n = 16, e = t.popToken();
  else if (e.text === "`")
    if (e = t.popToken(), e.text[0] === "\\")
      r = e.text.charCodeAt(1);
    else {
      if (e.text === "EOF")
        throw new ke("\\char` missing argument");
      r = e.text.charCodeAt(0);
    }
  else
    n = 10;
  if (n) {
    if (r = mC[e.text], r == null || r >= n)
      throw new ke("Invalid base-" + n + " digit " + e.text);
    for (var a; (a = mC[t.future().text]) != null && a < n; )
      r *= n, r += a, t.popToken();
  }
  return "\\@char{" + r + "}";
});
var R1 = (t, e, n) => {
  var r = t.consumeArg().tokens;
  if (r.length !== 1)
    throw new ke("\\newcommand's first argument must be a macro name");
  var a = r[0].text, i = t.isDefined(a);
  if (i && !e)
    throw new ke("\\newcommand{" + a + "} attempting to redefine " + (a + "; use \\renewcommand"));
  if (!i && !n)
    throw new ke("\\renewcommand{" + a + "} when command " + a + " does not yet exist; use \\newcommand");
  var s = 0;
  if (r = t.consumeArg().tokens, r.length === 1 && r[0].text === "[") {
    for (var l = "", c = t.expandNextToken(); c.text !== "]" && c.text !== "EOF"; )
      l += c.text, c = t.expandNextToken();
    if (!l.match(/^\s*[0-9]+\s*$/))
      throw new ke("Invalid number of arguments: " + l);
    s = parseInt(l), r = t.consumeArg().tokens;
  }
  return t.macros.set(a, {
    tokens: r,
    numArgs: s
  }), "";
};
M("\\newcommand", (t) => R1(t, !1, !0));
M("\\renewcommand", (t) => R1(t, !0, !1));
M("\\providecommand", (t) => R1(t, !0, !0));
M("\\message", (t) => {
  var e = t.consumeArgs(1)[0];
  return console.log(e.reverse().map((n) => n.text).join("")), "";
});
M("\\errmessage", (t) => {
  var e = t.consumeArgs(1)[0];
  return console.error(e.reverse().map((n) => n.text).join("")), "";
});
M("\\show", (t) => {
  var e = t.popToken(), n = e.text;
  return console.log(e, t.macros.get(n), xi[n], on.math[n], on.text[n]), "";
});
M("\\bgroup", "{");
M("\\egroup", "}");
M("~", "\\nobreakspace");
M("\\lq", "`");
M("\\rq", "'");
M("\\aa", "\\r a");
M("\\AA", "\\r A");
M("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
M("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
M("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}");
M("ℬ", "\\mathscr{B}");
M("ℰ", "\\mathscr{E}");
M("ℱ", "\\mathscr{F}");
M("ℋ", "\\mathscr{H}");
M("ℐ", "\\mathscr{I}");
M("ℒ", "\\mathscr{L}");
M("ℳ", "\\mathscr{M}");
M("ℛ", "\\mathscr{R}");
M("ℭ", "\\mathfrak{C}");
M("ℌ", "\\mathfrak{H}");
M("ℨ", "\\mathfrak{Z}");
M("\\Bbbk", "\\Bbb{k}");
M("·", "\\cdotp");
M("\\llap", "\\mathllap{\\textrm{#1}}");
M("\\rlap", "\\mathrlap{\\textrm{#1}}");
M("\\clap", "\\mathclap{\\textrm{#1}}");
M("\\mathstrut", "\\vphantom{(}");
M("\\underbar", "\\underline{\\text{#1}}");
M("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}');
M("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
M("\\ne", "\\neq");
M("≠", "\\neq");
M("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`∉}}");
M("∉", "\\notin");
M("≘", "\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`≘}}");
M("≙", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`≘}}");
M("≚", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`≚}}");
M("≛", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`≛}}");
M("≝", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`≝}}");
M("≞", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`≞}}");
M("≟", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`≟}}");
M("⟂", "\\perp");
M("‼", "\\mathclose{!\\mkern-0.8mu!}");
M("∌", "\\notni");
M("⌜", "\\ulcorner");
M("⌝", "\\urcorner");
M("⌞", "\\llcorner");
M("⌟", "\\lrcorner");
M("©", "\\copyright");
M("®", "\\textregistered");
M("️", "\\textregistered");
M("\\ulcorner", '\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}');
M("\\urcorner", '\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}');
M("\\llcorner", '\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}');
M("\\lrcorner", '\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}');
M("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
M("⋮", "\\vdots");
M("\\varGamma", "\\mathit{\\Gamma}");
M("\\varDelta", "\\mathit{\\Delta}");
M("\\varTheta", "\\mathit{\\Theta}");
M("\\varLambda", "\\mathit{\\Lambda}");
M("\\varXi", "\\mathit{\\Xi}");
M("\\varPi", "\\mathit{\\Pi}");
M("\\varSigma", "\\mathit{\\Sigma}");
M("\\varUpsilon", "\\mathit{\\Upsilon}");
M("\\varPhi", "\\mathit{\\Phi}");
M("\\varPsi", "\\mathit{\\Psi}");
M("\\varOmega", "\\mathit{\\Omega}");
M("\\substack", "\\begin{subarray}{c}#1\\end{subarray}");
M("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax");
M("\\boxed", "\\fbox{$\\displaystyle{#1}$}");
M("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
M("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
M("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");
var fC = {
  ",": "\\dotsc",
  "\\not": "\\dotsb",
  // \keybin@ checks for the following:
  "+": "\\dotsb",
  "=": "\\dotsb",
  "<": "\\dotsb",
  ">": "\\dotsb",
  "-": "\\dotsb",
  "*": "\\dotsb",
  ":": "\\dotsb",
  // Symbols whose definition starts with \DOTSB:
  "\\DOTSB": "\\dotsb",
  "\\coprod": "\\dotsb",
  "\\bigvee": "\\dotsb",
  "\\bigwedge": "\\dotsb",
  "\\biguplus": "\\dotsb",
  "\\bigcap": "\\dotsb",
  "\\bigcup": "\\dotsb",
  "\\prod": "\\dotsb",
  "\\sum": "\\dotsb",
  "\\bigotimes": "\\dotsb",
  "\\bigoplus": "\\dotsb",
  "\\bigodot": "\\dotsb",
  "\\bigsqcup": "\\dotsb",
  "\\And": "\\dotsb",
  "\\longrightarrow": "\\dotsb",
  "\\Longrightarrow": "\\dotsb",
  "\\longleftarrow": "\\dotsb",
  "\\Longleftarrow": "\\dotsb",
  "\\longleftrightarrow": "\\dotsb",
  "\\Longleftrightarrow": "\\dotsb",
  "\\mapsto": "\\dotsb",
  "\\longmapsto": "\\dotsb",
  "\\hookrightarrow": "\\dotsb",
  "\\doteq": "\\dotsb",
  // Symbols whose definition starts with \mathbin:
  "\\mathbin": "\\dotsb",
  // Symbols whose definition starts with \mathrel:
  "\\mathrel": "\\dotsb",
  "\\relbar": "\\dotsb",
  "\\Relbar": "\\dotsb",
  "\\xrightarrow": "\\dotsb",
  "\\xleftarrow": "\\dotsb",
  // Symbols whose definition starts with \DOTSI:
  "\\DOTSI": "\\dotsi",
  "\\int": "\\dotsi",
  "\\oint": "\\dotsi",
  "\\iint": "\\dotsi",
  "\\iiint": "\\dotsi",
  "\\iiiint": "\\dotsi",
  "\\idotsint": "\\dotsi",
  // Symbols whose definition starts with \DOTSX:
  "\\DOTSX": "\\dotsx"
};
M("\\dots", function(t) {
  var e = "\\dotso", n = t.expandAfterFuture().text;
  return n in fC ? e = fC[n] : (n.slice(0, 4) === "\\not" || n in on.math && tt.contains(["bin", "rel"], on.math[n].group)) && (e = "\\dotsb"), e;
});
var A1 = {
  // \rightdelim@ checks for the following:
  ")": !0,
  "]": !0,
  "\\rbrack": !0,
  "\\}": !0,
  "\\rbrace": !0,
  "\\rangle": !0,
  "\\rceil": !0,
  "\\rfloor": !0,
  "\\rgroup": !0,
  "\\rmoustache": !0,
  "\\right": !0,
  "\\bigr": !0,
  "\\biggr": !0,
  "\\Bigr": !0,
  "\\Biggr": !0,
  // \extra@ also tests for the following:
  $: !0,
  // \extrap@ checks for the following:
  ";": !0,
  ".": !0,
  ",": !0
};
M("\\dotso", function(t) {
  var e = t.future().text;
  return e in A1 ? "\\ldots\\," : "\\ldots";
});
M("\\dotsc", function(t) {
  var e = t.future().text;
  return e in A1 && e !== "," ? "\\ldots\\," : "\\ldots";
});
M("\\cdots", function(t) {
  var e = t.future().text;
  return e in A1 ? "\\@cdots\\," : "\\@cdots";
});
M("\\dotsb", "\\cdots");
M("\\dotsm", "\\cdots");
M("\\dotsi", "\\!\\cdots");
M("\\dotsx", "\\ldots\\,");
M("\\DOTSI", "\\relax");
M("\\DOTSB", "\\relax");
M("\\DOTSX", "\\relax");
M("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");
M("\\,", "\\tmspace+{3mu}{.1667em}");
M("\\thinspace", "\\,");
M("\\>", "\\mskip{4mu}");
M("\\:", "\\tmspace+{4mu}{.2222em}");
M("\\medspace", "\\:");
M("\\;", "\\tmspace+{5mu}{.2777em}");
M("\\thickspace", "\\;");
M("\\!", "\\tmspace-{3mu}{.1667em}");
M("\\negthinspace", "\\!");
M("\\negmedspace", "\\tmspace-{4mu}{.2222em}");
M("\\negthickspace", "\\tmspace-{5mu}{.277em}");
M("\\enspace", "\\kern.5em ");
M("\\enskip", "\\hskip.5em\\relax");
M("\\quad", "\\hskip1em\\relax");
M("\\qquad", "\\hskip2em\\relax");
M("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
M("\\tag@paren", "\\tag@literal{({#1})}");
M("\\tag@literal", (t) => {
  if (t.macros.get("\\df@tag"))
    throw new ke("Multiple \\tag");
  return "\\gdef\\df@tag{\\text{#1}}";
});
M("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
M("\\pod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
M("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
M("\\mod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1");
M("\\newline", "\\\\\\relax");
M("\\TeX", "\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");
var L4 = Ye(La["Main-Regular"][84][1] - 0.7 * La["Main-Regular"][65][1]);
M("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + L4 + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}");
M("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + L4 + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}");
M("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
M("\\@hspace", "\\hskip #1\\relax");
M("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax");
M("\\ordinarycolon", ":");
M("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}");
M("\\dblcolon", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}');
M("\\coloneqq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}');
M("\\Coloneqq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}');
M("\\coloneq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}');
M("\\Coloneq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}');
M("\\eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}');
M("\\Eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}');
M("\\eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}');
M("\\Eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}');
M("\\colonapprox", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}');
M("\\Colonapprox", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}');
M("\\colonsim", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}');
M("\\Colonsim", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}');
M("∷", "\\dblcolon");
M("∹", "\\eqcolon");
M("≔", "\\coloneqq");
M("≕", "\\eqqcolon");
M("⩴", "\\Coloneqq");
M("\\ratio", "\\vcentcolon");
M("\\coloncolon", "\\dblcolon");
M("\\colonequals", "\\coloneqq");
M("\\coloncolonequals", "\\Coloneqq");
M("\\equalscolon", "\\eqqcolon");
M("\\equalscoloncolon", "\\Eqqcolon");
M("\\colonminus", "\\coloneq");
M("\\coloncolonminus", "\\Coloneq");
M("\\minuscolon", "\\eqcolon");
M("\\minuscoloncolon", "\\Eqcolon");
M("\\coloncolonapprox", "\\Colonapprox");
M("\\coloncolonsim", "\\Colonsim");
M("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
M("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
M("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
M("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}");
M("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`∌}}");
M("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
M("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}");
M("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
M("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
M("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
M("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
M("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
M("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}");
M("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{≩}");
M("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{≨}");
M("\\ngeqq", "\\html@mathml{\\@ngeqq}{≱}");
M("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{≱}");
M("\\nleqq", "\\html@mathml{\\@nleqq}{≰}");
M("\\nleqslant", "\\html@mathml{\\@nleqslant}{≰}");
M("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
M("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
M("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{⊈}");
M("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{⊉}");
M("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
M("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
M("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
M("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
M("\\imath", "\\html@mathml{\\@imath}{ı}");
M("\\jmath", "\\html@mathml{\\@jmath}{ȷ}");
M("\\llbracket", "\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`⟦}}");
M("\\rrbracket", "\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`⟧}}");
M("⟦", "\\llbracket");
M("⟧", "\\rrbracket");
M("\\lBrace", "\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`⦃}}");
M("\\rBrace", "\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`⦄}}");
M("⦃", "\\lBrace");
M("⦄", "\\rBrace");
M("\\minuso", "\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`⦵}}");
M("⦵", "\\minuso");
M("\\darr", "\\downarrow");
M("\\dArr", "\\Downarrow");
M("\\Darr", "\\Downarrow");
M("\\lang", "\\langle");
M("\\rang", "\\rangle");
M("\\uarr", "\\uparrow");
M("\\uArr", "\\Uparrow");
M("\\Uarr", "\\Uparrow");
M("\\N", "\\mathbb{N}");
M("\\R", "\\mathbb{R}");
M("\\Z", "\\mathbb{Z}");
M("\\alef", "\\aleph");
M("\\alefsym", "\\aleph");
M("\\Alpha", "\\mathrm{A}");
M("\\Beta", "\\mathrm{B}");
M("\\bull", "\\bullet");
M("\\Chi", "\\mathrm{X}");
M("\\clubs", "\\clubsuit");
M("\\cnums", "\\mathbb{C}");
M("\\Complex", "\\mathbb{C}");
M("\\Dagger", "\\ddagger");
M("\\diamonds", "\\diamondsuit");
M("\\empty", "\\emptyset");
M("\\Epsilon", "\\mathrm{E}");
M("\\Eta", "\\mathrm{H}");
M("\\exist", "\\exists");
M("\\harr", "\\leftrightarrow");
M("\\hArr", "\\Leftrightarrow");
M("\\Harr", "\\Leftrightarrow");
M("\\hearts", "\\heartsuit");
M("\\image", "\\Im");
M("\\infin", "\\infty");
M("\\Iota", "\\mathrm{I}");
M("\\isin", "\\in");
M("\\Kappa", "\\mathrm{K}");
M("\\larr", "\\leftarrow");
M("\\lArr", "\\Leftarrow");
M("\\Larr", "\\Leftarrow");
M("\\lrarr", "\\leftrightarrow");
M("\\lrArr", "\\Leftrightarrow");
M("\\Lrarr", "\\Leftrightarrow");
M("\\Mu", "\\mathrm{M}");
M("\\natnums", "\\mathbb{N}");
M("\\Nu", "\\mathrm{N}");
M("\\Omicron", "\\mathrm{O}");
M("\\plusmn", "\\pm");
M("\\rarr", "\\rightarrow");
M("\\rArr", "\\Rightarrow");
M("\\Rarr", "\\Rightarrow");
M("\\real", "\\Re");
M("\\reals", "\\mathbb{R}");
M("\\Reals", "\\mathbb{R}");
M("\\Rho", "\\mathrm{P}");
M("\\sdot", "\\cdot");
M("\\sect", "\\S");
M("\\spades", "\\spadesuit");
M("\\sub", "\\subset");
M("\\sube", "\\subseteq");
M("\\supe", "\\supseteq");
M("\\Tau", "\\mathrm{T}");
M("\\thetasym", "\\vartheta");
M("\\weierp", "\\wp");
M("\\Zeta", "\\mathrm{Z}");
M("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
M("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
M("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits");
M("\\bra", "\\mathinner{\\langle{#1}|}");
M("\\ket", "\\mathinner{|{#1}\\rangle}");
M("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
M("\\Bra", "\\left\\langle#1\\right|");
M("\\Ket", "\\left|#1\\right\\rangle");
var M4 = (t) => (e) => {
  var n = e.consumeArg().tokens, r = e.consumeArg().tokens, a = e.consumeArg().tokens, i = e.consumeArg().tokens, s = e.macros.get("|"), l = e.macros.get("\\|");
  e.macros.beginGroup();
  var c = (_) => (f) => {
    t && (f.macros.set("|", s), a.length && f.macros.set("\\|", l));
    var g = _;
    if (!_ && a.length) {
      var E = f.future();
      E.text === "|" && (f.popToken(), g = !0);
    }
    return {
      tokens: g ? a : r,
      numArgs: 0
    };
  };
  e.macros.set("|", c(!1)), a.length && e.macros.set("\\|", c(!0));
  var d = e.consumeArg().tokens, p = e.expandTokens([
    ...i,
    ...d,
    ...n
    // reversed
  ]);
  return e.macros.endGroup(), {
    tokens: p.reverse(),
    numArgs: 0
  };
};
M("\\bra@ket", M4(!1));
M("\\bra@set", M4(!0));
M("\\Braket", "\\bra@ket{\\left\\langle}{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
M("\\Set", "\\bra@set{\\left\\{\\:}{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
M("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}");
M("\\angln", "{\\angl n}");
M("\\blue", "\\textcolor{##6495ed}{#1}");
M("\\orange", "\\textcolor{##ffa500}{#1}");
M("\\pink", "\\textcolor{##ff00af}{#1}");
M("\\red", "\\textcolor{##df0030}{#1}");
M("\\green", "\\textcolor{##28ae7b}{#1}");
M("\\gray", "\\textcolor{gray}{#1}");
M("\\purple", "\\textcolor{##9d38bd}{#1}");
M("\\blueA", "\\textcolor{##ccfaff}{#1}");
M("\\blueB", "\\textcolor{##80f6ff}{#1}");
M("\\blueC", "\\textcolor{##63d9ea}{#1}");
M("\\blueD", "\\textcolor{##11accd}{#1}");
M("\\blueE", "\\textcolor{##0c7f99}{#1}");
M("\\tealA", "\\textcolor{##94fff5}{#1}");
M("\\tealB", "\\textcolor{##26edd5}{#1}");
M("\\tealC", "\\textcolor{##01d1c1}{#1}");
M("\\tealD", "\\textcolor{##01a995}{#1}");
M("\\tealE", "\\textcolor{##208170}{#1}");
M("\\greenA", "\\textcolor{##b6ffb0}{#1}");
M("\\greenB", "\\textcolor{##8af281}{#1}");
M("\\greenC", "\\textcolor{##74cf70}{#1}");
M("\\greenD", "\\textcolor{##1fab54}{#1}");
M("\\greenE", "\\textcolor{##0d923f}{#1}");
M("\\goldA", "\\textcolor{##ffd0a9}{#1}");
M("\\goldB", "\\textcolor{##ffbb71}{#1}");
M("\\goldC", "\\textcolor{##ff9c39}{#1}");
M("\\goldD", "\\textcolor{##e07d10}{#1}");
M("\\goldE", "\\textcolor{##a75a05}{#1}");
M("\\redA", "\\textcolor{##fca9a9}{#1}");
M("\\redB", "\\textcolor{##ff8482}{#1}");
M("\\redC", "\\textcolor{##f9685d}{#1}");
M("\\redD", "\\textcolor{##e84d39}{#1}");
M("\\redE", "\\textcolor{##bc2612}{#1}");
M("\\maroonA", "\\textcolor{##ffbde0}{#1}");
M("\\maroonB", "\\textcolor{##ff92c6}{#1}");
M("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
M("\\maroonD", "\\textcolor{##ca337c}{#1}");
M("\\maroonE", "\\textcolor{##9e034e}{#1}");
M("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
M("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
M("\\purpleC", "\\textcolor{##aa87ff}{#1}");
M("\\purpleD", "\\textcolor{##7854ab}{#1}");
M("\\purpleE", "\\textcolor{##543b78}{#1}");
M("\\mintA", "\\textcolor{##f5f9e8}{#1}");
M("\\mintB", "\\textcolor{##edf2df}{#1}");
M("\\mintC", "\\textcolor{##e0e5cc}{#1}");
M("\\grayA", "\\textcolor{##f6f7f7}{#1}");
M("\\grayB", "\\textcolor{##f0f1f2}{#1}");
M("\\grayC", "\\textcolor{##e3e5e6}{#1}");
M("\\grayD", "\\textcolor{##d6d8da}{#1}");
M("\\grayE", "\\textcolor{##babec2}{#1}");
M("\\grayF", "\\textcolor{##888d93}{#1}");
M("\\grayG", "\\textcolor{##626569}{#1}");
M("\\grayH", "\\textcolor{##3b3e40}{#1}");
M("\\grayI", "\\textcolor{##21242c}{#1}");
M("\\kaBlue", "\\textcolor{##314453}{#1}");
M("\\kaGreen", "\\textcolor{##71B307}{#1}");
var k4 = {
  "^": !0,
  // Parser.js
  _: !0,
  // Parser.js
  "\\limits": !0,
  // Parser.js
  "\\nolimits": !0
  // Parser.js
};
class I$ {
  constructor(e, n, r) {
    this.settings = void 0, this.expansionCount = void 0, this.lexer = void 0, this.macros = void 0, this.stack = void 0, this.mode = void 0, this.settings = n, this.expansionCount = 0, this.feed(e), this.macros = new O$(N$, n.macros), this.mode = r, this.stack = [];
  }
  /**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */
  feed(e) {
    this.lexer = new _C(e, this.settings);
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(e) {
    this.mode = e;
  }
  /**
   * Start a new group nesting within all namespaces.
   */
  beginGroup() {
    this.macros.beginGroup();
  }
  /**
   * End current group nesting within all namespaces.
   */
  endGroup() {
    this.macros.endGroup();
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    this.macros.endGroups();
  }
  /**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */
  future() {
    return this.stack.length === 0 && this.pushToken(this.lexer.lex()), this.stack[this.stack.length - 1];
  }
  /**
   * Remove and return the next unexpanded token.
   */
  popToken() {
    return this.future(), this.stack.pop();
  }
  /**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */
  pushToken(e) {
    this.stack.push(e);
  }
  /**
   * Append an array of tokens to the token stack.
   */
  pushTokens(e) {
    this.stack.push(...e);
  }
  /**
   * Find an macro argument without expanding tokens and append the array of
   * tokens to the token stack. Uses Token as a container for the result.
   */
  scanArgument(e) {
    var n, r, a;
    if (e) {
      if (this.consumeSpaces(), this.future().text !== "[")
        return null;
      n = this.popToken(), {
        tokens: a,
        end: r
      } = this.consumeArg(["]"]);
    } else
      ({
        tokens: a,
        start: n,
        end: r
      } = this.consumeArg());
    return this.pushToken(new oa("EOF", r.loc)), this.pushTokens(a), n.range(r, "");
  }
  /**
   * Consume all following space tokens, without expansion.
   */
  consumeSpaces() {
    for (; ; ) {
      var e = this.future();
      if (e.text === " ")
        this.stack.pop();
      else
        break;
    }
  }
  /**
   * Consume an argument from the token stream, and return the resulting array
   * of tokens and start/end token.
   */
  consumeArg(e) {
    var n = [], r = e && e.length > 0;
    r || this.consumeSpaces();
    var a = this.future(), i, s = 0, l = 0;
    do {
      if (i = this.popToken(), n.push(i), i.text === "{")
        ++s;
      else if (i.text === "}") {
        if (--s, s === -1)
          throw new ke("Extra }", i);
      } else if (i.text === "EOF")
        throw new ke("Unexpected end of input in a macro argument, expected '" + (e && r ? e[l] : "}") + "'", i);
      if (e && r)
        if ((s === 0 || s === 1 && e[l] === "{") && i.text === e[l]) {
          if (++l, l === e.length) {
            n.splice(-l, l);
            break;
          }
        } else
          l = 0;
    } while (s !== 0 || r);
    return a.text === "{" && n[n.length - 1].text === "}" && (n.pop(), n.shift()), n.reverse(), {
      tokens: n,
      start: a,
      end: i
    };
  }
  /**
   * Consume the specified number of (delimited) arguments from the token
   * stream and return the resulting array of arguments.
   */
  consumeArgs(e, n) {
    if (n) {
      if (n.length !== e + 1)
        throw new ke("The length of delimiters doesn't match the number of args!");
      for (var r = n[0], a = 0; a < r.length; a++) {
        var i = this.popToken();
        if (r[a] !== i.text)
          throw new ke("Use of the macro doesn't match its definition", i);
      }
    }
    for (var s = [], l = 0; l < e; l++)
      s.push(this.consumeArg(n && n[l + 1]).tokens);
    return s;
  }
  /**
   * Increment `expansionCount` by the specified amount.
   * Throw an error if it exceeds `maxExpand`.
   */
  countExpansion(e) {
    if (this.expansionCount += e, this.expansionCount > this.settings.maxExpand)
      throw new ke("Too many expansions: infinite loop or need to increase maxExpand setting");
  }
  /**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order, and the number of such tokens will be
   * returned.  This number might be zero or positive.
   *
   * If not, the return value is `false`, and the next token remains at the
   * top of the stack.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty (in case of empty expansion
   * and no other tokens).
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */
  expandOnce(e) {
    var n = this.popToken(), r = n.text, a = n.noexpand ? null : this._getExpansion(r);
    if (a == null || e && a.unexpandable) {
      if (e && a == null && r[0] === "\\" && !this.isDefined(r))
        throw new ke("Undefined control sequence: " + r);
      return this.pushToken(n), !1;
    }
    this.countExpansion(1);
    var i = a.tokens, s = this.consumeArgs(a.numArgs, a.delimiters);
    if (a.numArgs) {
      i = i.slice();
      for (var l = i.length - 1; l >= 0; --l) {
        var c = i[l];
        if (c.text === "#") {
          if (l === 0)
            throw new ke("Incomplete placeholder at end of macro body", c);
          if (c = i[--l], c.text === "#")
            i.splice(l + 1, 1);
          else if (/^[1-9]$/.test(c.text))
            i.splice(l, 2, ...s[+c.text - 1]);
          else
            throw new ke("Not a valid argument number", c);
        }
      }
    }
    return this.pushTokens(i), i.length;
  }
  /**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */
  expandAfterFuture() {
    return this.expandOnce(), this.future();
  }
  /**
   * Recursively expand first token, then return first non-expandable token.
   */
  expandNextToken() {
    for (; ; )
      if (this.expandOnce() === !1) {
        var e = this.stack.pop();
        return e.treatAsRelax && (e.text = "\\relax"), e;
      }
    throw new Error();
  }
  /**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */
  expandMacro(e) {
    return this.macros.has(e) ? this.expandTokens([new oa(e)]) : void 0;
  }
  /**
   * Fully expand the given token stream and return the resulting list of
   * tokens.  Note that the input tokens are in reverse order, but the
   * output tokens are in forward order.
   */
  expandTokens(e) {
    var n = [], r = this.stack.length;
    for (this.pushTokens(e); this.stack.length > r; )
      if (this.expandOnce(!0) === !1) {
        var a = this.stack.pop();
        a.treatAsRelax && (a.noexpand = !1, a.treatAsRelax = !1), n.push(a);
      }
    return this.countExpansion(n.length), n;
  }
  /**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */
  expandMacroAsText(e) {
    var n = this.expandMacro(e);
    return n && n.map((r) => r.text).join("");
  }
  /**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */
  _getExpansion(e) {
    var n = this.macros.get(e);
    if (n == null)
      return n;
    if (e.length === 1) {
      var r = this.lexer.catcodes[e];
      if (r != null && r !== 13)
        return;
    }
    var a = typeof n == "function" ? n(this) : n;
    if (typeof a == "string") {
      var i = 0;
      if (a.indexOf("#") !== -1)
        for (var s = a.replace(/##/g, ""); s.indexOf("#" + (i + 1)) !== -1; )
          ++i;
      for (var l = new _C(a, this.settings), c = [], d = l.lex(); d.text !== "EOF"; )
        c.push(d), d = l.lex();
      c.reverse();
      var p = {
        tokens: c,
        numArgs: i
      };
      return p;
    }
    return a;
  }
  /**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */
  isDefined(e) {
    return this.macros.has(e) || xi.hasOwnProperty(e) || on.math.hasOwnProperty(e) || on.text.hasOwnProperty(e) || k4.hasOwnProperty(e);
  }
  /**
   * Determine whether a command is expandable.
   */
  isExpandable(e) {
    var n = this.macros.get(e);
    return n != null ? typeof n == "string" || typeof n == "function" || !n.unexpandable : xi.hasOwnProperty(e) && !xi[e].primitive;
  }
}
var gC = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/, Iu = Object.freeze({
  "₊": "+",
  "₋": "-",
  "₌": "=",
  "₍": "(",
  "₎": ")",
  "₀": "0",
  "₁": "1",
  "₂": "2",
  "₃": "3",
  "₄": "4",
  "₅": "5",
  "₆": "6",
  "₇": "7",
  "₈": "8",
  "₉": "9",
  "ₐ": "a",
  "ₑ": "e",
  "ₕ": "h",
  "ᵢ": "i",
  "ⱼ": "j",
  "ₖ": "k",
  "ₗ": "l",
  "ₘ": "m",
  "ₙ": "n",
  "ₒ": "o",
  "ₚ": "p",
  "ᵣ": "r",
  "ₛ": "s",
  "ₜ": "t",
  "ᵤ": "u",
  "ᵥ": "v",
  "ₓ": "x",
  "ᵦ": "β",
  "ᵧ": "γ",
  "ᵨ": "ρ",
  "ᵩ": "ϕ",
  "ᵪ": "χ",
  "⁺": "+",
  "⁻": "-",
  "⁼": "=",
  "⁽": "(",
  "⁾": ")",
  "⁰": "0",
  "¹": "1",
  "²": "2",
  "³": "3",
  "⁴": "4",
  "⁵": "5",
  "⁶": "6",
  "⁷": "7",
  "⁸": "8",
  "⁹": "9",
  "ᴬ": "A",
  "ᴮ": "B",
  "ᴰ": "D",
  "ᴱ": "E",
  "ᴳ": "G",
  "ᴴ": "H",
  "ᴵ": "I",
  "ᴶ": "J",
  "ᴷ": "K",
  "ᴸ": "L",
  "ᴹ": "M",
  "ᴺ": "N",
  "ᴼ": "O",
  "ᴾ": "P",
  "ᴿ": "R",
  "ᵀ": "T",
  "ᵁ": "U",
  "ⱽ": "V",
  "ᵂ": "W",
  "ᵃ": "a",
  "ᵇ": "b",
  "ᶜ": "c",
  "ᵈ": "d",
  "ᵉ": "e",
  "ᶠ": "f",
  "ᵍ": "g",
  ʰ: "h",
  "ⁱ": "i",
  ʲ: "j",
  "ᵏ": "k",
  ˡ: "l",
  "ᵐ": "m",
  ⁿ: "n",
  "ᵒ": "o",
  "ᵖ": "p",
  ʳ: "r",
  ˢ: "s",
  "ᵗ": "t",
  "ᵘ": "u",
  "ᵛ": "v",
  ʷ: "w",
  ˣ: "x",
  ʸ: "y",
  "ᶻ": "z",
  "ᵝ": "β",
  "ᵞ": "γ",
  "ᵟ": "δ",
  "ᵠ": "ϕ",
  "ᵡ": "χ",
  "ᶿ": "θ"
}), f_ = {
  "́": {
    text: "\\'",
    math: "\\acute"
  },
  "̀": {
    text: "\\`",
    math: "\\grave"
  },
  "̈": {
    text: '\\"',
    math: "\\ddot"
  },
  "̃": {
    text: "\\~",
    math: "\\tilde"
  },
  "̄": {
    text: "\\=",
    math: "\\bar"
  },
  "̆": {
    text: "\\u",
    math: "\\breve"
  },
  "̌": {
    text: "\\v",
    math: "\\check"
  },
  "̂": {
    text: "\\^",
    math: "\\hat"
  },
  "̇": {
    text: "\\.",
    math: "\\dot"
  },
  "̊": {
    text: "\\r",
    math: "\\mathring"
  },
  "̋": {
    text: "\\H"
  },
  "̧": {
    text: "\\c"
  }
}, hC = {
  á: "á",
  à: "à",
  ä: "ä",
  ǟ: "ǟ",
  ã: "ã",
  ā: "ā",
  ă: "ă",
  ắ: "ắ",
  ằ: "ằ",
  ẵ: "ẵ",
  ǎ: "ǎ",
  â: "â",
  ấ: "ấ",
  ầ: "ầ",
  ẫ: "ẫ",
  ȧ: "ȧ",
  ǡ: "ǡ",
  å: "å",
  ǻ: "ǻ",
  ḃ: "ḃ",
  ć: "ć",
  ḉ: "ḉ",
  č: "č",
  ĉ: "ĉ",
  ċ: "ċ",
  ç: "ç",
  ď: "ď",
  ḋ: "ḋ",
  ḑ: "ḑ",
  é: "é",
  è: "è",
  ë: "ë",
  ẽ: "ẽ",
  ē: "ē",
  ḗ: "ḗ",
  ḕ: "ḕ",
  ĕ: "ĕ",
  ḝ: "ḝ",
  ě: "ě",
  ê: "ê",
  ế: "ế",
  ề: "ề",
  ễ: "ễ",
  ė: "ė",
  ȩ: "ȩ",
  ḟ: "ḟ",
  ǵ: "ǵ",
  ḡ: "ḡ",
  ğ: "ğ",
  ǧ: "ǧ",
  ĝ: "ĝ",
  ġ: "ġ",
  ģ: "ģ",
  ḧ: "ḧ",
  ȟ: "ȟ",
  ĥ: "ĥ",
  ḣ: "ḣ",
  ḩ: "ḩ",
  í: "í",
  ì: "ì",
  ï: "ï",
  ḯ: "ḯ",
  ĩ: "ĩ",
  ī: "ī",
  ĭ: "ĭ",
  ǐ: "ǐ",
  î: "î",
  ǰ: "ǰ",
  ĵ: "ĵ",
  ḱ: "ḱ",
  ǩ: "ǩ",
  ķ: "ķ",
  ĺ: "ĺ",
  ľ: "ľ",
  ļ: "ļ",
  ḿ: "ḿ",
  ṁ: "ṁ",
  ń: "ń",
  ǹ: "ǹ",
  ñ: "ñ",
  ň: "ň",
  ṅ: "ṅ",
  ņ: "ņ",
  ó: "ó",
  ò: "ò",
  ö: "ö",
  ȫ: "ȫ",
  õ: "õ",
  ṍ: "ṍ",
  ṏ: "ṏ",
  ȭ: "ȭ",
  ō: "ō",
  ṓ: "ṓ",
  ṑ: "ṑ",
  ŏ: "ŏ",
  ǒ: "ǒ",
  ô: "ô",
  ố: "ố",
  ồ: "ồ",
  ỗ: "ỗ",
  ȯ: "ȯ",
  ȱ: "ȱ",
  ő: "ő",
  ṕ: "ṕ",
  ṗ: "ṗ",
  ŕ: "ŕ",
  ř: "ř",
  ṙ: "ṙ",
  ŗ: "ŗ",
  ś: "ś",
  ṥ: "ṥ",
  š: "š",
  ṧ: "ṧ",
  ŝ: "ŝ",
  ṡ: "ṡ",
  ş: "ş",
  ẗ: "ẗ",
  ť: "ť",
  ṫ: "ṫ",
  ţ: "ţ",
  ú: "ú",
  ù: "ù",
  ü: "ü",
  ǘ: "ǘ",
  ǜ: "ǜ",
  ǖ: "ǖ",
  ǚ: "ǚ",
  ũ: "ũ",
  ṹ: "ṹ",
  ū: "ū",
  ṻ: "ṻ",
  ŭ: "ŭ",
  ǔ: "ǔ",
  û: "û",
  ů: "ů",
  ű: "ű",
  ṽ: "ṽ",
  ẃ: "ẃ",
  ẁ: "ẁ",
  ẅ: "ẅ",
  ŵ: "ŵ",
  ẇ: "ẇ",
  ẘ: "ẘ",
  ẍ: "ẍ",
  ẋ: "ẋ",
  ý: "ý",
  ỳ: "ỳ",
  ÿ: "ÿ",
  ỹ: "ỹ",
  ȳ: "ȳ",
  ŷ: "ŷ",
  ẏ: "ẏ",
  ẙ: "ẙ",
  ź: "ź",
  ž: "ž",
  ẑ: "ẑ",
  ż: "ż",
  Á: "Á",
  À: "À",
  Ä: "Ä",
  Ǟ: "Ǟ",
  Ã: "Ã",
  Ā: "Ā",
  Ă: "Ă",
  Ắ: "Ắ",
  Ằ: "Ằ",
  Ẵ: "Ẵ",
  Ǎ: "Ǎ",
  Â: "Â",
  Ấ: "Ấ",
  Ầ: "Ầ",
  Ẫ: "Ẫ",
  Ȧ: "Ȧ",
  Ǡ: "Ǡ",
  Å: "Å",
  Ǻ: "Ǻ",
  Ḃ: "Ḃ",
  Ć: "Ć",
  Ḉ: "Ḉ",
  Č: "Č",
  Ĉ: "Ĉ",
  Ċ: "Ċ",
  Ç: "Ç",
  Ď: "Ď",
  Ḋ: "Ḋ",
  Ḑ: "Ḑ",
  É: "É",
  È: "È",
  Ë: "Ë",
  Ẽ: "Ẽ",
  Ē: "Ē",
  Ḗ: "Ḗ",
  Ḕ: "Ḕ",
  Ĕ: "Ĕ",
  Ḝ: "Ḝ",
  Ě: "Ě",
  Ê: "Ê",
  Ế: "Ế",
  Ề: "Ề",
  Ễ: "Ễ",
  Ė: "Ė",
  Ȩ: "Ȩ",
  Ḟ: "Ḟ",
  Ǵ: "Ǵ",
  Ḡ: "Ḡ",
  Ğ: "Ğ",
  Ǧ: "Ǧ",
  Ĝ: "Ĝ",
  Ġ: "Ġ",
  Ģ: "Ģ",
  Ḧ: "Ḧ",
  Ȟ: "Ȟ",
  Ĥ: "Ĥ",
  Ḣ: "Ḣ",
  Ḩ: "Ḩ",
  Í: "Í",
  Ì: "Ì",
  Ï: "Ï",
  Ḯ: "Ḯ",
  Ĩ: "Ĩ",
  Ī: "Ī",
  Ĭ: "Ĭ",
  Ǐ: "Ǐ",
  Î: "Î",
  İ: "İ",
  Ĵ: "Ĵ",
  Ḱ: "Ḱ",
  Ǩ: "Ǩ",
  Ķ: "Ķ",
  Ĺ: "Ĺ",
  Ľ: "Ľ",
  Ļ: "Ļ",
  Ḿ: "Ḿ",
  Ṁ: "Ṁ",
  Ń: "Ń",
  Ǹ: "Ǹ",
  Ñ: "Ñ",
  Ň: "Ň",
  Ṅ: "Ṅ",
  Ņ: "Ņ",
  Ó: "Ó",
  Ò: "Ò",
  Ö: "Ö",
  Ȫ: "Ȫ",
  Õ: "Õ",
  Ṍ: "Ṍ",
  Ṏ: "Ṏ",
  Ȭ: "Ȭ",
  Ō: "Ō",
  Ṓ: "Ṓ",
  Ṑ: "Ṑ",
  Ŏ: "Ŏ",
  Ǒ: "Ǒ",
  Ô: "Ô",
  Ố: "Ố",
  Ồ: "Ồ",
  Ỗ: "Ỗ",
  Ȯ: "Ȯ",
  Ȱ: "Ȱ",
  Ő: "Ő",
  Ṕ: "Ṕ",
  Ṗ: "Ṗ",
  Ŕ: "Ŕ",
  Ř: "Ř",
  Ṙ: "Ṙ",
  Ŗ: "Ŗ",
  Ś: "Ś",
  Ṥ: "Ṥ",
  Š: "Š",
  Ṧ: "Ṧ",
  Ŝ: "Ŝ",
  Ṡ: "Ṡ",
  Ş: "Ş",
  Ť: "Ť",
  Ṫ: "Ṫ",
  Ţ: "Ţ",
  Ú: "Ú",
  Ù: "Ù",
  Ü: "Ü",
  Ǘ: "Ǘ",
  Ǜ: "Ǜ",
  Ǖ: "Ǖ",
  Ǚ: "Ǚ",
  Ũ: "Ũ",
  Ṹ: "Ṹ",
  Ū: "Ū",
  Ṻ: "Ṻ",
  Ŭ: "Ŭ",
  Ǔ: "Ǔ",
  Û: "Û",
  Ů: "Ů",
  Ű: "Ű",
  Ṽ: "Ṽ",
  Ẃ: "Ẃ",
  Ẁ: "Ẁ",
  Ẅ: "Ẅ",
  Ŵ: "Ŵ",
  Ẇ: "Ẇ",
  Ẍ: "Ẍ",
  Ẋ: "Ẋ",
  Ý: "Ý",
  Ỳ: "Ỳ",
  Ÿ: "Ÿ",
  Ỹ: "Ỹ",
  Ȳ: "Ȳ",
  Ŷ: "Ŷ",
  Ẏ: "Ẏ",
  Ź: "Ź",
  Ž: "Ž",
  Ẑ: "Ẑ",
  Ż: "Ż",
  ά: "ά",
  ὰ: "ὰ",
  ᾱ: "ᾱ",
  ᾰ: "ᾰ",
  έ: "έ",
  ὲ: "ὲ",
  ή: "ή",
  ὴ: "ὴ",
  ί: "ί",
  ὶ: "ὶ",
  ϊ: "ϊ",
  ΐ: "ΐ",
  ῒ: "ῒ",
  ῑ: "ῑ",
  ῐ: "ῐ",
  ό: "ό",
  ὸ: "ὸ",
  ύ: "ύ",
  ὺ: "ὺ",
  ϋ: "ϋ",
  ΰ: "ΰ",
  ῢ: "ῢ",
  ῡ: "ῡ",
  ῠ: "ῠ",
  ώ: "ώ",
  ὼ: "ὼ",
  Ύ: "Ύ",
  Ὺ: "Ὺ",
  Ϋ: "Ϋ",
  Ῡ: "Ῡ",
  Ῠ: "Ῠ",
  Ώ: "Ώ",
  Ὼ: "Ὼ"
};
let P4 = class F4 {
  constructor(e, n) {
    this.mode = void 0, this.gullet = void 0, this.settings = void 0, this.leftrightDepth = void 0, this.nextToken = void 0, this.mode = "math", this.gullet = new I$(e, n, this.mode), this.settings = n, this.leftrightDepth = 0;
  }
  /**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */
  expect(e, n) {
    if (n === void 0 && (n = !0), this.fetch().text !== e)
      throw new ke("Expected '" + e + "', got '" + this.fetch().text + "'", this.fetch());
    n && this.consume();
  }
  /**
   * Discards the current lookahead token, considering it consumed.
   */
  consume() {
    this.nextToken = null;
  }
  /**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */
  fetch() {
    return this.nextToken == null && (this.nextToken = this.gullet.expandNextToken()), this.nextToken;
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(e) {
    this.mode = e, this.gullet.switchMode(e);
  }
  /**
   * Main parsing function, which parses an entire input.
   */
  parse() {
    this.settings.globalGroup || this.gullet.beginGroup(), this.settings.colorIsTextColor && this.gullet.macros.set("\\color", "\\textcolor");
    try {
      var e = this.parseExpression(!1);
      return this.expect("EOF"), this.settings.globalGroup || this.gullet.endGroup(), e;
    } finally {
      this.gullet.endGroups();
    }
  }
  /**
   * Fully parse a separate sequence of tokens as a separate job.
   * Tokens should be specified in reverse order, as in a MacroDefinition.
   */
  subparse(e) {
    var n = this.nextToken;
    this.consume(), this.gullet.pushToken(new oa("}")), this.gullet.pushTokens(e);
    var r = this.parseExpression(!1);
    return this.expect("}"), this.nextToken = n, r;
  }
  /**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precedence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */
  parseExpression(e, n) {
    for (var r = []; ; ) {
      this.mode === "math" && this.consumeSpaces();
      var a = this.fetch();
      if (F4.endOfExpression.indexOf(a.text) !== -1 || n && a.text === n || e && xi[a.text] && xi[a.text].infix)
        break;
      var i = this.parseAtom(n);
      if (i) {
        if (i.type === "internal")
          continue;
      } else break;
      r.push(i);
    }
    return this.mode === "text" && this.formLigatures(r), this.handleInfixNodes(r);
  }
  /**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */
  handleInfixNodes(e) {
    for (var n = -1, r, a = 0; a < e.length; a++)
      if (e[a].type === "infix") {
        if (n !== -1)
          throw new ke("only one infix operator per group", e[a].token);
        n = a, r = e[a].replaceWith;
      }
    if (n !== -1 && r) {
      var i, s, l = e.slice(0, n), c = e.slice(n + 1);
      l.length === 1 && l[0].type === "ordgroup" ? i = l[0] : i = {
        type: "ordgroup",
        mode: this.mode,
        body: l
      }, c.length === 1 && c[0].type === "ordgroup" ? s = c[0] : s = {
        type: "ordgroup",
        mode: this.mode,
        body: c
      };
      var d;
      return r === "\\\\abovefrac" ? d = this.callFunction(r, [i, e[n], s], []) : d = this.callFunction(r, [i, s], []), [d];
    } else
      return e;
  }
  /**
   * Handle a subscript or superscript with nice errors.
   */
  handleSupSubscript(e) {
    var n = this.fetch(), r = n.text;
    this.consume(), this.consumeSpaces();
    var a = this.parseGroup(e);
    if (!a)
      throw new ke("Expected group after '" + r + "'", n);
    return a;
  }
  /**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */
  formatUnsupportedCmd(e) {
    for (var n = [], r = 0; r < e.length; r++)
      n.push({
        type: "textord",
        mode: "text",
        text: e[r]
      });
    var a = {
      type: "text",
      mode: this.mode,
      body: n
    }, i = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [a]
    };
    return i;
  }
  /**
   * Parses a group with optional super/subscripts.
   */
  parseAtom(e) {
    var n = this.parseGroup("atom", e);
    if (this.mode === "text")
      return n;
    for (var r, a; ; ) {
      this.consumeSpaces();
      var i = this.fetch();
      if (i.text === "\\limits" || i.text === "\\nolimits") {
        if (n && n.type === "op") {
          var s = i.text === "\\limits";
          n.limits = s, n.alwaysHandleSupSub = !0;
        } else if (n && n.type === "operatorname")
          n.alwaysHandleSupSub && (n.limits = i.text === "\\limits");
        else
          throw new ke("Limit controls must follow a math operator", i);
        this.consume();
      } else if (i.text === "^") {
        if (r)
          throw new ke("Double superscript", i);
        r = this.handleSupSubscript("superscript");
      } else if (i.text === "_") {
        if (a)
          throw new ke("Double subscript", i);
        a = this.handleSupSubscript("subscript");
      } else if (i.text === "'") {
        if (r)
          throw new ke("Double superscript", i);
        var l = {
          type: "textord",
          mode: this.mode,
          text: "\\prime"
        }, c = [l];
        for (this.consume(); this.fetch().text === "'"; )
          c.push(l), this.consume();
        this.fetch().text === "^" && c.push(this.handleSupSubscript("superscript")), r = {
          type: "ordgroup",
          mode: this.mode,
          body: c
        };
      } else if (Iu[i.text]) {
        var d = gC.test(i.text), p = [];
        for (p.push(new oa(Iu[i.text])), this.consume(); ; ) {
          var _ = this.fetch().text;
          if (!Iu[_] || gC.test(_) !== d)
            break;
          p.unshift(new oa(Iu[_])), this.consume();
        }
        var f = this.subparse(p);
        d ? a = {
          type: "ordgroup",
          mode: "math",
          body: f
        } : r = {
          type: "ordgroup",
          mode: "math",
          body: f
        };
      } else
        break;
    }
    return r || a ? {
      type: "supsub",
      mode: this.mode,
      base: n,
      sup: r,
      sub: a
    } : n;
  }
  /**
   * Parses an entire function, including its base and all of its arguments.
   */
  parseFunction(e, n) {
    var r = this.fetch(), a = r.text, i = xi[a];
    if (!i)
      return null;
    if (this.consume(), n && n !== "atom" && !i.allowedInArgument)
      throw new ke("Got function '" + a + "' with no arguments" + (n ? " as " + n : ""), r);
    if (this.mode === "text" && !i.allowedInText)
      throw new ke("Can't use function '" + a + "' in text mode", r);
    if (this.mode === "math" && i.allowedInMath === !1)
      throw new ke("Can't use function '" + a + "' in math mode", r);
    var {
      args: s,
      optArgs: l
    } = this.parseArguments(a, i);
    return this.callFunction(a, s, l, r, e);
  }
  /**
   * Call a function handler with a suitable context and arguments.
   */
  callFunction(e, n, r, a, i) {
    var s = {
      funcName: e,
      parser: this,
      token: a,
      breakOnTokenText: i
    }, l = xi[e];
    if (l && l.handler)
      return l.handler(s, n, r);
    throw new ke("No function handler for " + e);
  }
  /**
   * Parses the arguments of a function or environment
   */
  parseArguments(e, n) {
    var r = n.numArgs + n.numOptionalArgs;
    if (r === 0)
      return {
        args: [],
        optArgs: []
      };
    for (var a = [], i = [], s = 0; s < r; s++) {
      var l = n.argTypes && n.argTypes[s], c = s < n.numOptionalArgs;
      (n.primitive && l == null || // \sqrt expands into primitive if optional argument doesn't exist
      n.type === "sqrt" && s === 1 && i[0] == null) && (l = "primitive");
      var d = this.parseGroupOfType("argument to '" + e + "'", l, c);
      if (c)
        i.push(d);
      else if (d != null)
        a.push(d);
      else
        throw new ke("Null argument, please report this as a bug");
    }
    return {
      args: a,
      optArgs: i
    };
  }
  /**
   * Parses a group when the mode is changing.
   */
  parseGroupOfType(e, n, r) {
    switch (n) {
      case "color":
        return this.parseColorGroup(r);
      case "size":
        return this.parseSizeGroup(r);
      case "url":
        return this.parseUrlGroup(r);
      case "math":
      case "text":
        return this.parseArgumentGroup(r, n);
      case "hbox": {
        var a = this.parseArgumentGroup(r, "text");
        return a != null ? {
          type: "styling",
          mode: a.mode,
          body: [a],
          style: "text"
          // simulate \textstyle
        } : null;
      }
      case "raw": {
        var i = this.parseStringGroup("raw", r);
        return i != null ? {
          type: "raw",
          mode: "text",
          string: i.text
        } : null;
      }
      case "primitive": {
        if (r)
          throw new ke("A primitive argument cannot be optional");
        var s = this.parseGroup(e);
        if (s == null)
          throw new ke("Expected group as " + e, this.fetch());
        return s;
      }
      case "original":
      case null:
      case void 0:
        return this.parseArgumentGroup(r);
      default:
        throw new ke("Unknown group type as " + e, this.fetch());
    }
  }
  /**
   * Discard any space tokens, fetching the next non-space token.
   */
  consumeSpaces() {
    for (; this.fetch().text === " "; )
      this.consume();
  }
  /**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */
  parseStringGroup(e, n) {
    var r = this.gullet.scanArgument(n);
    if (r == null)
      return null;
    for (var a = "", i; (i = this.fetch()).text !== "EOF"; )
      a += i.text, this.consume();
    return this.consume(), r.text = a, r;
  }
  /**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */
  parseRegexGroup(e, n) {
    for (var r = this.fetch(), a = r, i = "", s; (s = this.fetch()).text !== "EOF" && e.test(i + s.text); )
      a = s, i += a.text, this.consume();
    if (i === "")
      throw new ke("Invalid " + n + ": '" + r.text + "'", r);
    return r.range(a, i);
  }
  /**
   * Parses a color description.
   */
  parseColorGroup(e) {
    var n = this.parseStringGroup("color", e);
    if (n == null)
      return null;
    var r = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(n.text);
    if (!r)
      throw new ke("Invalid color: '" + n.text + "'", n);
    var a = r[0];
    return /^[0-9a-f]{6}$/i.test(a) && (a = "#" + a), {
      type: "color-token",
      mode: this.mode,
      color: a
    };
  }
  /**
   * Parses a size specification, consisting of magnitude and unit.
   */
  parseSizeGroup(e) {
    var n, r = !1;
    if (this.gullet.consumeSpaces(), !e && this.gullet.future().text !== "{" ? n = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size") : n = this.parseStringGroup("size", e), !n)
      return null;
    !e && n.text.length === 0 && (n.text = "0pt", r = !0);
    var a = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(n.text);
    if (!a)
      throw new ke("Invalid size: '" + n.text + "'", n);
    var i = {
      number: +(a[1] + a[2]),
      // sign + magnitude, cast to number
      unit: a[3]
    };
    if (!Vx(i))
      throw new ke("Invalid unit: '" + i.unit + "'", n);
    return {
      type: "size",
      mode: this.mode,
      value: i,
      isBlank: r
    };
  }
  /**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */
  parseUrlGroup(e) {
    this.gullet.lexer.setCatcode("%", 13), this.gullet.lexer.setCatcode("~", 12);
    var n = this.parseStringGroup("url", e);
    if (this.gullet.lexer.setCatcode("%", 14), this.gullet.lexer.setCatcode("~", 13), n == null)
      return null;
    var r = n.text.replace(/\\([#$%&~_^{}])/g, "$1");
    return {
      type: "url",
      mode: this.mode,
      url: r
    };
  }
  /**
   * Parses an argument with the mode specified.
   */
  parseArgumentGroup(e, n) {
    var r = this.gullet.scanArgument(e);
    if (r == null)
      return null;
    var a = this.mode;
    n && this.switchMode(n), this.gullet.beginGroup();
    var i = this.parseExpression(!1, "EOF");
    this.expect("EOF"), this.gullet.endGroup();
    var s = {
      type: "ordgroup",
      mode: this.mode,
      loc: r.loc,
      body: i
    };
    return n && this.switchMode(a), s;
  }
  /**
   * Parses an ordinary group, which is either a single nucleus (like "x")
   * or an expression in braces (like "{x+y}") or an implicit group, a group
   * that starts at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   */
  parseGroup(e, n) {
    var r = this.fetch(), a = r.text, i;
    if (a === "{" || a === "\\begingroup") {
      this.consume();
      var s = a === "{" ? "}" : "\\endgroup";
      this.gullet.beginGroup();
      var l = this.parseExpression(!1, s), c = this.fetch();
      this.expect(s), this.gullet.endGroup(), i = {
        type: "ordgroup",
        mode: this.mode,
        loc: Hr.range(r, c),
        body: l,
        // A group formed by \begingroup...\endgroup is a semi-simple group
        // which doesn't affect spacing in math mode, i.e., is transparent.
        // https://tex.stackexchange.com/questions/1930/when-should-one-
        // use-begingroup-instead-of-bgroup
        semisimple: a === "\\begingroup" || void 0
      };
    } else if (i = this.parseFunction(n, e) || this.parseSymbol(), i == null && a[0] === "\\" && !k4.hasOwnProperty(a)) {
      if (this.settings.throwOnError)
        throw new ke("Undefined control sequence: " + a, r);
      i = this.formatUnsupportedCmd(a), this.consume();
    }
    return i;
  }
  /**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */
  formLigatures(e) {
    for (var n = e.length - 1, r = 0; r < n; ++r) {
      var a = e[r], i = a.text;
      i === "-" && e[r + 1].text === "-" && (r + 1 < n && e[r + 2].text === "-" ? (e.splice(r, 3, {
        type: "textord",
        mode: "text",
        loc: Hr.range(a, e[r + 2]),
        text: "---"
      }), n -= 2) : (e.splice(r, 2, {
        type: "textord",
        mode: "text",
        loc: Hr.range(a, e[r + 1]),
        text: "--"
      }), n -= 1)), (i === "'" || i === "`") && e[r + 1].text === i && (e.splice(r, 2, {
        type: "textord",
        mode: "text",
        loc: Hr.range(a, e[r + 1]),
        text: i + i
      }), n -= 1);
    }
  }
  /**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */
  parseSymbol() {
    var e = this.fetch(), n = e.text;
    if (/^\\verb[^a-zA-Z]/.test(n)) {
      this.consume();
      var r = n.slice(5), a = r.charAt(0) === "*";
      if (a && (r = r.slice(1)), r.length < 2 || r.charAt(0) !== r.slice(-1))
        throw new ke(`\\verb assertion failed --
                    please report what input caused this bug`);
      return r = r.slice(1, -1), {
        type: "verb",
        mode: "text",
        body: r,
        star: a
      };
    }
    hC.hasOwnProperty(n[0]) && !on[this.mode][n[0]] && (this.settings.strict && this.mode === "math" && this.settings.reportNonstrict("unicodeTextInMathMode", 'Accented Unicode text character "' + n[0] + '" used in math mode', e), n = hC[n[0]] + n.slice(1));
    var i = R$.exec(n);
    i && (n = n.substring(0, i.index), n === "i" ? n = "ı" : n === "j" && (n = "ȷ"));
    var s;
    if (on[this.mode][n]) {
      this.settings.strict && this.mode === "math" && Kh.indexOf(n) >= 0 && this.settings.reportNonstrict("unicodeTextInMathMode", 'Latin-1/Unicode text character "' + n[0] + '" used in math mode', e);
      var l = on[this.mode][n].group, c = Hr.range(e), d;
      if (hV.hasOwnProperty(l)) {
        var p = l;
        d = {
          type: "atom",
          mode: this.mode,
          family: p,
          loc: c,
          text: n
        };
      } else
        d = {
          type: l,
          mode: this.mode,
          loc: c,
          text: n
        };
      s = d;
    } else if (n.charCodeAt(0) >= 128)
      this.settings.strict && (qx(n.charCodeAt(0)) ? this.mode === "math" && this.settings.reportNonstrict("unicodeTextInMathMode", 'Unicode text character "' + n[0] + '" used in math mode', e) : this.settings.reportNonstrict("unknownSymbol", 'Unrecognized Unicode character "' + n[0] + '"' + (" (" + n.charCodeAt(0) + ")"), e)), s = {
        type: "textord",
        mode: "text",
        loc: Hr.range(e),
        text: n
      };
    else
      return null;
    if (this.consume(), i)
      for (var _ = 0; _ < i[0].length; _++) {
        var f = i[0][_];
        if (!f_[f])
          throw new ke("Unknown accent ' " + f + "'", e);
        var g = f_[f][this.mode] || f_[f].text;
        if (!g)
          throw new ke("Accent " + f + " unsupported in " + this.mode + " mode", e);
        s = {
          type: "accent",
          mode: this.mode,
          loc: Hr.range(e),
          label: g,
          isStretchy: !1,
          isShifty: !0,
          // $FlowFixMe
          base: s
        };
      }
    return s;
  }
};
P4.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];
var O1 = function(e, n) {
  if (!(typeof e == "string" || e instanceof String))
    throw new TypeError("KaTeX can only parse string typed expression");
  var r = new P4(e, n);
  delete r.gullet.macros.current["\\df@tag"];
  var a = r.parse();
  if (delete r.gullet.macros.current["\\current@color"], delete r.gullet.macros.current["\\color"], r.gullet.macros.get("\\df@tag")) {
    if (!n.displayMode)
      throw new ke("\\tag works only in display equations");
    a = [{
      type: "tag",
      mode: "text",
      body: a,
      tag: r.subparse([new oa("\\df@tag")])
    }];
  }
  return a;
}, B4 = function(e, n, r) {
  n.textContent = "";
  var a = N1(e, r).toNode();
  n.appendChild(a);
};
typeof document < "u" && document.compatMode !== "CSS1Compat" && (typeof console < "u" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."), B4 = function() {
  throw new ke("KaTeX doesn't work in quirks mode.");
});
var x$ = function(e, n) {
  var r = N1(e, n).toMarkup();
  return r;
}, D$ = function(e, n) {
  var r = new c1(n);
  return O1(e, r);
}, U4 = function(e, n, r) {
  if (r.throwOnError || !(e instanceof ke))
    throw e;
  var a = le.makeSpan(["katex-error"], [new la(n)]);
  return a.setAttribute("title", e.toString()), a.setAttribute("style", "color:" + r.errorColor), a;
}, N1 = function(e, n) {
  var r = new c1(n);
  try {
    var a = O1(e, r);
    return GV(a, e, r);
  } catch (i) {
    return U4(i, e, r);
  }
}, w$ = function(e, n) {
  var r = new c1(n);
  try {
    var a = O1(e, r);
    return HV(a, e, r);
  } catch (i) {
    return U4(i, e, r);
  }
}, EC = {
  /**
   * Current KaTeX version
   */
  version: "0.16.11",
  /**
   * Renders the given LaTeX into an HTML+MathML combination, and adds
   * it as a child to the specified DOM node.
   */
  render: B4,
  /**
   * Renders the given LaTeX into an HTML+MathML combination string,
   * for sending to the client.
   */
  renderToString: x$,
  /**
   * KaTeX error, usually during parsing.
   */
  ParseError: ke,
  /**
   * The shema of Settings
   */
  SETTINGS_SCHEMA: Yu,
  /**
   * Parses the given LaTeX into KaTeX's internal parse tree structure,
   * without rendering to HTML or MathML.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __parse: D$,
  /**
   * Renders the given LaTeX into an HTML+MathML internal DOM tree
   * representation, without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToDomTree: N1,
  /**
   * Renders the given LaTeX into an HTML internal DOM tree representation,
   * without MathML and without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToHTMLTree: w$,
  /**
   * extends internal font metrics object with a new object
   * each key in the new object represents a font name
  */
  __setFontMetrics: uV,
  /**
   * adds a new symbol to builtin symbols table
   */
  __defineSymbol: S,
  /**
   * adds a new function to builtin function list,
   * which directly produce parse tree elements
   * and have their own html/mathml builders
   */
  __defineFunction: Ve,
  /**
   * adds a new macro to builtin macro list
   */
  __defineMacro: M,
  /**
   * Expose the dom tree node types, which can be useful for type checking nodes.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __domTree: {
    Span: ec,
    Anchor: p1,
    SymbolNode: la,
    SvgNode: ci,
    PathNode: Ui,
    LineNode: Wh
  }
};
const L$ = {}, M$ = [];
function k$(t) {
  const e = t || L$;
  return function(n, r) {
    s1(n, "element", function(a, i) {
      const s = Array.isArray(a.properties.className) ? a.properties.className : M$, l = s.includes("language-math"), c = s.includes("math-display"), d = s.includes("math-inline");
      let p = c;
      if (!l && !c && !d)
        return;
      let _ = i[i.length - 1], f = a;
      if (a.tagName === "code" && l && _ && _.type === "element" && _.tagName === "pre" && (f = _, _ = i[i.length - 2], p = !0), !_) return;
      const g = Iq(f, { whitespace: "pre" });
      let E;
      try {
        E = EC.renderToString(g, {
          ...e,
          displayMode: p,
          throwOnError: !0
        });
      } catch (R) {
        const A = (
          /** @type {Error} */
          R
        ), I = A.name.toLowerCase();
        r.message("Could not render math with KaTeX", {
          ancestors: [...i, a],
          cause: A,
          place: a.position,
          ruleId: I,
          source: "rehype-katex"
        }), I === "parseerror" ? E = EC.renderToString(g, {
          ...e,
          displayMode: p,
          strict: "ignore",
          throwOnError: !1
        }) : E = [
          {
            type: "element",
            tagName: "span",
            properties: {
              className: ["katex-error"],
              style: "color:" + (e.errorColor || "#cc0000"),
              title: String(R)
            },
            children: [{ type: "text", value: g }]
          }
        ];
      }
      typeof E == "string" && (E = /** @type {Array<ElementContent>} */
      Tq(E).children);
      const T = _.children.indexOf(f);
      return _.children.splice(T, 1, ...E), Dx;
    });
  };
}
const g_ = /\r?\n|\r/g;
function P$(t) {
  const e = String(t), n = [];
  for (g_.lastIndex = 0; g_.test(e); )
    n.push(g_.lastIndex);
  return n.push(e.length + 1), { toPoint: r, toOffset: a };
  function r(i) {
    let s = -1;
    if (typeof i == "number" && i > -1 && i < n[n.length - 1]) {
      for (; ++s < n.length; )
        if (n[s] > i)
          return {
            line: s + 1,
            column: i - (s > 0 ? n[s - 1] : 0) + 1,
            offset: i
          };
    }
  }
  function a(i) {
    const s = i && i.line, l = i && i.column;
    if (typeof s == "number" && typeof l == "number" && !Number.isNaN(s) && !Number.isNaN(l) && s - 1 in n) {
      const c = (n[s - 2] || 0) + l - 1 || 0;
      if (c > -1 && c < n[n.length - 1])
        return c;
    }
  }
}
const G4 = {}.hasOwnProperty, F$ = Object.prototype;
function B$(t, e) {
  const n = e || {};
  return I1(
    {
      file: n.file || void 0,
      location: !1,
      schema: n.space === "svg" ? qi : Kl,
      verbose: n.verbose || !1
    },
    t
  );
}
function I1(t, e) {
  let n;
  switch (e.nodeName) {
    case "#comment": {
      const r = (
        /** @type {P5Comment} */
        e
      );
      return n = { type: "comment", value: r.data }, qu(t, r, n), n;
    }
    case "#document":
    case "#document-fragment": {
      const r = (
        /** @type {P5Document | P5DocumentFragment} */
        e
      ), a = "mode" in r ? r.mode === "quirks" || r.mode === "limited-quirks" : !1;
      if (n = {
        type: "root",
        children: H4(t, e.childNodes),
        data: { quirksMode: a }
      }, t.file && t.location) {
        const i = String(t.file), s = P$(i), l = s.toPoint(0), c = s.toPoint(i.length);
        n.position = { start: l, end: c };
      }
      return n;
    }
    case "#documentType": {
      const r = (
        /** @type {P5DocumentType} */
        e
      );
      return n = { type: "doctype" }, qu(t, r, n), n;
    }
    case "#text": {
      const r = (
        /** @type {P5Text} */
        e
      );
      return n = { type: "text", value: r.value }, qu(t, r, n), n;
    }
    default:
      return n = U$(
        t,
        /** @type {P5Element} */
        e
      ), n;
  }
}
function H4(t, e) {
  let n = -1;
  const r = [];
  for (; ++n < e.length; ) {
    const a = (
      /** @type {RootContent} */
      I1(t, e[n])
    );
    r.push(a);
  }
  return r;
}
function U$(t, e) {
  const n = t.schema;
  t.schema = e.namespaceURI === wa.svg ? qi : Kl;
  let r = -1;
  const a = {};
  for (; ++r < e.attrs.length; ) {
    const l = e.attrs[r], c = (l.prefix ? l.prefix + ":" : "") + l.name;
    G4.call(F$, c) || (a[c] = l.value);
  }
  const s = (t.schema.space === "svg" ? Px : kx)(e.tagName, a, H4(t, e.childNodes));
  if (qu(t, e, s), s.tagName === "template") {
    const l = (
      /** @type {P5Template} */
      e
    ), c = l.sourceCodeLocation, d = c && c.startTag && Xs(c.startTag), p = c && c.endTag && Xs(c.endTag), _ = (
      /** @type {Root} */
      I1(t, l.content)
    );
    d && p && t.file && (_.position = { start: d.end, end: p.start }), s.content = _;
  }
  return t.schema = n, s;
}
function qu(t, e, n) {
  if ("sourceCodeLocation" in e && e.sourceCodeLocation && t.file) {
    const r = G$(t, n, e.sourceCodeLocation);
    r && (t.location = !0, n.position = r);
  }
}
function G$(t, e, n) {
  const r = Xs(n);
  if (e.type === "element") {
    const a = e.children[e.children.length - 1];
    if (r && !n.endTag && a && a.position && a.position.end && (r.end = Object.assign({}, a.position.end)), t.verbose) {
      const i = {};
      let s;
      if (n.attrs)
        for (s in n.attrs)
          G4.call(n.attrs, s) && (i[Dd(t.schema, s).property] = Xs(
            n.attrs[s]
          ));
      n.startTag;
      const l = Xs(n.startTag), c = n.endTag ? Xs(n.endTag) : void 0, d = { opening: l };
      c && (d.closing = c), d.properties = i, e.data = { position: d };
    }
  }
  return r;
}
function Xs(t) {
  const e = SC({
    line: t.startLine,
    column: t.startCol,
    offset: t.startOffset
  }), n = SC({
    line: t.endLine,
    column: t.endCol,
    offset: t.endOffset
  });
  return e || n ? { start: e, end: n } : void 0;
}
function SC(t) {
  return t.line && t.column ? t : void 0;
}
const bC = {}.hasOwnProperty;
function Y4(t, e) {
  const n = e || {};
  function r(a, ...i) {
    let s = r.invalid;
    const l = r.handlers;
    if (a && bC.call(a, t)) {
      const c = String(a[t]);
      s = bC.call(l, c) ? l[c] : r.unknown;
    }
    if (s)
      return s.call(this, a, ...i);
  }
  return r.handlers = n.handlers || {}, r.invalid = n.invalid, r.unknown = n.unknown, r;
}
const H$ = {}, Y$ = {}.hasOwnProperty, z4 = Y4("type", { handlers: { root: q$, element: Q$, text: W$, comment: K$, doctype: $$ } });
function z$(t, e) {
  const r = (e || H$).space;
  return z4(t, r === "svg" ? qi : Kl);
}
function q$(t, e) {
  const n = {
    nodeName: "#document",
    // @ts-expect-error: `parse5` uses enums, which are actually strings.
    mode: (t.data || {}).quirksMode ? "quirks" : "no-quirks",
    childNodes: []
  };
  return n.childNodes = x1(t.children, n, e), So(t, n), n;
}
function V$(t, e) {
  const n = { nodeName: "#document-fragment", childNodes: [] };
  return n.childNodes = x1(t.children, n, e), So(t, n), n;
}
function $$(t) {
  const e = {
    nodeName: "#documentType",
    name: "html",
    publicId: "",
    systemId: "",
    parentNode: null
  };
  return So(t, e), e;
}
function W$(t) {
  const e = {
    nodeName: "#text",
    value: t.value,
    parentNode: null
  };
  return So(t, e), e;
}
function K$(t) {
  const e = {
    nodeName: "#comment",
    data: t.value,
    parentNode: null
  };
  return So(t, e), e;
}
function Q$(t, e) {
  const n = e;
  let r = n;
  t.type === "element" && t.tagName.toLowerCase() === "svg" && n.space === "html" && (r = qi);
  const a = [];
  let i;
  if (t.properties) {
    for (i in t.properties)
      if (i !== "children" && Y$.call(t.properties, i)) {
        const c = j$(
          r,
          i,
          t.properties[i]
        );
        c && a.push(c);
      }
  }
  const s = r.space, l = {
    nodeName: t.tagName,
    tagName: t.tagName,
    attrs: a,
    // @ts-expect-error: `parse5` types are wrong.
    namespaceURI: wa[s],
    childNodes: [],
    parentNode: null
  };
  return l.childNodes = x1(t.children, l, r), So(t, l), t.tagName === "template" && t.content && (l.content = V$(t.content, r)), l;
}
function j$(t, e, n) {
  const r = Dd(t, e);
  if (n === !1 || n === null || n === void 0 || typeof n == "number" && Number.isNaN(n) || !n && r.boolean)
    return;
  Array.isArray(n) && (n = r.commaSeparated ? QI(n) : ax(n));
  const a = {
    name: r.attribute,
    value: n === !0 ? "" : String(n)
  };
  if (r.space && r.space !== "html" && r.space !== "svg") {
    const i = a.name.indexOf(":");
    i < 0 ? a.prefix = "" : (a.name = a.name.slice(i + 1), a.prefix = r.attribute.slice(0, i)), a.namespace = wa[r.space];
  }
  return a;
}
function x1(t, e, n) {
  let r = -1;
  const a = [];
  if (t)
    for (; ++r < t.length; ) {
      const i = z4(t[r], n);
      i.parentNode = e, a.push(i);
    }
  return a;
}
function So(t, e) {
  const n = t.position;
  n && n.start && n.end && (n.start.offset, n.end.offset, e.sourceCodeLocation = {
    startLine: n.start.line,
    startCol: n.start.column,
    startOffset: n.start.offset,
    endLine: n.end.line,
    endCol: n.end.column,
    endOffset: n.end.offset
  });
}
const X$ = [
  "area",
  "base",
  "basefont",
  "bgsound",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "image",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
], Z$ = /* @__PURE__ */ new Set([
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1048574,
  1048575,
  1114110,
  1114111
]), _n = "�";
var B;
(function(t) {
  t[t.EOF = -1] = "EOF", t[t.NULL = 0] = "NULL", t[t.TABULATION = 9] = "TABULATION", t[t.CARRIAGE_RETURN = 13] = "CARRIAGE_RETURN", t[t.LINE_FEED = 10] = "LINE_FEED", t[t.FORM_FEED = 12] = "FORM_FEED", t[t.SPACE = 32] = "SPACE", t[t.EXCLAMATION_MARK = 33] = "EXCLAMATION_MARK", t[t.QUOTATION_MARK = 34] = "QUOTATION_MARK", t[t.NUMBER_SIGN = 35] = "NUMBER_SIGN", t[t.AMPERSAND = 38] = "AMPERSAND", t[t.APOSTROPHE = 39] = "APOSTROPHE", t[t.HYPHEN_MINUS = 45] = "HYPHEN_MINUS", t[t.SOLIDUS = 47] = "SOLIDUS", t[t.DIGIT_0 = 48] = "DIGIT_0", t[t.DIGIT_9 = 57] = "DIGIT_9", t[t.SEMICOLON = 59] = "SEMICOLON", t[t.LESS_THAN_SIGN = 60] = "LESS_THAN_SIGN", t[t.EQUALS_SIGN = 61] = "EQUALS_SIGN", t[t.GREATER_THAN_SIGN = 62] = "GREATER_THAN_SIGN", t[t.QUESTION_MARK = 63] = "QUESTION_MARK", t[t.LATIN_CAPITAL_A = 65] = "LATIN_CAPITAL_A", t[t.LATIN_CAPITAL_F = 70] = "LATIN_CAPITAL_F", t[t.LATIN_CAPITAL_X = 88] = "LATIN_CAPITAL_X", t[t.LATIN_CAPITAL_Z = 90] = "LATIN_CAPITAL_Z", t[t.RIGHT_SQUARE_BRACKET = 93] = "RIGHT_SQUARE_BRACKET", t[t.GRAVE_ACCENT = 96] = "GRAVE_ACCENT", t[t.LATIN_SMALL_A = 97] = "LATIN_SMALL_A", t[t.LATIN_SMALL_F = 102] = "LATIN_SMALL_F", t[t.LATIN_SMALL_X = 120] = "LATIN_SMALL_X", t[t.LATIN_SMALL_Z = 122] = "LATIN_SMALL_Z", t[t.REPLACEMENT_CHARACTER = 65533] = "REPLACEMENT_CHARACTER";
})(B = B || (B = {}));
const Rr = {
  DASH_DASH: "--",
  CDATA_START: "[CDATA[",
  DOCTYPE: "doctype",
  SCRIPT: "script",
  PUBLIC: "public",
  SYSTEM: "system"
};
function q4(t) {
  return t >= 55296 && t <= 57343;
}
function J$(t) {
  return t >= 56320 && t <= 57343;
}
function eW(t, e) {
  return (t - 55296) * 1024 + 9216 + e;
}
function V4(t) {
  return t !== 32 && t !== 10 && t !== 13 && t !== 9 && t !== 12 && t >= 1 && t <= 31 || t >= 127 && t <= 159;
}
function $4(t) {
  return t >= 64976 && t <= 65007 || Z$.has(t);
}
var pe;
(function(t) {
  t.controlCharacterInInputStream = "control-character-in-input-stream", t.noncharacterInInputStream = "noncharacter-in-input-stream", t.surrogateInInputStream = "surrogate-in-input-stream", t.nonVoidHtmlElementStartTagWithTrailingSolidus = "non-void-html-element-start-tag-with-trailing-solidus", t.endTagWithAttributes = "end-tag-with-attributes", t.endTagWithTrailingSolidus = "end-tag-with-trailing-solidus", t.unexpectedSolidusInTag = "unexpected-solidus-in-tag", t.unexpectedNullCharacter = "unexpected-null-character", t.unexpectedQuestionMarkInsteadOfTagName = "unexpected-question-mark-instead-of-tag-name", t.invalidFirstCharacterOfTagName = "invalid-first-character-of-tag-name", t.unexpectedEqualsSignBeforeAttributeName = "unexpected-equals-sign-before-attribute-name", t.missingEndTagName = "missing-end-tag-name", t.unexpectedCharacterInAttributeName = "unexpected-character-in-attribute-name", t.unknownNamedCharacterReference = "unknown-named-character-reference", t.missingSemicolonAfterCharacterReference = "missing-semicolon-after-character-reference", t.unexpectedCharacterAfterDoctypeSystemIdentifier = "unexpected-character-after-doctype-system-identifier", t.unexpectedCharacterInUnquotedAttributeValue = "unexpected-character-in-unquoted-attribute-value", t.eofBeforeTagName = "eof-before-tag-name", t.eofInTag = "eof-in-tag", t.missingAttributeValue = "missing-attribute-value", t.missingWhitespaceBetweenAttributes = "missing-whitespace-between-attributes", t.missingWhitespaceAfterDoctypePublicKeyword = "missing-whitespace-after-doctype-public-keyword", t.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers = "missing-whitespace-between-doctype-public-and-system-identifiers", t.missingWhitespaceAfterDoctypeSystemKeyword = "missing-whitespace-after-doctype-system-keyword", t.missingQuoteBeforeDoctypePublicIdentifier = "missing-quote-before-doctype-public-identifier", t.missingQuoteBeforeDoctypeSystemIdentifier = "missing-quote-before-doctype-system-identifier", t.missingDoctypePublicIdentifier = "missing-doctype-public-identifier", t.missingDoctypeSystemIdentifier = "missing-doctype-system-identifier", t.abruptDoctypePublicIdentifier = "abrupt-doctype-public-identifier", t.abruptDoctypeSystemIdentifier = "abrupt-doctype-system-identifier", t.cdataInHtmlContent = "cdata-in-html-content", t.incorrectlyOpenedComment = "incorrectly-opened-comment", t.eofInScriptHtmlCommentLikeText = "eof-in-script-html-comment-like-text", t.eofInDoctype = "eof-in-doctype", t.nestedComment = "nested-comment", t.abruptClosingOfEmptyComment = "abrupt-closing-of-empty-comment", t.eofInComment = "eof-in-comment", t.incorrectlyClosedComment = "incorrectly-closed-comment", t.eofInCdata = "eof-in-cdata", t.absenceOfDigitsInNumericCharacterReference = "absence-of-digits-in-numeric-character-reference", t.nullCharacterReference = "null-character-reference", t.surrogateCharacterReference = "surrogate-character-reference", t.characterReferenceOutsideUnicodeRange = "character-reference-outside-unicode-range", t.controlCharacterReference = "control-character-reference", t.noncharacterCharacterReference = "noncharacter-character-reference", t.missingWhitespaceBeforeDoctypeName = "missing-whitespace-before-doctype-name", t.missingDoctypeName = "missing-doctype-name", t.invalidCharacterSequenceAfterDoctypeName = "invalid-character-sequence-after-doctype-name", t.duplicateAttribute = "duplicate-attribute", t.nonConformingDoctype = "non-conforming-doctype", t.missingDoctype = "missing-doctype", t.misplacedDoctype = "misplaced-doctype", t.endTagWithoutMatchingOpenElement = "end-tag-without-matching-open-element", t.closingOfElementWithOpenChildElements = "closing-of-element-with-open-child-elements", t.disallowedContentInNoscriptInHead = "disallowed-content-in-noscript-in-head", t.openElementsLeftAfterEof = "open-elements-left-after-eof", t.abandonedHeadElementChild = "abandoned-head-element-child", t.misplacedStartTagForHeadElement = "misplaced-start-tag-for-head-element", t.nestedNoscriptInHead = "nested-noscript-in-head", t.eofInElementThatCanContainOnlyText = "eof-in-element-that-can-contain-only-text";
})(pe = pe || (pe = {}));
const tW = 65536;
class nW {
  constructor(e) {
    this.handler = e, this.html = "", this.pos = -1, this.lastGapPos = -2, this.gapStack = [], this.skipNextNewLine = !1, this.lastChunkWritten = !1, this.endOfChunkHit = !1, this.bufferWaterline = tW, this.isEol = !1, this.lineStartPos = 0, this.droppedBufferSize = 0, this.line = 1, this.lastErrOffset = -1;
  }
  /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
  get col() {
    return this.pos - this.lineStartPos + +(this.lastGapPos !== this.pos);
  }
  get offset() {
    return this.droppedBufferSize + this.pos;
  }
  getError(e) {
    const { line: n, col: r, offset: a } = this;
    return {
      code: e,
      startLine: n,
      endLine: n,
      startCol: r,
      endCol: r,
      startOffset: a,
      endOffset: a
    };
  }
  _err(e) {
    this.handler.onParseError && this.lastErrOffset !== this.offset && (this.lastErrOffset = this.offset, this.handler.onParseError(this.getError(e)));
  }
  _addGap() {
    this.gapStack.push(this.lastGapPos), this.lastGapPos = this.pos;
  }
  _processSurrogate(e) {
    if (this.pos !== this.html.length - 1) {
      const n = this.html.charCodeAt(this.pos + 1);
      if (J$(n))
        return this.pos++, this._addGap(), eW(e, n);
    } else if (!this.lastChunkWritten)
      return this.endOfChunkHit = !0, B.EOF;
    return this._err(pe.surrogateInInputStream), e;
  }
  willDropParsedChunk() {
    return this.pos > this.bufferWaterline;
  }
  dropParsedChunk() {
    this.willDropParsedChunk() && (this.html = this.html.substring(this.pos), this.lineStartPos -= this.pos, this.droppedBufferSize += this.pos, this.pos = 0, this.lastGapPos = -2, this.gapStack.length = 0);
  }
  write(e, n) {
    this.html.length > 0 ? this.html += e : this.html = e, this.endOfChunkHit = !1, this.lastChunkWritten = n;
  }
  insertHtmlAtCurrentPos(e) {
    this.html = this.html.substring(0, this.pos + 1) + e + this.html.substring(this.pos + 1), this.endOfChunkHit = !1;
  }
  startsWith(e, n) {
    if (this.pos + e.length > this.html.length)
      return this.endOfChunkHit = !this.lastChunkWritten, !1;
    if (n)
      return this.html.startsWith(e, this.pos);
    for (let r = 0; r < e.length; r++)
      if ((this.html.charCodeAt(this.pos + r) | 32) !== e.charCodeAt(r))
        return !1;
    return !0;
  }
  peek(e) {
    const n = this.pos + e;
    if (n >= this.html.length)
      return this.endOfChunkHit = !this.lastChunkWritten, B.EOF;
    const r = this.html.charCodeAt(n);
    return r === B.CARRIAGE_RETURN ? B.LINE_FEED : r;
  }
  advance() {
    if (this.pos++, this.isEol && (this.isEol = !1, this.line++, this.lineStartPos = this.pos), this.pos >= this.html.length)
      return this.endOfChunkHit = !this.lastChunkWritten, B.EOF;
    let e = this.html.charCodeAt(this.pos);
    return e === B.CARRIAGE_RETURN ? (this.isEol = !0, this.skipNextNewLine = !0, B.LINE_FEED) : e === B.LINE_FEED && (this.isEol = !0, this.skipNextNewLine) ? (this.line--, this.skipNextNewLine = !1, this._addGap(), this.advance()) : (this.skipNextNewLine = !1, q4(e) && (e = this._processSurrogate(e)), this.handler.onParseError === null || e > 31 && e < 127 || e === B.LINE_FEED || e === B.CARRIAGE_RETURN || e > 159 && e < 64976 || this._checkForProblematicCharacters(e), e);
  }
  _checkForProblematicCharacters(e) {
    V4(e) ? this._err(pe.controlCharacterInInputStream) : $4(e) && this._err(pe.noncharacterInInputStream);
  }
  retreat(e) {
    for (this.pos -= e; this.pos < this.lastGapPos; )
      this.lastGapPos = this.gapStack.pop(), this.pos--;
    this.isEol = !1;
  }
}
var Ot;
(function(t) {
  t[t.CHARACTER = 0] = "CHARACTER", t[t.NULL_CHARACTER = 1] = "NULL_CHARACTER", t[t.WHITESPACE_CHARACTER = 2] = "WHITESPACE_CHARACTER", t[t.START_TAG = 3] = "START_TAG", t[t.END_TAG = 4] = "END_TAG", t[t.COMMENT = 5] = "COMMENT", t[t.DOCTYPE = 6] = "DOCTYPE", t[t.EOF = 7] = "EOF", t[t.HIBERNATION = 8] = "HIBERNATION";
})(Ot = Ot || (Ot = {}));
function W4(t, e) {
  for (let n = t.attrs.length - 1; n >= 0; n--)
    if (t.attrs[n].name === e)
      return t.attrs[n].value;
  return null;
}
const Oi = new Uint16Array(
  // prettier-ignore
  'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((t) => t.charCodeAt(0))
), rW = new Uint16Array(
  // prettier-ignore
  "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((t) => t.charCodeAt(0))
);
var h_;
const aW = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]), iW = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (h_ = String.fromCodePoint) !== null && h_ !== void 0 ? h_ : function(t) {
    let e = "";
    return t > 65535 && (t -= 65536, e += String.fromCharCode(t >>> 10 & 1023 | 55296), t = 56320 | t & 1023), e += String.fromCharCode(t), e;
  }
);
function sW(t) {
  var e;
  return t >= 55296 && t <= 57343 || t > 1114111 ? 65533 : (e = aW.get(t)) !== null && e !== void 0 ? e : t;
}
var jn;
(function(t) {
  t[t.NUM = 35] = "NUM", t[t.SEMI = 59] = "SEMI", t[t.EQUALS = 61] = "EQUALS", t[t.ZERO = 48] = "ZERO", t[t.NINE = 57] = "NINE", t[t.LOWER_A = 97] = "LOWER_A", t[t.LOWER_F = 102] = "LOWER_F", t[t.LOWER_X = 120] = "LOWER_X", t[t.LOWER_Z = 122] = "LOWER_Z", t[t.UPPER_A = 65] = "UPPER_A", t[t.UPPER_F = 70] = "UPPER_F", t[t.UPPER_Z = 90] = "UPPER_Z";
})(jn || (jn = {}));
const oW = 32;
var Ma;
(function(t) {
  t[t.VALUE_LENGTH = 49152] = "VALUE_LENGTH", t[t.BRANCH_LENGTH = 16256] = "BRANCH_LENGTH", t[t.JUMP_TABLE = 127] = "JUMP_TABLE";
})(Ma || (Ma = {}));
function eE(t) {
  return t >= jn.ZERO && t <= jn.NINE;
}
function lW(t) {
  return t >= jn.UPPER_A && t <= jn.UPPER_F || t >= jn.LOWER_A && t <= jn.LOWER_F;
}
function cW(t) {
  return t >= jn.UPPER_A && t <= jn.UPPER_Z || t >= jn.LOWER_A && t <= jn.LOWER_Z || eE(t);
}
function uW(t) {
  return t === jn.EQUALS || cW(t);
}
var Wn;
(function(t) {
  t[t.EntityStart = 0] = "EntityStart", t[t.NumericStart = 1] = "NumericStart", t[t.NumericDecimal = 2] = "NumericDecimal", t[t.NumericHex = 3] = "NumericHex", t[t.NamedEntity = 4] = "NamedEntity";
})(Wn || (Wn = {}));
var ds;
(function(t) {
  t[t.Legacy = 0] = "Legacy", t[t.Strict = 1] = "Strict", t[t.Attribute = 2] = "Attribute";
})(ds || (ds = {}));
class dW {
  constructor(e, n, r) {
    this.decodeTree = e, this.emitCodePoint = n, this.errors = r, this.state = Wn.EntityStart, this.consumed = 1, this.result = 0, this.treeIndex = 0, this.excess = 1, this.decodeMode = ds.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(e) {
    this.decodeMode = e, this.state = Wn.EntityStart, this.result = 0, this.treeIndex = 0, this.excess = 1, this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param string The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(e, n) {
    switch (this.state) {
      case Wn.EntityStart:
        return e.charCodeAt(n) === jn.NUM ? (this.state = Wn.NumericStart, this.consumed += 1, this.stateNumericStart(e, n + 1)) : (this.state = Wn.NamedEntity, this.stateNamedEntity(e, n));
      case Wn.NumericStart:
        return this.stateNumericStart(e, n);
      case Wn.NumericDecimal:
        return this.stateNumericDecimal(e, n);
      case Wn.NumericHex:
        return this.stateNumericHex(e, n);
      case Wn.NamedEntity:
        return this.stateNamedEntity(e, n);
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(e, n) {
    return n >= e.length ? -1 : (e.charCodeAt(n) | oW) === jn.LOWER_X ? (this.state = Wn.NumericHex, this.consumed += 1, this.stateNumericHex(e, n + 1)) : (this.state = Wn.NumericDecimal, this.stateNumericDecimal(e, n));
  }
  addToNumericResult(e, n, r, a) {
    if (n !== r) {
      const i = r - n;
      this.result = this.result * Math.pow(a, i) + parseInt(e.substr(n, i), a), this.consumed += i;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(e, n) {
    const r = n;
    for (; n < e.length; ) {
      const a = e.charCodeAt(n);
      if (eE(a) || lW(a))
        n += 1;
      else
        return this.addToNumericResult(e, r, n, 16), this.emitNumericEntity(a, 3);
    }
    return this.addToNumericResult(e, r, n, 16), -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(e, n) {
    const r = n;
    for (; n < e.length; ) {
      const a = e.charCodeAt(n);
      if (eE(a))
        n += 1;
      else
        return this.addToNumericResult(e, r, n, 10), this.emitNumericEntity(a, 2);
    }
    return this.addToNumericResult(e, r, n, 10), -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(e, n) {
    var r;
    if (this.consumed <= n)
      return (r = this.errors) === null || r === void 0 || r.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
    if (e === jn.SEMI)
      this.consumed += 1;
    else if (this.decodeMode === ds.Strict)
      return 0;
    return this.emitCodePoint(sW(this.result), this.consumed), this.errors && (e !== jn.SEMI && this.errors.missingSemicolonAfterCharacterReference(), this.errors.validateNumericCharacterReference(this.result)), this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(e, n) {
    const { decodeTree: r } = this;
    let a = r[this.treeIndex], i = (a & Ma.VALUE_LENGTH) >> 14;
    for (; n < e.length; n++, this.excess++) {
      const s = e.charCodeAt(n);
      if (this.treeIndex = Q4(r, a, this.treeIndex + Math.max(1, i), s), this.treeIndex < 0)
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === ds.Attribute && // We shouldn't have consumed any characters after the entity,
        (i === 0 || // And there should be no invalid characters.
        uW(s)) ? 0 : this.emitNotTerminatedNamedEntity();
      if (a = r[this.treeIndex], i = (a & Ma.VALUE_LENGTH) >> 14, i !== 0) {
        if (s === jn.SEMI)
          return this.emitNamedEntityData(this.treeIndex, i, this.consumed + this.excess);
        this.decodeMode !== ds.Strict && (this.result = this.treeIndex, this.consumed += this.excess, this.excess = 0);
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var e;
    const { result: n, decodeTree: r } = this, a = (r[n] & Ma.VALUE_LENGTH) >> 14;
    return this.emitNamedEntityData(n, a, this.consumed), (e = this.errors) === null || e === void 0 || e.missingSemicolonAfterCharacterReference(), this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(e, n, r) {
    const { decodeTree: a } = this;
    return this.emitCodePoint(n === 1 ? a[e] & ~Ma.VALUE_LENGTH : a[e + 1], r), n === 3 && this.emitCodePoint(a[e + 2], r), r;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var e;
    switch (this.state) {
      case Wn.NamedEntity:
        return this.result !== 0 && (this.decodeMode !== ds.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      case Wn.NumericDecimal:
        return this.emitNumericEntity(0, 2);
      case Wn.NumericHex:
        return this.emitNumericEntity(0, 3);
      case Wn.NumericStart:
        return (e = this.errors) === null || e === void 0 || e.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
      case Wn.EntityStart:
        return 0;
    }
  }
}
function K4(t) {
  let e = "";
  const n = new dW(t, (r) => e += iW(r));
  return function(a, i) {
    let s = 0, l = 0;
    for (; (l = a.indexOf("&", l)) >= 0; ) {
      e += a.slice(s, l), n.startEntity(i);
      const d = n.write(
        a,
        // Skip the "&"
        l + 1
      );
      if (d < 0) {
        s = l + n.end();
        break;
      }
      s = l + d, l = d === 0 ? s + 1 : s;
    }
    const c = e + a.slice(s);
    return e = "", c;
  };
}
function Q4(t, e, n, r) {
  const a = (e & Ma.BRANCH_LENGTH) >> 7, i = e & Ma.JUMP_TABLE;
  if (a === 0)
    return i !== 0 && r === i ? n : -1;
  if (i) {
    const c = r - i;
    return c < 0 || c >= a ? -1 : t[n + c] - 1;
  }
  let s = n, l = s + a - 1;
  for (; s <= l; ) {
    const c = s + l >>> 1, d = t[c];
    if (d < r)
      s = c + 1;
    else if (d > r)
      l = c - 1;
    else
      return t[c + a];
  }
  return -1;
}
K4(Oi);
K4(rW);
var Te;
(function(t) {
  t.HTML = "http://www.w3.org/1999/xhtml", t.MATHML = "http://www.w3.org/1998/Math/MathML", t.SVG = "http://www.w3.org/2000/svg", t.XLINK = "http://www.w3.org/1999/xlink", t.XML = "http://www.w3.org/XML/1998/namespace", t.XMLNS = "http://www.w3.org/2000/xmlns/";
})(Te = Te || (Te = {}));
var Pi;
(function(t) {
  t.TYPE = "type", t.ACTION = "action", t.ENCODING = "encoding", t.PROMPT = "prompt", t.NAME = "name", t.COLOR = "color", t.FACE = "face", t.SIZE = "size";
})(Pi = Pi || (Pi = {}));
var Yr;
(function(t) {
  t.NO_QUIRKS = "no-quirks", t.QUIRKS = "quirks", t.LIMITED_QUIRKS = "limited-quirks";
})(Yr = Yr || (Yr = {}));
var ie;
(function(t) {
  t.A = "a", t.ADDRESS = "address", t.ANNOTATION_XML = "annotation-xml", t.APPLET = "applet", t.AREA = "area", t.ARTICLE = "article", t.ASIDE = "aside", t.B = "b", t.BASE = "base", t.BASEFONT = "basefont", t.BGSOUND = "bgsound", t.BIG = "big", t.BLOCKQUOTE = "blockquote", t.BODY = "body", t.BR = "br", t.BUTTON = "button", t.CAPTION = "caption", t.CENTER = "center", t.CODE = "code", t.COL = "col", t.COLGROUP = "colgroup", t.DD = "dd", t.DESC = "desc", t.DETAILS = "details", t.DIALOG = "dialog", t.DIR = "dir", t.DIV = "div", t.DL = "dl", t.DT = "dt", t.EM = "em", t.EMBED = "embed", t.FIELDSET = "fieldset", t.FIGCAPTION = "figcaption", t.FIGURE = "figure", t.FONT = "font", t.FOOTER = "footer", t.FOREIGN_OBJECT = "foreignObject", t.FORM = "form", t.FRAME = "frame", t.FRAMESET = "frameset", t.H1 = "h1", t.H2 = "h2", t.H3 = "h3", t.H4 = "h4", t.H5 = "h5", t.H6 = "h6", t.HEAD = "head", t.HEADER = "header", t.HGROUP = "hgroup", t.HR = "hr", t.HTML = "html", t.I = "i", t.IMG = "img", t.IMAGE = "image", t.INPUT = "input", t.IFRAME = "iframe", t.KEYGEN = "keygen", t.LABEL = "label", t.LI = "li", t.LINK = "link", t.LISTING = "listing", t.MAIN = "main", t.MALIGNMARK = "malignmark", t.MARQUEE = "marquee", t.MATH = "math", t.MENU = "menu", t.META = "meta", t.MGLYPH = "mglyph", t.MI = "mi", t.MO = "mo", t.MN = "mn", t.MS = "ms", t.MTEXT = "mtext", t.NAV = "nav", t.NOBR = "nobr", t.NOFRAMES = "noframes", t.NOEMBED = "noembed", t.NOSCRIPT = "noscript", t.OBJECT = "object", t.OL = "ol", t.OPTGROUP = "optgroup", t.OPTION = "option", t.P = "p", t.PARAM = "param", t.PLAINTEXT = "plaintext", t.PRE = "pre", t.RB = "rb", t.RP = "rp", t.RT = "rt", t.RTC = "rtc", t.RUBY = "ruby", t.S = "s", t.SCRIPT = "script", t.SECTION = "section", t.SELECT = "select", t.SOURCE = "source", t.SMALL = "small", t.SPAN = "span", t.STRIKE = "strike", t.STRONG = "strong", t.STYLE = "style", t.SUB = "sub", t.SUMMARY = "summary", t.SUP = "sup", t.TABLE = "table", t.TBODY = "tbody", t.TEMPLATE = "template", t.TEXTAREA = "textarea", t.TFOOT = "tfoot", t.TD = "td", t.TH = "th", t.THEAD = "thead", t.TITLE = "title", t.TR = "tr", t.TRACK = "track", t.TT = "tt", t.U = "u", t.UL = "ul", t.SVG = "svg", t.VAR = "var", t.WBR = "wbr", t.XMP = "xmp";
})(ie = ie || (ie = {}));
var h;
(function(t) {
  t[t.UNKNOWN = 0] = "UNKNOWN", t[t.A = 1] = "A", t[t.ADDRESS = 2] = "ADDRESS", t[t.ANNOTATION_XML = 3] = "ANNOTATION_XML", t[t.APPLET = 4] = "APPLET", t[t.AREA = 5] = "AREA", t[t.ARTICLE = 6] = "ARTICLE", t[t.ASIDE = 7] = "ASIDE", t[t.B = 8] = "B", t[t.BASE = 9] = "BASE", t[t.BASEFONT = 10] = "BASEFONT", t[t.BGSOUND = 11] = "BGSOUND", t[t.BIG = 12] = "BIG", t[t.BLOCKQUOTE = 13] = "BLOCKQUOTE", t[t.BODY = 14] = "BODY", t[t.BR = 15] = "BR", t[t.BUTTON = 16] = "BUTTON", t[t.CAPTION = 17] = "CAPTION", t[t.CENTER = 18] = "CENTER", t[t.CODE = 19] = "CODE", t[t.COL = 20] = "COL", t[t.COLGROUP = 21] = "COLGROUP", t[t.DD = 22] = "DD", t[t.DESC = 23] = "DESC", t[t.DETAILS = 24] = "DETAILS", t[t.DIALOG = 25] = "DIALOG", t[t.DIR = 26] = "DIR", t[t.DIV = 27] = "DIV", t[t.DL = 28] = "DL", t[t.DT = 29] = "DT", t[t.EM = 30] = "EM", t[t.EMBED = 31] = "EMBED", t[t.FIELDSET = 32] = "FIELDSET", t[t.FIGCAPTION = 33] = "FIGCAPTION", t[t.FIGURE = 34] = "FIGURE", t[t.FONT = 35] = "FONT", t[t.FOOTER = 36] = "FOOTER", t[t.FOREIGN_OBJECT = 37] = "FOREIGN_OBJECT", t[t.FORM = 38] = "FORM", t[t.FRAME = 39] = "FRAME", t[t.FRAMESET = 40] = "FRAMESET", t[t.H1 = 41] = "H1", t[t.H2 = 42] = "H2", t[t.H3 = 43] = "H3", t[t.H4 = 44] = "H4", t[t.H5 = 45] = "H5", t[t.H6 = 46] = "H6", t[t.HEAD = 47] = "HEAD", t[t.HEADER = 48] = "HEADER", t[t.HGROUP = 49] = "HGROUP", t[t.HR = 50] = "HR", t[t.HTML = 51] = "HTML", t[t.I = 52] = "I", t[t.IMG = 53] = "IMG", t[t.IMAGE = 54] = "IMAGE", t[t.INPUT = 55] = "INPUT", t[t.IFRAME = 56] = "IFRAME", t[t.KEYGEN = 57] = "KEYGEN", t[t.LABEL = 58] = "LABEL", t[t.LI = 59] = "LI", t[t.LINK = 60] = "LINK", t[t.LISTING = 61] = "LISTING", t[t.MAIN = 62] = "MAIN", t[t.MALIGNMARK = 63] = "MALIGNMARK", t[t.MARQUEE = 64] = "MARQUEE", t[t.MATH = 65] = "MATH", t[t.MENU = 66] = "MENU", t[t.META = 67] = "META", t[t.MGLYPH = 68] = "MGLYPH", t[t.MI = 69] = "MI", t[t.MO = 70] = "MO", t[t.MN = 71] = "MN", t[t.MS = 72] = "MS", t[t.MTEXT = 73] = "MTEXT", t[t.NAV = 74] = "NAV", t[t.NOBR = 75] = "NOBR", t[t.NOFRAMES = 76] = "NOFRAMES", t[t.NOEMBED = 77] = "NOEMBED", t[t.NOSCRIPT = 78] = "NOSCRIPT", t[t.OBJECT = 79] = "OBJECT", t[t.OL = 80] = "OL", t[t.OPTGROUP = 81] = "OPTGROUP", t[t.OPTION = 82] = "OPTION", t[t.P = 83] = "P", t[t.PARAM = 84] = "PARAM", t[t.PLAINTEXT = 85] = "PLAINTEXT", t[t.PRE = 86] = "PRE", t[t.RB = 87] = "RB", t[t.RP = 88] = "RP", t[t.RT = 89] = "RT", t[t.RTC = 90] = "RTC", t[t.RUBY = 91] = "RUBY", t[t.S = 92] = "S", t[t.SCRIPT = 93] = "SCRIPT", t[t.SECTION = 94] = "SECTION", t[t.SELECT = 95] = "SELECT", t[t.SOURCE = 96] = "SOURCE", t[t.SMALL = 97] = "SMALL", t[t.SPAN = 98] = "SPAN", t[t.STRIKE = 99] = "STRIKE", t[t.STRONG = 100] = "STRONG", t[t.STYLE = 101] = "STYLE", t[t.SUB = 102] = "SUB", t[t.SUMMARY = 103] = "SUMMARY", t[t.SUP = 104] = "SUP", t[t.TABLE = 105] = "TABLE", t[t.TBODY = 106] = "TBODY", t[t.TEMPLATE = 107] = "TEMPLATE", t[t.TEXTAREA = 108] = "TEXTAREA", t[t.TFOOT = 109] = "TFOOT", t[t.TD = 110] = "TD", t[t.TH = 111] = "TH", t[t.THEAD = 112] = "THEAD", t[t.TITLE = 113] = "TITLE", t[t.TR = 114] = "TR", t[t.TRACK = 115] = "TRACK", t[t.TT = 116] = "TT", t[t.U = 117] = "U", t[t.UL = 118] = "UL", t[t.SVG = 119] = "SVG", t[t.VAR = 120] = "VAR", t[t.WBR = 121] = "WBR", t[t.XMP = 122] = "XMP";
})(h = h || (h = {}));
const pW = /* @__PURE__ */ new Map([
  [ie.A, h.A],
  [ie.ADDRESS, h.ADDRESS],
  [ie.ANNOTATION_XML, h.ANNOTATION_XML],
  [ie.APPLET, h.APPLET],
  [ie.AREA, h.AREA],
  [ie.ARTICLE, h.ARTICLE],
  [ie.ASIDE, h.ASIDE],
  [ie.B, h.B],
  [ie.BASE, h.BASE],
  [ie.BASEFONT, h.BASEFONT],
  [ie.BGSOUND, h.BGSOUND],
  [ie.BIG, h.BIG],
  [ie.BLOCKQUOTE, h.BLOCKQUOTE],
  [ie.BODY, h.BODY],
  [ie.BR, h.BR],
  [ie.BUTTON, h.BUTTON],
  [ie.CAPTION, h.CAPTION],
  [ie.CENTER, h.CENTER],
  [ie.CODE, h.CODE],
  [ie.COL, h.COL],
  [ie.COLGROUP, h.COLGROUP],
  [ie.DD, h.DD],
  [ie.DESC, h.DESC],
  [ie.DETAILS, h.DETAILS],
  [ie.DIALOG, h.DIALOG],
  [ie.DIR, h.DIR],
  [ie.DIV, h.DIV],
  [ie.DL, h.DL],
  [ie.DT, h.DT],
  [ie.EM, h.EM],
  [ie.EMBED, h.EMBED],
  [ie.FIELDSET, h.FIELDSET],
  [ie.FIGCAPTION, h.FIGCAPTION],
  [ie.FIGURE, h.FIGURE],
  [ie.FONT, h.FONT],
  [ie.FOOTER, h.FOOTER],
  [ie.FOREIGN_OBJECT, h.FOREIGN_OBJECT],
  [ie.FORM, h.FORM],
  [ie.FRAME, h.FRAME],
  [ie.FRAMESET, h.FRAMESET],
  [ie.H1, h.H1],
  [ie.H2, h.H2],
  [ie.H3, h.H3],
  [ie.H4, h.H4],
  [ie.H5, h.H5],
  [ie.H6, h.H6],
  [ie.HEAD, h.HEAD],
  [ie.HEADER, h.HEADER],
  [ie.HGROUP, h.HGROUP],
  [ie.HR, h.HR],
  [ie.HTML, h.HTML],
  [ie.I, h.I],
  [ie.IMG, h.IMG],
  [ie.IMAGE, h.IMAGE],
  [ie.INPUT, h.INPUT],
  [ie.IFRAME, h.IFRAME],
  [ie.KEYGEN, h.KEYGEN],
  [ie.LABEL, h.LABEL],
  [ie.LI, h.LI],
  [ie.LINK, h.LINK],
  [ie.LISTING, h.LISTING],
  [ie.MAIN, h.MAIN],
  [ie.MALIGNMARK, h.MALIGNMARK],
  [ie.MARQUEE, h.MARQUEE],
  [ie.MATH, h.MATH],
  [ie.MENU, h.MENU],
  [ie.META, h.META],
  [ie.MGLYPH, h.MGLYPH],
  [ie.MI, h.MI],
  [ie.MO, h.MO],
  [ie.MN, h.MN],
  [ie.MS, h.MS],
  [ie.MTEXT, h.MTEXT],
  [ie.NAV, h.NAV],
  [ie.NOBR, h.NOBR],
  [ie.NOFRAMES, h.NOFRAMES],
  [ie.NOEMBED, h.NOEMBED],
  [ie.NOSCRIPT, h.NOSCRIPT],
  [ie.OBJECT, h.OBJECT],
  [ie.OL, h.OL],
  [ie.OPTGROUP, h.OPTGROUP],
  [ie.OPTION, h.OPTION],
  [ie.P, h.P],
  [ie.PARAM, h.PARAM],
  [ie.PLAINTEXT, h.PLAINTEXT],
  [ie.PRE, h.PRE],
  [ie.RB, h.RB],
  [ie.RP, h.RP],
  [ie.RT, h.RT],
  [ie.RTC, h.RTC],
  [ie.RUBY, h.RUBY],
  [ie.S, h.S],
  [ie.SCRIPT, h.SCRIPT],
  [ie.SECTION, h.SECTION],
  [ie.SELECT, h.SELECT],
  [ie.SOURCE, h.SOURCE],
  [ie.SMALL, h.SMALL],
  [ie.SPAN, h.SPAN],
  [ie.STRIKE, h.STRIKE],
  [ie.STRONG, h.STRONG],
  [ie.STYLE, h.STYLE],
  [ie.SUB, h.SUB],
  [ie.SUMMARY, h.SUMMARY],
  [ie.SUP, h.SUP],
  [ie.TABLE, h.TABLE],
  [ie.TBODY, h.TBODY],
  [ie.TEMPLATE, h.TEMPLATE],
  [ie.TEXTAREA, h.TEXTAREA],
  [ie.TFOOT, h.TFOOT],
  [ie.TD, h.TD],
  [ie.TH, h.TH],
  [ie.THEAD, h.THEAD],
  [ie.TITLE, h.TITLE],
  [ie.TR, h.TR],
  [ie.TRACK, h.TRACK],
  [ie.TT, h.TT],
  [ie.U, h.U],
  [ie.UL, h.UL],
  [ie.SVG, h.SVG],
  [ie.VAR, h.VAR],
  [ie.WBR, h.WBR],
  [ie.XMP, h.XMP]
]);
function bo(t) {
  var e;
  return (e = pW.get(t)) !== null && e !== void 0 ? e : h.UNKNOWN;
}
const we = h, _W = {
  [Te.HTML]: /* @__PURE__ */ new Set([
    we.ADDRESS,
    we.APPLET,
    we.AREA,
    we.ARTICLE,
    we.ASIDE,
    we.BASE,
    we.BASEFONT,
    we.BGSOUND,
    we.BLOCKQUOTE,
    we.BODY,
    we.BR,
    we.BUTTON,
    we.CAPTION,
    we.CENTER,
    we.COL,
    we.COLGROUP,
    we.DD,
    we.DETAILS,
    we.DIR,
    we.DIV,
    we.DL,
    we.DT,
    we.EMBED,
    we.FIELDSET,
    we.FIGCAPTION,
    we.FIGURE,
    we.FOOTER,
    we.FORM,
    we.FRAME,
    we.FRAMESET,
    we.H1,
    we.H2,
    we.H3,
    we.H4,
    we.H5,
    we.H6,
    we.HEAD,
    we.HEADER,
    we.HGROUP,
    we.HR,
    we.HTML,
    we.IFRAME,
    we.IMG,
    we.INPUT,
    we.LI,
    we.LINK,
    we.LISTING,
    we.MAIN,
    we.MARQUEE,
    we.MENU,
    we.META,
    we.NAV,
    we.NOEMBED,
    we.NOFRAMES,
    we.NOSCRIPT,
    we.OBJECT,
    we.OL,
    we.P,
    we.PARAM,
    we.PLAINTEXT,
    we.PRE,
    we.SCRIPT,
    we.SECTION,
    we.SELECT,
    we.SOURCE,
    we.STYLE,
    we.SUMMARY,
    we.TABLE,
    we.TBODY,
    we.TD,
    we.TEMPLATE,
    we.TEXTAREA,
    we.TFOOT,
    we.TH,
    we.THEAD,
    we.TITLE,
    we.TR,
    we.TRACK,
    we.UL,
    we.WBR,
    we.XMP
  ]),
  [Te.MATHML]: /* @__PURE__ */ new Set([we.MI, we.MO, we.MN, we.MS, we.MTEXT, we.ANNOTATION_XML]),
  [Te.SVG]: /* @__PURE__ */ new Set([we.TITLE, we.FOREIGN_OBJECT, we.DESC]),
  [Te.XLINK]: /* @__PURE__ */ new Set(),
  [Te.XML]: /* @__PURE__ */ new Set(),
  [Te.XMLNS]: /* @__PURE__ */ new Set()
};
function j4(t) {
  return t === we.H1 || t === we.H2 || t === we.H3 || t === we.H4 || t === we.H5 || t === we.H6;
}
ie.STYLE, ie.SCRIPT, ie.XMP, ie.IFRAME, ie.NOEMBED, ie.NOFRAMES, ie.PLAINTEXT;
const mW = /* @__PURE__ */ new Map([
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var U;
(function(t) {
  t[t.DATA = 0] = "DATA", t[t.RCDATA = 1] = "RCDATA", t[t.RAWTEXT = 2] = "RAWTEXT", t[t.SCRIPT_DATA = 3] = "SCRIPT_DATA", t[t.PLAINTEXT = 4] = "PLAINTEXT", t[t.TAG_OPEN = 5] = "TAG_OPEN", t[t.END_TAG_OPEN = 6] = "END_TAG_OPEN", t[t.TAG_NAME = 7] = "TAG_NAME", t[t.RCDATA_LESS_THAN_SIGN = 8] = "RCDATA_LESS_THAN_SIGN", t[t.RCDATA_END_TAG_OPEN = 9] = "RCDATA_END_TAG_OPEN", t[t.RCDATA_END_TAG_NAME = 10] = "RCDATA_END_TAG_NAME", t[t.RAWTEXT_LESS_THAN_SIGN = 11] = "RAWTEXT_LESS_THAN_SIGN", t[t.RAWTEXT_END_TAG_OPEN = 12] = "RAWTEXT_END_TAG_OPEN", t[t.RAWTEXT_END_TAG_NAME = 13] = "RAWTEXT_END_TAG_NAME", t[t.SCRIPT_DATA_LESS_THAN_SIGN = 14] = "SCRIPT_DATA_LESS_THAN_SIGN", t[t.SCRIPT_DATA_END_TAG_OPEN = 15] = "SCRIPT_DATA_END_TAG_OPEN", t[t.SCRIPT_DATA_END_TAG_NAME = 16] = "SCRIPT_DATA_END_TAG_NAME", t[t.SCRIPT_DATA_ESCAPE_START = 17] = "SCRIPT_DATA_ESCAPE_START", t[t.SCRIPT_DATA_ESCAPE_START_DASH = 18] = "SCRIPT_DATA_ESCAPE_START_DASH", t[t.SCRIPT_DATA_ESCAPED = 19] = "SCRIPT_DATA_ESCAPED", t[t.SCRIPT_DATA_ESCAPED_DASH = 20] = "SCRIPT_DATA_ESCAPED_DASH", t[t.SCRIPT_DATA_ESCAPED_DASH_DASH = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH", t[t.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN", t[t.SCRIPT_DATA_ESCAPED_END_TAG_OPEN = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN", t[t.SCRIPT_DATA_ESCAPED_END_TAG_NAME = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME", t[t.SCRIPT_DATA_DOUBLE_ESCAPE_START = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START", t[t.SCRIPT_DATA_DOUBLE_ESCAPED = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED", t[t.SCRIPT_DATA_DOUBLE_ESCAPED_DASH = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH", t[t.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH", t[t.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN", t[t.SCRIPT_DATA_DOUBLE_ESCAPE_END = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END", t[t.BEFORE_ATTRIBUTE_NAME = 31] = "BEFORE_ATTRIBUTE_NAME", t[t.ATTRIBUTE_NAME = 32] = "ATTRIBUTE_NAME", t[t.AFTER_ATTRIBUTE_NAME = 33] = "AFTER_ATTRIBUTE_NAME", t[t.BEFORE_ATTRIBUTE_VALUE = 34] = "BEFORE_ATTRIBUTE_VALUE", t[t.ATTRIBUTE_VALUE_DOUBLE_QUOTED = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED", t[t.ATTRIBUTE_VALUE_SINGLE_QUOTED = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED", t[t.ATTRIBUTE_VALUE_UNQUOTED = 37] = "ATTRIBUTE_VALUE_UNQUOTED", t[t.AFTER_ATTRIBUTE_VALUE_QUOTED = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED", t[t.SELF_CLOSING_START_TAG = 39] = "SELF_CLOSING_START_TAG", t[t.BOGUS_COMMENT = 40] = "BOGUS_COMMENT", t[t.MARKUP_DECLARATION_OPEN = 41] = "MARKUP_DECLARATION_OPEN", t[t.COMMENT_START = 42] = "COMMENT_START", t[t.COMMENT_START_DASH = 43] = "COMMENT_START_DASH", t[t.COMMENT = 44] = "COMMENT", t[t.COMMENT_LESS_THAN_SIGN = 45] = "COMMENT_LESS_THAN_SIGN", t[t.COMMENT_LESS_THAN_SIGN_BANG = 46] = "COMMENT_LESS_THAN_SIGN_BANG", t[t.COMMENT_LESS_THAN_SIGN_BANG_DASH = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH", t[t.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH", t[t.COMMENT_END_DASH = 49] = "COMMENT_END_DASH", t[t.COMMENT_END = 50] = "COMMENT_END", t[t.COMMENT_END_BANG = 51] = "COMMENT_END_BANG", t[t.DOCTYPE = 52] = "DOCTYPE", t[t.BEFORE_DOCTYPE_NAME = 53] = "BEFORE_DOCTYPE_NAME", t[t.DOCTYPE_NAME = 54] = "DOCTYPE_NAME", t[t.AFTER_DOCTYPE_NAME = 55] = "AFTER_DOCTYPE_NAME", t[t.AFTER_DOCTYPE_PUBLIC_KEYWORD = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD", t[t.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER", t[t.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED", t[t.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED", t[t.AFTER_DOCTYPE_PUBLIC_IDENTIFIER = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER", t[t.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS", t[t.AFTER_DOCTYPE_SYSTEM_KEYWORD = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD", t[t.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER", t[t.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED", t[t.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED", t[t.AFTER_DOCTYPE_SYSTEM_IDENTIFIER = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER", t[t.BOGUS_DOCTYPE = 67] = "BOGUS_DOCTYPE", t[t.CDATA_SECTION = 68] = "CDATA_SECTION", t[t.CDATA_SECTION_BRACKET = 69] = "CDATA_SECTION_BRACKET", t[t.CDATA_SECTION_END = 70] = "CDATA_SECTION_END", t[t.CHARACTER_REFERENCE = 71] = "CHARACTER_REFERENCE", t[t.NAMED_CHARACTER_REFERENCE = 72] = "NAMED_CHARACTER_REFERENCE", t[t.AMBIGUOUS_AMPERSAND = 73] = "AMBIGUOUS_AMPERSAND", t[t.NUMERIC_CHARACTER_REFERENCE = 74] = "NUMERIC_CHARACTER_REFERENCE", t[t.HEXADEMICAL_CHARACTER_REFERENCE_START = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START", t[t.HEXADEMICAL_CHARACTER_REFERENCE = 76] = "HEXADEMICAL_CHARACTER_REFERENCE", t[t.DECIMAL_CHARACTER_REFERENCE = 77] = "DECIMAL_CHARACTER_REFERENCE", t[t.NUMERIC_CHARACTER_REFERENCE_END = 78] = "NUMERIC_CHARACTER_REFERENCE_END";
})(U || (U = {}));
const xn = {
  DATA: U.DATA,
  RCDATA: U.RCDATA,
  RAWTEXT: U.RAWTEXT,
  SCRIPT_DATA: U.SCRIPT_DATA,
  PLAINTEXT: U.PLAINTEXT,
  CDATA_SECTION: U.CDATA_SECTION
};
function yl(t) {
  return t >= B.DIGIT_0 && t <= B.DIGIT_9;
}
function fl(t) {
  return t >= B.LATIN_CAPITAL_A && t <= B.LATIN_CAPITAL_Z;
}
function fW(t) {
  return t >= B.LATIN_SMALL_A && t <= B.LATIN_SMALL_Z;
}
function Ni(t) {
  return fW(t) || fl(t);
}
function tE(t) {
  return Ni(t) || yl(t);
}
function X4(t) {
  return t >= B.LATIN_CAPITAL_A && t <= B.LATIN_CAPITAL_F;
}
function Z4(t) {
  return t >= B.LATIN_SMALL_A && t <= B.LATIN_SMALL_F;
}
function gW(t) {
  return yl(t) || X4(t) || Z4(t);
}
function xu(t) {
  return t + 32;
}
function J4(t) {
  return t === B.SPACE || t === B.LINE_FEED || t === B.TABULATION || t === B.FORM_FEED;
}
function hW(t) {
  return t === B.EQUALS_SIGN || tE(t);
}
function TC(t) {
  return J4(t) || t === B.SOLIDUS || t === B.GREATER_THAN_SIGN;
}
class EW {
  constructor(e, n) {
    this.options = e, this.handler = n, this.paused = !1, this.inLoop = !1, this.inForeignNode = !1, this.lastStartTagName = "", this.active = !1, this.state = U.DATA, this.returnState = U.DATA, this.charRefCode = -1, this.consumedAfterSnapshot = -1, this.currentCharacterToken = null, this.currentToken = null, this.currentAttr = { name: "", value: "" }, this.preprocessor = new nW(n), this.currentLocation = this.getCurrentLocation(-1);
  }
  //Errors
  _err(e) {
    var n, r;
    (r = (n = this.handler).onParseError) === null || r === void 0 || r.call(n, this.preprocessor.getError(e));
  }
  // NOTE: `offset` may never run across line boundaries.
  getCurrentLocation(e) {
    return this.options.sourceCodeLocationInfo ? {
      startLine: this.preprocessor.line,
      startCol: this.preprocessor.col - e,
      startOffset: this.preprocessor.offset - e,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    } : null;
  }
  _runParsingLoop() {
    if (!this.inLoop) {
      for (this.inLoop = !0; this.active && !this.paused; ) {
        this.consumedAfterSnapshot = 0;
        const e = this._consume();
        this._ensureHibernation() || this._callState(e);
      }
      this.inLoop = !1;
    }
  }
  //API
  pause() {
    this.paused = !0;
  }
  resume(e) {
    if (!this.paused)
      throw new Error("Parser was already resumed");
    this.paused = !1, !this.inLoop && (this._runParsingLoop(), this.paused || e?.());
  }
  write(e, n, r) {
    this.active = !0, this.preprocessor.write(e, n), this._runParsingLoop(), this.paused || r?.();
  }
  insertHtmlAtCurrentPos(e) {
    this.active = !0, this.preprocessor.insertHtmlAtCurrentPos(e), this._runParsingLoop();
  }
  //Hibernation
  _ensureHibernation() {
    return this.preprocessor.endOfChunkHit ? (this._unconsume(this.consumedAfterSnapshot), this.active = !1, !0) : !1;
  }
  //Consumption
  _consume() {
    return this.consumedAfterSnapshot++, this.preprocessor.advance();
  }
  _unconsume(e) {
    this.consumedAfterSnapshot -= e, this.preprocessor.retreat(e);
  }
  _reconsumeInState(e, n) {
    this.state = e, this._callState(n);
  }
  _advanceBy(e) {
    this.consumedAfterSnapshot += e;
    for (let n = 0; n < e; n++)
      this.preprocessor.advance();
  }
  _consumeSequenceIfMatch(e, n) {
    return this.preprocessor.startsWith(e, n) ? (this._advanceBy(e.length - 1), !0) : !1;
  }
  //Token creation
  _createStartTagToken() {
    this.currentToken = {
      type: Ot.START_TAG,
      tagName: "",
      tagID: h.UNKNOWN,
      selfClosing: !1,
      ackSelfClosing: !1,
      attrs: [],
      location: this.getCurrentLocation(1)
    };
  }
  _createEndTagToken() {
    this.currentToken = {
      type: Ot.END_TAG,
      tagName: "",
      tagID: h.UNKNOWN,
      selfClosing: !1,
      ackSelfClosing: !1,
      attrs: [],
      location: this.getCurrentLocation(2)
    };
  }
  _createCommentToken(e) {
    this.currentToken = {
      type: Ot.COMMENT,
      data: "",
      location: this.getCurrentLocation(e)
    };
  }
  _createDoctypeToken(e) {
    this.currentToken = {
      type: Ot.DOCTYPE,
      name: e,
      forceQuirks: !1,
      publicId: null,
      systemId: null,
      location: this.currentLocation
    };
  }
  _createCharacterToken(e, n) {
    this.currentCharacterToken = {
      type: e,
      chars: n,
      location: this.currentLocation
    };
  }
  //Tag attributes
  _createAttr(e) {
    this.currentAttr = {
      name: e,
      value: ""
    }, this.currentLocation = this.getCurrentLocation(0);
  }
  _leaveAttrName() {
    var e, n;
    const r = this.currentToken;
    if (W4(r, this.currentAttr.name) === null) {
      if (r.attrs.push(this.currentAttr), r.location && this.currentLocation) {
        const a = (e = (n = r.location).attrs) !== null && e !== void 0 ? e : n.attrs = /* @__PURE__ */ Object.create(null);
        a[this.currentAttr.name] = this.currentLocation, this._leaveAttrValue();
      }
    } else
      this._err(pe.duplicateAttribute);
  }
  _leaveAttrValue() {
    this.currentLocation && (this.currentLocation.endLine = this.preprocessor.line, this.currentLocation.endCol = this.preprocessor.col, this.currentLocation.endOffset = this.preprocessor.offset);
  }
  //Token emission
  prepareToken(e) {
    this._emitCurrentCharacterToken(e.location), this.currentToken = null, e.location && (e.location.endLine = this.preprocessor.line, e.location.endCol = this.preprocessor.col + 1, e.location.endOffset = this.preprocessor.offset + 1), this.currentLocation = this.getCurrentLocation(-1);
  }
  emitCurrentTagToken() {
    const e = this.currentToken;
    this.prepareToken(e), e.tagID = bo(e.tagName), e.type === Ot.START_TAG ? (this.lastStartTagName = e.tagName, this.handler.onStartTag(e)) : (e.attrs.length > 0 && this._err(pe.endTagWithAttributes), e.selfClosing && this._err(pe.endTagWithTrailingSolidus), this.handler.onEndTag(e)), this.preprocessor.dropParsedChunk();
  }
  emitCurrentComment(e) {
    this.prepareToken(e), this.handler.onComment(e), this.preprocessor.dropParsedChunk();
  }
  emitCurrentDoctype(e) {
    this.prepareToken(e), this.handler.onDoctype(e), this.preprocessor.dropParsedChunk();
  }
  _emitCurrentCharacterToken(e) {
    if (this.currentCharacterToken) {
      switch (e && this.currentCharacterToken.location && (this.currentCharacterToken.location.endLine = e.startLine, this.currentCharacterToken.location.endCol = e.startCol, this.currentCharacterToken.location.endOffset = e.startOffset), this.currentCharacterToken.type) {
        case Ot.CHARACTER: {
          this.handler.onCharacter(this.currentCharacterToken);
          break;
        }
        case Ot.NULL_CHARACTER: {
          this.handler.onNullCharacter(this.currentCharacterToken);
          break;
        }
        case Ot.WHITESPACE_CHARACTER: {
          this.handler.onWhitespaceCharacter(this.currentCharacterToken);
          break;
        }
      }
      this.currentCharacterToken = null;
    }
  }
  _emitEOFToken() {
    const e = this.getCurrentLocation(0);
    e && (e.endLine = e.startLine, e.endCol = e.startCol, e.endOffset = e.startOffset), this._emitCurrentCharacterToken(e), this.handler.onEof({ type: Ot.EOF, location: e }), this.active = !1;
  }
  //Characters emission
  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
  //If we have a sequence of characters that belong to the same group, the parser can process it
  //as a single solid character token.
  //So, there are 3 types of character tokens in parse5:
  //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
  _appendCharToCurrentCharacterToken(e, n) {
    if (this.currentCharacterToken)
      if (this.currentCharacterToken.type !== e)
        this.currentLocation = this.getCurrentLocation(0), this._emitCurrentCharacterToken(this.currentLocation), this.preprocessor.dropParsedChunk();
      else {
        this.currentCharacterToken.chars += n;
        return;
      }
    this._createCharacterToken(e, n);
  }
  _emitCodePoint(e) {
    const n = J4(e) ? Ot.WHITESPACE_CHARACTER : e === B.NULL ? Ot.NULL_CHARACTER : Ot.CHARACTER;
    this._appendCharToCurrentCharacterToken(n, String.fromCodePoint(e));
  }
  //NOTE: used when we emit characters explicitly.
  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
  _emitChars(e) {
    this._appendCharToCurrentCharacterToken(Ot.CHARACTER, e);
  }
  // Character reference helpers
  _matchNamedCharacterReference(e) {
    let n = null, r = 0, a = !1;
    for (let i = 0, s = Oi[0]; i >= 0 && (i = Q4(Oi, s, i + 1, e), !(i < 0)); e = this._consume()) {
      r += 1, s = Oi[i];
      const l = s & Ma.VALUE_LENGTH;
      if (l) {
        const c = (l >> 14) - 1;
        if (e !== B.SEMICOLON && this._isCharacterReferenceInAttribute() && hW(this.preprocessor.peek(1)) ? (n = [B.AMPERSAND], i += c) : (n = c === 0 ? [Oi[i] & ~Ma.VALUE_LENGTH] : c === 1 ? [Oi[++i]] : [Oi[++i], Oi[++i]], r = 0, a = e !== B.SEMICOLON), c === 0) {
          this._consume();
          break;
        }
      }
    }
    return this._unconsume(r), a && !this.preprocessor.endOfChunkHit && this._err(pe.missingSemicolonAfterCharacterReference), this._unconsume(1), n;
  }
  _isCharacterReferenceInAttribute() {
    return this.returnState === U.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === U.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === U.ATTRIBUTE_VALUE_UNQUOTED;
  }
  _flushCodePointConsumedAsCharacterReference(e) {
    this._isCharacterReferenceInAttribute() ? this.currentAttr.value += String.fromCodePoint(e) : this._emitCodePoint(e);
  }
  // Calling states this way turns out to be much faster than any other approach.
  _callState(e) {
    switch (this.state) {
      case U.DATA: {
        this._stateData(e);
        break;
      }
      case U.RCDATA: {
        this._stateRcdata(e);
        break;
      }
      case U.RAWTEXT: {
        this._stateRawtext(e);
        break;
      }
      case U.SCRIPT_DATA: {
        this._stateScriptData(e);
        break;
      }
      case U.PLAINTEXT: {
        this._statePlaintext(e);
        break;
      }
      case U.TAG_OPEN: {
        this._stateTagOpen(e);
        break;
      }
      case U.END_TAG_OPEN: {
        this._stateEndTagOpen(e);
        break;
      }
      case U.TAG_NAME: {
        this._stateTagName(e);
        break;
      }
      case U.RCDATA_LESS_THAN_SIGN: {
        this._stateRcdataLessThanSign(e);
        break;
      }
      case U.RCDATA_END_TAG_OPEN: {
        this._stateRcdataEndTagOpen(e);
        break;
      }
      case U.RCDATA_END_TAG_NAME: {
        this._stateRcdataEndTagName(e);
        break;
      }
      case U.RAWTEXT_LESS_THAN_SIGN: {
        this._stateRawtextLessThanSign(e);
        break;
      }
      case U.RAWTEXT_END_TAG_OPEN: {
        this._stateRawtextEndTagOpen(e);
        break;
      }
      case U.RAWTEXT_END_TAG_NAME: {
        this._stateRawtextEndTagName(e);
        break;
      }
      case U.SCRIPT_DATA_LESS_THAN_SIGN: {
        this._stateScriptDataLessThanSign(e);
        break;
      }
      case U.SCRIPT_DATA_END_TAG_OPEN: {
        this._stateScriptDataEndTagOpen(e);
        break;
      }
      case U.SCRIPT_DATA_END_TAG_NAME: {
        this._stateScriptDataEndTagName(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPE_START: {
        this._stateScriptDataEscapeStart(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPE_START_DASH: {
        this._stateScriptDataEscapeStartDash(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPED: {
        this._stateScriptDataEscaped(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPED_DASH: {
        this._stateScriptDataEscapedDash(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPED_DASH_DASH: {
        this._stateScriptDataEscapedDashDash(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataEscapedLessThanSign(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
        this._stateScriptDataEscapedEndTagOpen(e);
        break;
      }
      case U.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
        this._stateScriptDataEscapedEndTagName(e);
        break;
      }
      case U.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
        this._stateScriptDataDoubleEscapeStart(e);
        break;
      }
      case U.SCRIPT_DATA_DOUBLE_ESCAPED: {
        this._stateScriptDataDoubleEscaped(e);
        break;
      }
      case U.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
        this._stateScriptDataDoubleEscapedDash(e);
        break;
      }
      case U.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
        this._stateScriptDataDoubleEscapedDashDash(e);
        break;
      }
      case U.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataDoubleEscapedLessThanSign(e);
        break;
      }
      case U.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
        this._stateScriptDataDoubleEscapeEnd(e);
        break;
      }
      case U.BEFORE_ATTRIBUTE_NAME: {
        this._stateBeforeAttributeName(e);
        break;
      }
      case U.ATTRIBUTE_NAME: {
        this._stateAttributeName(e);
        break;
      }
      case U.AFTER_ATTRIBUTE_NAME: {
        this._stateAfterAttributeName(e);
        break;
      }
      case U.BEFORE_ATTRIBUTE_VALUE: {
        this._stateBeforeAttributeValue(e);
        break;
      }
      case U.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
        this._stateAttributeValueDoubleQuoted(e);
        break;
      }
      case U.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
        this._stateAttributeValueSingleQuoted(e);
        break;
      }
      case U.ATTRIBUTE_VALUE_UNQUOTED: {
        this._stateAttributeValueUnquoted(e);
        break;
      }
      case U.AFTER_ATTRIBUTE_VALUE_QUOTED: {
        this._stateAfterAttributeValueQuoted(e);
        break;
      }
      case U.SELF_CLOSING_START_TAG: {
        this._stateSelfClosingStartTag(e);
        break;
      }
      case U.BOGUS_COMMENT: {
        this._stateBogusComment(e);
        break;
      }
      case U.MARKUP_DECLARATION_OPEN: {
        this._stateMarkupDeclarationOpen(e);
        break;
      }
      case U.COMMENT_START: {
        this._stateCommentStart(e);
        break;
      }
      case U.COMMENT_START_DASH: {
        this._stateCommentStartDash(e);
        break;
      }
      case U.COMMENT: {
        this._stateComment(e);
        break;
      }
      case U.COMMENT_LESS_THAN_SIGN: {
        this._stateCommentLessThanSign(e);
        break;
      }
      case U.COMMENT_LESS_THAN_SIGN_BANG: {
        this._stateCommentLessThanSignBang(e);
        break;
      }
      case U.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
        this._stateCommentLessThanSignBangDash(e);
        break;
      }
      case U.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
        this._stateCommentLessThanSignBangDashDash(e);
        break;
      }
      case U.COMMENT_END_DASH: {
        this._stateCommentEndDash(e);
        break;
      }
      case U.COMMENT_END: {
        this._stateCommentEnd(e);
        break;
      }
      case U.COMMENT_END_BANG: {
        this._stateCommentEndBang(e);
        break;
      }
      case U.DOCTYPE: {
        this._stateDoctype(e);
        break;
      }
      case U.BEFORE_DOCTYPE_NAME: {
        this._stateBeforeDoctypeName(e);
        break;
      }
      case U.DOCTYPE_NAME: {
        this._stateDoctypeName(e);
        break;
      }
      case U.AFTER_DOCTYPE_NAME: {
        this._stateAfterDoctypeName(e);
        break;
      }
      case U.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
        this._stateAfterDoctypePublicKeyword(e);
        break;
      }
      case U.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateBeforeDoctypePublicIdentifier(e);
        break;
      }
      case U.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypePublicIdentifierDoubleQuoted(e);
        break;
      }
      case U.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypePublicIdentifierSingleQuoted(e);
        break;
      }
      case U.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateAfterDoctypePublicIdentifier(e);
        break;
      }
      case U.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
        this._stateBetweenDoctypePublicAndSystemIdentifiers(e);
        break;
      }
      case U.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
        this._stateAfterDoctypeSystemKeyword(e);
        break;
      }
      case U.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateBeforeDoctypeSystemIdentifier(e);
        break;
      }
      case U.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypeSystemIdentifierDoubleQuoted(e);
        break;
      }
      case U.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypeSystemIdentifierSingleQuoted(e);
        break;
      }
      case U.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateAfterDoctypeSystemIdentifier(e);
        break;
      }
      case U.BOGUS_DOCTYPE: {
        this._stateBogusDoctype(e);
        break;
      }
      case U.CDATA_SECTION: {
        this._stateCdataSection(e);
        break;
      }
      case U.CDATA_SECTION_BRACKET: {
        this._stateCdataSectionBracket(e);
        break;
      }
      case U.CDATA_SECTION_END: {
        this._stateCdataSectionEnd(e);
        break;
      }
      case U.CHARACTER_REFERENCE: {
        this._stateCharacterReference(e);
        break;
      }
      case U.NAMED_CHARACTER_REFERENCE: {
        this._stateNamedCharacterReference(e);
        break;
      }
      case U.AMBIGUOUS_AMPERSAND: {
        this._stateAmbiguousAmpersand(e);
        break;
      }
      case U.NUMERIC_CHARACTER_REFERENCE: {
        this._stateNumericCharacterReference(e);
        break;
      }
      case U.HEXADEMICAL_CHARACTER_REFERENCE_START: {
        this._stateHexademicalCharacterReferenceStart(e);
        break;
      }
      case U.HEXADEMICAL_CHARACTER_REFERENCE: {
        this._stateHexademicalCharacterReference(e);
        break;
      }
      case U.DECIMAL_CHARACTER_REFERENCE: {
        this._stateDecimalCharacterReference(e);
        break;
      }
      case U.NUMERIC_CHARACTER_REFERENCE_END: {
        this._stateNumericCharacterReferenceEnd(e);
        break;
      }
      default:
        throw new Error("Unknown state");
    }
  }
  // State machine
  // Data state
  //------------------------------------------------------------------
  _stateData(e) {
    switch (e) {
      case B.LESS_THAN_SIGN: {
        this.state = U.TAG_OPEN;
        break;
      }
      case B.AMPERSAND: {
        this.returnState = U.DATA, this.state = U.CHARACTER_REFERENCE;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this._emitCodePoint(e);
        break;
      }
      case B.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  //  RCDATA state
  //------------------------------------------------------------------
  _stateRcdata(e) {
    switch (e) {
      case B.AMPERSAND: {
        this.returnState = U.RCDATA, this.state = U.CHARACTER_REFERENCE;
        break;
      }
      case B.LESS_THAN_SIGN: {
        this.state = U.RCDATA_LESS_THAN_SIGN;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  // RAWTEXT state
  //------------------------------------------------------------------
  _stateRawtext(e) {
    switch (e) {
      case B.LESS_THAN_SIGN: {
        this.state = U.RAWTEXT_LESS_THAN_SIGN;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  // Script data state
  //------------------------------------------------------------------
  _stateScriptData(e) {
    switch (e) {
      case B.LESS_THAN_SIGN: {
        this.state = U.SCRIPT_DATA_LESS_THAN_SIGN;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  // PLAINTEXT state
  //------------------------------------------------------------------
  _statePlaintext(e) {
    switch (e) {
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  // Tag open state
  //------------------------------------------------------------------
  _stateTagOpen(e) {
    if (Ni(e))
      this._createStartTagToken(), this.state = U.TAG_NAME, this._stateTagName(e);
    else
      switch (e) {
        case B.EXCLAMATION_MARK: {
          this.state = U.MARKUP_DECLARATION_OPEN;
          break;
        }
        case B.SOLIDUS: {
          this.state = U.END_TAG_OPEN;
          break;
        }
        case B.QUESTION_MARK: {
          this._err(pe.unexpectedQuestionMarkInsteadOfTagName), this._createCommentToken(1), this.state = U.BOGUS_COMMENT, this._stateBogusComment(e);
          break;
        }
        case B.EOF: {
          this._err(pe.eofBeforeTagName), this._emitChars("<"), this._emitEOFToken();
          break;
        }
        default:
          this._err(pe.invalidFirstCharacterOfTagName), this._emitChars("<"), this.state = U.DATA, this._stateData(e);
      }
  }
  // End tag open state
  //------------------------------------------------------------------
  _stateEndTagOpen(e) {
    if (Ni(e))
      this._createEndTagToken(), this.state = U.TAG_NAME, this._stateTagName(e);
    else
      switch (e) {
        case B.GREATER_THAN_SIGN: {
          this._err(pe.missingEndTagName), this.state = U.DATA;
          break;
        }
        case B.EOF: {
          this._err(pe.eofBeforeTagName), this._emitChars("</"), this._emitEOFToken();
          break;
        }
        default:
          this._err(pe.invalidFirstCharacterOfTagName), this._createCommentToken(2), this.state = U.BOGUS_COMMENT, this._stateBogusComment(e);
      }
  }
  // Tag name state
  //------------------------------------------------------------------
  _stateTagName(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this.state = U.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case B.SOLIDUS: {
        this.state = U.SELF_CLOSING_START_TAG;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA, this.emitCurrentTagToken();
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.tagName += _n;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        n.tagName += String.fromCodePoint(fl(e) ? xu(e) : e);
    }
  }
  // RCDATA less-than sign state
  //------------------------------------------------------------------
  _stateRcdataLessThanSign(e) {
    e === B.SOLIDUS ? this.state = U.RCDATA_END_TAG_OPEN : (this._emitChars("<"), this.state = U.RCDATA, this._stateRcdata(e));
  }
  // RCDATA end tag open state
  //------------------------------------------------------------------
  _stateRcdataEndTagOpen(e) {
    Ni(e) ? (this.state = U.RCDATA_END_TAG_NAME, this._stateRcdataEndTagName(e)) : (this._emitChars("</"), this.state = U.RCDATA, this._stateRcdata(e));
  }
  handleSpecialEndTag(e) {
    if (!this.preprocessor.startsWith(this.lastStartTagName, !1))
      return !this._ensureHibernation();
    this._createEndTagToken();
    const n = this.currentToken;
    switch (n.tagName = this.lastStartTagName, this.preprocessor.peek(this.lastStartTagName.length)) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        return this._advanceBy(this.lastStartTagName.length), this.state = U.BEFORE_ATTRIBUTE_NAME, !1;
      case B.SOLIDUS:
        return this._advanceBy(this.lastStartTagName.length), this.state = U.SELF_CLOSING_START_TAG, !1;
      case B.GREATER_THAN_SIGN:
        return this._advanceBy(this.lastStartTagName.length), this.emitCurrentTagToken(), this.state = U.DATA, !1;
      default:
        return !this._ensureHibernation();
    }
  }
  // RCDATA end tag name state
  //------------------------------------------------------------------
  _stateRcdataEndTagName(e) {
    this.handleSpecialEndTag(e) && (this._emitChars("</"), this.state = U.RCDATA, this._stateRcdata(e));
  }
  // RAWTEXT less-than sign state
  //------------------------------------------------------------------
  _stateRawtextLessThanSign(e) {
    e === B.SOLIDUS ? this.state = U.RAWTEXT_END_TAG_OPEN : (this._emitChars("<"), this.state = U.RAWTEXT, this._stateRawtext(e));
  }
  // RAWTEXT end tag open state
  //------------------------------------------------------------------
  _stateRawtextEndTagOpen(e) {
    Ni(e) ? (this.state = U.RAWTEXT_END_TAG_NAME, this._stateRawtextEndTagName(e)) : (this._emitChars("</"), this.state = U.RAWTEXT, this._stateRawtext(e));
  }
  // RAWTEXT end tag name state
  //------------------------------------------------------------------
  _stateRawtextEndTagName(e) {
    this.handleSpecialEndTag(e) && (this._emitChars("</"), this.state = U.RAWTEXT, this._stateRawtext(e));
  }
  // Script data less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataLessThanSign(e) {
    switch (e) {
      case B.SOLIDUS: {
        this.state = U.SCRIPT_DATA_END_TAG_OPEN;
        break;
      }
      case B.EXCLAMATION_MARK: {
        this.state = U.SCRIPT_DATA_ESCAPE_START, this._emitChars("<!");
        break;
      }
      default:
        this._emitChars("<"), this.state = U.SCRIPT_DATA, this._stateScriptData(e);
    }
  }
  // Script data end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEndTagOpen(e) {
    Ni(e) ? (this.state = U.SCRIPT_DATA_END_TAG_NAME, this._stateScriptDataEndTagName(e)) : (this._emitChars("</"), this.state = U.SCRIPT_DATA, this._stateScriptData(e));
  }
  // Script data end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEndTagName(e) {
    this.handleSpecialEndTag(e) && (this._emitChars("</"), this.state = U.SCRIPT_DATA, this._stateScriptData(e));
  }
  // Script data escape start state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStart(e) {
    e === B.HYPHEN_MINUS ? (this.state = U.SCRIPT_DATA_ESCAPE_START_DASH, this._emitChars("-")) : (this.state = U.SCRIPT_DATA, this._stateScriptData(e));
  }
  // Script data escape start dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStartDash(e) {
    e === B.HYPHEN_MINUS ? (this.state = U.SCRIPT_DATA_ESCAPED_DASH_DASH, this._emitChars("-")) : (this.state = U.SCRIPT_DATA, this._stateScriptData(e));
  }
  // Script data escaped state
  //------------------------------------------------------------------
  _stateScriptDataEscaped(e) {
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.SCRIPT_DATA_ESCAPED_DASH, this._emitChars("-");
        break;
      }
      case B.LESS_THAN_SIGN: {
        this.state = U.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  // Script data escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDash(e) {
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.SCRIPT_DATA_ESCAPED_DASH_DASH, this._emitChars("-");
        break;
      }
      case B.LESS_THAN_SIGN: {
        this.state = U.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.state = U.SCRIPT_DATA_ESCAPED, this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = U.SCRIPT_DATA_ESCAPED, this._emitCodePoint(e);
    }
  }
  // Script data escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDashDash(e) {
    switch (e) {
      case B.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case B.LESS_THAN_SIGN: {
        this.state = U.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this.state = U.SCRIPT_DATA, this._emitChars(">");
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.state = U.SCRIPT_DATA_ESCAPED, this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = U.SCRIPT_DATA_ESCAPED, this._emitCodePoint(e);
    }
  }
  // Script data escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataEscapedLessThanSign(e) {
    e === B.SOLIDUS ? this.state = U.SCRIPT_DATA_ESCAPED_END_TAG_OPEN : Ni(e) ? (this._emitChars("<"), this.state = U.SCRIPT_DATA_DOUBLE_ESCAPE_START, this._stateScriptDataDoubleEscapeStart(e)) : (this._emitChars("<"), this.state = U.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(e));
  }
  // Script data escaped end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagOpen(e) {
    Ni(e) ? (this.state = U.SCRIPT_DATA_ESCAPED_END_TAG_NAME, this._stateScriptDataEscapedEndTagName(e)) : (this._emitChars("</"), this.state = U.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(e));
  }
  // Script data escaped end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagName(e) {
    this.handleSpecialEndTag(e) && (this._emitChars("</"), this.state = U.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(e));
  }
  // Script data double escape start state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeStart(e) {
    if (this.preprocessor.startsWith(Rr.SCRIPT, !1) && TC(this.preprocessor.peek(Rr.SCRIPT.length))) {
      this._emitCodePoint(e);
      for (let n = 0; n < Rr.SCRIPT.length; n++)
        this._emitCodePoint(this._consume());
      this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED;
    } else this._ensureHibernation() || (this.state = U.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(e));
  }
  // Script data double escaped state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscaped(e) {
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED_DASH, this._emitChars("-");
        break;
      }
      case B.LESS_THAN_SIGN: {
        this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  // Script data double escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDash(e) {
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH, this._emitChars("-");
        break;
      }
      case B.LESS_THAN_SIGN: {
        this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitCodePoint(e);
    }
  }
  // Script data double escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDashDash(e) {
    switch (e) {
      case B.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case B.LESS_THAN_SIGN: {
        this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this.state = U.SCRIPT_DATA, this._emitChars(">");
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitChars(_n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitCodePoint(e);
    }
  }
  // Script data double escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedLessThanSign(e) {
    e === B.SOLIDUS ? (this.state = U.SCRIPT_DATA_DOUBLE_ESCAPE_END, this._emitChars("/")) : (this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED, this._stateScriptDataDoubleEscaped(e));
  }
  // Script data double escape end state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeEnd(e) {
    if (this.preprocessor.startsWith(Rr.SCRIPT, !1) && TC(this.preprocessor.peek(Rr.SCRIPT.length))) {
      this._emitCodePoint(e);
      for (let n = 0; n < Rr.SCRIPT.length; n++)
        this._emitCodePoint(this._consume());
      this.state = U.SCRIPT_DATA_ESCAPED;
    } else this._ensureHibernation() || (this.state = U.SCRIPT_DATA_DOUBLE_ESCAPED, this._stateScriptDataDoubleEscaped(e));
  }
  // Before attribute name state
  //------------------------------------------------------------------
  _stateBeforeAttributeName(e) {
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.SOLIDUS:
      case B.GREATER_THAN_SIGN:
      case B.EOF: {
        this.state = U.AFTER_ATTRIBUTE_NAME, this._stateAfterAttributeName(e);
        break;
      }
      case B.EQUALS_SIGN: {
        this._err(pe.unexpectedEqualsSignBeforeAttributeName), this._createAttr("="), this.state = U.ATTRIBUTE_NAME;
        break;
      }
      default:
        this._createAttr(""), this.state = U.ATTRIBUTE_NAME, this._stateAttributeName(e);
    }
  }
  // Attribute name state
  //------------------------------------------------------------------
  _stateAttributeName(e) {
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
      case B.SOLIDUS:
      case B.GREATER_THAN_SIGN:
      case B.EOF: {
        this._leaveAttrName(), this.state = U.AFTER_ATTRIBUTE_NAME, this._stateAfterAttributeName(e);
        break;
      }
      case B.EQUALS_SIGN: {
        this._leaveAttrName(), this.state = U.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case B.QUOTATION_MARK:
      case B.APOSTROPHE:
      case B.LESS_THAN_SIGN: {
        this._err(pe.unexpectedCharacterInAttributeName), this.currentAttr.name += String.fromCodePoint(e);
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.currentAttr.name += _n;
        break;
      }
      default:
        this.currentAttr.name += String.fromCodePoint(fl(e) ? xu(e) : e);
    }
  }
  // After attribute name state
  //------------------------------------------------------------------
  _stateAfterAttributeName(e) {
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.SOLIDUS: {
        this.state = U.SELF_CLOSING_START_TAG;
        break;
      }
      case B.EQUALS_SIGN: {
        this.state = U.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA, this.emitCurrentTagToken();
        break;
      }
      case B.EOF: {
        this._err(pe.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this._createAttr(""), this.state = U.ATTRIBUTE_NAME, this._stateAttributeName(e);
    }
  }
  // Before attribute value state
  //------------------------------------------------------------------
  _stateBeforeAttributeValue(e) {
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.QUOTATION_MARK: {
        this.state = U.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
        break;
      }
      case B.APOSTROPHE: {
        this.state = U.ATTRIBUTE_VALUE_SINGLE_QUOTED;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.missingAttributeValue), this.state = U.DATA, this.emitCurrentTagToken();
        break;
      }
      default:
        this.state = U.ATTRIBUTE_VALUE_UNQUOTED, this._stateAttributeValueUnquoted(e);
    }
  }
  // Attribute value (double-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueDoubleQuoted(e) {
    switch (e) {
      case B.QUOTATION_MARK: {
        this.state = U.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case B.AMPERSAND: {
        this.returnState = U.ATTRIBUTE_VALUE_DOUBLE_QUOTED, this.state = U.CHARACTER_REFERENCE;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.currentAttr.value += _n;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this.currentAttr.value += String.fromCodePoint(e);
    }
  }
  // Attribute value (single-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueSingleQuoted(e) {
    switch (e) {
      case B.APOSTROPHE: {
        this.state = U.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case B.AMPERSAND: {
        this.returnState = U.ATTRIBUTE_VALUE_SINGLE_QUOTED, this.state = U.CHARACTER_REFERENCE;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.currentAttr.value += _n;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this.currentAttr.value += String.fromCodePoint(e);
    }
  }
  // Attribute value (unquoted) state
  //------------------------------------------------------------------
  _stateAttributeValueUnquoted(e) {
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this._leaveAttrValue(), this.state = U.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case B.AMPERSAND: {
        this.returnState = U.ATTRIBUTE_VALUE_UNQUOTED, this.state = U.CHARACTER_REFERENCE;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._leaveAttrValue(), this.state = U.DATA, this.emitCurrentTagToken();
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), this.currentAttr.value += _n;
        break;
      }
      case B.QUOTATION_MARK:
      case B.APOSTROPHE:
      case B.LESS_THAN_SIGN:
      case B.EQUALS_SIGN:
      case B.GRAVE_ACCENT: {
        this._err(pe.unexpectedCharacterInUnquotedAttributeValue), this.currentAttr.value += String.fromCodePoint(e);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this.currentAttr.value += String.fromCodePoint(e);
    }
  }
  // After attribute value (quoted) state
  //------------------------------------------------------------------
  _stateAfterAttributeValueQuoted(e) {
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this._leaveAttrValue(), this.state = U.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case B.SOLIDUS: {
        this._leaveAttrValue(), this.state = U.SELF_CLOSING_START_TAG;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._leaveAttrValue(), this.state = U.DATA, this.emitCurrentTagToken();
        break;
      }
      case B.EOF: {
        this._err(pe.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingWhitespaceBetweenAttributes), this.state = U.BEFORE_ATTRIBUTE_NAME, this._stateBeforeAttributeName(e);
    }
  }
  // Self-closing start tag state
  //------------------------------------------------------------------
  _stateSelfClosingStartTag(e) {
    switch (e) {
      case B.GREATER_THAN_SIGN: {
        const n = this.currentToken;
        n.selfClosing = !0, this.state = U.DATA, this.emitCurrentTagToken();
        break;
      }
      case B.EOF: {
        this._err(pe.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.unexpectedSolidusInTag), this.state = U.BEFORE_ATTRIBUTE_NAME, this._stateBeforeAttributeName(e);
    }
  }
  // Bogus comment state
  //------------------------------------------------------------------
  _stateBogusComment(e) {
    const n = this.currentToken;
    switch (e) {
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA, this.emitCurrentComment(n);
        break;
      }
      case B.EOF: {
        this.emitCurrentComment(n), this._emitEOFToken();
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.data += _n;
        break;
      }
      default:
        n.data += String.fromCodePoint(e);
    }
  }
  // Markup declaration open state
  //------------------------------------------------------------------
  _stateMarkupDeclarationOpen(e) {
    this._consumeSequenceIfMatch(Rr.DASH_DASH, !0) ? (this._createCommentToken(Rr.DASH_DASH.length + 1), this.state = U.COMMENT_START) : this._consumeSequenceIfMatch(Rr.DOCTYPE, !1) ? (this.currentLocation = this.getCurrentLocation(Rr.DOCTYPE.length + 1), this.state = U.DOCTYPE) : this._consumeSequenceIfMatch(Rr.CDATA_START, !0) ? this.inForeignNode ? this.state = U.CDATA_SECTION : (this._err(pe.cdataInHtmlContent), this._createCommentToken(Rr.CDATA_START.length + 1), this.currentToken.data = "[CDATA[", this.state = U.BOGUS_COMMENT) : this._ensureHibernation() || (this._err(pe.incorrectlyOpenedComment), this._createCommentToken(2), this.state = U.BOGUS_COMMENT, this._stateBogusComment(e));
  }
  // Comment start state
  //------------------------------------------------------------------
  _stateCommentStart(e) {
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.COMMENT_START_DASH;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.abruptClosingOfEmptyComment), this.state = U.DATA;
        const n = this.currentToken;
        this.emitCurrentComment(n);
        break;
      }
      default:
        this.state = U.COMMENT, this._stateComment(e);
    }
  }
  // Comment start dash state
  //------------------------------------------------------------------
  _stateCommentStartDash(e) {
    const n = this.currentToken;
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.COMMENT_END;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.abruptClosingOfEmptyComment), this.state = U.DATA, this.emitCurrentComment(n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInComment), this.emitCurrentComment(n), this._emitEOFToken();
        break;
      }
      default:
        n.data += "-", this.state = U.COMMENT, this._stateComment(e);
    }
  }
  // Comment state
  //------------------------------------------------------------------
  _stateComment(e) {
    const n = this.currentToken;
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.COMMENT_END_DASH;
        break;
      }
      case B.LESS_THAN_SIGN: {
        n.data += "<", this.state = U.COMMENT_LESS_THAN_SIGN;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.data += _n;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInComment), this.emitCurrentComment(n), this._emitEOFToken();
        break;
      }
      default:
        n.data += String.fromCodePoint(e);
    }
  }
  // Comment less-than sign state
  //------------------------------------------------------------------
  _stateCommentLessThanSign(e) {
    const n = this.currentToken;
    switch (e) {
      case B.EXCLAMATION_MARK: {
        n.data += "!", this.state = U.COMMENT_LESS_THAN_SIGN_BANG;
        break;
      }
      case B.LESS_THAN_SIGN: {
        n.data += "<";
        break;
      }
      default:
        this.state = U.COMMENT, this._stateComment(e);
    }
  }
  // Comment less-than sign bang state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBang(e) {
    e === B.HYPHEN_MINUS ? this.state = U.COMMENT_LESS_THAN_SIGN_BANG_DASH : (this.state = U.COMMENT, this._stateComment(e));
  }
  // Comment less-than sign bang dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDash(e) {
    e === B.HYPHEN_MINUS ? this.state = U.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH : (this.state = U.COMMENT_END_DASH, this._stateCommentEndDash(e));
  }
  // Comment less-than sign bang dash dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDashDash(e) {
    e !== B.GREATER_THAN_SIGN && e !== B.EOF && this._err(pe.nestedComment), this.state = U.COMMENT_END, this._stateCommentEnd(e);
  }
  // Comment end dash state
  //------------------------------------------------------------------
  _stateCommentEndDash(e) {
    const n = this.currentToken;
    switch (e) {
      case B.HYPHEN_MINUS: {
        this.state = U.COMMENT_END;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInComment), this.emitCurrentComment(n), this._emitEOFToken();
        break;
      }
      default:
        n.data += "-", this.state = U.COMMENT, this._stateComment(e);
    }
  }
  // Comment end state
  //------------------------------------------------------------------
  _stateCommentEnd(e) {
    const n = this.currentToken;
    switch (e) {
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA, this.emitCurrentComment(n);
        break;
      }
      case B.EXCLAMATION_MARK: {
        this.state = U.COMMENT_END_BANG;
        break;
      }
      case B.HYPHEN_MINUS: {
        n.data += "-";
        break;
      }
      case B.EOF: {
        this._err(pe.eofInComment), this.emitCurrentComment(n), this._emitEOFToken();
        break;
      }
      default:
        n.data += "--", this.state = U.COMMENT, this._stateComment(e);
    }
  }
  // Comment end bang state
  //------------------------------------------------------------------
  _stateCommentEndBang(e) {
    const n = this.currentToken;
    switch (e) {
      case B.HYPHEN_MINUS: {
        n.data += "--!", this.state = U.COMMENT_END_DASH;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.incorrectlyClosedComment), this.state = U.DATA, this.emitCurrentComment(n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInComment), this.emitCurrentComment(n), this._emitEOFToken();
        break;
      }
      default:
        n.data += "--!", this.state = U.COMMENT, this._stateComment(e);
    }
  }
  // DOCTYPE state
  //------------------------------------------------------------------
  _stateDoctype(e) {
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this.state = U.BEFORE_DOCTYPE_NAME;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this.state = U.BEFORE_DOCTYPE_NAME, this._stateBeforeDoctypeName(e);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), this._createDoctypeToken(null);
        const n = this.currentToken;
        n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingWhitespaceBeforeDoctypeName), this.state = U.BEFORE_DOCTYPE_NAME, this._stateBeforeDoctypeName(e);
    }
  }
  // Before DOCTYPE name state
  //------------------------------------------------------------------
  _stateBeforeDoctypeName(e) {
    if (fl(e))
      this._createDoctypeToken(String.fromCharCode(xu(e))), this.state = U.DOCTYPE_NAME;
    else
      switch (e) {
        case B.SPACE:
        case B.LINE_FEED:
        case B.TABULATION:
        case B.FORM_FEED:
          break;
        case B.NULL: {
          this._err(pe.unexpectedNullCharacter), this._createDoctypeToken(_n), this.state = U.DOCTYPE_NAME;
          break;
        }
        case B.GREATER_THAN_SIGN: {
          this._err(pe.missingDoctypeName), this._createDoctypeToken(null);
          const n = this.currentToken;
          n.forceQuirks = !0, this.emitCurrentDoctype(n), this.state = U.DATA;
          break;
        }
        case B.EOF: {
          this._err(pe.eofInDoctype), this._createDoctypeToken(null);
          const n = this.currentToken;
          n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
          break;
        }
        default:
          this._createDoctypeToken(String.fromCodePoint(e)), this.state = U.DOCTYPE_NAME;
      }
  }
  // DOCTYPE name state
  //------------------------------------------------------------------
  _stateDoctypeName(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this.state = U.AFTER_DOCTYPE_NAME;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA, this.emitCurrentDoctype(n);
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.name += _n;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        n.name += String.fromCodePoint(fl(e) ? xu(e) : e);
    }
  }
  // After DOCTYPE name state
  //------------------------------------------------------------------
  _stateAfterDoctypeName(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA, this.emitCurrentDoctype(n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._consumeSequenceIfMatch(Rr.PUBLIC, !1) ? this.state = U.AFTER_DOCTYPE_PUBLIC_KEYWORD : this._consumeSequenceIfMatch(Rr.SYSTEM, !1) ? this.state = U.AFTER_DOCTYPE_SYSTEM_KEYWORD : this._ensureHibernation() || (this._err(pe.invalidCharacterSequenceAfterDoctypeName), n.forceQuirks = !0, this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e));
    }
  }
  // After DOCTYPE public keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicKeyword(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this.state = U.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case B.QUOTATION_MARK: {
        this._err(pe.missingWhitespaceAfterDoctypePublicKeyword), n.publicId = "", this.state = U.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case B.APOSTROPHE: {
        this._err(pe.missingWhitespaceAfterDoctypePublicKeyword), n.publicId = "", this.state = U.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.missingDoctypePublicIdentifier), n.forceQuirks = !0, this.state = U.DATA, this.emitCurrentDoctype(n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingQuoteBeforeDoctypePublicIdentifier), n.forceQuirks = !0, this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e);
    }
  }
  // Before DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypePublicIdentifier(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.QUOTATION_MARK: {
        n.publicId = "", this.state = U.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case B.APOSTROPHE: {
        n.publicId = "", this.state = U.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.missingDoctypePublicIdentifier), n.forceQuirks = !0, this.state = U.DATA, this.emitCurrentDoctype(n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingQuoteBeforeDoctypePublicIdentifier), n.forceQuirks = !0, this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e);
    }
  }
  // DOCTYPE public identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierDoubleQuoted(e) {
    const n = this.currentToken;
    switch (e) {
      case B.QUOTATION_MARK: {
        this.state = U.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.publicId += _n;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.abruptDoctypePublicIdentifier), n.forceQuirks = !0, this.emitCurrentDoctype(n), this.state = U.DATA;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        n.publicId += String.fromCodePoint(e);
    }
  }
  // DOCTYPE public identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierSingleQuoted(e) {
    const n = this.currentToken;
    switch (e) {
      case B.APOSTROPHE: {
        this.state = U.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.publicId += _n;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.abruptDoctypePublicIdentifier), n.forceQuirks = !0, this.emitCurrentDoctype(n), this.state = U.DATA;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        n.publicId += String.fromCodePoint(e);
    }
  }
  // After DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicIdentifier(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this.state = U.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA, this.emitCurrentDoctype(n);
        break;
      }
      case B.QUOTATION_MARK: {
        this._err(pe.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers), n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case B.APOSTROPHE: {
        this._err(pe.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers), n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingQuoteBeforeDoctypeSystemIdentifier), n.forceQuirks = !0, this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e);
    }
  }
  // Between DOCTYPE public and system identifiers state
  //------------------------------------------------------------------
  _stateBetweenDoctypePublicAndSystemIdentifiers(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(n), this.state = U.DATA;
        break;
      }
      case B.QUOTATION_MARK: {
        n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case B.APOSTROPHE: {
        n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingQuoteBeforeDoctypeSystemIdentifier), n.forceQuirks = !0, this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e);
    }
  }
  // After DOCTYPE system keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemKeyword(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED: {
        this.state = U.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case B.QUOTATION_MARK: {
        this._err(pe.missingWhitespaceAfterDoctypeSystemKeyword), n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case B.APOSTROPHE: {
        this._err(pe.missingWhitespaceAfterDoctypeSystemKeyword), n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.missingDoctypeSystemIdentifier), n.forceQuirks = !0, this.state = U.DATA, this.emitCurrentDoctype(n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingQuoteBeforeDoctypeSystemIdentifier), n.forceQuirks = !0, this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e);
    }
  }
  // Before DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypeSystemIdentifier(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.QUOTATION_MARK: {
        n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case B.APOSTROPHE: {
        n.systemId = "", this.state = U.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.missingDoctypeSystemIdentifier), n.forceQuirks = !0, this.state = U.DATA, this.emitCurrentDoctype(n);
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.missingQuoteBeforeDoctypeSystemIdentifier), n.forceQuirks = !0, this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e);
    }
  }
  // DOCTYPE system identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierDoubleQuoted(e) {
    const n = this.currentToken;
    switch (e) {
      case B.QUOTATION_MARK: {
        this.state = U.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.systemId += _n;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.abruptDoctypeSystemIdentifier), n.forceQuirks = !0, this.emitCurrentDoctype(n), this.state = U.DATA;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        n.systemId += String.fromCodePoint(e);
    }
  }
  // DOCTYPE system identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierSingleQuoted(e) {
    const n = this.currentToken;
    switch (e) {
      case B.APOSTROPHE: {
        this.state = U.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter), n.systemId += _n;
        break;
      }
      case B.GREATER_THAN_SIGN: {
        this._err(pe.abruptDoctypeSystemIdentifier), n.forceQuirks = !0, this.emitCurrentDoctype(n), this.state = U.DATA;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        n.systemId += String.fromCodePoint(e);
    }
  }
  // After DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemIdentifier(e) {
    const n = this.currentToken;
    switch (e) {
      case B.SPACE:
      case B.LINE_FEED:
      case B.TABULATION:
      case B.FORM_FEED:
        break;
      case B.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(n), this.state = U.DATA;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInDoctype), n.forceQuirks = !0, this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
      default:
        this._err(pe.unexpectedCharacterAfterDoctypeSystemIdentifier), this.state = U.BOGUS_DOCTYPE, this._stateBogusDoctype(e);
    }
  }
  // Bogus DOCTYPE state
  //------------------------------------------------------------------
  _stateBogusDoctype(e) {
    const n = this.currentToken;
    switch (e) {
      case B.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(n), this.state = U.DATA;
        break;
      }
      case B.NULL: {
        this._err(pe.unexpectedNullCharacter);
        break;
      }
      case B.EOF: {
        this.emitCurrentDoctype(n), this._emitEOFToken();
        break;
      }
    }
  }
  // CDATA section state
  //------------------------------------------------------------------
  _stateCdataSection(e) {
    switch (e) {
      case B.RIGHT_SQUARE_BRACKET: {
        this.state = U.CDATA_SECTION_BRACKET;
        break;
      }
      case B.EOF: {
        this._err(pe.eofInCdata), this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(e);
    }
  }
  // CDATA section bracket state
  //------------------------------------------------------------------
  _stateCdataSectionBracket(e) {
    e === B.RIGHT_SQUARE_BRACKET ? this.state = U.CDATA_SECTION_END : (this._emitChars("]"), this.state = U.CDATA_SECTION, this._stateCdataSection(e));
  }
  // CDATA section end state
  //------------------------------------------------------------------
  _stateCdataSectionEnd(e) {
    switch (e) {
      case B.GREATER_THAN_SIGN: {
        this.state = U.DATA;
        break;
      }
      case B.RIGHT_SQUARE_BRACKET: {
        this._emitChars("]");
        break;
      }
      default:
        this._emitChars("]]"), this.state = U.CDATA_SECTION, this._stateCdataSection(e);
    }
  }
  // Character reference state
  //------------------------------------------------------------------
  _stateCharacterReference(e) {
    e === B.NUMBER_SIGN ? this.state = U.NUMERIC_CHARACTER_REFERENCE : tE(e) ? (this.state = U.NAMED_CHARACTER_REFERENCE, this._stateNamedCharacterReference(e)) : (this._flushCodePointConsumedAsCharacterReference(B.AMPERSAND), this._reconsumeInState(this.returnState, e));
  }
  // Named character reference state
  //------------------------------------------------------------------
  _stateNamedCharacterReference(e) {
    const n = this._matchNamedCharacterReference(e);
    if (!this._ensureHibernation()) if (n) {
      for (let r = 0; r < n.length; r++)
        this._flushCodePointConsumedAsCharacterReference(n[r]);
      this.state = this.returnState;
    } else
      this._flushCodePointConsumedAsCharacterReference(B.AMPERSAND), this.state = U.AMBIGUOUS_AMPERSAND;
  }
  // Ambiguos ampersand state
  //------------------------------------------------------------------
  _stateAmbiguousAmpersand(e) {
    tE(e) ? this._flushCodePointConsumedAsCharacterReference(e) : (e === B.SEMICOLON && this._err(pe.unknownNamedCharacterReference), this._reconsumeInState(this.returnState, e));
  }
  // Numeric character reference state
  //------------------------------------------------------------------
  _stateNumericCharacterReference(e) {
    this.charRefCode = 0, e === B.LATIN_SMALL_X || e === B.LATIN_CAPITAL_X ? this.state = U.HEXADEMICAL_CHARACTER_REFERENCE_START : yl(e) ? (this.state = U.DECIMAL_CHARACTER_REFERENCE, this._stateDecimalCharacterReference(e)) : (this._err(pe.absenceOfDigitsInNumericCharacterReference), this._flushCodePointConsumedAsCharacterReference(B.AMPERSAND), this._flushCodePointConsumedAsCharacterReference(B.NUMBER_SIGN), this._reconsumeInState(this.returnState, e));
  }
  // Hexademical character reference start state
  //------------------------------------------------------------------
  _stateHexademicalCharacterReferenceStart(e) {
    gW(e) ? (this.state = U.HEXADEMICAL_CHARACTER_REFERENCE, this._stateHexademicalCharacterReference(e)) : (this._err(pe.absenceOfDigitsInNumericCharacterReference), this._flushCodePointConsumedAsCharacterReference(B.AMPERSAND), this._flushCodePointConsumedAsCharacterReference(B.NUMBER_SIGN), this._unconsume(2), this.state = this.returnState);
  }
  // Hexademical character reference state
  //------------------------------------------------------------------
  _stateHexademicalCharacterReference(e) {
    X4(e) ? this.charRefCode = this.charRefCode * 16 + e - 55 : Z4(e) ? this.charRefCode = this.charRefCode * 16 + e - 87 : yl(e) ? this.charRefCode = this.charRefCode * 16 + e - 48 : e === B.SEMICOLON ? this.state = U.NUMERIC_CHARACTER_REFERENCE_END : (this._err(pe.missingSemicolonAfterCharacterReference), this.state = U.NUMERIC_CHARACTER_REFERENCE_END, this._stateNumericCharacterReferenceEnd(e));
  }
  // Decimal character reference state
  //------------------------------------------------------------------
  _stateDecimalCharacterReference(e) {
    yl(e) ? this.charRefCode = this.charRefCode * 10 + e - 48 : e === B.SEMICOLON ? this.state = U.NUMERIC_CHARACTER_REFERENCE_END : (this._err(pe.missingSemicolonAfterCharacterReference), this.state = U.NUMERIC_CHARACTER_REFERENCE_END, this._stateNumericCharacterReferenceEnd(e));
  }
  // Numeric character reference end state
  //------------------------------------------------------------------
  _stateNumericCharacterReferenceEnd(e) {
    if (this.charRefCode === B.NULL)
      this._err(pe.nullCharacterReference), this.charRefCode = B.REPLACEMENT_CHARACTER;
    else if (this.charRefCode > 1114111)
      this._err(pe.characterReferenceOutsideUnicodeRange), this.charRefCode = B.REPLACEMENT_CHARACTER;
    else if (q4(this.charRefCode))
      this._err(pe.surrogateCharacterReference), this.charRefCode = B.REPLACEMENT_CHARACTER;
    else if ($4(this.charRefCode))
      this._err(pe.noncharacterCharacterReference);
    else if (V4(this.charRefCode) || this.charRefCode === B.CARRIAGE_RETURN) {
      this._err(pe.controlCharacterReference);
      const n = mW.get(this.charRefCode);
      n !== void 0 && (this.charRefCode = n);
    }
    this._flushCodePointConsumedAsCharacterReference(this.charRefCode), this._reconsumeInState(this.returnState, e);
  }
}
const e3 = /* @__PURE__ */ new Set([h.DD, h.DT, h.LI, h.OPTGROUP, h.OPTION, h.P, h.RB, h.RP, h.RT, h.RTC]), yC = /* @__PURE__ */ new Set([
  ...e3,
  h.CAPTION,
  h.COLGROUP,
  h.TBODY,
  h.TD,
  h.TFOOT,
  h.TH,
  h.THEAD,
  h.TR
]), Du = /* @__PURE__ */ new Map([
  [h.APPLET, Te.HTML],
  [h.CAPTION, Te.HTML],
  [h.HTML, Te.HTML],
  [h.MARQUEE, Te.HTML],
  [h.OBJECT, Te.HTML],
  [h.TABLE, Te.HTML],
  [h.TD, Te.HTML],
  [h.TEMPLATE, Te.HTML],
  [h.TH, Te.HTML],
  [h.ANNOTATION_XML, Te.MATHML],
  [h.MI, Te.MATHML],
  [h.MN, Te.MATHML],
  [h.MO, Te.MATHML],
  [h.MS, Te.MATHML],
  [h.MTEXT, Te.MATHML],
  [h.DESC, Te.SVG],
  [h.FOREIGN_OBJECT, Te.SVG],
  [h.TITLE, Te.SVG]
]), SW = [h.H1, h.H2, h.H3, h.H4, h.H5, h.H6], bW = [h.TR, h.TEMPLATE, h.HTML], TW = [h.TBODY, h.TFOOT, h.THEAD, h.TEMPLATE, h.HTML], yW = [h.TABLE, h.TEMPLATE, h.HTML], vW = [h.TD, h.TH];
class CW {
  get currentTmplContentOrNode() {
    return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
  }
  constructor(e, n, r) {
    this.treeAdapter = n, this.handler = r, this.items = [], this.tagIDs = [], this.stackTop = -1, this.tmplCount = 0, this.currentTagId = h.UNKNOWN, this.current = e;
  }
  //Index of element
  _indexOf(e) {
    return this.items.lastIndexOf(e, this.stackTop);
  }
  //Update current element
  _isInTemplate() {
    return this.currentTagId === h.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === Te.HTML;
  }
  _updateCurrentElement() {
    this.current = this.items[this.stackTop], this.currentTagId = this.tagIDs[this.stackTop];
  }
  //Mutations
  push(e, n) {
    this.stackTop++, this.items[this.stackTop] = e, this.current = e, this.tagIDs[this.stackTop] = n, this.currentTagId = n, this._isInTemplate() && this.tmplCount++, this.handler.onItemPush(e, n, !0);
  }
  pop() {
    const e = this.current;
    this.tmplCount > 0 && this._isInTemplate() && this.tmplCount--, this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(e, !0);
  }
  replace(e, n) {
    const r = this._indexOf(e);
    this.items[r] = n, r === this.stackTop && (this.current = n);
  }
  insertAfter(e, n, r) {
    const a = this._indexOf(e) + 1;
    this.items.splice(a, 0, n), this.tagIDs.splice(a, 0, r), this.stackTop++, a === this.stackTop && this._updateCurrentElement(), this.handler.onItemPush(this.current, this.currentTagId, a === this.stackTop);
  }
  popUntilTagNamePopped(e) {
    let n = this.stackTop + 1;
    do
      n = this.tagIDs.lastIndexOf(e, n - 1);
    while (n > 0 && this.treeAdapter.getNamespaceURI(this.items[n]) !== Te.HTML);
    this.shortenToLength(n < 0 ? 0 : n);
  }
  shortenToLength(e) {
    for (; this.stackTop >= e; ) {
      const n = this.current;
      this.tmplCount > 0 && this._isInTemplate() && (this.tmplCount -= 1), this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(n, this.stackTop < e);
    }
  }
  popUntilElementPopped(e) {
    const n = this._indexOf(e);
    this.shortenToLength(n < 0 ? 0 : n);
  }
  popUntilPopped(e, n) {
    const r = this._indexOfTagNames(e, n);
    this.shortenToLength(r < 0 ? 0 : r);
  }
  popUntilNumberedHeaderPopped() {
    this.popUntilPopped(SW, Te.HTML);
  }
  popUntilTableCellPopped() {
    this.popUntilPopped(vW, Te.HTML);
  }
  popAllUpToHtmlElement() {
    this.tmplCount = 0, this.shortenToLength(1);
  }
  _indexOfTagNames(e, n) {
    for (let r = this.stackTop; r >= 0; r--)
      if (e.includes(this.tagIDs[r]) && this.treeAdapter.getNamespaceURI(this.items[r]) === n)
        return r;
    return -1;
  }
  clearBackTo(e, n) {
    const r = this._indexOfTagNames(e, n);
    this.shortenToLength(r + 1);
  }
  clearBackToTableContext() {
    this.clearBackTo(yW, Te.HTML);
  }
  clearBackToTableBodyContext() {
    this.clearBackTo(TW, Te.HTML);
  }
  clearBackToTableRowContext() {
    this.clearBackTo(bW, Te.HTML);
  }
  remove(e) {
    const n = this._indexOf(e);
    n >= 0 && (n === this.stackTop ? this.pop() : (this.items.splice(n, 1), this.tagIDs.splice(n, 1), this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(e, !1)));
  }
  //Search
  tryPeekProperlyNestedBodyElement() {
    return this.stackTop >= 1 && this.tagIDs[1] === h.BODY ? this.items[1] : null;
  }
  contains(e) {
    return this._indexOf(e) > -1;
  }
  getCommonAncestor(e) {
    const n = this._indexOf(e) - 1;
    return n >= 0 ? this.items[n] : null;
  }
  isRootHtmlElementCurrent() {
    return this.stackTop === 0 && this.tagIDs[0] === h.HTML;
  }
  //Element in scope
  hasInScope(e) {
    for (let n = this.stackTop; n >= 0; n--) {
      const r = this.tagIDs[n], a = this.treeAdapter.getNamespaceURI(this.items[n]);
      if (r === e && a === Te.HTML)
        return !0;
      if (Du.get(r) === a)
        return !1;
    }
    return !0;
  }
  hasNumberedHeaderInScope() {
    for (let e = this.stackTop; e >= 0; e--) {
      const n = this.tagIDs[e], r = this.treeAdapter.getNamespaceURI(this.items[e]);
      if (j4(n) && r === Te.HTML)
        return !0;
      if (Du.get(n) === r)
        return !1;
    }
    return !0;
  }
  hasInListItemScope(e) {
    for (let n = this.stackTop; n >= 0; n--) {
      const r = this.tagIDs[n], a = this.treeAdapter.getNamespaceURI(this.items[n]);
      if (r === e && a === Te.HTML)
        return !0;
      if ((r === h.UL || r === h.OL) && a === Te.HTML || Du.get(r) === a)
        return !1;
    }
    return !0;
  }
  hasInButtonScope(e) {
    for (let n = this.stackTop; n >= 0; n--) {
      const r = this.tagIDs[n], a = this.treeAdapter.getNamespaceURI(this.items[n]);
      if (r === e && a === Te.HTML)
        return !0;
      if (r === h.BUTTON && a === Te.HTML || Du.get(r) === a)
        return !1;
    }
    return !0;
  }
  hasInTableScope(e) {
    for (let n = this.stackTop; n >= 0; n--) {
      const r = this.tagIDs[n];
      if (this.treeAdapter.getNamespaceURI(this.items[n]) === Te.HTML) {
        if (r === e)
          return !0;
        if (r === h.TABLE || r === h.TEMPLATE || r === h.HTML)
          return !1;
      }
    }
    return !0;
  }
  hasTableBodyContextInTableScope() {
    for (let e = this.stackTop; e >= 0; e--) {
      const n = this.tagIDs[e];
      if (this.treeAdapter.getNamespaceURI(this.items[e]) === Te.HTML) {
        if (n === h.TBODY || n === h.THEAD || n === h.TFOOT)
          return !0;
        if (n === h.TABLE || n === h.HTML)
          return !1;
      }
    }
    return !0;
  }
  hasInSelectScope(e) {
    for (let n = this.stackTop; n >= 0; n--) {
      const r = this.tagIDs[n];
      if (this.treeAdapter.getNamespaceURI(this.items[n]) === Te.HTML) {
        if (r === e)
          return !0;
        if (r !== h.OPTION && r !== h.OPTGROUP)
          return !1;
      }
    }
    return !0;
  }
  //Implied end tags
  generateImpliedEndTags() {
    for (; e3.has(this.currentTagId); )
      this.pop();
  }
  generateImpliedEndTagsThoroughly() {
    for (; yC.has(this.currentTagId); )
      this.pop();
  }
  generateImpliedEndTagsWithExclusion(e) {
    for (; this.currentTagId !== e && yC.has(this.currentTagId); )
      this.pop();
  }
}
const E_ = 3;
var Ea;
(function(t) {
  t[t.Marker = 0] = "Marker", t[t.Element = 1] = "Element";
})(Ea = Ea || (Ea = {}));
const vC = { type: Ea.Marker };
class RW {
  constructor(e) {
    this.treeAdapter = e, this.entries = [], this.bookmark = null;
  }
  //Noah Ark's condition
  //OPTIMIZATION: at first we try to find possible candidates for exclusion using
  //lightweight heuristics without thorough attributes check.
  _getNoahArkConditionCandidates(e, n) {
    const r = [], a = n.length, i = this.treeAdapter.getTagName(e), s = this.treeAdapter.getNamespaceURI(e);
    for (let l = 0; l < this.entries.length; l++) {
      const c = this.entries[l];
      if (c.type === Ea.Marker)
        break;
      const { element: d } = c;
      if (this.treeAdapter.getTagName(d) === i && this.treeAdapter.getNamespaceURI(d) === s) {
        const p = this.treeAdapter.getAttrList(d);
        p.length === a && r.push({ idx: l, attrs: p });
      }
    }
    return r;
  }
  _ensureNoahArkCondition(e) {
    if (this.entries.length < E_)
      return;
    const n = this.treeAdapter.getAttrList(e), r = this._getNoahArkConditionCandidates(e, n);
    if (r.length < E_)
      return;
    const a = new Map(n.map((s) => [s.name, s.value]));
    let i = 0;
    for (let s = 0; s < r.length; s++) {
      const l = r[s];
      l.attrs.every((c) => a.get(c.name) === c.value) && (i += 1, i >= E_ && this.entries.splice(l.idx, 1));
    }
  }
  //Mutations
  insertMarker() {
    this.entries.unshift(vC);
  }
  pushElement(e, n) {
    this._ensureNoahArkCondition(e), this.entries.unshift({
      type: Ea.Element,
      element: e,
      token: n
    });
  }
  insertElementAfterBookmark(e, n) {
    const r = this.entries.indexOf(this.bookmark);
    this.entries.splice(r, 0, {
      type: Ea.Element,
      element: e,
      token: n
    });
  }
  removeEntry(e) {
    const n = this.entries.indexOf(e);
    n >= 0 && this.entries.splice(n, 1);
  }
  /**
   * Clears the list of formatting elements up to the last marker.
   *
   * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker
   */
  clearToLastMarker() {
    const e = this.entries.indexOf(vC);
    e >= 0 ? this.entries.splice(0, e + 1) : this.entries.length = 0;
  }
  //Search
  getElementEntryInScopeWithTagName(e) {
    const n = this.entries.find((r) => r.type === Ea.Marker || this.treeAdapter.getTagName(r.element) === e);
    return n && n.type === Ea.Element ? n : null;
  }
  getElementEntry(e) {
    return this.entries.find((n) => n.type === Ea.Element && n.element === e);
  }
}
function CC(t) {
  return {
    nodeName: "#text",
    value: t,
    parentNode: null
  };
}
const Ws = {
  //Node construction
  createDocument() {
    return {
      nodeName: "#document",
      mode: Yr.NO_QUIRKS,
      childNodes: []
    };
  },
  createDocumentFragment() {
    return {
      nodeName: "#document-fragment",
      childNodes: []
    };
  },
  createElement(t, e, n) {
    return {
      nodeName: t,
      tagName: t,
      attrs: n,
      namespaceURI: e,
      childNodes: [],
      parentNode: null
    };
  },
  createCommentNode(t) {
    return {
      nodeName: "#comment",
      data: t,
      parentNode: null
    };
  },
  //Tree mutation
  appendChild(t, e) {
    t.childNodes.push(e), e.parentNode = t;
  },
  insertBefore(t, e, n) {
    const r = t.childNodes.indexOf(n);
    t.childNodes.splice(r, 0, e), e.parentNode = t;
  },
  setTemplateContent(t, e) {
    t.content = e;
  },
  getTemplateContent(t) {
    return t.content;
  },
  setDocumentType(t, e, n, r) {
    const a = t.childNodes.find((i) => i.nodeName === "#documentType");
    if (a)
      a.name = e, a.publicId = n, a.systemId = r;
    else {
      const i = {
        nodeName: "#documentType",
        name: e,
        publicId: n,
        systemId: r,
        parentNode: null
      };
      Ws.appendChild(t, i);
    }
  },
  setDocumentMode(t, e) {
    t.mode = e;
  },
  getDocumentMode(t) {
    return t.mode;
  },
  detachNode(t) {
    if (t.parentNode) {
      const e = t.parentNode.childNodes.indexOf(t);
      t.parentNode.childNodes.splice(e, 1), t.parentNode = null;
    }
  },
  insertText(t, e) {
    if (t.childNodes.length > 0) {
      const n = t.childNodes[t.childNodes.length - 1];
      if (Ws.isTextNode(n)) {
        n.value += e;
        return;
      }
    }
    Ws.appendChild(t, CC(e));
  },
  insertTextBefore(t, e, n) {
    const r = t.childNodes[t.childNodes.indexOf(n) - 1];
    r && Ws.isTextNode(r) ? r.value += e : Ws.insertBefore(t, CC(e), n);
  },
  adoptAttributes(t, e) {
    const n = new Set(t.attrs.map((r) => r.name));
    for (let r = 0; r < e.length; r++)
      n.has(e[r].name) || t.attrs.push(e[r]);
  },
  //Tree traversing
  getFirstChild(t) {
    return t.childNodes[0];
  },
  getChildNodes(t) {
    return t.childNodes;
  },
  getParentNode(t) {
    return t.parentNode;
  },
  getAttrList(t) {
    return t.attrs;
  },
  //Node data
  getTagName(t) {
    return t.tagName;
  },
  getNamespaceURI(t) {
    return t.namespaceURI;
  },
  getTextNodeContent(t) {
    return t.value;
  },
  getCommentNodeContent(t) {
    return t.data;
  },
  getDocumentTypeNodeName(t) {
    return t.name;
  },
  getDocumentTypeNodePublicId(t) {
    return t.publicId;
  },
  getDocumentTypeNodeSystemId(t) {
    return t.systemId;
  },
  //Node types
  isTextNode(t) {
    return t.nodeName === "#text";
  },
  isCommentNode(t) {
    return t.nodeName === "#comment";
  },
  isDocumentTypeNode(t) {
    return t.nodeName === "#documentType";
  },
  isElementNode(t) {
    return Object.prototype.hasOwnProperty.call(t, "tagName");
  },
  // Source code location
  setNodeSourceCodeLocation(t, e) {
    t.sourceCodeLocation = e;
  },
  getNodeSourceCodeLocation(t) {
    return t.sourceCodeLocation;
  },
  updateNodeSourceCodeLocation(t, e) {
    t.sourceCodeLocation = { ...t.sourceCodeLocation, ...e };
  }
}, t3 = "html", AW = "about:legacy-compat", OW = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", n3 = [
  "+//silmaril//dtd html pro v0r11 19970101//",
  "-//as//dtd html 3.0 aswedit + extensions//",
  "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
  "-//ietf//dtd html 2.0 level 1//",
  "-//ietf//dtd html 2.0 level 2//",
  "-//ietf//dtd html 2.0 strict level 1//",
  "-//ietf//dtd html 2.0 strict level 2//",
  "-//ietf//dtd html 2.0 strict//",
  "-//ietf//dtd html 2.0//",
  "-//ietf//dtd html 2.1e//",
  "-//ietf//dtd html 3.0//",
  "-//ietf//dtd html 3.2 final//",
  "-//ietf//dtd html 3.2//",
  "-//ietf//dtd html 3//",
  "-//ietf//dtd html level 0//",
  "-//ietf//dtd html level 1//",
  "-//ietf//dtd html level 2//",
  "-//ietf//dtd html level 3//",
  "-//ietf//dtd html strict level 0//",
  "-//ietf//dtd html strict level 1//",
  "-//ietf//dtd html strict level 2//",
  "-//ietf//dtd html strict level 3//",
  "-//ietf//dtd html strict//",
  "-//ietf//dtd html//",
  "-//metrius//dtd metrius presentational//",
  "-//microsoft//dtd internet explorer 2.0 html strict//",
  "-//microsoft//dtd internet explorer 2.0 html//",
  "-//microsoft//dtd internet explorer 2.0 tables//",
  "-//microsoft//dtd internet explorer 3.0 html strict//",
  "-//microsoft//dtd internet explorer 3.0 html//",
  "-//microsoft//dtd internet explorer 3.0 tables//",
  "-//netscape comm. corp.//dtd html//",
  "-//netscape comm. corp.//dtd strict html//",
  "-//o'reilly and associates//dtd html 2.0//",
  "-//o'reilly and associates//dtd html extended 1.0//",
  "-//o'reilly and associates//dtd html extended relaxed 1.0//",
  "-//sq//dtd html 2.0 hotmetal + extensions//",
  "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
  "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
  "-//spyglass//dtd html 2.0 extended//",
  "-//sun microsystems corp.//dtd hotjava html//",
  "-//sun microsystems corp.//dtd hotjava strict html//",
  "-//w3c//dtd html 3 1995-03-24//",
  "-//w3c//dtd html 3.2 draft//",
  "-//w3c//dtd html 3.2 final//",
  "-//w3c//dtd html 3.2//",
  "-//w3c//dtd html 3.2s draft//",
  "-//w3c//dtd html 4.0 frameset//",
  "-//w3c//dtd html 4.0 transitional//",
  "-//w3c//dtd html experimental 19960712//",
  "-//w3c//dtd html experimental 970421//",
  "-//w3c//dtd w3 html//",
  "-//w3o//dtd w3 html 3.0//",
  "-//webtechs//dtd mozilla html 2.0//",
  "-//webtechs//dtd mozilla html//"
], NW = [
  ...n3,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
], IW = /* @__PURE__ */ new Set([
  "-//w3o//dtd w3 html strict 3.0//en//",
  "-/w3c/dtd html 4.0 transitional/en",
  "html"
]), r3 = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"], xW = [
  ...r3,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];
function RC(t, e) {
  return e.some((n) => t.startsWith(n));
}
function DW(t) {
  return t.name === t3 && t.publicId === null && (t.systemId === null || t.systemId === AW);
}
function wW(t) {
  if (t.name !== t3)
    return Yr.QUIRKS;
  const { systemId: e } = t;
  if (e && e.toLowerCase() === OW)
    return Yr.QUIRKS;
  let { publicId: n } = t;
  if (n !== null) {
    if (n = n.toLowerCase(), IW.has(n))
      return Yr.QUIRKS;
    let r = e === null ? NW : n3;
    if (RC(n, r))
      return Yr.QUIRKS;
    if (r = e === null ? r3 : xW, RC(n, r))
      return Yr.LIMITED_QUIRKS;
  }
  return Yr.NO_QUIRKS;
}
const AC = {
  TEXT_HTML: "text/html",
  APPLICATION_XML: "application/xhtml+xml"
}, LW = "definitionurl", MW = "definitionURL", kW = new Map([
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map((t) => [t.toLowerCase(), t])), PW = /* @__PURE__ */ new Map([
  ["xlink:actuate", { prefix: "xlink", name: "actuate", namespace: Te.XLINK }],
  ["xlink:arcrole", { prefix: "xlink", name: "arcrole", namespace: Te.XLINK }],
  ["xlink:href", { prefix: "xlink", name: "href", namespace: Te.XLINK }],
  ["xlink:role", { prefix: "xlink", name: "role", namespace: Te.XLINK }],
  ["xlink:show", { prefix: "xlink", name: "show", namespace: Te.XLINK }],
  ["xlink:title", { prefix: "xlink", name: "title", namespace: Te.XLINK }],
  ["xlink:type", { prefix: "xlink", name: "type", namespace: Te.XLINK }],
  ["xml:base", { prefix: "xml", name: "base", namespace: Te.XML }],
  ["xml:lang", { prefix: "xml", name: "lang", namespace: Te.XML }],
  ["xml:space", { prefix: "xml", name: "space", namespace: Te.XML }],
  ["xmlns", { prefix: "", name: "xmlns", namespace: Te.XMLNS }],
  ["xmlns:xlink", { prefix: "xmlns", name: "xlink", namespace: Te.XMLNS }]
]), FW = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map((t) => [t.toLowerCase(), t])), BW = /* @__PURE__ */ new Set([
  h.B,
  h.BIG,
  h.BLOCKQUOTE,
  h.BODY,
  h.BR,
  h.CENTER,
  h.CODE,
  h.DD,
  h.DIV,
  h.DL,
  h.DT,
  h.EM,
  h.EMBED,
  h.H1,
  h.H2,
  h.H3,
  h.H4,
  h.H5,
  h.H6,
  h.HEAD,
  h.HR,
  h.I,
  h.IMG,
  h.LI,
  h.LISTING,
  h.MENU,
  h.META,
  h.NOBR,
  h.OL,
  h.P,
  h.PRE,
  h.RUBY,
  h.S,
  h.SMALL,
  h.SPAN,
  h.STRONG,
  h.STRIKE,
  h.SUB,
  h.SUP,
  h.TABLE,
  h.TT,
  h.U,
  h.UL,
  h.VAR
]);
function UW(t) {
  const e = t.tagID;
  return e === h.FONT && t.attrs.some(({ name: r }) => r === Pi.COLOR || r === Pi.SIZE || r === Pi.FACE) || BW.has(e);
}
function a3(t) {
  for (let e = 0; e < t.attrs.length; e++)
    if (t.attrs[e].name === LW) {
      t.attrs[e].name = MW;
      break;
    }
}
function i3(t) {
  for (let e = 0; e < t.attrs.length; e++) {
    const n = kW.get(t.attrs[e].name);
    n != null && (t.attrs[e].name = n);
  }
}
function D1(t) {
  for (let e = 0; e < t.attrs.length; e++) {
    const n = PW.get(t.attrs[e].name);
    n && (t.attrs[e].prefix = n.prefix, t.attrs[e].name = n.name, t.attrs[e].namespace = n.namespace);
  }
}
function GW(t) {
  const e = FW.get(t.tagName);
  e != null && (t.tagName = e, t.tagID = bo(t.tagName));
}
function HW(t, e) {
  return e === Te.MATHML && (t === h.MI || t === h.MO || t === h.MN || t === h.MS || t === h.MTEXT);
}
function YW(t, e, n) {
  if (e === Te.MATHML && t === h.ANNOTATION_XML) {
    for (let r = 0; r < n.length; r++)
      if (n[r].name === Pi.ENCODING) {
        const a = n[r].value.toLowerCase();
        return a === AC.TEXT_HTML || a === AC.APPLICATION_XML;
      }
  }
  return e === Te.SVG && (t === h.FOREIGN_OBJECT || t === h.DESC || t === h.TITLE);
}
function zW(t, e, n, r) {
  return (!r || r === Te.HTML) && YW(t, e, n) || (!r || r === Te.MATHML) && HW(t, e);
}
const qW = "hidden", VW = 8, $W = 3;
var V;
(function(t) {
  t[t.INITIAL = 0] = "INITIAL", t[t.BEFORE_HTML = 1] = "BEFORE_HTML", t[t.BEFORE_HEAD = 2] = "BEFORE_HEAD", t[t.IN_HEAD = 3] = "IN_HEAD", t[t.IN_HEAD_NO_SCRIPT = 4] = "IN_HEAD_NO_SCRIPT", t[t.AFTER_HEAD = 5] = "AFTER_HEAD", t[t.IN_BODY = 6] = "IN_BODY", t[t.TEXT = 7] = "TEXT", t[t.IN_TABLE = 8] = "IN_TABLE", t[t.IN_TABLE_TEXT = 9] = "IN_TABLE_TEXT", t[t.IN_CAPTION = 10] = "IN_CAPTION", t[t.IN_COLUMN_GROUP = 11] = "IN_COLUMN_GROUP", t[t.IN_TABLE_BODY = 12] = "IN_TABLE_BODY", t[t.IN_ROW = 13] = "IN_ROW", t[t.IN_CELL = 14] = "IN_CELL", t[t.IN_SELECT = 15] = "IN_SELECT", t[t.IN_SELECT_IN_TABLE = 16] = "IN_SELECT_IN_TABLE", t[t.IN_TEMPLATE = 17] = "IN_TEMPLATE", t[t.AFTER_BODY = 18] = "AFTER_BODY", t[t.IN_FRAMESET = 19] = "IN_FRAMESET", t[t.AFTER_FRAMESET = 20] = "AFTER_FRAMESET", t[t.AFTER_AFTER_BODY = 21] = "AFTER_AFTER_BODY", t[t.AFTER_AFTER_FRAMESET = 22] = "AFTER_AFTER_FRAMESET";
})(V || (V = {}));
const WW = {
  startLine: -1,
  startCol: -1,
  startOffset: -1,
  endLine: -1,
  endCol: -1,
  endOffset: -1
}, s3 = /* @__PURE__ */ new Set([h.TABLE, h.TBODY, h.TFOOT, h.THEAD, h.TR]), OC = {
  scriptingEnabled: !0,
  sourceCodeLocationInfo: !1,
  treeAdapter: Ws,
  onParseError: null
};
class NC {
  constructor(e, n, r = null, a = null) {
    this.fragmentContext = r, this.scriptHandler = a, this.currentToken = null, this.stopped = !1, this.insertionMode = V.INITIAL, this.originalInsertionMode = V.INITIAL, this.headElement = null, this.formElement = null, this.currentNotInHTML = !1, this.tmplInsertionModeStack = [], this.pendingCharacterTokens = [], this.hasNonWhitespacePendingCharacterToken = !1, this.framesetOk = !0, this.skipNextNewLine = !1, this.fosterParentingEnabled = !1, this.options = {
      ...OC,
      ...e
    }, this.treeAdapter = this.options.treeAdapter, this.onParseError = this.options.onParseError, this.onParseError && (this.options.sourceCodeLocationInfo = !0), this.document = n ?? this.treeAdapter.createDocument(), this.tokenizer = new EW(this.options, this), this.activeFormattingElements = new RW(this.treeAdapter), this.fragmentContextID = r ? bo(this.treeAdapter.getTagName(r)) : h.UNKNOWN, this._setContextModes(r ?? this.document, this.fragmentContextID), this.openElements = new CW(this.document, this.treeAdapter, this);
  }
  // API
  static parse(e, n) {
    const r = new this(n);
    return r.tokenizer.write(e, !0), r.document;
  }
  static getFragmentParser(e, n) {
    const r = {
      ...OC,
      ...n
    };
    e ?? (e = r.treeAdapter.createElement(ie.TEMPLATE, Te.HTML, []));
    const a = r.treeAdapter.createElement("documentmock", Te.HTML, []), i = new this(r, a, e);
    return i.fragmentContextID === h.TEMPLATE && i.tmplInsertionModeStack.unshift(V.IN_TEMPLATE), i._initTokenizerForFragmentParsing(), i._insertFakeRootElement(), i._resetInsertionMode(), i._findFormInFragmentContext(), i;
  }
  getFragment() {
    const e = this.treeAdapter.getFirstChild(this.document), n = this.treeAdapter.createDocumentFragment();
    return this._adoptNodes(e, n), n;
  }
  //Errors
  _err(e, n, r) {
    var a;
    if (!this.onParseError)
      return;
    const i = (a = e.location) !== null && a !== void 0 ? a : WW, s = {
      code: n,
      startLine: i.startLine,
      startCol: i.startCol,
      startOffset: i.startOffset,
      endLine: r ? i.startLine : i.endLine,
      endCol: r ? i.startCol : i.endCol,
      endOffset: r ? i.startOffset : i.endOffset
    };
    this.onParseError(s);
  }
  //Stack events
  onItemPush(e, n, r) {
    var a, i;
    (i = (a = this.treeAdapter).onItemPush) === null || i === void 0 || i.call(a, e), r && this.openElements.stackTop > 0 && this._setContextModes(e, n);
  }
  onItemPop(e, n) {
    var r, a;
    if (this.options.sourceCodeLocationInfo && this._setEndLocation(e, this.currentToken), (a = (r = this.treeAdapter).onItemPop) === null || a === void 0 || a.call(r, e, this.openElements.current), n) {
      let i, s;
      this.openElements.stackTop === 0 && this.fragmentContext ? (i = this.fragmentContext, s = this.fragmentContextID) : { current: i, currentTagId: s } = this.openElements, this._setContextModes(i, s);
    }
  }
  _setContextModes(e, n) {
    const r = e === this.document || this.treeAdapter.getNamespaceURI(e) === Te.HTML;
    this.currentNotInHTML = !r, this.tokenizer.inForeignNode = !r && !this._isIntegrationPoint(n, e);
  }
  _switchToTextParsing(e, n) {
    this._insertElement(e, Te.HTML), this.tokenizer.state = n, this.originalInsertionMode = this.insertionMode, this.insertionMode = V.TEXT;
  }
  switchToPlaintextParsing() {
    this.insertionMode = V.TEXT, this.originalInsertionMode = V.IN_BODY, this.tokenizer.state = xn.PLAINTEXT;
  }
  //Fragment parsing
  _getAdjustedCurrentElement() {
    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
  }
  _findFormInFragmentContext() {
    let e = this.fragmentContext;
    for (; e; ) {
      if (this.treeAdapter.getTagName(e) === ie.FORM) {
        this.formElement = e;
        break;
      }
      e = this.treeAdapter.getParentNode(e);
    }
  }
  _initTokenizerForFragmentParsing() {
    if (!(!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== Te.HTML))
      switch (this.fragmentContextID) {
        case h.TITLE:
        case h.TEXTAREA: {
          this.tokenizer.state = xn.RCDATA;
          break;
        }
        case h.STYLE:
        case h.XMP:
        case h.IFRAME:
        case h.NOEMBED:
        case h.NOFRAMES:
        case h.NOSCRIPT: {
          this.tokenizer.state = xn.RAWTEXT;
          break;
        }
        case h.SCRIPT: {
          this.tokenizer.state = xn.SCRIPT_DATA;
          break;
        }
        case h.PLAINTEXT: {
          this.tokenizer.state = xn.PLAINTEXT;
          break;
        }
      }
  }
  //Tree mutation
  _setDocumentType(e) {
    const n = e.name || "", r = e.publicId || "", a = e.systemId || "";
    if (this.treeAdapter.setDocumentType(this.document, n, r, a), e.location) {
      const s = this.treeAdapter.getChildNodes(this.document).find((l) => this.treeAdapter.isDocumentTypeNode(l));
      s && this.treeAdapter.setNodeSourceCodeLocation(s, e.location);
    }
  }
  _attachElementToTree(e, n) {
    if (this.options.sourceCodeLocationInfo) {
      const r = n && {
        ...n,
        startTag: n
      };
      this.treeAdapter.setNodeSourceCodeLocation(e, r);
    }
    if (this._shouldFosterParentOnInsertion())
      this._fosterParentElement(e);
    else {
      const r = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.appendChild(r, e);
    }
  }
  _appendElement(e, n) {
    const r = this.treeAdapter.createElement(e.tagName, n, e.attrs);
    this._attachElementToTree(r, e.location);
  }
  _insertElement(e, n) {
    const r = this.treeAdapter.createElement(e.tagName, n, e.attrs);
    this._attachElementToTree(r, e.location), this.openElements.push(r, e.tagID);
  }
  _insertFakeElement(e, n) {
    const r = this.treeAdapter.createElement(e, Te.HTML, []);
    this._attachElementToTree(r, null), this.openElements.push(r, n);
  }
  _insertTemplate(e) {
    const n = this.treeAdapter.createElement(e.tagName, Te.HTML, e.attrs), r = this.treeAdapter.createDocumentFragment();
    this.treeAdapter.setTemplateContent(n, r), this._attachElementToTree(n, e.location), this.openElements.push(n, e.tagID), this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(r, null);
  }
  _insertFakeRootElement() {
    const e = this.treeAdapter.createElement(ie.HTML, Te.HTML, []);
    this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(e, null), this.treeAdapter.appendChild(this.openElements.current, e), this.openElements.push(e, h.HTML);
  }
  _appendCommentNode(e, n) {
    const r = this.treeAdapter.createCommentNode(e.data);
    this.treeAdapter.appendChild(n, r), this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(r, e.location);
  }
  _insertCharacters(e) {
    let n, r;
    if (this._shouldFosterParentOnInsertion() ? ({ parent: n, beforeElement: r } = this._findFosterParentingLocation(), r ? this.treeAdapter.insertTextBefore(n, e.chars, r) : this.treeAdapter.insertText(n, e.chars)) : (n = this.openElements.currentTmplContentOrNode, this.treeAdapter.insertText(n, e.chars)), !e.location)
      return;
    const a = this.treeAdapter.getChildNodes(n), i = r ? a.lastIndexOf(r) : a.length, s = a[i - 1];
    if (this.treeAdapter.getNodeSourceCodeLocation(s)) {
      const { endLine: c, endCol: d, endOffset: p } = e.location;
      this.treeAdapter.updateNodeSourceCodeLocation(s, { endLine: c, endCol: d, endOffset: p });
    } else this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(s, e.location);
  }
  _adoptNodes(e, n) {
    for (let r = this.treeAdapter.getFirstChild(e); r; r = this.treeAdapter.getFirstChild(e))
      this.treeAdapter.detachNode(r), this.treeAdapter.appendChild(n, r);
  }
  _setEndLocation(e, n) {
    if (this.treeAdapter.getNodeSourceCodeLocation(e) && n.location) {
      const r = n.location, a = this.treeAdapter.getTagName(e), i = (
        // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
        // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
        n.type === Ot.END_TAG && a === n.tagName ? {
          endTag: { ...r },
          endLine: r.endLine,
          endCol: r.endCol,
          endOffset: r.endOffset
        } : {
          endLine: r.startLine,
          endCol: r.startCol,
          endOffset: r.startOffset
        }
      );
      this.treeAdapter.updateNodeSourceCodeLocation(e, i);
    }
  }
  //Token processing
  shouldProcessStartTagTokenInForeignContent(e) {
    if (!this.currentNotInHTML)
      return !1;
    let n, r;
    return this.openElements.stackTop === 0 && this.fragmentContext ? (n = this.fragmentContext, r = this.fragmentContextID) : { current: n, currentTagId: r } = this.openElements, e.tagID === h.SVG && this.treeAdapter.getTagName(n) === ie.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(n) === Te.MATHML ? !1 : (
      // Check that `current` is not an integration point for HTML or MathML elements.
      this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML
      // integration point.
      (e.tagID === h.MGLYPH || e.tagID === h.MALIGNMARK) && !this._isIntegrationPoint(r, n, Te.HTML)
    );
  }
  _processToken(e) {
    switch (e.type) {
      case Ot.CHARACTER: {
        this.onCharacter(e);
        break;
      }
      case Ot.NULL_CHARACTER: {
        this.onNullCharacter(e);
        break;
      }
      case Ot.COMMENT: {
        this.onComment(e);
        break;
      }
      case Ot.DOCTYPE: {
        this.onDoctype(e);
        break;
      }
      case Ot.START_TAG: {
        this._processStartTag(e);
        break;
      }
      case Ot.END_TAG: {
        this.onEndTag(e);
        break;
      }
      case Ot.EOF: {
        this.onEof(e);
        break;
      }
      case Ot.WHITESPACE_CHARACTER: {
        this.onWhitespaceCharacter(e);
        break;
      }
    }
  }
  //Integration points
  _isIntegrationPoint(e, n, r) {
    const a = this.treeAdapter.getNamespaceURI(n), i = this.treeAdapter.getAttrList(n);
    return zW(e, a, i, r);
  }
  //Active formatting elements reconstruction
  _reconstructActiveFormattingElements() {
    const e = this.activeFormattingElements.entries.length;
    if (e) {
      const n = this.activeFormattingElements.entries.findIndex((a) => a.type === Ea.Marker || this.openElements.contains(a.element)), r = n < 0 ? e - 1 : n - 1;
      for (let a = r; a >= 0; a--) {
        const i = this.activeFormattingElements.entries[a];
        this._insertElement(i.token, this.treeAdapter.getNamespaceURI(i.element)), i.element = this.openElements.current;
      }
    }
  }
  //Close elements
  _closeTableCell() {
    this.openElements.generateImpliedEndTags(), this.openElements.popUntilTableCellPopped(), this.activeFormattingElements.clearToLastMarker(), this.insertionMode = V.IN_ROW;
  }
  _closePElement() {
    this.openElements.generateImpliedEndTagsWithExclusion(h.P), this.openElements.popUntilTagNamePopped(h.P);
  }
  //Insertion modes
  _resetInsertionMode() {
    for (let e = this.openElements.stackTop; e >= 0; e--)
      switch (e === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[e]) {
        case h.TR: {
          this.insertionMode = V.IN_ROW;
          return;
        }
        case h.TBODY:
        case h.THEAD:
        case h.TFOOT: {
          this.insertionMode = V.IN_TABLE_BODY;
          return;
        }
        case h.CAPTION: {
          this.insertionMode = V.IN_CAPTION;
          return;
        }
        case h.COLGROUP: {
          this.insertionMode = V.IN_COLUMN_GROUP;
          return;
        }
        case h.TABLE: {
          this.insertionMode = V.IN_TABLE;
          return;
        }
        case h.BODY: {
          this.insertionMode = V.IN_BODY;
          return;
        }
        case h.FRAMESET: {
          this.insertionMode = V.IN_FRAMESET;
          return;
        }
        case h.SELECT: {
          this._resetInsertionModeForSelect(e);
          return;
        }
        case h.TEMPLATE: {
          this.insertionMode = this.tmplInsertionModeStack[0];
          return;
        }
        case h.HTML: {
          this.insertionMode = this.headElement ? V.AFTER_HEAD : V.BEFORE_HEAD;
          return;
        }
        case h.TD:
        case h.TH: {
          if (e > 0) {
            this.insertionMode = V.IN_CELL;
            return;
          }
          break;
        }
        case h.HEAD: {
          if (e > 0) {
            this.insertionMode = V.IN_HEAD;
            return;
          }
          break;
        }
      }
    this.insertionMode = V.IN_BODY;
  }
  _resetInsertionModeForSelect(e) {
    if (e > 0)
      for (let n = e - 1; n > 0; n--) {
        const r = this.openElements.tagIDs[n];
        if (r === h.TEMPLATE)
          break;
        if (r === h.TABLE) {
          this.insertionMode = V.IN_SELECT_IN_TABLE;
          return;
        }
      }
    this.insertionMode = V.IN_SELECT;
  }
  //Foster parenting
  _isElementCausesFosterParenting(e) {
    return s3.has(e);
  }
  _shouldFosterParentOnInsertion() {
    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
  }
  _findFosterParentingLocation() {
    for (let e = this.openElements.stackTop; e >= 0; e--) {
      const n = this.openElements.items[e];
      switch (this.openElements.tagIDs[e]) {
        case h.TEMPLATE: {
          if (this.treeAdapter.getNamespaceURI(n) === Te.HTML)
            return { parent: this.treeAdapter.getTemplateContent(n), beforeElement: null };
          break;
        }
        case h.TABLE: {
          const r = this.treeAdapter.getParentNode(n);
          return r ? { parent: r, beforeElement: n } : { parent: this.openElements.items[e - 1], beforeElement: null };
        }
      }
    }
    return { parent: this.openElements.items[0], beforeElement: null };
  }
  _fosterParentElement(e) {
    const n = this._findFosterParentingLocation();
    n.beforeElement ? this.treeAdapter.insertBefore(n.parent, e, n.beforeElement) : this.treeAdapter.appendChild(n.parent, e);
  }
  //Special elements
  _isSpecialElement(e, n) {
    const r = this.treeAdapter.getNamespaceURI(e);
    return _W[r].has(n);
  }
  onCharacter(e) {
    if (this.skipNextNewLine = !1, this.tokenizer.inForeignNode) {
      vQ(this, e);
      return;
    }
    switch (this.insertionMode) {
      case V.INITIAL: {
        ol(this, e);
        break;
      }
      case V.BEFORE_HTML: {
        vl(this, e);
        break;
      }
      case V.BEFORE_HEAD: {
        Cl(this, e);
        break;
      }
      case V.IN_HEAD: {
        Rl(this, e);
        break;
      }
      case V.IN_HEAD_NO_SCRIPT: {
        Al(this, e);
        break;
      }
      case V.AFTER_HEAD: {
        Ol(this, e);
        break;
      }
      case V.IN_BODY:
      case V.IN_CAPTION:
      case V.IN_CELL:
      case V.IN_TEMPLATE: {
        l3(this, e);
        break;
      }
      case V.TEXT:
      case V.IN_SELECT:
      case V.IN_SELECT_IN_TABLE: {
        this._insertCharacters(e);
        break;
      }
      case V.IN_TABLE:
      case V.IN_TABLE_BODY:
      case V.IN_ROW: {
        S_(this, e);
        break;
      }
      case V.IN_TABLE_TEXT: {
        m3(this, e);
        break;
      }
      case V.IN_COLUMN_GROUP: {
        ud(this, e);
        break;
      }
      case V.AFTER_BODY: {
        dd(this, e);
        break;
      }
      case V.AFTER_AFTER_BODY: {
        Vu(this, e);
        break;
      }
    }
  }
  onNullCharacter(e) {
    if (this.skipNextNewLine = !1, this.tokenizer.inForeignNode) {
      yQ(this, e);
      return;
    }
    switch (this.insertionMode) {
      case V.INITIAL: {
        ol(this, e);
        break;
      }
      case V.BEFORE_HTML: {
        vl(this, e);
        break;
      }
      case V.BEFORE_HEAD: {
        Cl(this, e);
        break;
      }
      case V.IN_HEAD: {
        Rl(this, e);
        break;
      }
      case V.IN_HEAD_NO_SCRIPT: {
        Al(this, e);
        break;
      }
      case V.AFTER_HEAD: {
        Ol(this, e);
        break;
      }
      case V.TEXT: {
        this._insertCharacters(e);
        break;
      }
      case V.IN_TABLE:
      case V.IN_TABLE_BODY:
      case V.IN_ROW: {
        S_(this, e);
        break;
      }
      case V.IN_COLUMN_GROUP: {
        ud(this, e);
        break;
      }
      case V.AFTER_BODY: {
        dd(this, e);
        break;
      }
      case V.AFTER_AFTER_BODY: {
        Vu(this, e);
        break;
      }
    }
  }
  onComment(e) {
    if (this.skipNextNewLine = !1, this.currentNotInHTML) {
      nE(this, e);
      return;
    }
    switch (this.insertionMode) {
      case V.INITIAL:
      case V.BEFORE_HTML:
      case V.BEFORE_HEAD:
      case V.IN_HEAD:
      case V.IN_HEAD_NO_SCRIPT:
      case V.AFTER_HEAD:
      case V.IN_BODY:
      case V.IN_TABLE:
      case V.IN_CAPTION:
      case V.IN_COLUMN_GROUP:
      case V.IN_TABLE_BODY:
      case V.IN_ROW:
      case V.IN_CELL:
      case V.IN_SELECT:
      case V.IN_SELECT_IN_TABLE:
      case V.IN_TEMPLATE:
      case V.IN_FRAMESET:
      case V.AFTER_FRAMESET: {
        nE(this, e);
        break;
      }
      case V.IN_TABLE_TEXT: {
        ll(this, e);
        break;
      }
      case V.AFTER_BODY: {
        eK(this, e);
        break;
      }
      case V.AFTER_AFTER_BODY:
      case V.AFTER_AFTER_FRAMESET: {
        tK(this, e);
        break;
      }
    }
  }
  onDoctype(e) {
    switch (this.skipNextNewLine = !1, this.insertionMode) {
      case V.INITIAL: {
        nK(this, e);
        break;
      }
      case V.BEFORE_HEAD:
      case V.IN_HEAD:
      case V.IN_HEAD_NO_SCRIPT:
      case V.AFTER_HEAD: {
        this._err(e, pe.misplacedDoctype);
        break;
      }
      case V.IN_TABLE_TEXT: {
        ll(this, e);
        break;
      }
    }
  }
  onStartTag(e) {
    this.skipNextNewLine = !1, this.currentToken = e, this._processStartTag(e), e.selfClosing && !e.ackSelfClosing && this._err(e, pe.nonVoidHtmlElementStartTagWithTrailingSolidus);
  }
  /**
   * Processes a given start tag.
   *
   * `onStartTag` checks if a self-closing tag was recognized. When a token
   * is moved inbetween multiple insertion modes, this check for self-closing
   * could lead to false positives. To avoid this, `_processStartTag` is used
   * for nested calls.
   *
   * @param token The token to process.
   */
  _processStartTag(e) {
    this.shouldProcessStartTagTokenInForeignContent(e) ? CQ(this, e) : this._startTagOutsideForeignContent(e);
  }
  _startTagOutsideForeignContent(e) {
    switch (this.insertionMode) {
      case V.INITIAL: {
        ol(this, e);
        break;
      }
      case V.BEFORE_HTML: {
        rK(this, e);
        break;
      }
      case V.BEFORE_HEAD: {
        iK(this, e);
        break;
      }
      case V.IN_HEAD: {
        ya(this, e);
        break;
      }
      case V.IN_HEAD_NO_SCRIPT: {
        lK(this, e);
        break;
      }
      case V.AFTER_HEAD: {
        uK(this, e);
        break;
      }
      case V.IN_BODY: {
        or(this, e);
        break;
      }
      case V.IN_TABLE: {
        ro(this, e);
        break;
      }
      case V.IN_TABLE_TEXT: {
        ll(this, e);
        break;
      }
      case V.IN_CAPTION: {
        sQ(this, e);
        break;
      }
      case V.IN_COLUMN_GROUP: {
        M1(this, e);
        break;
      }
      case V.IN_TABLE_BODY: {
        Vd(this, e);
        break;
      }
      case V.IN_ROW: {
        $d(this, e);
        break;
      }
      case V.IN_CELL: {
        cQ(this, e);
        break;
      }
      case V.IN_SELECT: {
        h3(this, e);
        break;
      }
      case V.IN_SELECT_IN_TABLE: {
        dQ(this, e);
        break;
      }
      case V.IN_TEMPLATE: {
        _Q(this, e);
        break;
      }
      case V.AFTER_BODY: {
        fQ(this, e);
        break;
      }
      case V.IN_FRAMESET: {
        gQ(this, e);
        break;
      }
      case V.AFTER_FRAMESET: {
        EQ(this, e);
        break;
      }
      case V.AFTER_AFTER_BODY: {
        bQ(this, e);
        break;
      }
      case V.AFTER_AFTER_FRAMESET: {
        TQ(this, e);
        break;
      }
    }
  }
  onEndTag(e) {
    this.skipNextNewLine = !1, this.currentToken = e, this.currentNotInHTML ? RQ(this, e) : this._endTagOutsideForeignContent(e);
  }
  _endTagOutsideForeignContent(e) {
    switch (this.insertionMode) {
      case V.INITIAL: {
        ol(this, e);
        break;
      }
      case V.BEFORE_HTML: {
        aK(this, e);
        break;
      }
      case V.BEFORE_HEAD: {
        sK(this, e);
        break;
      }
      case V.IN_HEAD: {
        oK(this, e);
        break;
      }
      case V.IN_HEAD_NO_SCRIPT: {
        cK(this, e);
        break;
      }
      case V.AFTER_HEAD: {
        dK(this, e);
        break;
      }
      case V.IN_BODY: {
        qd(this, e);
        break;
      }
      case V.TEXT: {
        jK(this, e);
        break;
      }
      case V.IN_TABLE: {
        Bl(this, e);
        break;
      }
      case V.IN_TABLE_TEXT: {
        ll(this, e);
        break;
      }
      case V.IN_CAPTION: {
        oQ(this, e);
        break;
      }
      case V.IN_COLUMN_GROUP: {
        lQ(this, e);
        break;
      }
      case V.IN_TABLE_BODY: {
        rE(this, e);
        break;
      }
      case V.IN_ROW: {
        g3(this, e);
        break;
      }
      case V.IN_CELL: {
        uQ(this, e);
        break;
      }
      case V.IN_SELECT: {
        E3(this, e);
        break;
      }
      case V.IN_SELECT_IN_TABLE: {
        pQ(this, e);
        break;
      }
      case V.IN_TEMPLATE: {
        mQ(this, e);
        break;
      }
      case V.AFTER_BODY: {
        b3(this, e);
        break;
      }
      case V.IN_FRAMESET: {
        hQ(this, e);
        break;
      }
      case V.AFTER_FRAMESET: {
        SQ(this, e);
        break;
      }
      case V.AFTER_AFTER_BODY: {
        Vu(this, e);
        break;
      }
    }
  }
  onEof(e) {
    switch (this.insertionMode) {
      case V.INITIAL: {
        ol(this, e);
        break;
      }
      case V.BEFORE_HTML: {
        vl(this, e);
        break;
      }
      case V.BEFORE_HEAD: {
        Cl(this, e);
        break;
      }
      case V.IN_HEAD: {
        Rl(this, e);
        break;
      }
      case V.IN_HEAD_NO_SCRIPT: {
        Al(this, e);
        break;
      }
      case V.AFTER_HEAD: {
        Ol(this, e);
        break;
      }
      case V.IN_BODY:
      case V.IN_TABLE:
      case V.IN_CAPTION:
      case V.IN_COLUMN_GROUP:
      case V.IN_TABLE_BODY:
      case V.IN_ROW:
      case V.IN_CELL:
      case V.IN_SELECT:
      case V.IN_SELECT_IN_TABLE: {
        p3(this, e);
        break;
      }
      case V.TEXT: {
        XK(this, e);
        break;
      }
      case V.IN_TABLE_TEXT: {
        ll(this, e);
        break;
      }
      case V.IN_TEMPLATE: {
        S3(this, e);
        break;
      }
      case V.AFTER_BODY:
      case V.IN_FRAMESET:
      case V.AFTER_FRAMESET:
      case V.AFTER_AFTER_BODY:
      case V.AFTER_AFTER_FRAMESET: {
        L1(this, e);
        break;
      }
    }
  }
  onWhitespaceCharacter(e) {
    if (this.skipNextNewLine && (this.skipNextNewLine = !1, e.chars.charCodeAt(0) === B.LINE_FEED)) {
      if (e.chars.length === 1)
        return;
      e.chars = e.chars.substr(1);
    }
    if (this.tokenizer.inForeignNode) {
      this._insertCharacters(e);
      return;
    }
    switch (this.insertionMode) {
      case V.IN_HEAD:
      case V.IN_HEAD_NO_SCRIPT:
      case V.AFTER_HEAD:
      case V.TEXT:
      case V.IN_COLUMN_GROUP:
      case V.IN_SELECT:
      case V.IN_SELECT_IN_TABLE:
      case V.IN_FRAMESET:
      case V.AFTER_FRAMESET: {
        this._insertCharacters(e);
        break;
      }
      case V.IN_BODY:
      case V.IN_CAPTION:
      case V.IN_CELL:
      case V.IN_TEMPLATE:
      case V.AFTER_BODY:
      case V.AFTER_AFTER_BODY:
      case V.AFTER_AFTER_FRAMESET: {
        o3(this, e);
        break;
      }
      case V.IN_TABLE:
      case V.IN_TABLE_BODY:
      case V.IN_ROW: {
        S_(this, e);
        break;
      }
      case V.IN_TABLE_TEXT: {
        _3(this, e);
        break;
      }
    }
  }
}
function KW(t, e) {
  let n = t.activeFormattingElements.getElementEntryInScopeWithTagName(e.tagName);
  return n ? t.openElements.contains(n.element) ? t.openElements.hasInScope(e.tagID) || (n = null) : (t.activeFormattingElements.removeEntry(n), n = null) : d3(t, e), n;
}
function QW(t, e) {
  let n = null, r = t.openElements.stackTop;
  for (; r >= 0; r--) {
    const a = t.openElements.items[r];
    if (a === e.element)
      break;
    t._isSpecialElement(a, t.openElements.tagIDs[r]) && (n = a);
  }
  return n || (t.openElements.shortenToLength(r < 0 ? 0 : r), t.activeFormattingElements.removeEntry(e)), n;
}
function jW(t, e, n) {
  let r = e, a = t.openElements.getCommonAncestor(e);
  for (let i = 0, s = a; s !== n; i++, s = a) {
    a = t.openElements.getCommonAncestor(s);
    const l = t.activeFormattingElements.getElementEntry(s), c = l && i >= $W;
    !l || c ? (c && t.activeFormattingElements.removeEntry(l), t.openElements.remove(s)) : (s = XW(t, l), r === e && (t.activeFormattingElements.bookmark = l), t.treeAdapter.detachNode(r), t.treeAdapter.appendChild(s, r), r = s);
  }
  return r;
}
function XW(t, e) {
  const n = t.treeAdapter.getNamespaceURI(e.element), r = t.treeAdapter.createElement(e.token.tagName, n, e.token.attrs);
  return t.openElements.replace(e.element, r), e.element = r, r;
}
function ZW(t, e, n) {
  const r = t.treeAdapter.getTagName(e), a = bo(r);
  if (t._isElementCausesFosterParenting(a))
    t._fosterParentElement(n);
  else {
    const i = t.treeAdapter.getNamespaceURI(e);
    a === h.TEMPLATE && i === Te.HTML && (e = t.treeAdapter.getTemplateContent(e)), t.treeAdapter.appendChild(e, n);
  }
}
function JW(t, e, n) {
  const r = t.treeAdapter.getNamespaceURI(n.element), { token: a } = n, i = t.treeAdapter.createElement(a.tagName, r, a.attrs);
  t._adoptNodes(e, i), t.treeAdapter.appendChild(e, i), t.activeFormattingElements.insertElementAfterBookmark(i, a), t.activeFormattingElements.removeEntry(n), t.openElements.remove(n.element), t.openElements.insertAfter(e, i, a.tagID);
}
function w1(t, e) {
  for (let n = 0; n < VW; n++) {
    const r = KW(t, e);
    if (!r)
      break;
    const a = QW(t, r);
    if (!a)
      break;
    t.activeFormattingElements.bookmark = r;
    const i = jW(t, a, r.element), s = t.openElements.getCommonAncestor(r.element);
    t.treeAdapter.detachNode(i), s && ZW(t, s, i), JW(t, a, r);
  }
}
function nE(t, e) {
  t._appendCommentNode(e, t.openElements.currentTmplContentOrNode);
}
function eK(t, e) {
  t._appendCommentNode(e, t.openElements.items[0]);
}
function tK(t, e) {
  t._appendCommentNode(e, t.document);
}
function L1(t, e) {
  if (t.stopped = !0, e.location) {
    const n = t.fragmentContext ? 0 : 2;
    for (let r = t.openElements.stackTop; r >= n; r--)
      t._setEndLocation(t.openElements.items[r], e);
    if (!t.fragmentContext && t.openElements.stackTop >= 0) {
      const r = t.openElements.items[0], a = t.treeAdapter.getNodeSourceCodeLocation(r);
      if (a && !a.endTag && (t._setEndLocation(r, e), t.openElements.stackTop >= 1)) {
        const i = t.openElements.items[1], s = t.treeAdapter.getNodeSourceCodeLocation(i);
        s && !s.endTag && t._setEndLocation(i, e);
      }
    }
  }
}
function nK(t, e) {
  t._setDocumentType(e);
  const n = e.forceQuirks ? Yr.QUIRKS : wW(e);
  DW(e) || t._err(e, pe.nonConformingDoctype), t.treeAdapter.setDocumentMode(t.document, n), t.insertionMode = V.BEFORE_HTML;
}
function ol(t, e) {
  t._err(e, pe.missingDoctype, !0), t.treeAdapter.setDocumentMode(t.document, Yr.QUIRKS), t.insertionMode = V.BEFORE_HTML, t._processToken(e);
}
function rK(t, e) {
  e.tagID === h.HTML ? (t._insertElement(e, Te.HTML), t.insertionMode = V.BEFORE_HEAD) : vl(t, e);
}
function aK(t, e) {
  const n = e.tagID;
  (n === h.HTML || n === h.HEAD || n === h.BODY || n === h.BR) && vl(t, e);
}
function vl(t, e) {
  t._insertFakeRootElement(), t.insertionMode = V.BEFORE_HEAD, t._processToken(e);
}
function iK(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.HEAD: {
      t._insertElement(e, Te.HTML), t.headElement = t.openElements.current, t.insertionMode = V.IN_HEAD;
      break;
    }
    default:
      Cl(t, e);
  }
}
function sK(t, e) {
  const n = e.tagID;
  n === h.HEAD || n === h.BODY || n === h.HTML || n === h.BR ? Cl(t, e) : t._err(e, pe.endTagWithoutMatchingOpenElement);
}
function Cl(t, e) {
  t._insertFakeElement(ie.HEAD, h.HEAD), t.headElement = t.openElements.current, t.insertionMode = V.IN_HEAD, t._processToken(e);
}
function ya(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.BASE:
    case h.BASEFONT:
    case h.BGSOUND:
    case h.LINK:
    case h.META: {
      t._appendElement(e, Te.HTML), e.ackSelfClosing = !0;
      break;
    }
    case h.TITLE: {
      t._switchToTextParsing(e, xn.RCDATA);
      break;
    }
    case h.NOSCRIPT: {
      t.options.scriptingEnabled ? t._switchToTextParsing(e, xn.RAWTEXT) : (t._insertElement(e, Te.HTML), t.insertionMode = V.IN_HEAD_NO_SCRIPT);
      break;
    }
    case h.NOFRAMES:
    case h.STYLE: {
      t._switchToTextParsing(e, xn.RAWTEXT);
      break;
    }
    case h.SCRIPT: {
      t._switchToTextParsing(e, xn.SCRIPT_DATA);
      break;
    }
    case h.TEMPLATE: {
      t._insertTemplate(e), t.activeFormattingElements.insertMarker(), t.framesetOk = !1, t.insertionMode = V.IN_TEMPLATE, t.tmplInsertionModeStack.unshift(V.IN_TEMPLATE);
      break;
    }
    case h.HEAD: {
      t._err(e, pe.misplacedStartTagForHeadElement);
      break;
    }
    default:
      Rl(t, e);
  }
}
function oK(t, e) {
  switch (e.tagID) {
    case h.HEAD: {
      t.openElements.pop(), t.insertionMode = V.AFTER_HEAD;
      break;
    }
    case h.BODY:
    case h.BR:
    case h.HTML: {
      Rl(t, e);
      break;
    }
    case h.TEMPLATE: {
      bs(t, e);
      break;
    }
    default:
      t._err(e, pe.endTagWithoutMatchingOpenElement);
  }
}
function bs(t, e) {
  t.openElements.tmplCount > 0 ? (t.openElements.generateImpliedEndTagsThoroughly(), t.openElements.currentTagId !== h.TEMPLATE && t._err(e, pe.closingOfElementWithOpenChildElements), t.openElements.popUntilTagNamePopped(h.TEMPLATE), t.activeFormattingElements.clearToLastMarker(), t.tmplInsertionModeStack.shift(), t._resetInsertionMode()) : t._err(e, pe.endTagWithoutMatchingOpenElement);
}
function Rl(t, e) {
  t.openElements.pop(), t.insertionMode = V.AFTER_HEAD, t._processToken(e);
}
function lK(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.BASEFONT:
    case h.BGSOUND:
    case h.HEAD:
    case h.LINK:
    case h.META:
    case h.NOFRAMES:
    case h.STYLE: {
      ya(t, e);
      break;
    }
    case h.NOSCRIPT: {
      t._err(e, pe.nestedNoscriptInHead);
      break;
    }
    default:
      Al(t, e);
  }
}
function cK(t, e) {
  switch (e.tagID) {
    case h.NOSCRIPT: {
      t.openElements.pop(), t.insertionMode = V.IN_HEAD;
      break;
    }
    case h.BR: {
      Al(t, e);
      break;
    }
    default:
      t._err(e, pe.endTagWithoutMatchingOpenElement);
  }
}
function Al(t, e) {
  const n = e.type === Ot.EOF ? pe.openElementsLeftAfterEof : pe.disallowedContentInNoscriptInHead;
  t._err(e, n), t.openElements.pop(), t.insertionMode = V.IN_HEAD, t._processToken(e);
}
function uK(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.BODY: {
      t._insertElement(e, Te.HTML), t.framesetOk = !1, t.insertionMode = V.IN_BODY;
      break;
    }
    case h.FRAMESET: {
      t._insertElement(e, Te.HTML), t.insertionMode = V.IN_FRAMESET;
      break;
    }
    case h.BASE:
    case h.BASEFONT:
    case h.BGSOUND:
    case h.LINK:
    case h.META:
    case h.NOFRAMES:
    case h.SCRIPT:
    case h.STYLE:
    case h.TEMPLATE:
    case h.TITLE: {
      t._err(e, pe.abandonedHeadElementChild), t.openElements.push(t.headElement, h.HEAD), ya(t, e), t.openElements.remove(t.headElement);
      break;
    }
    case h.HEAD: {
      t._err(e, pe.misplacedStartTagForHeadElement);
      break;
    }
    default:
      Ol(t, e);
  }
}
function dK(t, e) {
  switch (e.tagID) {
    case h.BODY:
    case h.HTML:
    case h.BR: {
      Ol(t, e);
      break;
    }
    case h.TEMPLATE: {
      bs(t, e);
      break;
    }
    default:
      t._err(e, pe.endTagWithoutMatchingOpenElement);
  }
}
function Ol(t, e) {
  t._insertFakeElement(ie.BODY, h.BODY), t.insertionMode = V.IN_BODY, zd(t, e);
}
function zd(t, e) {
  switch (e.type) {
    case Ot.CHARACTER: {
      l3(t, e);
      break;
    }
    case Ot.WHITESPACE_CHARACTER: {
      o3(t, e);
      break;
    }
    case Ot.COMMENT: {
      nE(t, e);
      break;
    }
    case Ot.START_TAG: {
      or(t, e);
      break;
    }
    case Ot.END_TAG: {
      qd(t, e);
      break;
    }
    case Ot.EOF: {
      p3(t, e);
      break;
    }
  }
}
function o3(t, e) {
  t._reconstructActiveFormattingElements(), t._insertCharacters(e);
}
function l3(t, e) {
  t._reconstructActiveFormattingElements(), t._insertCharacters(e), t.framesetOk = !1;
}
function pK(t, e) {
  t.openElements.tmplCount === 0 && t.treeAdapter.adoptAttributes(t.openElements.items[0], e.attrs);
}
function _K(t, e) {
  const n = t.openElements.tryPeekProperlyNestedBodyElement();
  n && t.openElements.tmplCount === 0 && (t.framesetOk = !1, t.treeAdapter.adoptAttributes(n, e.attrs));
}
function mK(t, e) {
  const n = t.openElements.tryPeekProperlyNestedBodyElement();
  t.framesetOk && n && (t.treeAdapter.detachNode(n), t.openElements.popAllUpToHtmlElement(), t._insertElement(e, Te.HTML), t.insertionMode = V.IN_FRAMESET);
}
function fK(t, e) {
  t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._insertElement(e, Te.HTML);
}
function gK(t, e) {
  t.openElements.hasInButtonScope(h.P) && t._closePElement(), j4(t.openElements.currentTagId) && t.openElements.pop(), t._insertElement(e, Te.HTML);
}
function hK(t, e) {
  t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._insertElement(e, Te.HTML), t.skipNextNewLine = !0, t.framesetOk = !1;
}
function EK(t, e) {
  const n = t.openElements.tmplCount > 0;
  (!t.formElement || n) && (t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._insertElement(e, Te.HTML), n || (t.formElement = t.openElements.current));
}
function SK(t, e) {
  t.framesetOk = !1;
  const n = e.tagID;
  for (let r = t.openElements.stackTop; r >= 0; r--) {
    const a = t.openElements.tagIDs[r];
    if (n === h.LI && a === h.LI || (n === h.DD || n === h.DT) && (a === h.DD || a === h.DT)) {
      t.openElements.generateImpliedEndTagsWithExclusion(a), t.openElements.popUntilTagNamePopped(a);
      break;
    }
    if (a !== h.ADDRESS && a !== h.DIV && a !== h.P && t._isSpecialElement(t.openElements.items[r], a))
      break;
  }
  t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._insertElement(e, Te.HTML);
}
function bK(t, e) {
  t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._insertElement(e, Te.HTML), t.tokenizer.state = xn.PLAINTEXT;
}
function TK(t, e) {
  t.openElements.hasInScope(h.BUTTON) && (t.openElements.generateImpliedEndTags(), t.openElements.popUntilTagNamePopped(h.BUTTON)), t._reconstructActiveFormattingElements(), t._insertElement(e, Te.HTML), t.framesetOk = !1;
}
function yK(t, e) {
  const n = t.activeFormattingElements.getElementEntryInScopeWithTagName(ie.A);
  n && (w1(t, e), t.openElements.remove(n.element), t.activeFormattingElements.removeEntry(n)), t._reconstructActiveFormattingElements(), t._insertElement(e, Te.HTML), t.activeFormattingElements.pushElement(t.openElements.current, e);
}
function vK(t, e) {
  t._reconstructActiveFormattingElements(), t._insertElement(e, Te.HTML), t.activeFormattingElements.pushElement(t.openElements.current, e);
}
function CK(t, e) {
  t._reconstructActiveFormattingElements(), t.openElements.hasInScope(h.NOBR) && (w1(t, e), t._reconstructActiveFormattingElements()), t._insertElement(e, Te.HTML), t.activeFormattingElements.pushElement(t.openElements.current, e);
}
function RK(t, e) {
  t._reconstructActiveFormattingElements(), t._insertElement(e, Te.HTML), t.activeFormattingElements.insertMarker(), t.framesetOk = !1;
}
function AK(t, e) {
  t.treeAdapter.getDocumentMode(t.document) !== Yr.QUIRKS && t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._insertElement(e, Te.HTML), t.framesetOk = !1, t.insertionMode = V.IN_TABLE;
}
function c3(t, e) {
  t._reconstructActiveFormattingElements(), t._appendElement(e, Te.HTML), t.framesetOk = !1, e.ackSelfClosing = !0;
}
function u3(t) {
  const e = W4(t, Pi.TYPE);
  return e != null && e.toLowerCase() === qW;
}
function OK(t, e) {
  t._reconstructActiveFormattingElements(), t._appendElement(e, Te.HTML), u3(e) || (t.framesetOk = !1), e.ackSelfClosing = !0;
}
function NK(t, e) {
  t._appendElement(e, Te.HTML), e.ackSelfClosing = !0;
}
function IK(t, e) {
  t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._appendElement(e, Te.HTML), t.framesetOk = !1, e.ackSelfClosing = !0;
}
function xK(t, e) {
  e.tagName = ie.IMG, e.tagID = h.IMG, c3(t, e);
}
function DK(t, e) {
  t._insertElement(e, Te.HTML), t.skipNextNewLine = !0, t.tokenizer.state = xn.RCDATA, t.originalInsertionMode = t.insertionMode, t.framesetOk = !1, t.insertionMode = V.TEXT;
}
function wK(t, e) {
  t.openElements.hasInButtonScope(h.P) && t._closePElement(), t._reconstructActiveFormattingElements(), t.framesetOk = !1, t._switchToTextParsing(e, xn.RAWTEXT);
}
function LK(t, e) {
  t.framesetOk = !1, t._switchToTextParsing(e, xn.RAWTEXT);
}
function IC(t, e) {
  t._switchToTextParsing(e, xn.RAWTEXT);
}
function MK(t, e) {
  t._reconstructActiveFormattingElements(), t._insertElement(e, Te.HTML), t.framesetOk = !1, t.insertionMode = t.insertionMode === V.IN_TABLE || t.insertionMode === V.IN_CAPTION || t.insertionMode === V.IN_TABLE_BODY || t.insertionMode === V.IN_ROW || t.insertionMode === V.IN_CELL ? V.IN_SELECT_IN_TABLE : V.IN_SELECT;
}
function kK(t, e) {
  t.openElements.currentTagId === h.OPTION && t.openElements.pop(), t._reconstructActiveFormattingElements(), t._insertElement(e, Te.HTML);
}
function PK(t, e) {
  t.openElements.hasInScope(h.RUBY) && t.openElements.generateImpliedEndTags(), t._insertElement(e, Te.HTML);
}
function FK(t, e) {
  t.openElements.hasInScope(h.RUBY) && t.openElements.generateImpliedEndTagsWithExclusion(h.RTC), t._insertElement(e, Te.HTML);
}
function BK(t, e) {
  t._reconstructActiveFormattingElements(), a3(e), D1(e), e.selfClosing ? t._appendElement(e, Te.MATHML) : t._insertElement(e, Te.MATHML), e.ackSelfClosing = !0;
}
function UK(t, e) {
  t._reconstructActiveFormattingElements(), i3(e), D1(e), e.selfClosing ? t._appendElement(e, Te.SVG) : t._insertElement(e, Te.SVG), e.ackSelfClosing = !0;
}
function xC(t, e) {
  t._reconstructActiveFormattingElements(), t._insertElement(e, Te.HTML);
}
function or(t, e) {
  switch (e.tagID) {
    case h.I:
    case h.S:
    case h.B:
    case h.U:
    case h.EM:
    case h.TT:
    case h.BIG:
    case h.CODE:
    case h.FONT:
    case h.SMALL:
    case h.STRIKE:
    case h.STRONG: {
      vK(t, e);
      break;
    }
    case h.A: {
      yK(t, e);
      break;
    }
    case h.H1:
    case h.H2:
    case h.H3:
    case h.H4:
    case h.H5:
    case h.H6: {
      gK(t, e);
      break;
    }
    case h.P:
    case h.DL:
    case h.OL:
    case h.UL:
    case h.DIV:
    case h.DIR:
    case h.NAV:
    case h.MAIN:
    case h.MENU:
    case h.ASIDE:
    case h.CENTER:
    case h.FIGURE:
    case h.FOOTER:
    case h.HEADER:
    case h.HGROUP:
    case h.DIALOG:
    case h.DETAILS:
    case h.ADDRESS:
    case h.ARTICLE:
    case h.SECTION:
    case h.SUMMARY:
    case h.FIELDSET:
    case h.BLOCKQUOTE:
    case h.FIGCAPTION: {
      fK(t, e);
      break;
    }
    case h.LI:
    case h.DD:
    case h.DT: {
      SK(t, e);
      break;
    }
    case h.BR:
    case h.IMG:
    case h.WBR:
    case h.AREA:
    case h.EMBED:
    case h.KEYGEN: {
      c3(t, e);
      break;
    }
    case h.HR: {
      IK(t, e);
      break;
    }
    case h.RB:
    case h.RTC: {
      PK(t, e);
      break;
    }
    case h.RT:
    case h.RP: {
      FK(t, e);
      break;
    }
    case h.PRE:
    case h.LISTING: {
      hK(t, e);
      break;
    }
    case h.XMP: {
      wK(t, e);
      break;
    }
    case h.SVG: {
      UK(t, e);
      break;
    }
    case h.HTML: {
      pK(t, e);
      break;
    }
    case h.BASE:
    case h.LINK:
    case h.META:
    case h.STYLE:
    case h.TITLE:
    case h.SCRIPT:
    case h.BGSOUND:
    case h.BASEFONT:
    case h.TEMPLATE: {
      ya(t, e);
      break;
    }
    case h.BODY: {
      _K(t, e);
      break;
    }
    case h.FORM: {
      EK(t, e);
      break;
    }
    case h.NOBR: {
      CK(t, e);
      break;
    }
    case h.MATH: {
      BK(t, e);
      break;
    }
    case h.TABLE: {
      AK(t, e);
      break;
    }
    case h.INPUT: {
      OK(t, e);
      break;
    }
    case h.PARAM:
    case h.TRACK:
    case h.SOURCE: {
      NK(t, e);
      break;
    }
    case h.IMAGE: {
      xK(t, e);
      break;
    }
    case h.BUTTON: {
      TK(t, e);
      break;
    }
    case h.APPLET:
    case h.OBJECT:
    case h.MARQUEE: {
      RK(t, e);
      break;
    }
    case h.IFRAME: {
      LK(t, e);
      break;
    }
    case h.SELECT: {
      MK(t, e);
      break;
    }
    case h.OPTION:
    case h.OPTGROUP: {
      kK(t, e);
      break;
    }
    case h.NOEMBED: {
      IC(t, e);
      break;
    }
    case h.FRAMESET: {
      mK(t, e);
      break;
    }
    case h.TEXTAREA: {
      DK(t, e);
      break;
    }
    case h.NOSCRIPT: {
      t.options.scriptingEnabled ? IC(t, e) : xC(t, e);
      break;
    }
    case h.PLAINTEXT: {
      bK(t, e);
      break;
    }
    case h.COL:
    case h.TH:
    case h.TD:
    case h.TR:
    case h.HEAD:
    case h.FRAME:
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD:
    case h.CAPTION:
    case h.COLGROUP:
      break;
    default:
      xC(t, e);
  }
}
function GK(t, e) {
  if (t.openElements.hasInScope(h.BODY) && (t.insertionMode = V.AFTER_BODY, t.options.sourceCodeLocationInfo)) {
    const n = t.openElements.tryPeekProperlyNestedBodyElement();
    n && t._setEndLocation(n, e);
  }
}
function HK(t, e) {
  t.openElements.hasInScope(h.BODY) && (t.insertionMode = V.AFTER_BODY, b3(t, e));
}
function YK(t, e) {
  const n = e.tagID;
  t.openElements.hasInScope(n) && (t.openElements.generateImpliedEndTags(), t.openElements.popUntilTagNamePopped(n));
}
function zK(t) {
  const e = t.openElements.tmplCount > 0, { formElement: n } = t;
  e || (t.formElement = null), (n || e) && t.openElements.hasInScope(h.FORM) && (t.openElements.generateImpliedEndTags(), e ? t.openElements.popUntilTagNamePopped(h.FORM) : n && t.openElements.remove(n));
}
function qK(t) {
  t.openElements.hasInButtonScope(h.P) || t._insertFakeElement(ie.P, h.P), t._closePElement();
}
function VK(t) {
  t.openElements.hasInListItemScope(h.LI) && (t.openElements.generateImpliedEndTagsWithExclusion(h.LI), t.openElements.popUntilTagNamePopped(h.LI));
}
function $K(t, e) {
  const n = e.tagID;
  t.openElements.hasInScope(n) && (t.openElements.generateImpliedEndTagsWithExclusion(n), t.openElements.popUntilTagNamePopped(n));
}
function WK(t) {
  t.openElements.hasNumberedHeaderInScope() && (t.openElements.generateImpliedEndTags(), t.openElements.popUntilNumberedHeaderPopped());
}
function KK(t, e) {
  const n = e.tagID;
  t.openElements.hasInScope(n) && (t.openElements.generateImpliedEndTags(), t.openElements.popUntilTagNamePopped(n), t.activeFormattingElements.clearToLastMarker());
}
function QK(t) {
  t._reconstructActiveFormattingElements(), t._insertFakeElement(ie.BR, h.BR), t.openElements.pop(), t.framesetOk = !1;
}
function d3(t, e) {
  const n = e.tagName, r = e.tagID;
  for (let a = t.openElements.stackTop; a > 0; a--) {
    const i = t.openElements.items[a], s = t.openElements.tagIDs[a];
    if (r === s && (r !== h.UNKNOWN || t.treeAdapter.getTagName(i) === n)) {
      t.openElements.generateImpliedEndTagsWithExclusion(r), t.openElements.stackTop >= a && t.openElements.shortenToLength(a);
      break;
    }
    if (t._isSpecialElement(i, s))
      break;
  }
}
function qd(t, e) {
  switch (e.tagID) {
    case h.A:
    case h.B:
    case h.I:
    case h.S:
    case h.U:
    case h.EM:
    case h.TT:
    case h.BIG:
    case h.CODE:
    case h.FONT:
    case h.NOBR:
    case h.SMALL:
    case h.STRIKE:
    case h.STRONG: {
      w1(t, e);
      break;
    }
    case h.P: {
      qK(t);
      break;
    }
    case h.DL:
    case h.UL:
    case h.OL:
    case h.DIR:
    case h.DIV:
    case h.NAV:
    case h.PRE:
    case h.MAIN:
    case h.MENU:
    case h.ASIDE:
    case h.BUTTON:
    case h.CENTER:
    case h.FIGURE:
    case h.FOOTER:
    case h.HEADER:
    case h.HGROUP:
    case h.DIALOG:
    case h.ADDRESS:
    case h.ARTICLE:
    case h.DETAILS:
    case h.SECTION:
    case h.SUMMARY:
    case h.LISTING:
    case h.FIELDSET:
    case h.BLOCKQUOTE:
    case h.FIGCAPTION: {
      YK(t, e);
      break;
    }
    case h.LI: {
      VK(t);
      break;
    }
    case h.DD:
    case h.DT: {
      $K(t, e);
      break;
    }
    case h.H1:
    case h.H2:
    case h.H3:
    case h.H4:
    case h.H5:
    case h.H6: {
      WK(t);
      break;
    }
    case h.BR: {
      QK(t);
      break;
    }
    case h.BODY: {
      GK(t, e);
      break;
    }
    case h.HTML: {
      HK(t, e);
      break;
    }
    case h.FORM: {
      zK(t);
      break;
    }
    case h.APPLET:
    case h.OBJECT:
    case h.MARQUEE: {
      KK(t, e);
      break;
    }
    case h.TEMPLATE: {
      bs(t, e);
      break;
    }
    default:
      d3(t, e);
  }
}
function p3(t, e) {
  t.tmplInsertionModeStack.length > 0 ? S3(t, e) : L1(t, e);
}
function jK(t, e) {
  var n;
  e.tagID === h.SCRIPT && ((n = t.scriptHandler) === null || n === void 0 || n.call(t, t.openElements.current)), t.openElements.pop(), t.insertionMode = t.originalInsertionMode;
}
function XK(t, e) {
  t._err(e, pe.eofInElementThatCanContainOnlyText), t.openElements.pop(), t.insertionMode = t.originalInsertionMode, t.onEof(e);
}
function S_(t, e) {
  if (s3.has(t.openElements.currentTagId))
    switch (t.pendingCharacterTokens.length = 0, t.hasNonWhitespacePendingCharacterToken = !1, t.originalInsertionMode = t.insertionMode, t.insertionMode = V.IN_TABLE_TEXT, e.type) {
      case Ot.CHARACTER: {
        m3(t, e);
        break;
      }
      case Ot.WHITESPACE_CHARACTER: {
        _3(t, e);
        break;
      }
    }
  else
    nc(t, e);
}
function ZK(t, e) {
  t.openElements.clearBackToTableContext(), t.activeFormattingElements.insertMarker(), t._insertElement(e, Te.HTML), t.insertionMode = V.IN_CAPTION;
}
function JK(t, e) {
  t.openElements.clearBackToTableContext(), t._insertElement(e, Te.HTML), t.insertionMode = V.IN_COLUMN_GROUP;
}
function eQ(t, e) {
  t.openElements.clearBackToTableContext(), t._insertFakeElement(ie.COLGROUP, h.COLGROUP), t.insertionMode = V.IN_COLUMN_GROUP, M1(t, e);
}
function tQ(t, e) {
  t.openElements.clearBackToTableContext(), t._insertElement(e, Te.HTML), t.insertionMode = V.IN_TABLE_BODY;
}
function nQ(t, e) {
  t.openElements.clearBackToTableContext(), t._insertFakeElement(ie.TBODY, h.TBODY), t.insertionMode = V.IN_TABLE_BODY, Vd(t, e);
}
function rQ(t, e) {
  t.openElements.hasInTableScope(h.TABLE) && (t.openElements.popUntilTagNamePopped(h.TABLE), t._resetInsertionMode(), t._processStartTag(e));
}
function aQ(t, e) {
  u3(e) ? t._appendElement(e, Te.HTML) : nc(t, e), e.ackSelfClosing = !0;
}
function iQ(t, e) {
  !t.formElement && t.openElements.tmplCount === 0 && (t._insertElement(e, Te.HTML), t.formElement = t.openElements.current, t.openElements.pop());
}
function ro(t, e) {
  switch (e.tagID) {
    case h.TD:
    case h.TH:
    case h.TR: {
      nQ(t, e);
      break;
    }
    case h.STYLE:
    case h.SCRIPT:
    case h.TEMPLATE: {
      ya(t, e);
      break;
    }
    case h.COL: {
      eQ(t, e);
      break;
    }
    case h.FORM: {
      iQ(t, e);
      break;
    }
    case h.TABLE: {
      rQ(t, e);
      break;
    }
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD: {
      tQ(t, e);
      break;
    }
    case h.INPUT: {
      aQ(t, e);
      break;
    }
    case h.CAPTION: {
      ZK(t, e);
      break;
    }
    case h.COLGROUP: {
      JK(t, e);
      break;
    }
    default:
      nc(t, e);
  }
}
function Bl(t, e) {
  switch (e.tagID) {
    case h.TABLE: {
      t.openElements.hasInTableScope(h.TABLE) && (t.openElements.popUntilTagNamePopped(h.TABLE), t._resetInsertionMode());
      break;
    }
    case h.TEMPLATE: {
      bs(t, e);
      break;
    }
    case h.BODY:
    case h.CAPTION:
    case h.COL:
    case h.COLGROUP:
    case h.HTML:
    case h.TBODY:
    case h.TD:
    case h.TFOOT:
    case h.TH:
    case h.THEAD:
    case h.TR:
      break;
    default:
      nc(t, e);
  }
}
function nc(t, e) {
  const n = t.fosterParentingEnabled;
  t.fosterParentingEnabled = !0, zd(t, e), t.fosterParentingEnabled = n;
}
function _3(t, e) {
  t.pendingCharacterTokens.push(e);
}
function m3(t, e) {
  t.pendingCharacterTokens.push(e), t.hasNonWhitespacePendingCharacterToken = !0;
}
function ll(t, e) {
  let n = 0;
  if (t.hasNonWhitespacePendingCharacterToken)
    for (; n < t.pendingCharacterTokens.length; n++)
      nc(t, t.pendingCharacterTokens[n]);
  else
    for (; n < t.pendingCharacterTokens.length; n++)
      t._insertCharacters(t.pendingCharacterTokens[n]);
  t.insertionMode = t.originalInsertionMode, t._processToken(e);
}
const f3 = /* @__PURE__ */ new Set([h.CAPTION, h.COL, h.COLGROUP, h.TBODY, h.TD, h.TFOOT, h.TH, h.THEAD, h.TR]);
function sQ(t, e) {
  const n = e.tagID;
  f3.has(n) ? t.openElements.hasInTableScope(h.CAPTION) && (t.openElements.generateImpliedEndTags(), t.openElements.popUntilTagNamePopped(h.CAPTION), t.activeFormattingElements.clearToLastMarker(), t.insertionMode = V.IN_TABLE, ro(t, e)) : or(t, e);
}
function oQ(t, e) {
  const n = e.tagID;
  switch (n) {
    case h.CAPTION:
    case h.TABLE: {
      t.openElements.hasInTableScope(h.CAPTION) && (t.openElements.generateImpliedEndTags(), t.openElements.popUntilTagNamePopped(h.CAPTION), t.activeFormattingElements.clearToLastMarker(), t.insertionMode = V.IN_TABLE, n === h.TABLE && Bl(t, e));
      break;
    }
    case h.BODY:
    case h.COL:
    case h.COLGROUP:
    case h.HTML:
    case h.TBODY:
    case h.TD:
    case h.TFOOT:
    case h.TH:
    case h.THEAD:
    case h.TR:
      break;
    default:
      qd(t, e);
  }
}
function M1(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.COL: {
      t._appendElement(e, Te.HTML), e.ackSelfClosing = !0;
      break;
    }
    case h.TEMPLATE: {
      ya(t, e);
      break;
    }
    default:
      ud(t, e);
  }
}
function lQ(t, e) {
  switch (e.tagID) {
    case h.COLGROUP: {
      t.openElements.currentTagId === h.COLGROUP && (t.openElements.pop(), t.insertionMode = V.IN_TABLE);
      break;
    }
    case h.TEMPLATE: {
      bs(t, e);
      break;
    }
    case h.COL:
      break;
    default:
      ud(t, e);
  }
}
function ud(t, e) {
  t.openElements.currentTagId === h.COLGROUP && (t.openElements.pop(), t.insertionMode = V.IN_TABLE, t._processToken(e));
}
function Vd(t, e) {
  switch (e.tagID) {
    case h.TR: {
      t.openElements.clearBackToTableBodyContext(), t._insertElement(e, Te.HTML), t.insertionMode = V.IN_ROW;
      break;
    }
    case h.TH:
    case h.TD: {
      t.openElements.clearBackToTableBodyContext(), t._insertFakeElement(ie.TR, h.TR), t.insertionMode = V.IN_ROW, $d(t, e);
      break;
    }
    case h.CAPTION:
    case h.COL:
    case h.COLGROUP:
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD: {
      t.openElements.hasTableBodyContextInTableScope() && (t.openElements.clearBackToTableBodyContext(), t.openElements.pop(), t.insertionMode = V.IN_TABLE, ro(t, e));
      break;
    }
    default:
      ro(t, e);
  }
}
function rE(t, e) {
  const n = e.tagID;
  switch (e.tagID) {
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD: {
      t.openElements.hasInTableScope(n) && (t.openElements.clearBackToTableBodyContext(), t.openElements.pop(), t.insertionMode = V.IN_TABLE);
      break;
    }
    case h.TABLE: {
      t.openElements.hasTableBodyContextInTableScope() && (t.openElements.clearBackToTableBodyContext(), t.openElements.pop(), t.insertionMode = V.IN_TABLE, Bl(t, e));
      break;
    }
    case h.BODY:
    case h.CAPTION:
    case h.COL:
    case h.COLGROUP:
    case h.HTML:
    case h.TD:
    case h.TH:
    case h.TR:
      break;
    default:
      Bl(t, e);
  }
}
function $d(t, e) {
  switch (e.tagID) {
    case h.TH:
    case h.TD: {
      t.openElements.clearBackToTableRowContext(), t._insertElement(e, Te.HTML), t.insertionMode = V.IN_CELL, t.activeFormattingElements.insertMarker();
      break;
    }
    case h.CAPTION:
    case h.COL:
    case h.COLGROUP:
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD:
    case h.TR: {
      t.openElements.hasInTableScope(h.TR) && (t.openElements.clearBackToTableRowContext(), t.openElements.pop(), t.insertionMode = V.IN_TABLE_BODY, Vd(t, e));
      break;
    }
    default:
      ro(t, e);
  }
}
function g3(t, e) {
  switch (e.tagID) {
    case h.TR: {
      t.openElements.hasInTableScope(h.TR) && (t.openElements.clearBackToTableRowContext(), t.openElements.pop(), t.insertionMode = V.IN_TABLE_BODY);
      break;
    }
    case h.TABLE: {
      t.openElements.hasInTableScope(h.TR) && (t.openElements.clearBackToTableRowContext(), t.openElements.pop(), t.insertionMode = V.IN_TABLE_BODY, rE(t, e));
      break;
    }
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD: {
      (t.openElements.hasInTableScope(e.tagID) || t.openElements.hasInTableScope(h.TR)) && (t.openElements.clearBackToTableRowContext(), t.openElements.pop(), t.insertionMode = V.IN_TABLE_BODY, rE(t, e));
      break;
    }
    case h.BODY:
    case h.CAPTION:
    case h.COL:
    case h.COLGROUP:
    case h.HTML:
    case h.TD:
    case h.TH:
      break;
    default:
      Bl(t, e);
  }
}
function cQ(t, e) {
  const n = e.tagID;
  f3.has(n) ? (t.openElements.hasInTableScope(h.TD) || t.openElements.hasInTableScope(h.TH)) && (t._closeTableCell(), $d(t, e)) : or(t, e);
}
function uQ(t, e) {
  const n = e.tagID;
  switch (n) {
    case h.TD:
    case h.TH: {
      t.openElements.hasInTableScope(n) && (t.openElements.generateImpliedEndTags(), t.openElements.popUntilTagNamePopped(n), t.activeFormattingElements.clearToLastMarker(), t.insertionMode = V.IN_ROW);
      break;
    }
    case h.TABLE:
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD:
    case h.TR: {
      t.openElements.hasInTableScope(n) && (t._closeTableCell(), g3(t, e));
      break;
    }
    case h.BODY:
    case h.CAPTION:
    case h.COL:
    case h.COLGROUP:
    case h.HTML:
      break;
    default:
      qd(t, e);
  }
}
function h3(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.OPTION: {
      t.openElements.currentTagId === h.OPTION && t.openElements.pop(), t._insertElement(e, Te.HTML);
      break;
    }
    case h.OPTGROUP: {
      t.openElements.currentTagId === h.OPTION && t.openElements.pop(), t.openElements.currentTagId === h.OPTGROUP && t.openElements.pop(), t._insertElement(e, Te.HTML);
      break;
    }
    case h.INPUT:
    case h.KEYGEN:
    case h.TEXTAREA:
    case h.SELECT: {
      t.openElements.hasInSelectScope(h.SELECT) && (t.openElements.popUntilTagNamePopped(h.SELECT), t._resetInsertionMode(), e.tagID !== h.SELECT && t._processStartTag(e));
      break;
    }
    case h.SCRIPT:
    case h.TEMPLATE: {
      ya(t, e);
      break;
    }
  }
}
function E3(t, e) {
  switch (e.tagID) {
    case h.OPTGROUP: {
      t.openElements.stackTop > 0 && t.openElements.currentTagId === h.OPTION && t.openElements.tagIDs[t.openElements.stackTop - 1] === h.OPTGROUP && t.openElements.pop(), t.openElements.currentTagId === h.OPTGROUP && t.openElements.pop();
      break;
    }
    case h.OPTION: {
      t.openElements.currentTagId === h.OPTION && t.openElements.pop();
      break;
    }
    case h.SELECT: {
      t.openElements.hasInSelectScope(h.SELECT) && (t.openElements.popUntilTagNamePopped(h.SELECT), t._resetInsertionMode());
      break;
    }
    case h.TEMPLATE: {
      bs(t, e);
      break;
    }
  }
}
function dQ(t, e) {
  const n = e.tagID;
  n === h.CAPTION || n === h.TABLE || n === h.TBODY || n === h.TFOOT || n === h.THEAD || n === h.TR || n === h.TD || n === h.TH ? (t.openElements.popUntilTagNamePopped(h.SELECT), t._resetInsertionMode(), t._processStartTag(e)) : h3(t, e);
}
function pQ(t, e) {
  const n = e.tagID;
  n === h.CAPTION || n === h.TABLE || n === h.TBODY || n === h.TFOOT || n === h.THEAD || n === h.TR || n === h.TD || n === h.TH ? t.openElements.hasInTableScope(n) && (t.openElements.popUntilTagNamePopped(h.SELECT), t._resetInsertionMode(), t.onEndTag(e)) : E3(t, e);
}
function _Q(t, e) {
  switch (e.tagID) {
    case h.BASE:
    case h.BASEFONT:
    case h.BGSOUND:
    case h.LINK:
    case h.META:
    case h.NOFRAMES:
    case h.SCRIPT:
    case h.STYLE:
    case h.TEMPLATE:
    case h.TITLE: {
      ya(t, e);
      break;
    }
    case h.CAPTION:
    case h.COLGROUP:
    case h.TBODY:
    case h.TFOOT:
    case h.THEAD: {
      t.tmplInsertionModeStack[0] = V.IN_TABLE, t.insertionMode = V.IN_TABLE, ro(t, e);
      break;
    }
    case h.COL: {
      t.tmplInsertionModeStack[0] = V.IN_COLUMN_GROUP, t.insertionMode = V.IN_COLUMN_GROUP, M1(t, e);
      break;
    }
    case h.TR: {
      t.tmplInsertionModeStack[0] = V.IN_TABLE_BODY, t.insertionMode = V.IN_TABLE_BODY, Vd(t, e);
      break;
    }
    case h.TD:
    case h.TH: {
      t.tmplInsertionModeStack[0] = V.IN_ROW, t.insertionMode = V.IN_ROW, $d(t, e);
      break;
    }
    default:
      t.tmplInsertionModeStack[0] = V.IN_BODY, t.insertionMode = V.IN_BODY, or(t, e);
  }
}
function mQ(t, e) {
  e.tagID === h.TEMPLATE && bs(t, e);
}
function S3(t, e) {
  t.openElements.tmplCount > 0 ? (t.openElements.popUntilTagNamePopped(h.TEMPLATE), t.activeFormattingElements.clearToLastMarker(), t.tmplInsertionModeStack.shift(), t._resetInsertionMode(), t.onEof(e)) : L1(t, e);
}
function fQ(t, e) {
  e.tagID === h.HTML ? or(t, e) : dd(t, e);
}
function b3(t, e) {
  var n;
  if (e.tagID === h.HTML) {
    if (t.fragmentContext || (t.insertionMode = V.AFTER_AFTER_BODY), t.options.sourceCodeLocationInfo && t.openElements.tagIDs[0] === h.HTML) {
      t._setEndLocation(t.openElements.items[0], e);
      const r = t.openElements.items[1];
      r && !(!((n = t.treeAdapter.getNodeSourceCodeLocation(r)) === null || n === void 0) && n.endTag) && t._setEndLocation(r, e);
    }
  } else
    dd(t, e);
}
function dd(t, e) {
  t.insertionMode = V.IN_BODY, zd(t, e);
}
function gQ(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.FRAMESET: {
      t._insertElement(e, Te.HTML);
      break;
    }
    case h.FRAME: {
      t._appendElement(e, Te.HTML), e.ackSelfClosing = !0;
      break;
    }
    case h.NOFRAMES: {
      ya(t, e);
      break;
    }
  }
}
function hQ(t, e) {
  e.tagID === h.FRAMESET && !t.openElements.isRootHtmlElementCurrent() && (t.openElements.pop(), !t.fragmentContext && t.openElements.currentTagId !== h.FRAMESET && (t.insertionMode = V.AFTER_FRAMESET));
}
function EQ(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.NOFRAMES: {
      ya(t, e);
      break;
    }
  }
}
function SQ(t, e) {
  e.tagID === h.HTML && (t.insertionMode = V.AFTER_AFTER_FRAMESET);
}
function bQ(t, e) {
  e.tagID === h.HTML ? or(t, e) : Vu(t, e);
}
function Vu(t, e) {
  t.insertionMode = V.IN_BODY, zd(t, e);
}
function TQ(t, e) {
  switch (e.tagID) {
    case h.HTML: {
      or(t, e);
      break;
    }
    case h.NOFRAMES: {
      ya(t, e);
      break;
    }
  }
}
function yQ(t, e) {
  e.chars = _n, t._insertCharacters(e);
}
function vQ(t, e) {
  t._insertCharacters(e), t.framesetOk = !1;
}
function T3(t) {
  for (; t.treeAdapter.getNamespaceURI(t.openElements.current) !== Te.HTML && !t._isIntegrationPoint(t.openElements.currentTagId, t.openElements.current); )
    t.openElements.pop();
}
function CQ(t, e) {
  if (UW(e))
    T3(t), t._startTagOutsideForeignContent(e);
  else {
    const n = t._getAdjustedCurrentElement(), r = t.treeAdapter.getNamespaceURI(n);
    r === Te.MATHML ? a3(e) : r === Te.SVG && (GW(e), i3(e)), D1(e), e.selfClosing ? t._appendElement(e, r) : t._insertElement(e, r), e.ackSelfClosing = !0;
  }
}
function RQ(t, e) {
  if (e.tagID === h.P || e.tagID === h.BR) {
    T3(t), t._endTagOutsideForeignContent(e);
    return;
  }
  for (let n = t.openElements.stackTop; n > 0; n--) {
    const r = t.openElements.items[n];
    if (t.treeAdapter.getNamespaceURI(r) === Te.HTML) {
      t._endTagOutsideForeignContent(e);
      break;
    }
    const a = t.treeAdapter.getTagName(r);
    if (a.toLowerCase() === e.tagName) {
      e.tagName = a, t.openElements.shortenToLength(n);
      break;
    }
  }
}
ie.AREA, ie.BASE, ie.BASEFONT, ie.BGSOUND, ie.BR, ie.COL, ie.EMBED, ie.FRAME, ie.HR, ie.IMG, ie.INPUT, ie.KEYGEN, ie.LINK, ie.META, ie.PARAM, ie.SOURCE, ie.TRACK, ie.WBR;
const AQ = /* @__PURE__ */ new Set([
  "mdxFlowExpression",
  "mdxJsxFlowElement",
  "mdxJsxTextElement",
  "mdxTextExpression",
  "mdxjsEsm"
]), DC = { sourceCodeLocationInfo: !0, scriptingEnabled: !1 };
function y3(t, e) {
  const n = PQ(t), r = Y4("type", {
    handlers: { root: OQ, element: NQ, text: IQ, comment: C3, doctype: xQ, raw: wQ },
    unknown: LQ
  }), a = {
    parser: n ? new NC(DC) : NC.getFragmentParser(void 0, DC),
    handle(l) {
      r(l, a);
    },
    stitches: !1,
    options: e || {}
  };
  r(t, a), To(a, Ga());
  const i = n ? a.parser.document : a.parser.getFragment(), s = B$(i, {
    // To do: support `space`?
    file: a.options.file
  });
  return a.stitches && Xl(s, "comment", function(l, c, d) {
    const p = (
      /** @type {Stitch} */
      /** @type {unknown} */
      l
    );
    if (p.value.stitch && d && c !== void 0) {
      const _ = d.children;
      return _[c] = p.value.stitch, c;
    }
  }), s.type === "root" && s.children.length === 1 && s.children[0].type === t.type ? s.children[0] : s;
}
function v3(t, e) {
  let n = -1;
  if (t)
    for (; ++n < t.length; )
      e.handle(t[n]);
}
function OQ(t, e) {
  v3(t.children, e);
}
function NQ(t, e) {
  MQ(t, e), v3(t.children, e), kQ(t, e);
}
function IQ(t, e) {
  const n = {
    type: Ot.CHARACTER,
    chars: t.value,
    location: rc(t)
  };
  To(e, Ga(t)), e.parser.currentToken = n, e.parser._processToken(e.parser.currentToken);
}
function xQ(t, e) {
  const n = {
    type: Ot.DOCTYPE,
    name: "html",
    forceQuirks: !1,
    publicId: "",
    systemId: "",
    location: rc(t)
  };
  To(e, Ga(t)), e.parser.currentToken = n, e.parser._processToken(e.parser.currentToken);
}
function DQ(t, e) {
  e.stitches = !0;
  const n = FQ(t);
  if ("children" in t && "children" in n) {
    const r = (
      /** @type {Root} */
      y3({ type: "root", children: t.children }, e.options)
    );
    n.children = r.children;
  }
  C3({ type: "comment", value: { stitch: n } }, e);
}
function C3(t, e) {
  const n = t.value, r = {
    type: Ot.COMMENT,
    data: n,
    location: rc(t)
  };
  To(e, Ga(t)), e.parser.currentToken = r, e.parser._processToken(e.parser.currentToken);
}
function wQ(t, e) {
  if (e.parser.tokenizer.preprocessor.html = "", e.parser.tokenizer.preprocessor.pos = -1, e.parser.tokenizer.preprocessor.lastGapPos = -2, e.parser.tokenizer.preprocessor.gapStack = [], e.parser.tokenizer.preprocessor.skipNextNewLine = !1, e.parser.tokenizer.preprocessor.lastChunkWritten = !1, e.parser.tokenizer.preprocessor.endOfChunkHit = !1, e.parser.tokenizer.preprocessor.isEol = !1, R3(e, Ga(t)), e.parser.tokenizer.write(t.value, !1), e.parser.tokenizer._runParsingLoop(), e.parser.tokenizer.state === 72 || e.parser.tokenizer.state === 78) {
    e.parser.tokenizer.preprocessor.lastChunkWritten = !0;
    const n = e.parser.tokenizer._consume();
    e.parser.tokenizer._callState(n);
  }
}
function LQ(t, e) {
  const n = (
    /** @type {Nodes} */
    t
  );
  if (e.options.passThrough && e.options.passThrough.includes(n.type))
    DQ(n, e);
  else {
    let r = "";
    throw AQ.has(n.type) && (r = ". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax"), new Error("Cannot compile `" + n.type + "` node" + r);
  }
}
function To(t, e) {
  R3(t, e);
  const n = t.parser.tokenizer.currentCharacterToken;
  n && n.location && (n.location.endLine = t.parser.tokenizer.preprocessor.line, n.location.endCol = t.parser.tokenizer.preprocessor.col + 1, n.location.endOffset = t.parser.tokenizer.preprocessor.offset + 1, t.parser.currentToken = n, t.parser._processToken(t.parser.currentToken)), t.parser.tokenizer.paused = !1, t.parser.tokenizer.inLoop = !1, t.parser.tokenizer.active = !1, t.parser.tokenizer.returnState = xn.DATA, t.parser.tokenizer.charRefCode = -1, t.parser.tokenizer.consumedAfterSnapshot = -1, t.parser.tokenizer.currentLocation = null, t.parser.tokenizer.currentCharacterToken = null, t.parser.tokenizer.currentToken = null, t.parser.tokenizer.currentAttr = { name: "", value: "" };
}
function R3(t, e) {
  if (e && e.offset !== void 0) {
    const n = {
      startLine: e.line,
      startCol: e.column,
      startOffset: e.offset,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    };
    t.parser.tokenizer.preprocessor.lineStartPos = -e.column + 1, t.parser.tokenizer.preprocessor.droppedBufferSize = e.offset, t.parser.tokenizer.preprocessor.line = e.line, t.parser.tokenizer.currentLocation = n;
  }
}
function MQ(t, e) {
  if (e.parser.tokenizer.state === xn.PLAINTEXT) return;
  To(e, Ga(t));
  const n = e.parser.openElements.current;
  let r = "namespaceURI" in n ? n.namespaceURI : wa.html;
  r === wa.html && t.tagName === "svg" && (r = wa.svg);
  const a = z$(
    // Shallow clone to not delve into `children`: we only need the attributes.
    { ...t, children: [] },
    { space: r === wa.svg ? "svg" : "html" }
  ), i = "attrs" in a ? a.attrs : [], s = {
    type: Ot.START_TAG,
    tagName: t.tagName,
    tagID: bo(t.tagName),
    // We always send start and end tags.
    selfClosing: !1,
    ackSelfClosing: !1,
    attrs: i,
    location: rc(t)
  };
  e.parser.currentToken = s, e.parser._processToken(e.parser.currentToken), e.parser.tokenizer.lastStartTagName = t.tagName;
}
function kQ(t, e) {
  if (!e.parser.tokenizer.inForeignNode && X$.includes(t.tagName) || e.parser.tokenizer.state === xn.PLAINTEXT) return;
  To(e, wd(t));
  const n = {
    type: Ot.END_TAG,
    tagName: t.tagName,
    tagID: bo(t.tagName),
    selfClosing: !1,
    ackSelfClosing: !1,
    attrs: [],
    location: rc(t)
  };
  e.parser.currentToken = n, e.parser._processToken(e.parser.currentToken), // Current element is closed.
  n.tagName === e.parser.tokenizer.lastStartTagName && // `<textarea>` and `<title>`
  (e.parser.tokenizer.state === xn.RCDATA || // `<iframe>`, `<noembed>`, `<style>`, `<xmp>`
  e.parser.tokenizer.state === xn.RAWTEXT || // `<script>`
  e.parser.tokenizer.state === xn.SCRIPT_DATA) && (e.parser.tokenizer.state = xn.DATA);
}
function PQ(t) {
  const e = t.type === "root" ? t.children[0] : t;
  return !!(e && (e.type === "doctype" || e.type === "element" && e.tagName === "html"));
}
function rc(t) {
  const e = Ga(t) || {
    line: void 0,
    column: void 0,
    offset: void 0
  }, n = wd(t) || {
    line: void 0,
    column: void 0,
    offset: void 0
  };
  return {
    startLine: e.line,
    startCol: e.column,
    startOffset: e.offset,
    endLine: n.line,
    endCol: n.column,
    endOffset: n.offset
  };
}
function FQ(t) {
  return "children" in t ? to({ ...t, children: [] }) : to(t);
}
function BQ(t) {
  return function(e, n) {
    return (
      /** @type {Root} */
      y3(e, { ...t, file: n })
    );
  };
}
function wC(t, e) {
  const n = String(t);
  if (typeof e != "string")
    throw new TypeError("Expected character");
  let r = 0, a = n.indexOf(e);
  for (; a !== -1; )
    r++, a = n.indexOf(e, a + e.length);
  return r;
}
function UQ(t) {
  if (typeof t != "string")
    throw new TypeError("Expected a string");
  return t.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function GQ(t, e, n) {
  const a = jl((n || {}).ignore || []), i = HQ(e);
  let s = -1;
  for (; ++s < i.length; )
    s1(t, "text", l);
  function l(d, p) {
    let _ = -1, f;
    for (; ++_ < p.length; ) {
      const g = p[_], E = f ? f.children : void 0;
      if (a(
        g,
        E ? E.indexOf(g) : void 0,
        f
      ))
        return;
      f = g;
    }
    if (f)
      return c(d, p);
  }
  function c(d, p) {
    const _ = p[p.length - 1], f = i[s][0], g = i[s][1];
    let E = 0;
    const R = _.children.indexOf(d);
    let A = !1, I = [];
    f.lastIndex = 0;
    let x = f.exec(d.value);
    for (; x; ) {
      const P = x.index, D = {
        index: x.index,
        input: x.input,
        stack: [...p, d]
      };
      let L = g(...x, D);
      if (typeof L == "string" && (L = L.length > 0 ? { type: "text", value: L } : void 0), L === !1 ? f.lastIndex = P + 1 : (E !== P && I.push({
        type: "text",
        value: d.value.slice(E, P)
      }), Array.isArray(L) ? I.push(...L) : L && I.push(L), E = P + x[0].length, A = !0), !f.global)
        break;
      x = f.exec(d.value);
    }
    return A ? (E < d.value.length && I.push({ type: "text", value: d.value.slice(E) }), _.children.splice(R, 1, ...I)) : I = [d], R + I.length;
  }
}
function HQ(t) {
  const e = [];
  if (!Array.isArray(t))
    throw new TypeError("Expected find and replace tuple or list of tuples");
  const n = !t[0] || Array.isArray(t[0]) ? t : [t];
  let r = -1;
  for (; ++r < n.length; ) {
    const a = n[r];
    e.push([YQ(a[0]), zQ(a[1])]);
  }
  return e;
}
function YQ(t) {
  return typeof t == "string" ? new RegExp(UQ(t), "g") : t;
}
function zQ(t) {
  return typeof t == "function" ? t : function() {
    return t;
  };
}
const b_ = "phrasing", T_ = ["autolink", "link", "image", "label"];
function qQ() {
  return {
    transforms: [XQ],
    enter: {
      literalAutolink: $Q,
      literalAutolinkEmail: y_,
      literalAutolinkHttp: y_,
      literalAutolinkWww: y_
    },
    exit: {
      literalAutolink: jQ,
      literalAutolinkEmail: QQ,
      literalAutolinkHttp: WQ,
      literalAutolinkWww: KQ
    }
  };
}
function VQ() {
  return {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct: b_,
        notInConstruct: T_
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct: b_,
        notInConstruct: T_
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct: b_,
        notInConstruct: T_
      }
    ]
  };
}
function $Q(t) {
  this.enter({ type: "link", title: null, url: "", children: [] }, t);
}
function y_(t) {
  this.config.enter.autolinkProtocol.call(this, t);
}
function WQ(t) {
  this.config.exit.autolinkProtocol.call(this, t);
}
function KQ(t) {
  this.config.exit.data.call(this, t);
  const e = this.stack[this.stack.length - 1];
  e.type, e.url = "http://" + this.sliceSerialize(t);
}
function QQ(t) {
  this.config.exit.autolinkEmail.call(this, t);
}
function jQ(t) {
  this.exit(t);
}
function XQ(t) {
  GQ(
    t,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, ZQ],
      [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, JQ]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function ZQ(t, e, n, r, a) {
  let i = "";
  if (!A3(a) || (/^w/i.test(e) && (n = e + n, e = "", i = "http://"), !ej(n)))
    return !1;
  const s = tj(n + r);
  if (!s[0]) return !1;
  const l = {
    type: "link",
    title: null,
    url: i + e + s[0],
    children: [{ type: "text", value: e + s[0] }]
  };
  return s[1] ? [l, { type: "text", value: s[1] }] : l;
}
function JQ(t, e, n, r) {
  return (
    // Not an expected previous character.
    !A3(r, !0) || // Label ends in not allowed character.
    /[-\d_]$/.test(n) ? !1 : {
      type: "link",
      title: null,
      url: "mailto:" + e + "@" + n,
      children: [{ type: "text", value: e + "@" + n }]
    }
  );
}
function ej(t) {
  const e = t.split(".");
  return !(e.length < 2 || e[e.length - 1] && (/_/.test(e[e.length - 1]) || !/[a-zA-Z\d]/.test(e[e.length - 1])) || e[e.length - 2] && (/_/.test(e[e.length - 2]) || !/[a-zA-Z\d]/.test(e[e.length - 2])));
}
function tj(t) {
  const e = /[!"&'),.:;<>?\]}]+$/.exec(t);
  if (!e)
    return [t, void 0];
  t = t.slice(0, e.index);
  let n = e[0], r = n.indexOf(")");
  const a = wC(t, "(");
  let i = wC(t, ")");
  for (; r !== -1 && a > i; )
    t += n.slice(0, r + 1), n = n.slice(r + 1), r = n.indexOf(")"), i++;
  return [t, n];
}
function A3(t, e) {
  const n = t.input.charCodeAt(t.index - 1);
  return (t.index === 0 || fs(n) || Ld(n)) && (!e || n !== 47);
}
O3.peek = pj;
function nj() {
  return {
    enter: {
      gfmFootnoteDefinition: aj,
      gfmFootnoteDefinitionLabelString: ij,
      gfmFootnoteCall: lj,
      gfmFootnoteCallString: cj
    },
    exit: {
      gfmFootnoteDefinition: oj,
      gfmFootnoteDefinitionLabelString: sj,
      gfmFootnoteCall: dj,
      gfmFootnoteCallString: uj
    }
  };
}
function rj() {
  return {
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["phrasing", "label", "reference"] }],
    handlers: { footnoteDefinition: _j, footnoteReference: O3 }
  };
}
function aj(t) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    t
  );
}
function ij() {
  this.buffer();
}
function sj(t) {
  const e = this.resume(), n = this.stack[this.stack.length - 1];
  n.type, n.label = e, n.identifier = Ta(
    this.sliceSerialize(t)
  ).toLowerCase();
}
function oj(t) {
  this.exit(t);
}
function lj(t) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, t);
}
function cj() {
  this.buffer();
}
function uj(t) {
  const e = this.resume(), n = this.stack[this.stack.length - 1];
  n.type, n.label = e, n.identifier = Ta(
    this.sliceSerialize(t)
  ).toLowerCase();
}
function dj(t) {
  this.exit(t);
}
function O3(t, e, n, r) {
  const a = n.createTracker(r);
  let i = a.move("[^");
  const s = n.enter("footnoteReference"), l = n.enter("reference");
  return i += a.move(
    n.safe(n.associationId(t), {
      ...a.current(),
      before: i,
      after: "]"
    })
  ), l(), s(), i += a.move("]"), i;
}
function pj() {
  return "[";
}
function _j(t, e, n, r) {
  const a = n.createTracker(r);
  let i = a.move("[^");
  const s = n.enter("footnoteDefinition"), l = n.enter("label");
  return i += a.move(
    n.safe(n.associationId(t), {
      ...a.current(),
      before: i,
      after: "]"
    })
  ), l(), i += a.move(
    "]:" + (t.children && t.children.length > 0 ? " " : "")
  ), a.shift(4), i += a.move(
    n.indentLines(n.containerFlow(t, a.current()), mj)
  ), s(), i;
}
function mj(t, e, n) {
  return e === 0 ? t : (n ? "" : "    ") + t;
}
const fj = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
N3.peek = bj;
function gj() {
  return {
    canContainEols: ["delete"],
    enter: { strikethrough: Ej },
    exit: { strikethrough: Sj }
  };
}
function hj() {
  return {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: fj
      }
    ],
    handlers: { delete: N3 }
  };
}
function Ej(t) {
  this.enter({ type: "delete", children: [] }, t);
}
function Sj(t) {
  this.exit(t);
}
function N3(t, e, n, r) {
  const a = n.createTracker(r), i = n.enter("strikethrough");
  let s = a.move("~~");
  return s += n.containerPhrasing(t, {
    ...a.current(),
    before: s,
    after: "~"
  }), s += a.move("~~"), i(), s;
}
function bj() {
  return "~";
}
function Tj(t, e = {}) {
  const n = (e.align || []).concat(), r = e.stringLength || vj, a = [], i = [], s = [], l = [];
  let c = 0, d = -1;
  for (; ++d < t.length; ) {
    const E = [], T = [];
    let R = -1;
    for (t[d].length > c && (c = t[d].length); ++R < t[d].length; ) {
      const A = yj(t[d][R]);
      if (e.alignDelimiters !== !1) {
        const I = r(A);
        T[R] = I, (l[R] === void 0 || I > l[R]) && (l[R] = I);
      }
      E.push(A);
    }
    i[d] = E, s[d] = T;
  }
  let p = -1;
  if (typeof n == "object" && "length" in n)
    for (; ++p < c; )
      a[p] = LC(n[p]);
  else {
    const E = LC(n);
    for (; ++p < c; )
      a[p] = E;
  }
  p = -1;
  const _ = [], f = [];
  for (; ++p < c; ) {
    const E = a[p];
    let T = "", R = "";
    E === 99 ? (T = ":", R = ":") : E === 108 ? T = ":" : E === 114 && (R = ":");
    let A = e.alignDelimiters === !1 ? 1 : Math.max(
      1,
      l[p] - T.length - R.length
    );
    const I = T + "-".repeat(A) + R;
    e.alignDelimiters !== !1 && (A = T.length + A + R.length, A > l[p] && (l[p] = A), f[p] = A), _[p] = I;
  }
  i.splice(1, 0, _), s.splice(1, 0, f), d = -1;
  const g = [];
  for (; ++d < i.length; ) {
    const E = i[d], T = s[d];
    p = -1;
    const R = [];
    for (; ++p < c; ) {
      const A = E[p] || "";
      let I = "", x = "";
      if (e.alignDelimiters !== !1) {
        const P = l[p] - (T[p] || 0), D = a[p];
        D === 114 ? I = " ".repeat(P) : D === 99 ? P % 2 ? (I = " ".repeat(P / 2 + 0.5), x = " ".repeat(P / 2 - 0.5)) : (I = " ".repeat(P / 2), x = I) : x = " ".repeat(P);
      }
      e.delimiterStart !== !1 && !p && R.push("|"), e.padding !== !1 && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(e.alignDelimiters === !1 && A === "") && (e.delimiterStart !== !1 || p) && R.push(" "), e.alignDelimiters !== !1 && R.push(I), R.push(A), e.alignDelimiters !== !1 && R.push(x), e.padding !== !1 && R.push(" "), (e.delimiterEnd !== !1 || p !== c - 1) && R.push("|");
    }
    g.push(
      e.delimiterEnd === !1 ? R.join("").replace(/ +$/, "") : R.join("")
    );
  }
  return g.join(`
`);
}
function yj(t) {
  return t == null ? "" : String(t);
}
function vj(t) {
  return t.length;
}
function LC(t) {
  const e = typeof t == "string" ? t.codePointAt(0) : 0;
  return e === 67 || e === 99 ? 99 : e === 76 || e === 108 ? 108 : e === 82 || e === 114 ? 114 : 0;
}
function Cj(t, e, n, r) {
  const a = n.enter("blockquote"), i = n.createTracker(r);
  i.move("> "), i.shift(2);
  const s = n.indentLines(
    n.containerFlow(t, i.current()),
    Rj
  );
  return a(), s;
}
function Rj(t, e, n) {
  return ">" + (n ? "" : " ") + t;
}
function Aj(t, e) {
  return MC(t, e.inConstruct, !0) && !MC(t, e.notInConstruct, !1);
}
function MC(t, e, n) {
  if (typeof e == "string" && (e = [e]), !e || e.length === 0)
    return n;
  let r = -1;
  for (; ++r < e.length; )
    if (t.includes(e[r]))
      return !0;
  return !1;
}
function kC(t, e, n, r) {
  let a = -1;
  for (; ++a < n.unsafe.length; )
    if (n.unsafe[a].character === `
` && Aj(n.stack, n.unsafe[a]))
      return /[ \t]/.test(r.before) ? "" : " ";
  return `\\
`;
}
function I3(t, e) {
  const n = String(t);
  let r = n.indexOf(e), a = r, i = 0, s = 0;
  if (typeof e != "string")
    throw new TypeError("Expected substring");
  for (; r !== -1; )
    r === a ? ++i > s && (s = i) : i = 1, a = r + e.length, r = n.indexOf(e, a);
  return s;
}
function Oj(t, e) {
  return !!(e.options.fences === !1 && t.value && // If there’s no info…
  !t.lang && // And there’s a non-whitespace character…
  /[^ \r\n]/.test(t.value) && // And the value doesn’t start or end in a blank…
  !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(t.value));
}
function Nj(t) {
  const e = t.options.fence || "`";
  if (e !== "`" && e !== "~")
    throw new Error(
      "Cannot serialize code with `" + e + "` for `options.fence`, expected `` ` `` or `~`"
    );
  return e;
}
function Ij(t, e, n, r) {
  const a = Nj(n), i = t.value || "", s = a === "`" ? "GraveAccent" : "Tilde";
  if (Oj(t, n)) {
    const _ = n.enter("codeIndented"), f = n.indentLines(i, xj);
    return _(), f;
  }
  const l = n.createTracker(r), c = a.repeat(Math.max(I3(i, a) + 1, 3)), d = n.enter("codeFenced");
  let p = l.move(c);
  if (t.lang) {
    const _ = n.enter(`codeFencedLang${s}`);
    p += l.move(
      n.safe(t.lang, {
        before: p,
        after: " ",
        encode: ["`"],
        ...l.current()
      })
    ), _();
  }
  if (t.lang && t.meta) {
    const _ = n.enter(`codeFencedMeta${s}`);
    p += l.move(" "), p += l.move(
      n.safe(t.meta, {
        before: p,
        after: `
`,
        encode: ["`"],
        ...l.current()
      })
    ), _();
  }
  return p += l.move(`
`), i && (p += l.move(i + `
`)), p += l.move(c), d(), p;
}
function xj(t, e, n) {
  return (n ? "" : "    ") + t;
}
function k1(t) {
  const e = t.options.quote || '"';
  if (e !== '"' && e !== "'")
    throw new Error(
      "Cannot serialize title with `" + e + "` for `options.quote`, expected `\"`, or `'`"
    );
  return e;
}
function Dj(t, e, n, r) {
  const a = k1(n), i = a === '"' ? "Quote" : "Apostrophe", s = n.enter("definition");
  let l = n.enter("label");
  const c = n.createTracker(r);
  let d = c.move("[");
  return d += c.move(
    n.safe(n.associationId(t), {
      before: d,
      after: "]",
      ...c.current()
    })
  ), d += c.move("]: "), l(), // If there’s no url, or…
  !t.url || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(t.url) ? (l = n.enter("destinationLiteral"), d += c.move("<"), d += c.move(
    n.safe(t.url, { before: d, after: ">", ...c.current() })
  ), d += c.move(">")) : (l = n.enter("destinationRaw"), d += c.move(
    n.safe(t.url, {
      before: d,
      after: t.title ? " " : `
`,
      ...c.current()
    })
  )), l(), t.title && (l = n.enter(`title${i}`), d += c.move(" " + a), d += c.move(
    n.safe(t.title, {
      before: d,
      after: a,
      ...c.current()
    })
  ), d += c.move(a), l()), s(), d;
}
function wj(t) {
  const e = t.options.emphasis || "*";
  if (e !== "*" && e !== "_")
    throw new Error(
      "Cannot serialize emphasis with `" + e + "` for `options.emphasis`, expected `*`, or `_`"
    );
  return e;
}
x3.peek = Lj;
function x3(t, e, n, r) {
  const a = wj(n), i = n.enter("emphasis"), s = n.createTracker(r);
  let l = s.move(a);
  return l += s.move(
    n.containerPhrasing(t, {
      before: l,
      after: a,
      ...s.current()
    })
  ), l += s.move(a), i(), l;
}
function Lj(t, e, n) {
  return n.options.emphasis || "*";
}
function Mj(t, e) {
  let n = !1;
  return Xl(t, function(r) {
    if ("value" in r && /\r?\n|\r/.test(r.value) || r.type === "break")
      return n = !0, Bh;
  }), !!((!t.depth || t.depth < 3) && JE(t) && (e.options.setext || n));
}
function kj(t, e, n, r) {
  const a = Math.max(Math.min(6, t.depth || 1), 1), i = n.createTracker(r);
  if (Mj(t, n)) {
    const p = n.enter("headingSetext"), _ = n.enter("phrasing"), f = n.containerPhrasing(t, {
      ...i.current(),
      before: `
`,
      after: `
`
    });
    return _(), p(), f + `
` + (a === 1 ? "=" : "-").repeat(
      // The whole size…
      f.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(f.lastIndexOf("\r"), f.lastIndexOf(`
`)) + 1)
    );
  }
  const s = "#".repeat(a), l = n.enter("headingAtx"), c = n.enter("phrasing");
  i.move(s + " ");
  let d = n.containerPhrasing(t, {
    before: "# ",
    after: `
`,
    ...i.current()
  });
  return /^[\t ]/.test(d) && (d = "&#x" + d.charCodeAt(0).toString(16).toUpperCase() + ";" + d.slice(1)), d = d ? s + " " + d : s, n.options.closeAtx && (d += " " + s), c(), l(), d;
}
D3.peek = Pj;
function D3(t) {
  return t.value || "";
}
function Pj() {
  return "<";
}
w3.peek = Fj;
function w3(t, e, n, r) {
  const a = k1(n), i = a === '"' ? "Quote" : "Apostrophe", s = n.enter("image");
  let l = n.enter("label");
  const c = n.createTracker(r);
  let d = c.move("![");
  return d += c.move(
    n.safe(t.alt, { before: d, after: "]", ...c.current() })
  ), d += c.move("]("), l(), // If there’s no url but there is a title…
  !t.url && t.title || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(t.url) ? (l = n.enter("destinationLiteral"), d += c.move("<"), d += c.move(
    n.safe(t.url, { before: d, after: ">", ...c.current() })
  ), d += c.move(">")) : (l = n.enter("destinationRaw"), d += c.move(
    n.safe(t.url, {
      before: d,
      after: t.title ? " " : ")",
      ...c.current()
    })
  )), l(), t.title && (l = n.enter(`title${i}`), d += c.move(" " + a), d += c.move(
    n.safe(t.title, {
      before: d,
      after: a,
      ...c.current()
    })
  ), d += c.move(a), l()), d += c.move(")"), s(), d;
}
function Fj() {
  return "!";
}
L3.peek = Bj;
function L3(t, e, n, r) {
  const a = t.referenceType, i = n.enter("imageReference");
  let s = n.enter("label");
  const l = n.createTracker(r);
  let c = l.move("![");
  const d = n.safe(t.alt, {
    before: c,
    after: "]",
    ...l.current()
  });
  c += l.move(d + "]["), s();
  const p = n.stack;
  n.stack = [], s = n.enter("reference");
  const _ = n.safe(n.associationId(t), {
    before: c,
    after: "]",
    ...l.current()
  });
  return s(), n.stack = p, i(), a === "full" || !d || d !== _ ? c += l.move(_ + "]") : a === "shortcut" ? c = c.slice(0, -1) : c += l.move("]"), c;
}
function Bj() {
  return "!";
}
M3.peek = Uj;
function M3(t, e, n) {
  let r = t.value || "", a = "`", i = -1;
  for (; new RegExp("(^|[^`])" + a + "([^`]|$)").test(r); )
    a += "`";
  for (/[^ \r\n]/.test(r) && (/^[ \r\n]/.test(r) && /[ \r\n]$/.test(r) || /^`|`$/.test(r)) && (r = " " + r + " "); ++i < n.unsafe.length; ) {
    const s = n.unsafe[i], l = n.compilePattern(s);
    let c;
    if (s.atBreak)
      for (; c = l.exec(r); ) {
        let d = c.index;
        r.charCodeAt(d) === 10 && r.charCodeAt(d - 1) === 13 && d--, r = r.slice(0, d) + " " + r.slice(c.index + 1);
      }
  }
  return a + r + a;
}
function Uj() {
  return "`";
}
function k3(t, e) {
  const n = JE(t);
  return !!(!e.options.resourceLink && // If there’s a url…
  t.url && // And there’s a no title…
  !t.title && // And the content of `node` is a single text node…
  t.children && t.children.length === 1 && t.children[0].type === "text" && // And if the url is the same as the content…
  (n === t.url || "mailto:" + n === t.url) && // And that starts w/ a protocol…
  /^[a-z][a-z+.-]+:/i.test(t.url) && // And that doesn’t contain ASCII control codes (character escapes and
  // references don’t work), space, or angle brackets…
  !/[\0- <>\u007F]/.test(t.url));
}
P3.peek = Gj;
function P3(t, e, n, r) {
  const a = k1(n), i = a === '"' ? "Quote" : "Apostrophe", s = n.createTracker(r);
  let l, c;
  if (k3(t, n)) {
    const p = n.stack;
    n.stack = [], l = n.enter("autolink");
    let _ = s.move("<");
    return _ += s.move(
      n.containerPhrasing(t, {
        before: _,
        after: ">",
        ...s.current()
      })
    ), _ += s.move(">"), l(), n.stack = p, _;
  }
  l = n.enter("link"), c = n.enter("label");
  let d = s.move("[");
  return d += s.move(
    n.containerPhrasing(t, {
      before: d,
      after: "](",
      ...s.current()
    })
  ), d += s.move("]("), c(), // If there’s no url but there is a title…
  !t.url && t.title || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(t.url) ? (c = n.enter("destinationLiteral"), d += s.move("<"), d += s.move(
    n.safe(t.url, { before: d, after: ">", ...s.current() })
  ), d += s.move(">")) : (c = n.enter("destinationRaw"), d += s.move(
    n.safe(t.url, {
      before: d,
      after: t.title ? " " : ")",
      ...s.current()
    })
  )), c(), t.title && (c = n.enter(`title${i}`), d += s.move(" " + a), d += s.move(
    n.safe(t.title, {
      before: d,
      after: a,
      ...s.current()
    })
  ), d += s.move(a), c()), d += s.move(")"), l(), d;
}
function Gj(t, e, n) {
  return k3(t, n) ? "<" : "[";
}
F3.peek = Hj;
function F3(t, e, n, r) {
  const a = t.referenceType, i = n.enter("linkReference");
  let s = n.enter("label");
  const l = n.createTracker(r);
  let c = l.move("[");
  const d = n.containerPhrasing(t, {
    before: c,
    after: "]",
    ...l.current()
  });
  c += l.move(d + "]["), s();
  const p = n.stack;
  n.stack = [], s = n.enter("reference");
  const _ = n.safe(n.associationId(t), {
    before: c,
    after: "]",
    ...l.current()
  });
  return s(), n.stack = p, i(), a === "full" || !d || d !== _ ? c += l.move(_ + "]") : a === "shortcut" ? c = c.slice(0, -1) : c += l.move("]"), c;
}
function Hj() {
  return "[";
}
function P1(t) {
  const e = t.options.bullet || "*";
  if (e !== "*" && e !== "+" && e !== "-")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  return e;
}
function Yj(t) {
  const e = P1(t), n = t.options.bulletOther;
  if (!n)
    return e === "*" ? "-" : "*";
  if (n !== "*" && n !== "+" && n !== "-")
    throw new Error(
      "Cannot serialize items with `" + n + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  if (n === e)
    throw new Error(
      "Expected `bullet` (`" + e + "`) and `bulletOther` (`" + n + "`) to be different"
    );
  return n;
}
function zj(t) {
  const e = t.options.bulletOrdered || ".";
  if (e !== "." && e !== ")")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  return e;
}
function B3(t) {
  const e = t.options.rule || "*";
  if (e !== "*" && e !== "-" && e !== "_")
    throw new Error(
      "Cannot serialize rules with `" + e + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  return e;
}
function qj(t, e, n, r) {
  const a = n.enter("list"), i = n.bulletCurrent;
  let s = t.ordered ? zj(n) : P1(n);
  const l = t.ordered ? s === "." ? ")" : "." : Yj(n);
  let c = e && n.bulletLastUsed ? s === n.bulletLastUsed : !1;
  if (!t.ordered) {
    const p = t.children ? t.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (s === "*" || s === "-") && // Empty first list item:
      p && (!p.children || !p.children[0]) && // Directly in two other list items:
      n.stack[n.stack.length - 1] === "list" && n.stack[n.stack.length - 2] === "listItem" && n.stack[n.stack.length - 3] === "list" && n.stack[n.stack.length - 4] === "listItem" && // That are each the first child.
      n.indexStack[n.indexStack.length - 1] === 0 && n.indexStack[n.indexStack.length - 2] === 0 && n.indexStack[n.indexStack.length - 3] === 0 && (c = !0), B3(n) === s && p
    ) {
      let _ = -1;
      for (; ++_ < t.children.length; ) {
        const f = t.children[_];
        if (f && f.type === "listItem" && f.children && f.children[0] && f.children[0].type === "thematicBreak") {
          c = !0;
          break;
        }
      }
    }
  }
  c && (s = l), n.bulletCurrent = s;
  const d = n.containerFlow(t, r);
  return n.bulletLastUsed = s, n.bulletCurrent = i, a(), d;
}
function Vj(t) {
  const e = t.options.listItemIndent || "one";
  if (e !== "tab" && e !== "one" && e !== "mixed")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  return e;
}
function $j(t, e, n, r) {
  const a = Vj(n);
  let i = n.bulletCurrent || P1(n);
  e && e.type === "list" && e.ordered && (i = (typeof e.start == "number" && e.start > -1 ? e.start : 1) + (n.options.incrementListMarker === !1 ? 0 : e.children.indexOf(t)) + i);
  let s = i.length + 1;
  (a === "tab" || a === "mixed" && (e && e.type === "list" && e.spread || t.spread)) && (s = Math.ceil(s / 4) * 4);
  const l = n.createTracker(r);
  l.move(i + " ".repeat(s - i.length)), l.shift(s);
  const c = n.enter("listItem"), d = n.indentLines(
    n.containerFlow(t, l.current()),
    p
  );
  return c(), d;
  function p(_, f, g) {
    return f ? (g ? "" : " ".repeat(s)) + _ : (g ? i : i + " ".repeat(s - i.length)) + _;
  }
}
function Wj(t, e, n, r) {
  const a = n.enter("paragraph"), i = n.enter("phrasing"), s = n.containerPhrasing(t, r);
  return i(), a(), s;
}
const Kj = (
  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
  jl([
    "break",
    "delete",
    "emphasis",
    // To do: next major: removed since footnotes were added to GFM.
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    // Enabled by `mdast-util-math`:
    "inlineMath",
    "link",
    "linkReference",
    // Enabled by `mdast-util-mdx`:
    "mdxJsxTextElement",
    // Enabled by `mdast-util-mdx`:
    "mdxTextExpression",
    "strong",
    "text",
    // Enabled by `mdast-util-directive`:
    "textDirective"
  ])
);
function Qj(t, e, n, r) {
  return (t.children.some(function(s) {
    return Kj(s);
  }) ? n.containerPhrasing : n.containerFlow).call(n, t, r);
}
function jj(t) {
  const e = t.options.strong || "*";
  if (e !== "*" && e !== "_")
    throw new Error(
      "Cannot serialize strong with `" + e + "` for `options.strong`, expected `*`, or `_`"
    );
  return e;
}
U3.peek = Xj;
function U3(t, e, n, r) {
  const a = jj(n), i = n.enter("strong"), s = n.createTracker(r);
  let l = s.move(a + a);
  return l += s.move(
    n.containerPhrasing(t, {
      before: l,
      after: a,
      ...s.current()
    })
  ), l += s.move(a + a), i(), l;
}
function Xj(t, e, n) {
  return n.options.strong || "*";
}
function Zj(t, e, n, r) {
  return n.safe(t.value, r);
}
function Jj(t) {
  const e = t.options.ruleRepetition || 3;
  if (e < 3)
    throw new Error(
      "Cannot serialize rules with repetition `" + e + "` for `options.ruleRepetition`, expected `3` or more"
    );
  return e;
}
function eX(t, e, n) {
  const r = (B3(n) + (n.options.ruleSpaces ? " " : "")).repeat(Jj(n));
  return n.options.ruleSpaces ? r.slice(0, -1) : r;
}
const G3 = {
  blockquote: Cj,
  break: kC,
  code: Ij,
  definition: Dj,
  emphasis: x3,
  hardBreak: kC,
  heading: kj,
  html: D3,
  image: w3,
  imageReference: L3,
  inlineCode: M3,
  link: P3,
  linkReference: F3,
  list: qj,
  listItem: $j,
  paragraph: Wj,
  root: Qj,
  strong: U3,
  text: Zj,
  thematicBreak: eX
};
function tX() {
  return {
    enter: {
      table: nX,
      tableData: PC,
      tableHeader: PC,
      tableRow: aX
    },
    exit: {
      codeText: iX,
      table: rX,
      tableData: v_,
      tableHeader: v_,
      tableRow: v_
    }
  };
}
function nX(t) {
  const e = t._align;
  this.enter(
    {
      type: "table",
      align: e.map(function(n) {
        return n === "none" ? null : n;
      }),
      children: []
    },
    t
  ), this.data.inTable = !0;
}
function rX(t) {
  this.exit(t), this.data.inTable = void 0;
}
function aX(t) {
  this.enter({ type: "tableRow", children: [] }, t);
}
function v_(t) {
  this.exit(t);
}
function PC(t) {
  this.enter({ type: "tableCell", children: [] }, t);
}
function iX(t) {
  let e = this.resume();
  this.data.inTable && (e = e.replace(/\\([\\|])/g, sX));
  const n = this.stack[this.stack.length - 1];
  n.type, n.value = e, this.exit(t);
}
function sX(t, e) {
  return e === "|" ? e : t;
}
function oX(t) {
  const e = t || {}, n = e.tableCellPadding, r = e.tablePipeAlign, a = e.stringLength, i = n ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: `
`, inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: !0, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: !0, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: !0, character: "-", after: "[:|-]" }
    ],
    handlers: {
      inlineCode: f,
      table: s,
      tableCell: c,
      tableRow: l
    }
  };
  function s(g, E, T, R) {
    return d(p(g, T, R), g.align);
  }
  function l(g, E, T, R) {
    const A = _(g, T, R), I = d([A]);
    return I.slice(0, I.indexOf(`
`));
  }
  function c(g, E, T, R) {
    const A = T.enter("tableCell"), I = T.enter("phrasing"), x = T.containerPhrasing(g, {
      ...R,
      before: i,
      after: i
    });
    return I(), A(), x;
  }
  function d(g, E) {
    return Tj(g, {
      align: E,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters: r,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding: n,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength: a
    });
  }
  function p(g, E, T) {
    const R = g.children;
    let A = -1;
    const I = [], x = E.enter("table");
    for (; ++A < R.length; )
      I[A] = _(R[A], E, T);
    return x(), I;
  }
  function _(g, E, T) {
    const R = g.children;
    let A = -1;
    const I = [], x = E.enter("tableRow");
    for (; ++A < R.length; )
      I[A] = c(R[A], g, E, T);
    return x(), I;
  }
  function f(g, E, T) {
    let R = G3.inlineCode(g, E, T);
    return T.stack.includes("tableCell") && (R = R.replace(/\|/g, "\\$&")), R;
  }
}
function lX() {
  return {
    exit: {
      taskListCheckValueChecked: FC,
      taskListCheckValueUnchecked: FC,
      paragraph: uX
    }
  };
}
function cX() {
  return {
    unsafe: [{ atBreak: !0, character: "-", after: "[:|-]" }],
    handlers: { listItem: dX }
  };
}
function FC(t) {
  const e = this.stack[this.stack.length - 2];
  e.type, e.checked = t.type === "taskListCheckValueChecked";
}
function uX(t) {
  const e = this.stack[this.stack.length - 2];
  if (e && e.type === "listItem" && typeof e.checked == "boolean") {
    const n = this.stack[this.stack.length - 1];
    n.type;
    const r = n.children[0];
    if (r && r.type === "text") {
      const a = e.children;
      let i = -1, s;
      for (; ++i < a.length; ) {
        const l = a[i];
        if (l.type === "paragraph") {
          s = l;
          break;
        }
      }
      s === n && (r.value = r.value.slice(1), r.value.length === 0 ? n.children.shift() : n.position && r.position && typeof r.position.start.offset == "number" && (r.position.start.column++, r.position.start.offset++, n.position.start = Object.assign({}, r.position.start)));
    }
  }
  this.exit(t);
}
function dX(t, e, n, r) {
  const a = t.children[0], i = typeof t.checked == "boolean" && a && a.type === "paragraph", s = "[" + (t.checked ? "x" : " ") + "] ", l = n.createTracker(r);
  i && l.move(s);
  let c = G3.listItem(t, e, n, {
    ...r,
    ...l.current()
  });
  return i && (c = c.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, d)), c;
  function d(p) {
    return p + s;
  }
}
function pX() {
  return [
    qQ(),
    nj(),
    gj(),
    tX(),
    lX()
  ];
}
function _X(t) {
  return {
    extensions: [
      VQ(),
      rj(),
      hj(),
      oX(t),
      cX()
    ]
  };
}
const mX = {
  tokenize: bX,
  partial: !0
}, H3 = {
  tokenize: TX,
  partial: !0
}, Y3 = {
  tokenize: yX,
  partial: !0
}, z3 = {
  tokenize: vX,
  partial: !0
}, fX = {
  tokenize: CX,
  partial: !0
}, q3 = {
  tokenize: EX,
  previous: $3
}, V3 = {
  tokenize: SX,
  previous: W3
}, _i = {
  tokenize: hX,
  previous: K3
}, qa = {};
function gX() {
  return {
    text: qa
  };
}
let ss = 48;
for (; ss < 123; )
  qa[ss] = _i, ss++, ss === 58 ? ss = 65 : ss === 91 && (ss = 97);
qa[43] = _i;
qa[45] = _i;
qa[46] = _i;
qa[95] = _i;
qa[72] = [_i, V3];
qa[104] = [_i, V3];
qa[87] = [_i, q3];
qa[119] = [_i, q3];
function hX(t, e, n) {
  const r = this;
  let a, i;
  return s;
  function s(_) {
    return !aE(_) || !K3.call(r, r.previous) || F1(r.events) ? n(_) : (t.enter("literalAutolink"), t.enter("literalAutolinkEmail"), l(_));
  }
  function l(_) {
    return aE(_) ? (t.consume(_), l) : _ === 64 ? (t.consume(_), c) : n(_);
  }
  function c(_) {
    return _ === 46 ? t.check(
      fX,
      p,
      d
    )(_) : _ === 45 || _ === 95 || ir(_) ? (i = !0, t.consume(_), c) : p(_);
  }
  function d(_) {
    return t.consume(_), a = !0, c;
  }
  function p(_) {
    return i && a && hr(r.previous) ? (t.exit("literalAutolinkEmail"), t.exit("literalAutolink"), e(_)) : n(_);
  }
}
function EX(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return s !== 87 && s !== 119 || !$3.call(r, r.previous) || F1(r.events) ? n(s) : (t.enter("literalAutolink"), t.enter("literalAutolinkWww"), t.check(
      mX,
      t.attempt(H3, t.attempt(Y3, i), n),
      n
    )(s));
  }
  function i(s) {
    return t.exit("literalAutolinkWww"), t.exit("literalAutolink"), e(s);
  }
}
function SX(t, e, n) {
  const r = this;
  let a = "", i = !1;
  return s;
  function s(_) {
    return (_ === 72 || _ === 104) && W3.call(r, r.previous) && !F1(r.events) ? (t.enter("literalAutolink"), t.enter("literalAutolinkHttp"), a += String.fromCodePoint(_), t.consume(_), l) : n(_);
  }
  function l(_) {
    if (hr(_) && a.length < 5)
      return a += String.fromCodePoint(_), t.consume(_), l;
    if (_ === 58) {
      const f = a.toLowerCase();
      if (f === "http" || f === "https")
        return t.consume(_), c;
    }
    return n(_);
  }
  function c(_) {
    return _ === 47 ? (t.consume(_), i ? d : (i = !0, c)) : n(_);
  }
  function d(_) {
    return _ === null || td(_) || en(_) || fs(_) || Ld(_) ? n(_) : t.attempt(H3, t.attempt(Y3, p), n)(_);
  }
  function p(_) {
    return t.exit("literalAutolinkHttp"), t.exit("literalAutolink"), e(_);
  }
}
function bX(t, e, n) {
  let r = 0;
  return a;
  function a(s) {
    return (s === 87 || s === 119) && r < 3 ? (r++, t.consume(s), a) : s === 46 && r === 3 ? (t.consume(s), i) : n(s);
  }
  function i(s) {
    return s === null ? n(s) : e(s);
  }
}
function TX(t, e, n) {
  let r, a, i;
  return s;
  function s(d) {
    return d === 46 || d === 95 ? t.check(z3, c, l)(d) : d === null || en(d) || fs(d) || d !== 45 && Ld(d) ? c(d) : (i = !0, t.consume(d), s);
  }
  function l(d) {
    return d === 95 ? r = !0 : (a = r, r = void 0), t.consume(d), s;
  }
  function c(d) {
    return a || r || !i ? n(d) : e(d);
  }
}
function yX(t, e) {
  let n = 0, r = 0;
  return a;
  function a(s) {
    return s === 40 ? (n++, t.consume(s), a) : s === 41 && r < n ? i(s) : s === 33 || s === 34 || s === 38 || s === 39 || s === 41 || s === 42 || s === 44 || s === 46 || s === 58 || s === 59 || s === 60 || s === 63 || s === 93 || s === 95 || s === 126 ? t.check(z3, e, i)(s) : s === null || en(s) || fs(s) ? e(s) : (t.consume(s), a);
  }
  function i(s) {
    return s === 41 && r++, t.consume(s), a;
  }
}
function vX(t, e, n) {
  return r;
  function r(l) {
    return l === 33 || l === 34 || l === 39 || l === 41 || l === 42 || l === 44 || l === 46 || l === 58 || l === 59 || l === 63 || l === 95 || l === 126 ? (t.consume(l), r) : l === 38 ? (t.consume(l), i) : l === 93 ? (t.consume(l), a) : (
      // `<` is an end.
      l === 60 || // So is whitespace.
      l === null || en(l) || fs(l) ? e(l) : n(l)
    );
  }
  function a(l) {
    return l === null || l === 40 || l === 91 || en(l) || fs(l) ? e(l) : r(l);
  }
  function i(l) {
    return hr(l) ? s(l) : n(l);
  }
  function s(l) {
    return l === 59 ? (t.consume(l), r) : hr(l) ? (t.consume(l), s) : n(l);
  }
}
function CX(t, e, n) {
  return r;
  function r(i) {
    return t.consume(i), a;
  }
  function a(i) {
    return ir(i) ? n(i) : e(i);
  }
}
function $3(t) {
  return t === null || t === 40 || t === 42 || t === 95 || t === 91 || t === 93 || t === 126 || en(t);
}
function W3(t) {
  return !hr(t);
}
function K3(t) {
  return !(t === 47 || aE(t));
}
function aE(t) {
  return t === 43 || t === 45 || t === 46 || t === 95 || ir(t);
}
function F1(t) {
  let e = t.length, n = !1;
  for (; e--; ) {
    const r = t[e][1];
    if ((r.type === "labelLink" || r.type === "labelImage") && !r._balanced) {
      n = !0;
      break;
    }
    if (r._gfmAutolinkLiteralWalkedInto) {
      n = !1;
      break;
    }
  }
  return t.length > 0 && !n && (t[t.length - 1][1]._gfmAutolinkLiteralWalkedInto = !0), n;
}
const RX = {
  tokenize: LX,
  partial: !0
};
function AX() {
  return {
    document: {
      91: {
        tokenize: xX,
        continuation: {
          tokenize: DX
        },
        exit: wX
      }
    },
    text: {
      91: {
        tokenize: IX
      },
      93: {
        add: "after",
        tokenize: OX,
        resolveTo: NX
      }
    }
  };
}
function OX(t, e, n) {
  const r = this;
  let a = r.events.length;
  const i = r.parser.gfmFootnotes || (r.parser.gfmFootnotes = []);
  let s;
  for (; a--; ) {
    const c = r.events[a][1];
    if (c.type === "labelImage") {
      s = c;
      break;
    }
    if (c.type === "gfmFootnoteCall" || c.type === "labelLink" || c.type === "label" || c.type === "image" || c.type === "link")
      break;
  }
  return l;
  function l(c) {
    if (!s || !s._balanced)
      return n(c);
    const d = Ta(
      r.sliceSerialize({
        start: s.end,
        end: r.now()
      })
    );
    return d.codePointAt(0) !== 94 || !i.includes(d.slice(1)) ? n(c) : (t.enter("gfmFootnoteCallLabelMarker"), t.consume(c), t.exit("gfmFootnoteCallLabelMarker"), e(c));
  }
}
function NX(t, e) {
  let n = t.length;
  for (; n--; )
    if (t[n][1].type === "labelImage" && t[n][0] === "enter") {
      t[n][1];
      break;
    }
  t[n + 1][1].type = "data", t[n + 3][1].type = "gfmFootnoteCallLabelMarker";
  const r = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, t[n + 3][1].start),
    end: Object.assign({}, t[t.length - 1][1].end)
  }, a = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, t[n + 3][1].end),
    end: Object.assign({}, t[n + 3][1].end)
  };
  a.end.column++, a.end.offset++, a.end._bufferIndex++;
  const i = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, a.end),
    end: Object.assign({}, t[t.length - 1][1].start)
  }, s = {
    type: "chunkString",
    contentType: "string",
    start: Object.assign({}, i.start),
    end: Object.assign({}, i.end)
  }, l = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    t[n + 1],
    t[n + 2],
    ["enter", r, e],
    // The `[`
    t[n + 3],
    t[n + 4],
    // The `^`.
    ["enter", a, e],
    ["exit", a, e],
    // Everything in between.
    ["enter", i, e],
    ["enter", s, e],
    ["exit", s, e],
    ["exit", i, e],
    // The ending (`]`, properly parsed and labelled).
    t[t.length - 2],
    t[t.length - 1],
    ["exit", r, e]
  ];
  return t.splice(n, t.length - n + 1, ...l), t;
}
function IX(t, e, n) {
  const r = this, a = r.parser.gfmFootnotes || (r.parser.gfmFootnotes = []);
  let i = 0, s;
  return l;
  function l(_) {
    return t.enter("gfmFootnoteCall"), t.enter("gfmFootnoteCallLabelMarker"), t.consume(_), t.exit("gfmFootnoteCallLabelMarker"), c;
  }
  function c(_) {
    return _ !== 94 ? n(_) : (t.enter("gfmFootnoteCallMarker"), t.consume(_), t.exit("gfmFootnoteCallMarker"), t.enter("gfmFootnoteCallString"), t.enter("chunkString").contentType = "string", d);
  }
  function d(_) {
    if (
      // Too long.
      i > 999 || // Closing brace with nothing.
      _ === 93 && !s || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      _ === null || _ === 91 || en(_)
    )
      return n(_);
    if (_ === 93) {
      t.exit("chunkString");
      const f = t.exit("gfmFootnoteCallString");
      return a.includes(Ta(r.sliceSerialize(f))) ? (t.enter("gfmFootnoteCallLabelMarker"), t.consume(_), t.exit("gfmFootnoteCallLabelMarker"), t.exit("gfmFootnoteCall"), e) : n(_);
    }
    return en(_) || (s = !0), i++, t.consume(_), _ === 92 ? p : d;
  }
  function p(_) {
    return _ === 91 || _ === 92 || _ === 93 ? (t.consume(_), i++, d) : d(_);
  }
}
function xX(t, e, n) {
  const r = this, a = r.parser.gfmFootnotes || (r.parser.gfmFootnotes = []);
  let i, s = 0, l;
  return c;
  function c(E) {
    return t.enter("gfmFootnoteDefinition")._container = !0, t.enter("gfmFootnoteDefinitionLabel"), t.enter("gfmFootnoteDefinitionLabelMarker"), t.consume(E), t.exit("gfmFootnoteDefinitionLabelMarker"), d;
  }
  function d(E) {
    return E === 94 ? (t.enter("gfmFootnoteDefinitionMarker"), t.consume(E), t.exit("gfmFootnoteDefinitionMarker"), t.enter("gfmFootnoteDefinitionLabelString"), t.enter("chunkString").contentType = "string", p) : n(E);
  }
  function p(E) {
    if (
      // Too long.
      s > 999 || // Closing brace with nothing.
      E === 93 && !l || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      E === null || E === 91 || en(E)
    )
      return n(E);
    if (E === 93) {
      t.exit("chunkString");
      const T = t.exit("gfmFootnoteDefinitionLabelString");
      return i = Ta(r.sliceSerialize(T)), t.enter("gfmFootnoteDefinitionLabelMarker"), t.consume(E), t.exit("gfmFootnoteDefinitionLabelMarker"), t.exit("gfmFootnoteDefinitionLabel"), f;
    }
    return en(E) || (l = !0), s++, t.consume(E), E === 92 ? _ : p;
  }
  function _(E) {
    return E === 91 || E === 92 || E === 93 ? (t.consume(E), s++, p) : p(E);
  }
  function f(E) {
    return E === 58 ? (t.enter("definitionMarker"), t.consume(E), t.exit("definitionMarker"), a.includes(i) || a.push(i), Nt(
      t,
      g,
      "gfmFootnoteDefinitionWhitespace"
    )) : n(E);
  }
  function g(E) {
    return e(E);
  }
}
function DX(t, e, n) {
  return t.check(Ql, e, t.attempt(RX, e, n));
}
function wX(t) {
  t.exit("gfmFootnoteDefinition");
}
function LX(t, e, n) {
  const r = this;
  return Nt(
    t,
    a,
    "gfmFootnoteDefinitionIndent",
    5
  );
  function a(i) {
    const s = r.events[r.events.length - 1];
    return s && s[1].type === "gfmFootnoteDefinitionIndent" && s[2].sliceSerialize(s[1], !0).length === 4 ? e(i) : n(i);
  }
}
function MX(t) {
  let n = (t || {}).singleTilde;
  const r = {
    tokenize: i,
    resolveAll: a
  };
  return n == null && (n = !0), {
    text: {
      126: r
    },
    insideSpan: {
      null: [r]
    },
    attentionMarkers: {
      null: [126]
    }
  };
  function a(s, l) {
    let c = -1;
    for (; ++c < s.length; )
      if (s[c][0] === "enter" && s[c][1].type === "strikethroughSequenceTemporary" && s[c][1]._close) {
        let d = c;
        for (; d--; )
          if (s[d][0] === "exit" && s[d][1].type === "strikethroughSequenceTemporary" && s[d][1]._open && // If the sizes are the same:
          s[c][1].end.offset - s[c][1].start.offset === s[d][1].end.offset - s[d][1].start.offset) {
            s[c][1].type = "strikethroughSequence", s[d][1].type = "strikethroughSequence";
            const p = {
              type: "strikethrough",
              start: Object.assign({}, s[d][1].start),
              end: Object.assign({}, s[c][1].end)
            }, _ = {
              type: "strikethroughText",
              start: Object.assign({}, s[d][1].end),
              end: Object.assign({}, s[c][1].start)
            }, f = [
              ["enter", p, l],
              ["enter", s[d][1], l],
              ["exit", s[d][1], l],
              ["enter", _, l]
            ], g = l.parser.constructs.insideSpan.null;
            g && qr(
              f,
              f.length,
              0,
              Md(g, s.slice(d + 1, c), l)
            ), qr(f, f.length, 0, [
              ["exit", _, l],
              ["enter", s[c][1], l],
              ["exit", s[c][1], l],
              ["exit", p, l]
            ]), qr(s, d - 1, c - d + 3, f), c = d + f.length - 2;
            break;
          }
      }
    for (c = -1; ++c < s.length; )
      s[c][1].type === "strikethroughSequenceTemporary" && (s[c][1].type = "data");
    return s;
  }
  function i(s, l, c) {
    const d = this.previous, p = this.events;
    let _ = 0;
    return f;
    function f(E) {
      return d === 126 && p[p.length - 1][1].type !== "characterEscape" ? c(E) : (s.enter("strikethroughSequenceTemporary"), g(E));
    }
    function g(E) {
      const T = nd(d);
      if (E === 126)
        return _ > 1 ? c(E) : (s.consume(E), _++, g);
      if (_ < 2 && !n) return c(E);
      const R = s.exit("strikethroughSequenceTemporary"), A = nd(E);
      return R._open = !A || A === 2 && !!T, R._close = !T || T === 2 && !!A, l(E);
    }
  }
}
class kX {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */
  add(e, n, r) {
    PX(this, e, n, r);
  }
  // To do: add this when moving to `micromark`.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {undefined}
  //  */
  // addBefore(index, remove, add) {
  //   addImpl(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */
  consume(e) {
    if (this.map.sort(function(i, s) {
      return i[0] - s[0];
    }), this.map.length === 0)
      return;
    let n = this.map.length;
    const r = [];
    for (; n > 0; )
      n -= 1, r.push(
        e.slice(this.map[n][0] + this.map[n][1]),
        this.map[n][2]
      ), e.length = this.map[n][0];
    r.push([...e]), e.length = 0;
    let a = r.pop();
    for (; a; )
      e.push(...a), a = r.pop();
    this.map.length = 0;
  }
}
function PX(t, e, n, r) {
  let a = 0;
  if (!(n === 0 && r.length === 0)) {
    for (; a < t.map.length; ) {
      if (t.map[a][0] === e) {
        t.map[a][1] += n, t.map[a][2].push(...r);
        return;
      }
      a += 1;
    }
    t.map.push([e, n, r]);
  }
}
function FX(t, e) {
  let n = !1;
  const r = [];
  for (; e < t.length; ) {
    const a = t[e];
    if (n) {
      if (a[0] === "enter")
        a[1].type === "tableContent" && r.push(
          t[e + 1][1].type === "tableDelimiterMarker" ? "left" : "none"
        );
      else if (a[1].type === "tableContent") {
        if (t[e - 1][1].type === "tableDelimiterMarker") {
          const i = r.length - 1;
          r[i] = r[i] === "left" ? "center" : "right";
        }
      } else if (a[1].type === "tableDelimiterRow")
        break;
    } else a[0] === "enter" && a[1].type === "tableDelimiterRow" && (n = !0);
    e += 1;
  }
  return r;
}
function BX() {
  return {
    flow: {
      null: {
        tokenize: UX,
        resolveAll: GX
      }
    }
  };
}
function UX(t, e, n) {
  const r = this;
  let a = 0, i = 0, s;
  return l;
  function l($) {
    let ae = r.events.length - 1;
    for (; ae > -1; ) {
      const ge = r.events[ae][1].type;
      if (ge === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      ge === "linePrefix")
        ae--;
      else break;
    }
    const ce = ae > -1 ? r.events[ae][1].type : null, ve = ce === "tableHead" || ce === "tableRow" ? L : c;
    return ve === L && r.parser.lazy[r.now().line] ? n($) : ve($);
  }
  function c($) {
    return t.enter("tableHead"), t.enter("tableRow"), d($);
  }
  function d($) {
    return $ === 124 || (s = !0, i += 1), p($);
  }
  function p($) {
    return $ === null ? n($) : Je($) ? i > 1 ? (i = 0, r.interrupt = !0, t.exit("tableRow"), t.enter("lineEnding"), t.consume($), t.exit("lineEnding"), g) : n($) : wt($) ? Nt(t, p, "whitespace")($) : (i += 1, s && (s = !1, a += 1), $ === 124 ? (t.enter("tableCellDivider"), t.consume($), t.exit("tableCellDivider"), s = !0, p) : (t.enter("data"), _($)));
  }
  function _($) {
    return $ === null || $ === 124 || en($) ? (t.exit("data"), p($)) : (t.consume($), $ === 92 ? f : _);
  }
  function f($) {
    return $ === 92 || $ === 124 ? (t.consume($), _) : _($);
  }
  function g($) {
    return r.interrupt = !1, r.parser.lazy[r.now().line] ? n($) : (t.enter("tableDelimiterRow"), s = !1, wt($) ? Nt(
      t,
      E,
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )($) : E($));
  }
  function E($) {
    return $ === 45 || $ === 58 ? R($) : $ === 124 ? (s = !0, t.enter("tableCellDivider"), t.consume($), t.exit("tableCellDivider"), T) : D($);
  }
  function T($) {
    return wt($) ? Nt(t, R, "whitespace")($) : R($);
  }
  function R($) {
    return $ === 58 ? (i += 1, s = !0, t.enter("tableDelimiterMarker"), t.consume($), t.exit("tableDelimiterMarker"), A) : $ === 45 ? (i += 1, A($)) : $ === null || Je($) ? P($) : D($);
  }
  function A($) {
    return $ === 45 ? (t.enter("tableDelimiterFiller"), I($)) : D($);
  }
  function I($) {
    return $ === 45 ? (t.consume($), I) : $ === 58 ? (s = !0, t.exit("tableDelimiterFiller"), t.enter("tableDelimiterMarker"), t.consume($), t.exit("tableDelimiterMarker"), x) : (t.exit("tableDelimiterFiller"), x($));
  }
  function x($) {
    return wt($) ? Nt(t, P, "whitespace")($) : P($);
  }
  function P($) {
    return $ === 124 ? E($) : $ === null || Je($) ? !s || a !== i ? D($) : (t.exit("tableDelimiterRow"), t.exit("tableHead"), e($)) : D($);
  }
  function D($) {
    return n($);
  }
  function L($) {
    return t.enter("tableRow"), K($);
  }
  function K($) {
    return $ === 124 ? (t.enter("tableCellDivider"), t.consume($), t.exit("tableCellDivider"), K) : $ === null || Je($) ? (t.exit("tableRow"), e($)) : wt($) ? Nt(t, K, "whitespace")($) : (t.enter("data"), J($));
  }
  function J($) {
    return $ === null || $ === 124 || en($) ? (t.exit("data"), K($)) : (t.consume($), $ === 92 ? X : J);
  }
  function X($) {
    return $ === 92 || $ === 124 ? (t.consume($), J) : J($);
  }
}
function GX(t, e) {
  let n = -1, r = !0, a = 0, i = [0, 0, 0, 0], s = [0, 0, 0, 0], l = !1, c = 0, d, p, _;
  const f = new kX();
  for (; ++n < t.length; ) {
    const g = t[n], E = g[1];
    g[0] === "enter" ? E.type === "tableHead" ? (l = !1, c !== 0 && (BC(f, e, c, d, p), p = void 0, c = 0), d = {
      type: "table",
      start: Object.assign({}, E.start),
      // Note: correct end is set later.
      end: Object.assign({}, E.end)
    }, f.add(n, 0, [["enter", d, e]])) : E.type === "tableRow" || E.type === "tableDelimiterRow" ? (r = !0, _ = void 0, i = [0, 0, 0, 0], s = [0, n + 1, 0, 0], l && (l = !1, p = {
      type: "tableBody",
      start: Object.assign({}, E.start),
      // Note: correct end is set later.
      end: Object.assign({}, E.end)
    }, f.add(n, 0, [["enter", p, e]])), a = E.type === "tableDelimiterRow" ? 2 : p ? 3 : 1) : a && (E.type === "data" || E.type === "tableDelimiterMarker" || E.type === "tableDelimiterFiller") ? (r = !1, s[2] === 0 && (i[1] !== 0 && (s[0] = s[1], _ = wu(
      f,
      e,
      i,
      a,
      void 0,
      _
    ), i = [0, 0, 0, 0]), s[2] = n)) : E.type === "tableCellDivider" && (r ? r = !1 : (i[1] !== 0 && (s[0] = s[1], _ = wu(
      f,
      e,
      i,
      a,
      void 0,
      _
    )), i = s, s = [i[1], n, 0, 0])) : E.type === "tableHead" ? (l = !0, c = n) : E.type === "tableRow" || E.type === "tableDelimiterRow" ? (c = n, i[1] !== 0 ? (s[0] = s[1], _ = wu(
      f,
      e,
      i,
      a,
      n,
      _
    )) : s[1] !== 0 && (_ = wu(f, e, s, a, n, _)), a = 0) : a && (E.type === "data" || E.type === "tableDelimiterMarker" || E.type === "tableDelimiterFiller") && (s[3] = n);
  }
  for (c !== 0 && BC(f, e, c, d, p), f.consume(e.events), n = -1; ++n < e.events.length; ) {
    const g = e.events[n];
    g[0] === "enter" && g[1].type === "table" && (g[1]._align = FX(e.events, n));
  }
  return t;
}
function wu(t, e, n, r, a, i) {
  const s = r === 1 ? "tableHeader" : r === 2 ? "tableDelimiter" : "tableData", l = "tableContent";
  n[0] !== 0 && (i.end = Object.assign({}, Ks(e.events, n[0])), t.add(n[0], 0, [["exit", i, e]]));
  const c = Ks(e.events, n[1]);
  if (i = {
    type: s,
    start: Object.assign({}, c),
    // Note: correct end is set later.
    end: Object.assign({}, c)
  }, t.add(n[1], 0, [["enter", i, e]]), n[2] !== 0) {
    const d = Ks(e.events, n[2]), p = Ks(e.events, n[3]), _ = {
      type: l,
      start: Object.assign({}, d),
      end: Object.assign({}, p)
    };
    if (t.add(n[2], 0, [["enter", _, e]]), r !== 2) {
      const f = e.events[n[2]], g = e.events[n[3]];
      if (f[1].end = Object.assign({}, g[1].end), f[1].type = "chunkText", f[1].contentType = "text", n[3] > n[2] + 1) {
        const E = n[2] + 1, T = n[3] - n[2] - 1;
        t.add(E, T, []);
      }
    }
    t.add(n[3] + 1, 0, [["exit", _, e]]);
  }
  return a !== void 0 && (i.end = Object.assign({}, Ks(e.events, a)), t.add(a, 0, [["exit", i, e]]), i = void 0), i;
}
function BC(t, e, n, r, a) {
  const i = [], s = Ks(e.events, n);
  a && (a.end = Object.assign({}, s), i.push(["exit", a, e])), r.end = Object.assign({}, s), i.push(["exit", r, e]), t.add(n + 1, 0, i);
}
function Ks(t, e) {
  const n = t[e], r = n[0] === "enter" ? "start" : "end";
  return n[1][r];
}
const HX = {
  tokenize: zX
};
function YX() {
  return {
    text: {
      91: HX
    }
  };
}
function zX(t, e, n) {
  const r = this;
  return a;
  function a(c) {
    return (
      // Exit if there’s stuff before.
      r.previous !== null || // Exit if not in the first content that is the first child of a list
      // item.
      !r._gfmTasklistFirstContentOfListItem ? n(c) : (t.enter("taskListCheck"), t.enter("taskListCheckMarker"), t.consume(c), t.exit("taskListCheckMarker"), i)
    );
  }
  function i(c) {
    return en(c) ? (t.enter("taskListCheckValueUnchecked"), t.consume(c), t.exit("taskListCheckValueUnchecked"), s) : c === 88 || c === 120 ? (t.enter("taskListCheckValueChecked"), t.consume(c), t.exit("taskListCheckValueChecked"), s) : n(c);
  }
  function s(c) {
    return c === 93 ? (t.enter("taskListCheckMarker"), t.consume(c), t.exit("taskListCheckMarker"), t.exit("taskListCheck"), l) : n(c);
  }
  function l(c) {
    return Je(c) ? e(c) : wt(c) ? t.check(
      {
        tokenize: qX
      },
      e,
      n
    )(c) : n(c);
  }
}
function qX(t, e, n) {
  return Nt(t, r, "whitespace");
  function r(a) {
    return a === null ? n(a) : e(a);
  }
}
function VX(t) {
  return px([
    gX(),
    AX(),
    MX(t),
    BX(),
    YX()
  ]);
}
const $X = {};
function WX(t) {
  const e = (
    /** @type {Processor} */
    this
  ), n = t || $X, r = e.data(), a = r.micromarkExtensions || (r.micromarkExtensions = []), i = r.fromMarkdownExtensions || (r.fromMarkdownExtensions = []), s = r.toMarkdownExtensions || (r.toMarkdownExtensions = []);
  a.push(VX(n)), i.push(pX()), s.push(_X(n));
}
function KX() {
  return {
    enter: {
      mathFlow: t,
      mathFlowFenceMeta: e,
      mathText: i
    },
    exit: {
      mathFlow: a,
      mathFlowFence: r,
      mathFlowFenceMeta: n,
      mathFlowValue: l,
      mathText: s,
      mathTextData: l
    }
  };
  function t(c) {
    const d = {
      type: "element",
      tagName: "code",
      properties: { className: ["language-math", "math-display"] },
      children: []
    };
    this.enter(
      {
        type: "math",
        meta: null,
        value: "",
        data: { hName: "pre", hChildren: [d] }
      },
      c
    );
  }
  function e() {
    this.buffer();
  }
  function n() {
    const c = this.resume(), d = this.stack[this.stack.length - 1];
    d.type, d.meta = c;
  }
  function r() {
    this.data.mathFlowInside || (this.buffer(), this.data.mathFlowInside = !0);
  }
  function a(c) {
    const d = this.resume().replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, ""), p = this.stack[this.stack.length - 1];
    p.type, this.exit(c), p.value = d;
    const _ = (
      /** @type {HastElement} */
      p.data.hChildren[0]
    );
    _.type, _.tagName, _.children.push({ type: "text", value: d }), this.data.mathFlowInside = void 0;
  }
  function i(c) {
    this.enter(
      {
        type: "inlineMath",
        value: "",
        data: {
          hName: "code",
          hProperties: { className: ["language-math", "math-inline"] },
          hChildren: []
        }
      },
      c
    ), this.buffer();
  }
  function s(c) {
    const d = this.resume(), p = this.stack[this.stack.length - 1];
    p.type, this.exit(c), p.value = d, /** @type {Array<HastElementContent>} */
    // @ts-expect-error: we defined it in `enterMathFlow`.
    p.data.hChildren.push({ type: "text", value: d });
  }
  function l(c) {
    this.config.enter.data.call(this, c), this.config.exit.data.call(this, c);
  }
}
function QX(t) {
  let e = (t || {}).singleDollarTextMath;
  return e == null && (e = !0), r.peek = a, {
    unsafe: [
      { character: "\r", inConstruct: "mathFlowMeta" },
      { character: `
`, inConstruct: "mathFlowMeta" },
      {
        character: "$",
        after: e ? void 0 : "\\$",
        inConstruct: "phrasing"
      },
      { character: "$", inConstruct: "mathFlowMeta" },
      { atBreak: !0, character: "$", after: "\\$" }
    ],
    handlers: { math: n, inlineMath: r }
  };
  function n(i, s, l, c) {
    const d = i.value || "", p = l.createTracker(c), _ = "$".repeat(Math.max(I3(d, "$") + 1, 2)), f = l.enter("mathFlow");
    let g = p.move(_);
    if (i.meta) {
      const E = l.enter("mathFlowMeta");
      g += p.move(
        l.safe(i.meta, {
          after: `
`,
          before: g,
          encode: ["$"],
          ...p.current()
        })
      ), E();
    }
    return g += p.move(`
`), d && (g += p.move(d + `
`)), g += p.move(_), f(), g;
  }
  function r(i, s, l) {
    let c = i.value || "", d = 1;
    for (e || d++; new RegExp("(^|[^$])" + "\\$".repeat(d) + "([^$]|$)").test(c); )
      d++;
    const p = "$".repeat(d);
    // Contains non-space.
    /[^ \r\n]/.test(c) && // Starts with space and ends with space.
    (/^[ \r\n]/.test(c) && /[ \r\n]$/.test(c) || // Starts or ends with dollar.
    /^\$|\$$/.test(c)) && (c = " " + c + " ");
    let _ = -1;
    for (; ++_ < l.unsafe.length; ) {
      const f = l.unsafe[_];
      if (!f.atBreak) continue;
      const g = l.compilePattern(f);
      let E;
      for (; E = g.exec(c); ) {
        let T = E.index;
        c.codePointAt(T) === 10 && c.codePointAt(T - 1) === 13 && T--, c = c.slice(0, T) + " " + c.slice(E.index + 1);
      }
    }
    return p + c + p;
  }
  function a() {
    return "$";
  }
}
const jX = {
  tokenize: XX,
  concrete: !0
}, UC = {
  tokenize: ZX,
  partial: !0
};
function XX(t, e, n) {
  const r = this, a = r.events[r.events.length - 1], i = a && a[1].type === "linePrefix" ? a[2].sliceSerialize(a[1], !0).length : 0;
  let s = 0;
  return l;
  function l(I) {
    return t.enter("mathFlow"), t.enter("mathFlowFence"), t.enter("mathFlowFenceSequence"), c(I);
  }
  function c(I) {
    return I === 36 ? (t.consume(I), s++, c) : s < 2 ? n(I) : (t.exit("mathFlowFenceSequence"), Nt(t, d, "whitespace")(I));
  }
  function d(I) {
    return I === null || Je(I) ? _(I) : (t.enter("mathFlowFenceMeta"), t.enter("chunkString", {
      contentType: "string"
    }), p(I));
  }
  function p(I) {
    return I === null || Je(I) ? (t.exit("chunkString"), t.exit("mathFlowFenceMeta"), _(I)) : I === 36 ? n(I) : (t.consume(I), p);
  }
  function _(I) {
    return t.exit("mathFlowFence"), r.interrupt ? e(I) : t.attempt(
      UC,
      f,
      R
    )(I);
  }
  function f(I) {
    return t.attempt(
      {
        tokenize: A,
        partial: !0
      },
      R,
      g
    )(I);
  }
  function g(I) {
    return (i ? Nt(
      t,
      E,
      "linePrefix",
      i + 1
    ) : E)(I);
  }
  function E(I) {
    return I === null ? R(I) : Je(I) ? t.attempt(
      UC,
      f,
      R
    )(I) : (t.enter("mathFlowValue"), T(I));
  }
  function T(I) {
    return I === null || Je(I) ? (t.exit("mathFlowValue"), E(I)) : (t.consume(I), T);
  }
  function R(I) {
    return t.exit("mathFlow"), e(I);
  }
  function A(I, x, P) {
    let D = 0;
    return Nt(
      I,
      L,
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    );
    function L(X) {
      return I.enter("mathFlowFence"), I.enter("mathFlowFenceSequence"), K(X);
    }
    function K(X) {
      return X === 36 ? (D++, I.consume(X), K) : D < s ? P(X) : (I.exit("mathFlowFenceSequence"), Nt(I, J, "whitespace")(X));
    }
    function J(X) {
      return X === null || Je(X) ? (I.exit("mathFlowFence"), x(X)) : P(X);
    }
  }
}
function ZX(t, e, n) {
  const r = this;
  return a;
  function a(s) {
    return s === null ? e(s) : (t.enter("lineEnding"), t.consume(s), t.exit("lineEnding"), i);
  }
  function i(s) {
    return r.parser.lazy[r.now().line] ? n(s) : e(s);
  }
}
function JX(t) {
  let n = (t || {}).singleDollarTextMath;
  return n == null && (n = !0), {
    tokenize: r,
    resolve: eZ,
    previous: tZ
  };
  function r(a, i, s) {
    let l = 0, c, d;
    return p;
    function p(T) {
      return a.enter("mathText"), a.enter("mathTextSequence"), _(T);
    }
    function _(T) {
      return T === 36 ? (a.consume(T), l++, _) : l < 2 && !n ? s(T) : (a.exit("mathTextSequence"), f(T));
    }
    function f(T) {
      return T === null ? s(T) : T === 36 ? (d = a.enter("mathTextSequence"), c = 0, E(T)) : T === 32 ? (a.enter("space"), a.consume(T), a.exit("space"), f) : Je(T) ? (a.enter("lineEnding"), a.consume(T), a.exit("lineEnding"), f) : (a.enter("mathTextData"), g(T));
    }
    function g(T) {
      return T === null || T === 32 || T === 36 || Je(T) ? (a.exit("mathTextData"), f(T)) : (a.consume(T), g);
    }
    function E(T) {
      return T === 36 ? (a.consume(T), c++, E) : c === l ? (a.exit("mathTextSequence"), a.exit("mathText"), i(T)) : (d.type = "mathTextData", g(T));
    }
  }
}
function eZ(t) {
  let e = t.length - 4, n = 3, r, a;
  if ((t[n][1].type === "lineEnding" || t[n][1].type === "space") && (t[e][1].type === "lineEnding" || t[e][1].type === "space")) {
    for (r = n; ++r < e; )
      if (t[r][1].type === "mathTextData") {
        t[e][1].type = "mathTextPadding", t[n][1].type = "mathTextPadding", n += 2, e -= 2;
        break;
      }
  }
  for (r = n - 1, e++; ++r <= e; )
    a === void 0 ? r !== e && t[r][1].type !== "lineEnding" && (a = r) : (r === e || t[r][1].type === "lineEnding") && (t[a][1].type = "mathTextData", r !== a + 2 && (t[a][1].end = t[r - 1][1].end, t.splice(a + 2, r - a - 2), e -= r - a - 2, r = a + 2), a = void 0);
  return t;
}
function tZ(t) {
  return t !== 36 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function nZ(t) {
  return {
    flow: {
      36: jX
    },
    text: {
      36: JX(t)
    }
  };
}
const rZ = {};
function aZ(t) {
  const e = (
    /** @type {Processor} */
    this
  ), n = t || rZ, r = e.data(), a = r.micromarkExtensions || (r.micromarkExtensions = []), i = r.fromMarkdownExtensions || (r.fromMarkdownExtensions = []), s = r.toMarkdownExtensions || (r.toMarkdownExtensions = []);
  a.push(nZ(n)), i.push(KX()), s.push(QX(n));
}
const iZ = ({ children: t, ...e }) => {
  const n = $E();
  return /* @__PURE__ */ C.jsx(
    Zt,
    {
      sx: {
        display: "inline",
        position: "relative"
      },
      children: /* @__PURE__ */ C.jsx(
        "code",
        {
          ...e,
          style: {
            background: n ? Bt[900] : Bt[200],
            borderRadius: "4px",
            padding: "0.2em 0.4em",
            overflowX: "auto"
          },
          children: t
        }
      )
    }
  );
};
function Q3(t) {
  return t instanceof Map ? t.clear = t.delete = t.set = function() {
    throw new Error("map is read-only");
  } : t instanceof Set && (t.add = t.clear = t.delete = function() {
    throw new Error("set is read-only");
  }), Object.freeze(t), Object.getOwnPropertyNames(t).forEach((e) => {
    const n = t[e], r = typeof n;
    (r === "object" || r === "function") && !Object.isFrozen(n) && Q3(n);
  }), t;
}
class GC {
  /**
   * @param {CompiledMode} mode
   */
  constructor(e) {
    e.data === void 0 && (e.data = {}), this.data = e.data, this.isMatchIgnored = !1;
  }
  ignoreMatch() {
    this.isMatchIgnored = !0;
  }
}
function j3(t) {
  return t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function Di(t, ...e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const r in t)
    n[r] = t[r];
  return e.forEach(function(r) {
    for (const a in r)
      n[a] = r[a];
  }), /** @type {T} */
  n;
}
const sZ = "</span>", HC = (t) => !!t.scope, oZ = (t, { prefix: e }) => {
  if (t.startsWith("language:"))
    return t.replace("language:", "language-");
  if (t.includes(".")) {
    const n = t.split(".");
    return [
      `${e}${n.shift()}`,
      ...n.map((r, a) => `${r}${"_".repeat(a + 1)}`)
    ].join(" ");
  }
  return `${e}${t}`;
};
class lZ {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(e, n) {
    this.buffer = "", this.classPrefix = n.classPrefix, e.walk(this);
  }
  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(e) {
    this.buffer += j3(e);
  }
  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(e) {
    if (!HC(e)) return;
    const n = oZ(
      e.scope,
      { prefix: this.classPrefix }
    );
    this.span(n);
  }
  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(e) {
    HC(e) && (this.buffer += sZ);
  }
  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }
  // helpers
  /**
   * Builds a span element
   *
   * @param {string} className */
  span(e) {
    this.buffer += `<span class="${e}">`;
  }
}
const YC = (t = {}) => {
  const e = { children: [] };
  return Object.assign(e, t), e;
};
class B1 {
  constructor() {
    this.rootNode = YC(), this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  /** @param {Node} node */
  add(e) {
    this.top.children.push(e);
  }
  /** @param {string} scope */
  openNode(e) {
    const n = YC({ scope: e });
    this.add(n), this.stack.push(n);
  }
  closeNode() {
    if (this.stack.length > 1)
      return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); ) ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(e) {
    return this.constructor._walk(e, this.rootNode);
  }
  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(e, n) {
    return typeof n == "string" ? e.addText(n) : n.children && (e.openNode(n), n.children.forEach((r) => this._walk(e, r)), e.closeNode(n)), e;
  }
  /**
   * @param {Node} node
   */
  static _collapse(e) {
    typeof e != "string" && e.children && (e.children.every((n) => typeof n == "string") ? e.children = [e.children.join("")] : e.children.forEach((n) => {
      B1._collapse(n);
    }));
  }
}
class cZ extends B1 {
  /**
   * @param {*} options
   */
  constructor(e) {
    super(), this.options = e;
  }
  /**
   * @param {string} text
   */
  addText(e) {
    e !== "" && this.add(e);
  }
  /** @param {string} scope */
  startScope(e) {
    this.openNode(e);
  }
  endScope() {
    this.closeNode();
  }
  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  __addSublanguage(e, n) {
    const r = e.root;
    n && (r.scope = `language:${n}`), this.add(r);
  }
  toHTML() {
    return new lZ(this, this.options).value();
  }
  finalize() {
    return this.closeAllNodes(), !0;
  }
}
function Ul(t) {
  return t ? typeof t == "string" ? t : t.source : null;
}
function X3(t) {
  return Ts("(?=", t, ")");
}
function uZ(t) {
  return Ts("(?:", t, ")*");
}
function dZ(t) {
  return Ts("(?:", t, ")?");
}
function Ts(...t) {
  return t.map((n) => Ul(n)).join("");
}
function pZ(t) {
  const e = t[t.length - 1];
  return typeof e == "object" && e.constructor === Object ? (t.splice(t.length - 1, 1), e) : {};
}
function U1(...t) {
  return "(" + (pZ(t).capture ? "" : "?:") + t.map((r) => Ul(r)).join("|") + ")";
}
function Z3(t) {
  return new RegExp(t.toString() + "|").exec("").length - 1;
}
function _Z(t, e) {
  const n = t && t.exec(e);
  return n && n.index === 0;
}
const mZ = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function G1(t, { joinWith: e }) {
  let n = 0;
  return t.map((r) => {
    n += 1;
    const a = n;
    let i = Ul(r), s = "";
    for (; i.length > 0; ) {
      const l = mZ.exec(i);
      if (!l) {
        s += i;
        break;
      }
      s += i.substring(0, l.index), i = i.substring(l.index + l[0].length), l[0][0] === "\\" && l[1] ? s += "\\" + String(Number(l[1]) + a) : (s += l[0], l[0] === "(" && n++);
    }
    return s;
  }).map((r) => `(${r})`).join(e);
}
const fZ = /\b\B/, J3 = "[a-zA-Z]\\w*", H1 = "[a-zA-Z_]\\w*", eD = "\\b\\d+(\\.\\d+)?", tD = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", nD = "\\b(0b[01]+)", gZ = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", hZ = (t = {}) => {
  const e = /^#![ ]*\//;
  return t.binary && (t.begin = Ts(
    e,
    /.*\b/,
    t.binary,
    /\b.*/
  )), Di({
    scope: "meta",
    begin: e,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (n, r) => {
      n.index !== 0 && r.ignoreMatch();
    }
  }, t);
}, Gl = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
}, EZ = {
  scope: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [Gl]
}, SZ = {
  scope: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [Gl]
}, bZ = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
}, Wd = function(t, e, n = {}) {
  const r = Di(
    {
      scope: "comment",
      begin: t,
      end: e,
      contains: []
    },
    n
  );
  r.contains.push({
    scope: "doctag",
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: !0,
    relevance: 0
  });
  const a = U1(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
    // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/,
    // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/
    // allow capitalized words at beginning of sentences
  );
  return r.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---
      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827
      begin: Ts(
        /[ ]+/,
        // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        "(",
        a,
        /[.]?[:]?([.][ ]|[ ])/,
        "){3}"
      )
      // look for 3 words in a row
    }
  ), r;
}, TZ = Wd("//", "$"), yZ = Wd("/\\*", "\\*/"), vZ = Wd("#", "$"), CZ = {
  scope: "number",
  begin: eD,
  relevance: 0
}, RZ = {
  scope: "number",
  begin: tD,
  relevance: 0
}, AZ = {
  scope: "number",
  begin: nD,
  relevance: 0
}, OZ = {
  scope: "regexp",
  begin: /\/(?=[^/\n]*\/)/,
  end: /\/[gimuy]*/,
  contains: [
    Gl,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [Gl]
    }
  ]
}, NZ = {
  scope: "title",
  begin: J3,
  relevance: 0
}, IZ = {
  scope: "title",
  begin: H1,
  relevance: 0
}, xZ = {
  // excludes method names from keyword processing
  begin: "\\.\\s*" + H1,
  relevance: 0
}, DZ = function(t) {
  return Object.assign(
    t,
    {
      /** @type {ModeCallback} */
      "on:begin": (e, n) => {
        n.data._beginMatch = e[1];
      },
      /** @type {ModeCallback} */
      "on:end": (e, n) => {
        n.data._beginMatch !== e[1] && n.ignoreMatch();
      }
    }
  );
};
var Lu = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  APOS_STRING_MODE: EZ,
  BACKSLASH_ESCAPE: Gl,
  BINARY_NUMBER_MODE: AZ,
  BINARY_NUMBER_RE: nD,
  COMMENT: Wd,
  C_BLOCK_COMMENT_MODE: yZ,
  C_LINE_COMMENT_MODE: TZ,
  C_NUMBER_MODE: RZ,
  C_NUMBER_RE: tD,
  END_SAME_AS_BEGIN: DZ,
  HASH_COMMENT_MODE: vZ,
  IDENT_RE: J3,
  MATCH_NOTHING_RE: fZ,
  METHOD_GUARD: xZ,
  NUMBER_MODE: CZ,
  NUMBER_RE: eD,
  PHRASAL_WORDS_MODE: bZ,
  QUOTE_STRING_MODE: SZ,
  REGEXP_MODE: OZ,
  RE_STARTERS_RE: gZ,
  SHEBANG: hZ,
  TITLE_MODE: NZ,
  UNDERSCORE_IDENT_RE: H1,
  UNDERSCORE_TITLE_MODE: IZ
});
function wZ(t, e) {
  t.input[t.index - 1] === "." && e.ignoreMatch();
}
function LZ(t, e) {
  t.className !== void 0 && (t.scope = t.className, delete t.className);
}
function MZ(t, e) {
  e && t.beginKeywords && (t.begin = "\\b(" + t.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", t.__beforeBegin = wZ, t.keywords = t.keywords || t.beginKeywords, delete t.beginKeywords, t.relevance === void 0 && (t.relevance = 0));
}
function kZ(t, e) {
  Array.isArray(t.illegal) && (t.illegal = U1(...t.illegal));
}
function PZ(t, e) {
  if (t.match) {
    if (t.begin || t.end) throw new Error("begin & end are not supported with match");
    t.begin = t.match, delete t.match;
  }
}
function FZ(t, e) {
  t.relevance === void 0 && (t.relevance = 1);
}
const BZ = (t, e) => {
  if (!t.beforeMatch) return;
  if (t.starts) throw new Error("beforeMatch cannot be used with starts");
  const n = Object.assign({}, t);
  Object.keys(t).forEach((r) => {
    delete t[r];
  }), t.keywords = n.keywords, t.begin = Ts(n.beforeMatch, X3(n.begin)), t.starts = {
    relevance: 0,
    contains: [
      Object.assign(n, { endsParent: !0 })
    ]
  }, t.relevance = 0, delete n.beforeMatch;
}, UZ = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  // common variable name
  "list",
  // common variable name
  "value"
  // common variable name
], GZ = "keyword";
function rD(t, e, n = GZ) {
  const r = /* @__PURE__ */ Object.create(null);
  return typeof t == "string" ? a(n, t.split(" ")) : Array.isArray(t) ? a(n, t) : Object.keys(t).forEach(function(i) {
    Object.assign(
      r,
      rD(t[i], e, i)
    );
  }), r;
  function a(i, s) {
    e && (s = s.map((l) => l.toLowerCase())), s.forEach(function(l) {
      const c = l.split("|");
      r[c[0]] = [i, HZ(c[0], c[1])];
    });
  }
}
function HZ(t, e) {
  return e ? Number(e) : YZ(t) ? 0 : 1;
}
function YZ(t) {
  return UZ.includes(t.toLowerCase());
}
const zC = {}, ps = (t) => {
  console.error(t);
}, qC = (t, ...e) => {
  console.log(`WARN: ${t}`, ...e);
}, Ys = (t, e) => {
  zC[`${t}/${e}`] || (console.log(`Deprecated as of ${t}. ${e}`), zC[`${t}/${e}`] = !0);
}, pd = new Error();
function aD(t, e, { key: n }) {
  let r = 0;
  const a = t[n], i = {}, s = {};
  for (let l = 1; l <= e.length; l++)
    s[l + r] = a[l], i[l + r] = !0, r += Z3(e[l - 1]);
  t[n] = s, t[n]._emit = i, t[n]._multi = !0;
}
function zZ(t) {
  if (Array.isArray(t.begin)) {
    if (t.skip || t.excludeBegin || t.returnBegin)
      throw ps("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), pd;
    if (typeof t.beginScope != "object" || t.beginScope === null)
      throw ps("beginScope must be object"), pd;
    aD(t, t.begin, { key: "beginScope" }), t.begin = G1(t.begin, { joinWith: "" });
  }
}
function qZ(t) {
  if (Array.isArray(t.end)) {
    if (t.skip || t.excludeEnd || t.returnEnd)
      throw ps("skip, excludeEnd, returnEnd not compatible with endScope: {}"), pd;
    if (typeof t.endScope != "object" || t.endScope === null)
      throw ps("endScope must be object"), pd;
    aD(t, t.end, { key: "endScope" }), t.end = G1(t.end, { joinWith: "" });
  }
}
function VZ(t) {
  t.scope && typeof t.scope == "object" && t.scope !== null && (t.beginScope = t.scope, delete t.scope);
}
function $Z(t) {
  VZ(t), typeof t.beginScope == "string" && (t.beginScope = { _wrap: t.beginScope }), typeof t.endScope == "string" && (t.endScope = { _wrap: t.endScope }), zZ(t), qZ(t);
}
function WZ(t) {
  function e(s, l) {
    return new RegExp(
      Ul(s),
      "m" + (t.case_insensitive ? "i" : "") + (t.unicodeRegex ? "u" : "") + (l ? "g" : "")
    );
  }
  class n {
    constructor() {
      this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
    }
    // @ts-ignore
    addRule(l, c) {
      c.position = this.position++, this.matchIndexes[this.matchAt] = c, this.regexes.push([c, l]), this.matchAt += Z3(l) + 1;
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const l = this.regexes.map((c) => c[1]);
      this.matcherRe = e(G1(l, { joinWith: "|" }), !0), this.lastIndex = 0;
    }
    /** @param {string} s */
    exec(l) {
      this.matcherRe.lastIndex = this.lastIndex;
      const c = this.matcherRe.exec(l);
      if (!c)
        return null;
      const d = c.findIndex((_, f) => f > 0 && _ !== void 0), p = this.matchIndexes[d];
      return c.splice(0, d), Object.assign(c, p);
    }
  }
  class r {
    constructor() {
      this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
    }
    // @ts-ignore
    getMatcher(l) {
      if (this.multiRegexes[l]) return this.multiRegexes[l];
      const c = new n();
      return this.rules.slice(l).forEach(([d, p]) => c.addRule(d, p)), c.compile(), this.multiRegexes[l] = c, c;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    // @ts-ignore
    addRule(l, c) {
      this.rules.push([l, c]), c.type === "begin" && this.count++;
    }
    /** @param {string} s */
    exec(l) {
      const c = this.getMatcher(this.regexIndex);
      c.lastIndex = this.lastIndex;
      let d = c.exec(l);
      if (this.resumingScanAtSamePosition() && !(d && d.index === this.lastIndex)) {
        const p = this.getMatcher(0);
        p.lastIndex = this.lastIndex + 1, d = p.exec(l);
      }
      return d && (this.regexIndex += d.position + 1, this.regexIndex === this.count && this.considerAll()), d;
    }
  }
  function a(s) {
    const l = new r();
    return s.contains.forEach((c) => l.addRule(c.begin, { rule: c, type: "begin" })), s.terminatorEnd && l.addRule(s.terminatorEnd, { type: "end" }), s.illegal && l.addRule(s.illegal, { type: "illegal" }), l;
  }
  function i(s, l) {
    const c = (
      /** @type CompiledMode */
      s
    );
    if (s.isCompiled) return c;
    [
      LZ,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      PZ,
      $Z,
      BZ
    ].forEach((p) => p(s, l)), t.compilerExtensions.forEach((p) => p(s, l)), s.__beforeBegin = null, [
      MZ,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      kZ,
      // default to 1 relevance if not specified
      FZ
    ].forEach((p) => p(s, l)), s.isCompiled = !0;
    let d = null;
    return typeof s.keywords == "object" && s.keywords.$pattern && (s.keywords = Object.assign({}, s.keywords), d = s.keywords.$pattern, delete s.keywords.$pattern), d = d || /\w+/, s.keywords && (s.keywords = rD(s.keywords, t.case_insensitive)), c.keywordPatternRe = e(d, !0), l && (s.begin || (s.begin = /\B|\b/), c.beginRe = e(c.begin), !s.end && !s.endsWithParent && (s.end = /\B|\b/), s.end && (c.endRe = e(c.end)), c.terminatorEnd = Ul(c.end) || "", s.endsWithParent && l.terminatorEnd && (c.terminatorEnd += (s.end ? "|" : "") + l.terminatorEnd)), s.illegal && (c.illegalRe = e(
      /** @type {RegExp | string} */
      s.illegal
    )), s.contains || (s.contains = []), s.contains = [].concat(...s.contains.map(function(p) {
      return KZ(p === "self" ? s : p);
    })), s.contains.forEach(function(p) {
      i(
        /** @type Mode */
        p,
        c
      );
    }), s.starts && i(s.starts, l), c.matcher = a(c), c;
  }
  if (t.compilerExtensions || (t.compilerExtensions = []), t.contains && t.contains.includes("self"))
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  return t.classNameAliases = Di(t.classNameAliases || {}), i(
    /** @type Mode */
    t
  );
}
function iD(t) {
  return t ? t.endsWithParent || iD(t.starts) : !1;
}
function KZ(t) {
  return t.variants && !t.cachedVariants && (t.cachedVariants = t.variants.map(function(e) {
    return Di(t, { variants: null }, e);
  })), t.cachedVariants ? t.cachedVariants : iD(t) ? Di(t, { starts: t.starts ? Di(t.starts) : null }) : Object.isFrozen(t) ? Di(t) : t;
}
var QZ = "11.9.0";
class jZ extends Error {
  constructor(e, n) {
    super(e), this.name = "HTMLInjectionError", this.html = n;
  }
}
const C_ = j3, VC = Di, $C = Symbol("nomatch"), XZ = 7, sD = function(t) {
  const e = /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null), r = [];
  let a = !0;
  const i = "Could not find the language '{}', did you forget to load/include a language module?", s = { disableAutodetect: !0, name: "Plain text", contains: [] };
  let l = {
    ignoreUnescapedHTML: !1,
    throwUnescapedHTML: !1,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    cssSelector: "pre code",
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: cZ
  };
  function c(ne) {
    return l.noHighlightRe.test(ne);
  }
  function d(ne) {
    let se = ne.className + " ";
    se += ne.parentNode ? ne.parentNode.className : "";
    const z = l.languageDetectRe.exec(se);
    if (z) {
      const v = X(z[1]);
      return v || (qC(i.replace("{}", z[1])), qC("Falling back to no-highlight mode for this block.", ne)), v ? z[1] : "no-highlight";
    }
    return se.split(/\s+/).find((v) => c(v) || X(v));
  }
  function p(ne, se, z) {
    let v = "", H = "";
    typeof se == "object" ? (v = ne, z = se.ignoreIllegals, H = se.language) : (Ys("10.7.0", "highlight(lang, code, ...args) has been deprecated."), Ys("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), H = ne, v = se), z === void 0 && (z = !0);
    const oe = {
      code: v,
      language: H
    };
    fe("before:highlight", oe);
    const k = oe.result ? oe.result : _(oe.language, oe.code, z);
    return k.code = oe.code, fe("after:highlight", k), k;
  }
  function _(ne, se, z, v) {
    const H = /* @__PURE__ */ Object.create(null);
    function oe(ue, be) {
      return ue.keywords[be];
    }
    function k() {
      if (!He.keywords) {
        pt.addText(Be);
        return;
      }
      let ue = 0;
      He.keywordPatternRe.lastIndex = 0;
      let be = He.keywordPatternRe.exec(Be), Ge = "";
      for (; be; ) {
        Ge += Be.substring(ue, be.index);
        const Ze = mt.case_insensitive ? be[0].toLowerCase() : be[0], vt = oe(He, Ze);
        if (vt) {
          const [Pt, Ln] = vt;
          if (pt.addText(Ge), Ge = "", H[Ze] = (H[Ze] || 0) + 1, H[Ze] <= XZ && (It += Ln), Pt.startsWith("_"))
            Ge += be[0];
          else {
            const Rn = mt.classNameAliases[Pt] || Pt;
            he(be[0], Rn);
          }
        } else
          Ge += be[0];
        ue = He.keywordPatternRe.lastIndex, be = He.keywordPatternRe.exec(Be);
      }
      Ge += Be.substring(ue), pt.addText(Ge);
    }
    function me() {
      if (Be === "") return;
      let ue = null;
      if (typeof He.subLanguage == "string") {
        if (!e[He.subLanguage]) {
          pt.addText(Be);
          return;
        }
        ue = _(He.subLanguage, Be, !0, Gt[He.subLanguage]), Gt[He.subLanguage] = /** @type {CompiledMode} */
        ue._top;
      } else
        ue = g(Be, He.subLanguage.length ? He.subLanguage : null);
      He.relevance > 0 && (It += ue.relevance), pt.__addSublanguage(ue._emitter, ue.language);
    }
    function Ce() {
      He.subLanguage != null ? me() : k(), Be = "";
    }
    function he(ue, be) {
      ue !== "" && (pt.startScope(be), pt.addText(ue), pt.endScope());
    }
    function Ne(ue, be) {
      let Ge = 1;
      const Ze = be.length - 1;
      for (; Ge <= Ze; ) {
        if (!ue._emit[Ge]) {
          Ge++;
          continue;
        }
        const vt = mt.classNameAliases[ue[Ge]] || ue[Ge], Pt = be[Ge];
        vt ? he(Pt, vt) : (Be = Pt, k(), Be = ""), Ge++;
      }
    }
    function ye(ue, be) {
      return ue.scope && typeof ue.scope == "string" && pt.openNode(mt.classNameAliases[ue.scope] || ue.scope), ue.beginScope && (ue.beginScope._wrap ? (he(Be, mt.classNameAliases[ue.beginScope._wrap] || ue.beginScope._wrap), Be = "") : ue.beginScope._multi && (Ne(ue.beginScope, be), Be = "")), He = Object.create(ue, { parent: { value: He } }), He;
    }
    function Ue(ue, be, Ge) {
      let Ze = _Z(ue.endRe, Ge);
      if (Ze) {
        if (ue["on:end"]) {
          const vt = new GC(ue);
          ue["on:end"](be, vt), vt.isMatchIgnored && (Ze = !1);
        }
        if (Ze) {
          for (; ue.endsParent && ue.parent; )
            ue = ue.parent;
          return ue;
        }
      }
      if (ue.endsWithParent)
        return Ue(ue.parent, be, Ge);
    }
    function Me(ue) {
      return He.matcher.regexIndex === 0 ? (Be += ue[0], 1) : (Se = !0, 0);
    }
    function Qe(ue) {
      const be = ue[0], Ge = ue.rule, Ze = new GC(Ge), vt = [Ge.__beforeBegin, Ge["on:begin"]];
      for (const Pt of vt)
        if (Pt && (Pt(ue, Ze), Ze.isMatchIgnored))
          return Me(be);
      return Ge.skip ? Be += be : (Ge.excludeBegin && (Be += be), Ce(), !Ge.returnBegin && !Ge.excludeBegin && (Be = be)), ye(Ge, ue), Ge.returnBegin ? 0 : be.length;
    }
    function _e(ue) {
      const be = ue[0], Ge = se.substring(ue.index), Ze = Ue(He, ue, Ge);
      if (!Ze)
        return $C;
      const vt = He;
      He.endScope && He.endScope._wrap ? (Ce(), he(be, He.endScope._wrap)) : He.endScope && He.endScope._multi ? (Ce(), Ne(He.endScope, ue)) : vt.skip ? Be += be : (vt.returnEnd || vt.excludeEnd || (Be += be), Ce(), vt.excludeEnd && (Be = be));
      do
        He.scope && pt.closeNode(), !He.skip && !He.subLanguage && (It += He.relevance), He = He.parent;
      while (He !== Ze.parent);
      return Ze.starts && ye(Ze.starts, ue), vt.returnEnd ? 0 : be.length;
    }
    function je() {
      const ue = [];
      for (let be = He; be !== mt; be = be.parent)
        be.scope && ue.unshift(be.scope);
      ue.forEach((be) => pt.openNode(be));
    }
    let et = {};
    function nt(ue, be) {
      const Ge = be && be[0];
      if (Be += ue, Ge == null)
        return Ce(), 0;
      if (et.type === "begin" && be.type === "end" && et.index === be.index && Ge === "") {
        if (Be += se.slice(be.index, be.index + 1), !a) {
          const Ze = new Error(`0 width match regex (${ne})`);
          throw Ze.languageName = ne, Ze.badRule = et.rule, Ze;
        }
        return 1;
      }
      if (et = be, be.type === "begin")
        return Qe(be);
      if (be.type === "illegal" && !z) {
        const Ze = new Error('Illegal lexeme "' + Ge + '" for mode "' + (He.scope || "<unnamed>") + '"');
        throw Ze.mode = He, Ze;
      } else if (be.type === "end") {
        const Ze = _e(be);
        if (Ze !== $C)
          return Ze;
      }
      if (be.type === "illegal" && Ge === "")
        return 1;
      if (j > 1e5 && j > be.index * 3)
        throw new Error("potential infinite loop, way more iterations than matches");
      return Be += Ge, Ge.length;
    }
    const mt = X(ne);
    if (!mt)
      throw ps(i.replace("{}", ne)), new Error('Unknown language: "' + ne + '"');
    const bt = WZ(mt);
    let _t = "", He = v || bt;
    const Gt = {}, pt = new l.__emitter(l);
    je();
    let Be = "", It = 0, Oe = 0, j = 0, Se = !1;
    try {
      if (mt.__emitTokens)
        mt.__emitTokens(se, pt);
      else {
        for (He.matcher.considerAll(); ; ) {
          j++, Se ? Se = !1 : He.matcher.considerAll(), He.matcher.lastIndex = Oe;
          const ue = He.matcher.exec(se);
          if (!ue) break;
          const be = se.substring(Oe, ue.index), Ge = nt(be, ue);
          Oe = ue.index + Ge;
        }
        nt(se.substring(Oe));
      }
      return pt.finalize(), _t = pt.toHTML(), {
        language: ne,
        value: _t,
        relevance: It,
        illegal: !1,
        _emitter: pt,
        _top: He
      };
    } catch (ue) {
      if (ue.message && ue.message.includes("Illegal"))
        return {
          language: ne,
          value: C_(se),
          illegal: !0,
          relevance: 0,
          _illegalBy: {
            message: ue.message,
            index: Oe,
            context: se.slice(Oe - 100, Oe + 100),
            mode: ue.mode,
            resultSoFar: _t
          },
          _emitter: pt
        };
      if (a)
        return {
          language: ne,
          value: C_(se),
          illegal: !1,
          relevance: 0,
          errorRaised: ue,
          _emitter: pt,
          _top: He
        };
      throw ue;
    }
  }
  function f(ne) {
    const se = {
      value: C_(ne),
      illegal: !1,
      relevance: 0,
      _top: s,
      _emitter: new l.__emitter(l)
    };
    return se._emitter.addText(ne), se;
  }
  function g(ne, se) {
    se = se || l.languages || Object.keys(e);
    const z = f(ne), v = se.filter(X).filter(ae).map(
      (Ce) => _(Ce, ne, !1)
    );
    v.unshift(z);
    const H = v.sort((Ce, he) => {
      if (Ce.relevance !== he.relevance) return he.relevance - Ce.relevance;
      if (Ce.language && he.language) {
        if (X(Ce.language).supersetOf === he.language)
          return 1;
        if (X(he.language).supersetOf === Ce.language)
          return -1;
      }
      return 0;
    }), [oe, k] = H, me = oe;
    return me.secondBest = k, me;
  }
  function E(ne, se, z) {
    const v = se && n[se] || z;
    ne.classList.add("hljs"), ne.classList.add(`language-${v}`);
  }
  function T(ne) {
    let se = null;
    const z = d(ne);
    if (c(z)) return;
    if (fe(
      "before:highlightElement",
      { el: ne, language: z }
    ), ne.dataset.highlighted) {
      console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", ne);
      return;
    }
    if (ne.children.length > 0 && (l.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(ne)), l.throwUnescapedHTML))
      throw new jZ(
        "One of your code blocks includes unescaped HTML.",
        ne.innerHTML
      );
    se = ne;
    const v = se.textContent, H = z ? p(v, { language: z, ignoreIllegals: !0 }) : g(v);
    ne.innerHTML = H.value, ne.dataset.highlighted = "yes", E(ne, z, H.language), ne.result = {
      language: H.language,
      // TODO: remove with version 11.0
      re: H.relevance,
      relevance: H.relevance
    }, H.secondBest && (ne.secondBest = {
      language: H.secondBest.language,
      relevance: H.secondBest.relevance
    }), fe("after:highlightElement", { el: ne, result: H, text: v });
  }
  function R(ne) {
    l = VC(l, ne);
  }
  const A = () => {
    P(), Ys("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };
  function I() {
    P(), Ys("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }
  let x = !1;
  function P() {
    if (document.readyState === "loading") {
      x = !0;
      return;
    }
    document.querySelectorAll(l.cssSelector).forEach(T);
  }
  function D() {
    x && P();
  }
  typeof window < "u" && window.addEventListener && window.addEventListener("DOMContentLoaded", D, !1);
  function L(ne, se) {
    let z = null;
    try {
      z = se(t);
    } catch (v) {
      if (ps("Language definition for '{}' could not be registered.".replace("{}", ne)), a)
        ps(v);
      else
        throw v;
      z = s;
    }
    z.name || (z.name = ne), e[ne] = z, z.rawDefinition = se.bind(null, t), z.aliases && $(z.aliases, { languageName: ne });
  }
  function K(ne) {
    delete e[ne];
    for (const se of Object.keys(n))
      n[se] === ne && delete n[se];
  }
  function J() {
    return Object.keys(e);
  }
  function X(ne) {
    return ne = (ne || "").toLowerCase(), e[ne] || e[n[ne]];
  }
  function $(ne, { languageName: se }) {
    typeof ne == "string" && (ne = [ne]), ne.forEach((z) => {
      n[z.toLowerCase()] = se;
    });
  }
  function ae(ne) {
    const se = X(ne);
    return se && !se.disableAutodetect;
  }
  function ce(ne) {
    ne["before:highlightBlock"] && !ne["before:highlightElement"] && (ne["before:highlightElement"] = (se) => {
      ne["before:highlightBlock"](
        Object.assign({ block: se.el }, se)
      );
    }), ne["after:highlightBlock"] && !ne["after:highlightElement"] && (ne["after:highlightElement"] = (se) => {
      ne["after:highlightBlock"](
        Object.assign({ block: se.el }, se)
      );
    });
  }
  function ve(ne) {
    ce(ne), r.push(ne);
  }
  function ge(ne) {
    const se = r.indexOf(ne);
    se !== -1 && r.splice(se, 1);
  }
  function fe(ne, se) {
    const z = ne;
    r.forEach(function(v) {
      v[z] && v[z](se);
    });
  }
  function Fe(ne) {
    return Ys("10.7.0", "highlightBlock will be removed entirely in v12.0"), Ys("10.7.0", "Please use highlightElement now."), T(ne);
  }
  Object.assign(t, {
    highlight: p,
    highlightAuto: g,
    highlightAll: P,
    highlightElement: T,
    // TODO: Remove with v12 API
    highlightBlock: Fe,
    configure: R,
    initHighlighting: A,
    initHighlightingOnLoad: I,
    registerLanguage: L,
    unregisterLanguage: K,
    listLanguages: J,
    getLanguage: X,
    registerAliases: $,
    autoDetection: ae,
    inherit: VC,
    addPlugin: ve,
    removePlugin: ge
  }), t.debugMode = function() {
    a = !1;
  }, t.safeMode = function() {
    a = !0;
  }, t.versionString = QZ, t.regex = {
    concat: Ts,
    lookahead: X3,
    either: U1,
    optional: dZ,
    anyNumberOfTimes: uZ
  };
  for (const ne in Lu)
    typeof Lu[ne] == "object" && Q3(Lu[ne]);
  return Object.assign(t, Lu), t;
}, ao = sD({});
ao.newInstance = () => sD({});
var ZZ = ao;
ao.HighlightJS = ao;
ao.default = ao;
var R_, WC;
function JZ() {
  if (WC) return R_;
  WC = 1;
  function t(e) {
    const n = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+", i = "далее " + "возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ", c = "загрузитьизфайла " + "вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ", g = "разделительстраниц разделительстрок символтабуляции " + "ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон " + "acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища " + "wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ", v = "webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля " + "автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени форматкартинки ширинаподчиненныхэлементовформы " + "виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента " + "авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных " + "использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц " + "отображениевремениэлементовпланировщика " + "типфайлаформатированногодокумента " + "обходрезультатазапроса типзаписизапроса " + "видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов " + "доступкфайлу режимдиалогавыборафайла режимоткрытияфайла " + "типизмеренияпостроителязапроса " + "видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений " + "wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs форматдатыjson экранированиесимволовjson " + "видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных использованиеусловногооформлениякомпоновкиданных " + "важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты статусразборапочтовогосообщения " + "режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации " + "расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии типхранилищасертификатовкриптографии " + "кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip режимсохраненияпутейzip уровеньсжатияzip " + "звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp " + "направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса " + "httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса типномерадокумента типномеразадачи типформы удалениедвижений " + "важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты", k = "comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных " + "comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура фиксированноесоответствие фиксированныймассив ", me = "null истина ложь неопределено", Ce = e.inherit(e.NUMBER_MODE), he = {
      className: "string",
      begin: '"|\\|',
      end: '"|$',
      contains: [{ begin: '""' }]
    }, Ne = {
      begin: "'",
      end: "'",
      excludeBegin: !0,
      excludeEnd: !0,
      contains: [
        {
          className: "number",
          begin: "\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"
        }
      ]
    }, ye = e.inherit(e.C_LINE_COMMENT_MODE), Ue = {
      className: "meta",
      begin: "#|&",
      end: "$",
      keywords: {
        $pattern: n,
        keyword: i + c
      },
      contains: [ye]
    }, Me = {
      className: "symbol",
      begin: "~",
      end: ";|:",
      excludeEnd: !0
    }, Qe = {
      className: "function",
      variants: [
        {
          begin: "процедура|функция",
          end: "\\)",
          keywords: "процедура функция"
        },
        {
          begin: "конецпроцедуры|конецфункции",
          keywords: "конецпроцедуры конецфункции"
        }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          endsParent: !0,
          contains: [
            {
              className: "params",
              begin: n,
              end: ",",
              excludeEnd: !0,
              endsWithParent: !0,
              keywords: {
                $pattern: n,
                keyword: "знач",
                literal: me
              },
              contains: [
                Ce,
                he,
                Ne
              ]
            },
            ye
          ]
        },
        e.inherit(e.TITLE_MODE, { begin: n })
      ]
    };
    return {
      name: "1C:Enterprise",
      case_insensitive: !0,
      keywords: {
        $pattern: n,
        keyword: i,
        built_in: g,
        class: v,
        type: k,
        literal: me
      },
      contains: [
        Ue,
        Qe,
        ye,
        Me,
        Ce,
        he,
        Ne
      ]
    };
  }
  return R_ = t, R_;
}
var A_, KC;
function eJ() {
  if (KC) return A_;
  KC = 1;
  function t(e) {
    const n = e.regex, r = /^[a-zA-Z][a-zA-Z0-9-]*/, a = [
      "ALPHA",
      "BIT",
      "CHAR",
      "CR",
      "CRLF",
      "CTL",
      "DIGIT",
      "DQUOTE",
      "HEXDIG",
      "HTAB",
      "LF",
      "LWSP",
      "OCTET",
      "SP",
      "VCHAR",
      "WSP"
    ], i = e.COMMENT(/;/, /$/), s = {
      scope: "symbol",
      match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
    }, l = {
      scope: "symbol",
      match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
    }, c = {
      scope: "symbol",
      match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
    }, d = {
      scope: "symbol",
      match: /%[si](?=".*")/
    }, p = {
      scope: "attribute",
      match: n.concat(r, /(?=\s*=)/)
    };
    return {
      name: "Augmented Backus-Naur Form",
      illegal: /[!@#$^&',?+~`|:]/,
      keywords: a,
      contains: [
        {
          scope: "operator",
          match: /=\/?/
        },
        p,
        i,
        s,
        l,
        c,
        d,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE
      ]
    };
  }
  return A_ = t, A_;
}
var O_, QC;
function tJ() {
  if (QC) return O_;
  QC = 1;
  function t(e) {
    const n = e.regex, r = [
      "GET",
      "POST",
      "HEAD",
      "PUT",
      "DELETE",
      "CONNECT",
      "OPTIONS",
      "PATCH",
      "TRACE"
    ];
    return {
      name: "Apache Access Log",
      contains: [
        // IP
        {
          className: "number",
          begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
          relevance: 5
        },
        // Other numbers
        {
          className: "number",
          begin: /\b\d+\b/,
          relevance: 0
        },
        // Requests
        {
          className: "string",
          begin: n.concat(/"/, n.either(...r)),
          end: /"/,
          keywords: r,
          illegal: /\n/,
          relevance: 5,
          contains: [
            {
              begin: /HTTP\/[12]\.\d'/,
              relevance: 5
            }
          ]
        },
        // Dates
        {
          className: "string",
          // dates must have a certain length, this prevents matching
          // simple array accesses a[123] and [] and other common patterns
          // found in other languages
          begin: /\[\d[^\]\n]{8,}\]/,
          illegal: /\n/,
          relevance: 1
        },
        {
          className: "string",
          begin: /\[/,
          end: /\]/,
          illegal: /\n/,
          relevance: 0
        },
        // User agent / relevance boost
        {
          className: "string",
          begin: /"Mozilla\/\d\.\d \(/,
          end: /"/,
          illegal: /\n/,
          relevance: 3
        },
        // Strings
        {
          className: "string",
          begin: /"/,
          end: /"/,
          illegal: /\n/,
          relevance: 0
        }
      ]
    };
  }
  return O_ = t, O_;
}
var N_, jC;
function nJ() {
  if (jC) return N_;
  jC = 1;
  function t(e) {
    const n = e.regex, r = /[a-zA-Z_$][a-zA-Z0-9_$]*/, a = n.concat(
      r,
      n.concat("(\\.", r, ")*")
    ), i = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/, s = {
      className: "rest_arg",
      begin: /[.]{3}/,
      end: r,
      relevance: 10
    };
    return {
      name: "ActionScript",
      aliases: ["as"],
      keywords: {
        keyword: [
          "as",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "default",
          "delete",
          "do",
          "dynamic",
          "each",
          "else",
          "extends",
          "final",
          "finally",
          "for",
          "function",
          "get",
          "if",
          "implements",
          "import",
          "in",
          "include",
          "instanceof",
          "interface",
          "internal",
          "is",
          "namespace",
          "native",
          "new",
          "override",
          "package",
          "private",
          "protected",
          "public",
          "return",
          "set",
          "static",
          "super",
          "switch",
          "this",
          "throw",
          "try",
          "typeof",
          "use",
          "var",
          "void",
          "while",
          "with"
        ],
        literal: [
          "true",
          "false",
          "null",
          "undefined"
        ]
      },
      contains: [
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.C_NUMBER_MODE,
        {
          match: [
            /\bpackage/,
            /\s+/,
            a
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          match: [
            /\b(?:class|interface|extends|implements)/,
            /\s+/,
            r
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          className: "meta",
          beginKeywords: "import include",
          end: /;/,
          keywords: { keyword: "import include" }
        },
        {
          beginKeywords: "function",
          end: /[{;]/,
          excludeEnd: !0,
          illegal: /\S/,
          contains: [
            e.inherit(e.TITLE_MODE, { className: "title.function" }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                e.APOS_STRING_MODE,
                e.QUOTE_STRING_MODE,
                e.C_LINE_COMMENT_MODE,
                e.C_BLOCK_COMMENT_MODE,
                s
              ]
            },
            { begin: n.concat(/:\s*/, i) }
          ]
        },
        e.METHOD_GUARD
      ],
      illegal: /#/
    };
  }
  return N_ = t, N_;
}
var I_, XC;
function rJ() {
  if (XC) return I_;
  XC = 1;
  function t(e) {
    const n = "\\d(_|\\d)*", r = "[eE][-+]?" + n, a = n + "(\\." + n + ")?(" + r + ")?", i = "\\w+", l = "\\b(" + (n + "#" + i + "(\\." + i + ")?#(" + r + ")?") + "|" + a + ")", c = "[A-Za-z](_?[A-Za-z0-9.])*", d = `[]\\{\\}%#'"`, p = e.COMMENT("--", "$"), _ = {
      // TODO: These spaces are not required by the Ada syntax
      // however, I have yet to see handwritten Ada code where
      // someone does not put spaces around :
      begin: "\\s+:\\s+",
      end: "\\s*(:=|;|\\)|=>|$)",
      // endsWithParent: true,
      // returnBegin: true,
      illegal: d,
      contains: [
        {
          // workaround to avoid highlighting
          // named loops and declare blocks
          beginKeywords: "loop for declare others",
          endsParent: !0
        },
        {
          // properly highlight all modifiers
          className: "keyword",
          beginKeywords: "not null constant access function procedure in out aliased exception"
        },
        {
          className: "type",
          begin: c,
          endsParent: !0,
          relevance: 0
        }
      ]
    };
    return {
      name: "Ada",
      case_insensitive: !0,
      keywords: {
        keyword: [
          "abort",
          "else",
          "new",
          "return",
          "abs",
          "elsif",
          "not",
          "reverse",
          "abstract",
          "end",
          "accept",
          "entry",
          "select",
          "access",
          "exception",
          "of",
          "separate",
          "aliased",
          "exit",
          "or",
          "some",
          "all",
          "others",
          "subtype",
          "and",
          "for",
          "out",
          "synchronized",
          "array",
          "function",
          "overriding",
          "at",
          "tagged",
          "generic",
          "package",
          "task",
          "begin",
          "goto",
          "pragma",
          "terminate",
          "body",
          "private",
          "then",
          "if",
          "procedure",
          "type",
          "case",
          "in",
          "protected",
          "constant",
          "interface",
          "is",
          "raise",
          "use",
          "declare",
          "range",
          "delay",
          "limited",
          "record",
          "when",
          "delta",
          "loop",
          "rem",
          "while",
          "digits",
          "renames",
          "with",
          "do",
          "mod",
          "requeue",
          "xor"
        ],
        literal: [
          "True",
          "False"
        ]
      },
      contains: [
        p,
        // strings "foobar"
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        // characters ''
        {
          // character literals always contain one char
          className: "string",
          begin: /'.'/
        },
        {
          // number literals
          className: "number",
          begin: l,
          relevance: 0
        },
        {
          // Attributes
          className: "symbol",
          begin: "'" + c
        },
        {
          // package definition, maybe inside generic
          className: "title",
          begin: "(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",
          end: "(is|$)",
          keywords: "package body",
          excludeBegin: !0,
          excludeEnd: !0,
          illegal: d
        },
        {
          // function/procedure declaration/definition
          // maybe inside generic
          begin: "(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",
          end: "(\\bis|\\bwith|\\brenames|\\)\\s*;)",
          keywords: "overriding function procedure with is renames return",
          // we need to re-match the 'function' keyword, so that
          // the title mode below matches only exactly once
          returnBegin: !0,
          contains: [
            p,
            {
              // name of the function/procedure
              className: "title",
              begin: "(\\bwith\\s+)?\\b(function|procedure)\\s+",
              end: "(\\(|\\s+|$)",
              excludeBegin: !0,
              excludeEnd: !0,
              illegal: d
            },
            // 'self'
            // // parameter types
            _,
            {
              // return type
              className: "type",
              begin: "\\breturn\\s+",
              end: "(\\s+|;|$)",
              keywords: "return",
              excludeBegin: !0,
              excludeEnd: !0,
              // we are done with functions
              endsParent: !0,
              illegal: d
            }
          ]
        },
        {
          // new type declarations
          // maybe inside generic
          className: "type",
          begin: "\\b(sub)?type\\s+",
          end: "\\s+",
          keywords: "type",
          excludeBegin: !0,
          illegal: d
        },
        // see comment above the definition
        _
        // no markup
        // relevance boosters for small snippets
        // {begin: '\\s*=>\\s*'},
        // {begin: '\\s*:=\\s*'},
        // {begin: '\\s+:=\\s+'},
      ]
    };
  }
  return I_ = t, I_;
}
var x_, ZC;
function aJ() {
  if (ZC) return x_;
  ZC = 1;
  function t(e) {
    const n = {
      className: "built_in",
      begin: "\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)"
    }, r = {
      className: "symbol",
      begin: "[a-zA-Z0-9_]+@"
    }, a = {
      className: "keyword",
      begin: "<",
      end: ">",
      contains: [
        n,
        r
      ]
    };
    return n.contains = [a], r.contains = [a], {
      name: "AngelScript",
      aliases: ["asc"],
      keywords: [
        "for",
        "in|0",
        "break",
        "continue",
        "while",
        "do|0",
        "return",
        "if",
        "else",
        "case",
        "switch",
        "namespace",
        "is",
        "cast",
        "or",
        "and",
        "xor",
        "not",
        "get|0",
        "in",
        "inout|10",
        "out",
        "override",
        "set|0",
        "private",
        "public",
        "const",
        "default|0",
        "final",
        "shared",
        "external",
        "mixin|10",
        "enum",
        "typedef",
        "funcdef",
        "this",
        "super",
        "import",
        "from",
        "interface",
        "abstract|0",
        "try",
        "catch",
        "protected",
        "explicit",
        "property"
      ],
      // avoid close detection with C# and JS
      illegal: "(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])",
      contains: [
        {
          // 'strings'
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE],
          relevance: 0
        },
        // """heredoc strings"""
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        {
          // "strings"
          className: "string",
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE],
          relevance: 0
        },
        e.C_LINE_COMMENT_MODE,
        // single-line comments
        e.C_BLOCK_COMMENT_MODE,
        // comment blocks
        {
          // metadata
          className: "string",
          begin: "^\\s*\\[",
          end: "\\]"
        },
        {
          // interface or namespace declaration
          beginKeywords: "interface namespace",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // interface or namespace name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+"
            }
          ]
        },
        {
          // class declaration
          beginKeywords: "class",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // class name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+",
              contains: [
                {
                  begin: "[:,]\\s*",
                  contains: [
                    {
                      className: "symbol",
                      begin: "[a-zA-Z0-9_]+"
                    }
                  ]
                }
              ]
            }
          ]
        },
        n,
        // built-in types
        r,
        // object handles
        {
          // literals
          className: "literal",
          begin: "\\b(null|true|false)"
        },
        {
          // numbers
          className: "number",
          relevance: 0,
          begin: "(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)"
        }
      ]
    };
  }
  return x_ = t, x_;
}
var D_, JC;
function iJ() {
  if (JC) return D_;
  JC = 1;
  function t(e) {
    const n = {
      className: "number",
      begin: /[$%]\d+/
    }, r = {
      className: "number",
      begin: /\b\d+/
    }, a = {
      className: "number",
      begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
    }, i = {
      className: "number",
      begin: /:\d{1,5}/
    };
    return {
      name: "Apache config",
      aliases: ["apacheconf"],
      case_insensitive: !0,
      contains: [
        e.HASH_COMMENT_MODE,
        {
          className: "section",
          begin: /<\/?/,
          end: />/,
          contains: [
            a,
            i,
            // low relevance prevents us from claming XML/HTML where this rule would
            // match strings inside of XML tags
            e.inherit(e.QUOTE_STRING_MODE, { relevance: 0 })
          ]
        },
        {
          className: "attribute",
          begin: /\w+/,
          relevance: 0,
          // keywords aren’t needed for highlighting per se, they only boost relevance
          // for a very generally defined mode (starts with a word, ends with line-end
          keywords: { _: [
            "order",
            "deny",
            "allow",
            "setenv",
            "rewriterule",
            "rewriteengine",
            "rewritecond",
            "documentroot",
            "sethandler",
            "errordocument",
            "loadmodule",
            "options",
            "header",
            "listen",
            "serverroot",
            "servername"
          ] },
          starts: {
            end: /$/,
            relevance: 0,
            keywords: { literal: "on off all deny allow" },
            contains: [
              {
                className: "meta",
                begin: /\s\[/,
                end: /\]$/
              },
              {
                className: "variable",
                begin: /[\$%]\{/,
                end: /\}/,
                contains: [
                  "self",
                  n
                ]
              },
              a,
              r,
              e.QUOTE_STRING_MODE
            ]
          }
        }
      ],
      illegal: /\S/
    };
  }
  return D_ = t, D_;
}
var w_, eR;
function sJ() {
  if (eR) return w_;
  eR = 1;
  function t(e) {
    const n = e.regex, r = e.inherit(
      e.QUOTE_STRING_MODE,
      { illegal: null }
    ), a = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [
        "self",
        e.C_NUMBER_MODE,
        r
      ]
    }, i = e.COMMENT(/--/, /$/), s = e.COMMENT(
      /\(\*/,
      /\*\)/,
      { contains: [
        "self",
        // allow nesting
        i
      ] }
    ), l = [
      i,
      s,
      e.HASH_COMMENT_MODE
    ], c = [
      /apart from/,
      /aside from/,
      /instead of/,
      /out of/,
      /greater than/,
      /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
      /(greater|less) than( or equal)?/,
      /(starts?|ends|begins?) with/,
      /contained by/,
      /comes (before|after)/,
      /a (ref|reference)/,
      /POSIX (file|path)/,
      /(date|time) string/,
      /quoted form/
    ], d = [
      /clipboard info/,
      /the clipboard/,
      /info for/,
      /list (disks|folder)/,
      /mount volume/,
      /path to/,
      /(close|open for) access/,
      /(get|set) eof/,
      /current date/,
      /do shell script/,
      /get volume settings/,
      /random number/,
      /set volume/,
      /system attribute/,
      /system info/,
      /time to GMT/,
      /(load|run|store) script/,
      /scripting components/,
      /ASCII (character|number)/,
      /localized string/,
      /choose (application|color|file|file name|folder|from list|remote application|URL)/,
      /display (alert|dialog)/
    ];
    return {
      name: "AppleScript",
      aliases: ["osascript"],
      keywords: {
        keyword: "about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",
        literal: "AppleScript false linefeed return pi quote result space tab true",
        built_in: "alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name|0 paragraph paragraphs rest reverse running time version weekday word words year"
      },
      contains: [
        r,
        e.C_NUMBER_MODE,
        {
          className: "built_in",
          begin: n.concat(
            /\b/,
            n.either(...d),
            /\b/
          )
        },
        {
          className: "built_in",
          begin: /^\s*return\b/
        },
        {
          className: "literal",
          begin: /\b(text item delimiters|current application|missing value)\b/
        },
        {
          className: "keyword",
          begin: n.concat(
            /\b/,
            n.either(...c),
            /\b/
          )
        },
        {
          beginKeywords: "on",
          illegal: /[${=;\n]/,
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            a
          ]
        },
        ...l
      ],
      illegal: /\/\/|->|=>|\[\[/
    };
  }
  return w_ = t, w_;
}
var L_, tR;
function oJ() {
  if (tR) return L_;
  tR = 1;
  function t(e) {
    const n = "[A-Za-z_][0-9A-Za-z_]*", r = {
      keyword: [
        "if",
        "for",
        "while",
        "var",
        "new",
        "function",
        "do",
        "return",
        "void",
        "else",
        "break"
      ],
      literal: [
        "BackSlash",
        "DoubleQuote",
        "false",
        "ForwardSlash",
        "Infinity",
        "NaN",
        "NewLine",
        "null",
        "PI",
        "SingleQuote",
        "Tab",
        "TextFormatting",
        "true",
        "undefined"
      ],
      built_in: [
        "Abs",
        "Acos",
        "All",
        "Angle",
        "Any",
        "Area",
        "AreaGeodetic",
        "Array",
        "Asin",
        "Atan",
        "Atan2",
        "Attachments",
        "Average",
        "Back",
        "Bearing",
        "Boolean",
        "Buffer",
        "BufferGeodetic",
        "Ceil",
        "Centroid",
        "Clip",
        "Concatenate",
        "Console",
        "Constrain",
        "Contains",
        "ConvertDirection",
        "Cos",
        "Count",
        "Crosses",
        "Cut",
        "Date",
        "DateAdd",
        "DateDiff",
        "Day",
        "Decode",
        "DefaultValue",
        "Densify",
        "DensifyGeodetic",
        "Dictionary",
        "Difference",
        "Disjoint",
        "Distance",
        "DistanceGeodetic",
        "Distinct",
        "Domain",
        "DomainCode",
        "DomainName",
        "EnvelopeIntersects",
        "Equals",
        "Erase",
        "Exp",
        "Expects",
        "Extent",
        "Feature",
        "FeatureSet",
        "FeatureSetByAssociation",
        "FeatureSetById",
        "FeatureSetByName",
        "FeatureSetByPortalItem",
        "FeatureSetByRelationshipName",
        "Filter",
        "Find",
        "First",
        "Floor",
        "FromCharCode",
        "FromCodePoint",
        "FromJSON",
        "GdbVersion",
        "Generalize",
        "Geometry",
        "GetFeatureSet",
        "GetUser",
        "GroupBy",
        "Guid",
        "Hash",
        "HasKey",
        "Hour",
        "IIf",
        "Includes",
        "IndexOf",
        "Insert",
        "Intersection",
        "Intersects",
        "IsEmpty",
        "IsNan",
        "ISOMonth",
        "ISOWeek",
        "ISOWeekday",
        "ISOYear",
        "IsSelfIntersecting",
        "IsSimple",
        "Left|0",
        "Length",
        "Length3D",
        "LengthGeodetic",
        "Log",
        "Lower",
        "Map",
        "Max",
        "Mean",
        "Mid",
        "Millisecond",
        "Min",
        "Minute",
        "Month",
        "MultiPartToSinglePart",
        "Multipoint",
        "NextSequenceValue",
        "None",
        "Now",
        "Number",
        "Offset|0",
        "OrderBy",
        "Overlaps",
        "Point",
        "Polygon",
        "Polyline",
        "Pop",
        "Portal",
        "Pow",
        "Proper",
        "Push",
        "Random",
        "Reduce",
        "Relate",
        "Replace",
        "Resize",
        "Reverse",
        "Right|0",
        "RingIsClockwise",
        "Rotate",
        "Round",
        "Schema",
        "Second",
        "SetGeometry",
        "Simplify",
        "Sin",
        "Slice",
        "Sort",
        "Splice",
        "Split",
        "Sqrt",
        "Stdev",
        "SubtypeCode",
        "SubtypeName",
        "Subtypes",
        "Sum",
        "SymmetricDifference",
        "Tan",
        "Text",
        "Timestamp",
        "ToCharCode",
        "ToCodePoint",
        "Today",
        "ToHex",
        "ToLocal",
        "Top|0",
        "Touches",
        "ToUTC",
        "TrackAccelerationAt",
        "TrackAccelerationWindow",
        "TrackCurrentAcceleration",
        "TrackCurrentDistance",
        "TrackCurrentSpeed",
        "TrackCurrentTime",
        "TrackDistanceAt",
        "TrackDistanceWindow",
        "TrackDuration",
        "TrackFieldWindow",
        "TrackGeometryWindow",
        "TrackIndex",
        "TrackSpeedAt",
        "TrackSpeedWindow",
        "TrackStartTime",
        "TrackWindow",
        "Trim",
        "TypeOf",
        "Union",
        "Upper",
        "UrlEncode",
        "Variance",
        "Week",
        "Weekday",
        "When",
        "Within",
        "Year"
      ]
    }, a = {
      className: "symbol",
      begin: "\\$[datastore|feature|layer|map|measure|sourcefeature|sourcelayer|targetfeature|targetlayer|value|view]+"
    }, i = {
      className: "number",
      variants: [
        { begin: "\\b(0[bB][01]+)" },
        { begin: "\\b(0[oO][0-7]+)" },
        { begin: e.C_NUMBER_RE }
      ],
      relevance: 0
    }, s = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: r,
      contains: []
      // defined later
    }, l = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        e.BACKSLASH_ESCAPE,
        s
      ]
    };
    s.contains = [
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      l,
      i,
      e.REGEXP_MODE
    ];
    const c = s.contains.concat([
      e.C_BLOCK_COMMENT_MODE,
      e.C_LINE_COMMENT_MODE
    ]);
    return {
      name: "ArcGIS Arcade",
      case_insensitive: !0,
      keywords: r,
      contains: [
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        l,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        a,
        i,
        {
          // object attr container
          begin: /[{,]\s*/,
          relevance: 0,
          contains: [
            {
              begin: n + "\\s*:",
              returnBegin: !0,
              relevance: 0,
              contains: [
                {
                  className: "attr",
                  begin: n,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          // "value" container
          begin: "(" + e.RE_STARTERS_RE + "|\\b(return)\\b)\\s*",
          keywords: "return",
          contains: [
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.REGEXP_MODE,
            {
              className: "function",
              begin: "(\\(.*?\\)|" + n + ")\\s*=>",
              returnBegin: !0,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    { begin: n },
                    { begin: /\(\s*\)/ },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: !0,
                      excludeEnd: !0,
                      keywords: r,
                      contains: c
                    }
                  ]
                }
              ]
            }
          ],
          relevance: 0
        },
        {
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: !0,
          contains: [
            e.inherit(e.TITLE_MODE, {
              className: "title.function",
              begin: n
            }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0,
              contains: c
            }
          ],
          illegal: /\[|%/
        },
        { begin: /\$[(.]/ }
      ],
      illegal: /#(?!!)/
    };
  }
  return L_ = t, L_;
}
var M_, nR;
function lJ() {
  if (nR) return M_;
  nR = 1;
  function t(n) {
    const r = n.regex, a = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), i = "decltype\\(auto\\)", s = "[a-zA-Z_]\\w*::", c = "(?!struct)(" + i + "|" + r.optional(s) + "[a-zA-Z_]\\w*" + r.optional("<[^<>]+>") + ")", d = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    }, _ = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [n.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
          end: "'",
          illegal: "."
        },
        n.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, f = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, g = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        n.inherit(_, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        a,
        n.C_BLOCK_COMMENT_MODE
      ]
    }, E = {
      className: "title",
      begin: r.optional(s) + n.IDENT_RE,
      relevance: 0
    }, T = r.optional(s) + n.IDENT_RE + "\\s*\\(", R = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ], A = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ], I = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ], x = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ], L = {
      type: A,
      keyword: R,
      literal: [
        "NULL",
        "false",
        "nullopt",
        "nullptr",
        "true"
      ],
      built_in: ["_Pragma"],
      _type_hints: I
    }, K = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: x
      },
      begin: r.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        n.IDENT_RE,
        r.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    }, J = [
      K,
      g,
      d,
      a,
      n.C_BLOCK_COMMENT_MODE,
      f,
      _
    ], X = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: L,
      contains: J.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: L,
          contains: J.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, $ = {
      className: "function",
      begin: "(" + c + "[\\*&\\s]+)+" + T,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: L,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: i,
          keywords: L,
          relevance: 0
        },
        {
          begin: T,
          returnBegin: !0,
          contains: [E],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: !0,
          contains: [
            _,
            f
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: L,
          relevance: 0,
          contains: [
            a,
            n.C_BLOCK_COMMENT_MODE,
            _,
            f,
            d,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: L,
              relevance: 0,
              contains: [
                "self",
                a,
                n.C_BLOCK_COMMENT_MODE,
                _,
                f,
                d
              ]
            }
          ]
        },
        d,
        a,
        n.C_BLOCK_COMMENT_MODE,
        g
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: L,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        X,
        $,
        K,
        J,
        [
          g,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
            end: ">",
            keywords: L,
            contains: [
              "self",
              d
            ]
          },
          {
            begin: n.IDENT_RE + "::",
            keywords: L
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  function e(n) {
    const r = {
      type: [
        "boolean",
        "byte",
        "word",
        "String"
      ],
      built_in: [
        "KeyboardController",
        "MouseController",
        "SoftwareSerial",
        "EthernetServer",
        "EthernetClient",
        "LiquidCrystal",
        "RobotControl",
        "GSMVoiceCall",
        "EthernetUDP",
        "EsploraTFT",
        "HttpClient",
        "RobotMotor",
        "WiFiClient",
        "GSMScanner",
        "FileSystem",
        "Scheduler",
        "GSMServer",
        "YunClient",
        "YunServer",
        "IPAddress",
        "GSMClient",
        "GSMModem",
        "Keyboard",
        "Ethernet",
        "Console",
        "GSMBand",
        "Esplora",
        "Stepper",
        "Process",
        "WiFiUDP",
        "GSM_SMS",
        "Mailbox",
        "USBHost",
        "Firmata",
        "PImage",
        "Client",
        "Server",
        "GSMPIN",
        "FileIO",
        "Bridge",
        "Serial",
        "EEPROM",
        "Stream",
        "Mouse",
        "Audio",
        "Servo",
        "File",
        "Task",
        "GPRS",
        "WiFi",
        "Wire",
        "TFT",
        "GSM",
        "SPI",
        "SD"
      ],
      _hints: [
        "setup",
        "loop",
        "runShellCommandAsynchronously",
        "analogWriteResolution",
        "retrieveCallingNumber",
        "printFirmwareVersion",
        "analogReadResolution",
        "sendDigitalPortPair",
        "noListenOnLocalhost",
        "readJoystickButton",
        "setFirmwareVersion",
        "readJoystickSwitch",
        "scrollDisplayRight",
        "getVoiceCallStatus",
        "scrollDisplayLeft",
        "writeMicroseconds",
        "delayMicroseconds",
        "beginTransmission",
        "getSignalStrength",
        "runAsynchronously",
        "getAsynchronously",
        "listenOnLocalhost",
        "getCurrentCarrier",
        "readAccelerometer",
        "messageAvailable",
        "sendDigitalPorts",
        "lineFollowConfig",
        "countryNameWrite",
        "runShellCommand",
        "readStringUntil",
        "rewindDirectory",
        "readTemperature",
        "setClockDivider",
        "readLightSensor",
        "endTransmission",
        "analogReference",
        "detachInterrupt",
        "countryNameRead",
        "attachInterrupt",
        "encryptionType",
        "readBytesUntil",
        "robotNameWrite",
        "readMicrophone",
        "robotNameRead",
        "cityNameWrite",
        "userNameWrite",
        "readJoystickY",
        "readJoystickX",
        "mouseReleased",
        "openNextFile",
        "scanNetworks",
        "noInterrupts",
        "digitalWrite",
        "beginSpeaker",
        "mousePressed",
        "isActionDone",
        "mouseDragged",
        "displayLogos",
        "noAutoscroll",
        "addParameter",
        "remoteNumber",
        "getModifiers",
        "keyboardRead",
        "userNameRead",
        "waitContinue",
        "processInput",
        "parseCommand",
        "printVersion",
        "readNetworks",
        "writeMessage",
        "blinkVersion",
        "cityNameRead",
        "readMessage",
        "setDataMode",
        "parsePacket",
        "isListening",
        "setBitOrder",
        "beginPacket",
        "isDirectory",
        "motorsWrite",
        "drawCompass",
        "digitalRead",
        "clearScreen",
        "serialEvent",
        "rightToLeft",
        "setTextSize",
        "leftToRight",
        "requestFrom",
        "keyReleased",
        "compassRead",
        "analogWrite",
        "interrupts",
        "WiFiServer",
        "disconnect",
        "playMelody",
        "parseFloat",
        "autoscroll",
        "getPINUsed",
        "setPINUsed",
        "setTimeout",
        "sendAnalog",
        "readSlider",
        "analogRead",
        "beginWrite",
        "createChar",
        "motorsStop",
        "keyPressed",
        "tempoWrite",
        "readButton",
        "subnetMask",
        "debugPrint",
        "macAddress",
        "writeGreen",
        "randomSeed",
        "attachGPRS",
        "readString",
        "sendString",
        "remotePort",
        "releaseAll",
        "mouseMoved",
        "background",
        "getXChange",
        "getYChange",
        "answerCall",
        "getResult",
        "voiceCall",
        "endPacket",
        "constrain",
        "getSocket",
        "writeJSON",
        "getButton",
        "available",
        "connected",
        "findUntil",
        "readBytes",
        "exitValue",
        "readGreen",
        "writeBlue",
        "startLoop",
        "IPAddress",
        "isPressed",
        "sendSysex",
        "pauseMode",
        "gatewayIP",
        "setCursor",
        "getOemKey",
        "tuneWrite",
        "noDisplay",
        "loadImage",
        "switchPIN",
        "onRequest",
        "onReceive",
        "changePIN",
        "playFile",
        "noBuffer",
        "parseInt",
        "overflow",
        "checkPIN",
        "knobRead",
        "beginTFT",
        "bitClear",
        "updateIR",
        "bitWrite",
        "position",
        "writeRGB",
        "highByte",
        "writeRed",
        "setSpeed",
        "readBlue",
        "noStroke",
        "remoteIP",
        "transfer",
        "shutdown",
        "hangCall",
        "beginSMS",
        "endWrite",
        "attached",
        "maintain",
        "noCursor",
        "checkReg",
        "checkPUK",
        "shiftOut",
        "isValid",
        "shiftIn",
        "pulseIn",
        "connect",
        "println",
        "localIP",
        "pinMode",
        "getIMEI",
        "display",
        "noBlink",
        "process",
        "getBand",
        "running",
        "beginSD",
        "drawBMP",
        "lowByte",
        "setBand",
        "release",
        "bitRead",
        "prepare",
        "pointTo",
        "readRed",
        "setMode",
        "noFill",
        "remove",
        "listen",
        "stroke",
        "detach",
        "attach",
        "noTone",
        "exists",
        "buffer",
        "height",
        "bitSet",
        "circle",
        "config",
        "cursor",
        "random",
        "IRread",
        "setDNS",
        "endSMS",
        "getKey",
        "micros",
        "millis",
        "begin",
        "print",
        "write",
        "ready",
        "flush",
        "width",
        "isPIN",
        "blink",
        "clear",
        "press",
        "mkdir",
        "rmdir",
        "close",
        "point",
        "yield",
        "image",
        "BSSID",
        "click",
        "delay",
        "read",
        "text",
        "move",
        "peek",
        "beep",
        "rect",
        "line",
        "open",
        "seek",
        "fill",
        "size",
        "turn",
        "stop",
        "home",
        "find",
        "step",
        "tone",
        "sqrt",
        "RSSI",
        "SSID",
        "end",
        "bit",
        "tan",
        "cos",
        "sin",
        "pow",
        "map",
        "abs",
        "max",
        "min",
        "get",
        "run",
        "put"
      ],
      literal: [
        "DIGITAL_MESSAGE",
        "FIRMATA_STRING",
        "ANALOG_MESSAGE",
        "REPORT_DIGITAL",
        "REPORT_ANALOG",
        "INPUT_PULLUP",
        "SET_PIN_MODE",
        "INTERNAL2V56",
        "SYSTEM_RESET",
        "LED_BUILTIN",
        "INTERNAL1V1",
        "SYSEX_START",
        "INTERNAL",
        "EXTERNAL",
        "DEFAULT",
        "OUTPUT",
        "INPUT",
        "HIGH",
        "LOW"
      ]
    }, a = t(n), i = (
      /** @type {Record<string,any>} */
      a.keywords
    );
    return i.type = [
      ...i.type,
      ...r.type
    ], i.literal = [
      ...i.literal,
      ...r.literal
    ], i.built_in = [
      ...i.built_in,
      ...r.built_in
    ], i._hints = r._hints, a.name = "Arduino", a.aliases = ["ino"], a.supersetOf = "cpp", a;
  }
  return M_ = e, M_;
}
var k_, rR;
function cJ() {
  if (rR) return k_;
  rR = 1;
  function t(e) {
    const n = { variants: [
      e.COMMENT("^[ \\t]*(?=#)", "$", {
        relevance: 0,
        excludeBegin: !0
      }),
      e.COMMENT("[;@]", "$", { relevance: 0 }),
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE
    ] };
    return {
      name: "ARM Assembly",
      case_insensitive: !0,
      aliases: ["arm"],
      keywords: {
        $pattern: "\\.?" + e.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND "
        ),
        built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21 w22 w23 w24 w25 w26 w27 w28 w29 w30 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"
          // followed by space
        },
        n,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "[#$=]?0x[0-9a-f]+"
            },
            {
              // bin
              begin: "[#$=]?0b[01]+"
            },
            {
              // literal
              begin: "[#$=]\\d+"
            },
            {
              // bare number
              begin: "\\b\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU ARM syntax
              begin: "^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // ARM syntax
              begin: "^[a-z_\\.\\$][a-z0-9_\\.\\$]+"
            },
            {
              // label reference
              begin: "[=#]\\w+"
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  return k_ = t, k_;
}
var P_, aR;
function uJ() {
  if (aR) return P_;
  aR = 1;
  function t(e) {
    const n = e.regex, r = n.concat(/[\p{L}_]/u, n.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u), a = /[\p{L}0-9._:-]+/u, i = {
      className: "symbol",
      begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
    }, s = {
      begin: /\s/,
      contains: [
        {
          className: "keyword",
          begin: /#?[a-z_][a-z1-9_-]+/,
          illegal: /\n/
        }
      ]
    }, l = e.inherit(s, {
      begin: /\(/,
      end: /\)/
    }), c = e.inherit(e.APOS_STRING_MODE, { className: "string" }), d = e.inherit(e.QUOTE_STRING_MODE, { className: "string" }), p = {
      endsWithParent: !0,
      illegal: /</,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: a,
          relevance: 0
        },
        {
          begin: /=\s*/,
          relevance: 0,
          contains: [
            {
              className: "string",
              endsParent: !0,
              variants: [
                {
                  begin: /"/,
                  end: /"/,
                  contains: [i]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [i]
                },
                { begin: /[^\s"'=<>`]+/ }
              ]
            }
          ]
        }
      ]
    };
    return {
      name: "HTML, XML",
      aliases: [
        "html",
        "xhtml",
        "rss",
        "atom",
        "xjb",
        "xsd",
        "xsl",
        "plist",
        "wsf",
        "svg"
      ],
      case_insensitive: !0,
      unicodeRegex: !0,
      contains: [
        {
          className: "meta",
          begin: /<![a-z]/,
          end: />/,
          relevance: 10,
          contains: [
            s,
            d,
            c,
            l,
            {
              begin: /\[/,
              end: /\]/,
              contains: [
                {
                  className: "meta",
                  begin: /<![a-z]/,
                  end: />/,
                  contains: [
                    s,
                    l,
                    d,
                    c
                  ]
                }
              ]
            }
          ]
        },
        e.COMMENT(
          /<!--/,
          /-->/,
          { relevance: 10 }
        ),
        {
          begin: /<!\[CDATA\[/,
          end: /\]\]>/,
          relevance: 10
        },
        i,
        // xml processing instructions
        {
          className: "meta",
          end: /\?>/,
          variants: [
            {
              begin: /<\?xml/,
              relevance: 10,
              contains: [
                d
              ]
            },
            {
              begin: /<\?[a-z][a-z0-9]+/
            }
          ]
        },
        {
          className: "tag",
          /*
          The lookahead pattern (?=...) ensures that 'begin' only matches
          '<style' as a single word, followed by a whitespace or an
          ending bracket.
          */
          begin: /<style(?=\s|>)/,
          end: />/,
          keywords: { name: "style" },
          contains: [p],
          starts: {
            end: /<\/style>/,
            returnEnd: !0,
            subLanguage: [
              "css",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          // See the comment in the <style tag about the lookahead pattern
          begin: /<script(?=\s|>)/,
          end: />/,
          keywords: { name: "script" },
          contains: [p],
          starts: {
            end: /<\/script>/,
            returnEnd: !0,
            subLanguage: [
              "javascript",
              "handlebars",
              "xml"
            ]
          }
        },
        // we need this for now for jSX
        {
          className: "tag",
          begin: /<>|<\/>/
        },
        // open tag
        {
          className: "tag",
          begin: n.concat(
            /</,
            n.lookahead(n.concat(
              r,
              // <tag/>
              // <tag>
              // <tag ...
              n.either(/\/>/, />/, /\s/)
            ))
          ),
          end: /\/?>/,
          contains: [
            {
              className: "name",
              begin: r,
              relevance: 0,
              starts: p
            }
          ]
        },
        // close tag
        {
          className: "tag",
          begin: n.concat(
            /<\//,
            n.lookahead(n.concat(
              r,
              />/
            ))
          ),
          contains: [
            {
              className: "name",
              begin: r,
              relevance: 0
            },
            {
              begin: />/,
              relevance: 0,
              endsParent: !0
            }
          ]
        }
      ]
    };
  }
  return P_ = t, P_;
}
var F_, iR;
function dJ() {
  if (iR) return F_;
  iR = 1;
  function t(e) {
    const n = e.regex, r = {
      begin: "^'{3,}[ \\t]*$",
      relevance: 10
    }, a = [
      // escaped constrained formatting marks (i.e., \* \_ or \`)
      { begin: /\\[*_`]/ },
      // escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)
      // must ignore until the next formatting marks
      // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...
      { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
      { begin: /\\\\_{2}[^\n]*_{2}/ },
      { begin: /\\\\`{2}[^\n]*`{2}/ },
      // guard: constrained formatting mark may not be preceded by ":", ";" or
      // "}". match these so the constrained rule doesn't see them
      { begin: /[:;}][*_`](?![*_`])/ }
    ], i = [
      // inline unconstrained strong (single line)
      {
        className: "strong",
        begin: /\*{2}([^\n]+?)\*{2}/
      },
      // inline unconstrained strong (multi-line)
      {
        className: "strong",
        begin: n.concat(
          /\*\*/,
          /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/,
          /(\*(?!\*)|\\[^\n]|[^*\n\\])*/,
          /\*\*/
        ),
        relevance: 0
      },
      // inline constrained strong (single line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
      },
      // inline constrained strong (multi-line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
      }
    ], s = [
      // inline unconstrained emphasis (single line)
      {
        className: "emphasis",
        begin: /_{2}([^\n]+?)_{2}/
      },
      // inline unconstrained emphasis (multi-line)
      {
        className: "emphasis",
        begin: n.concat(
          /__/,
          /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/,
          /(_(?!_)|\\[^\n]|[^_\n\\])*/,
          /__/
        ),
        relevance: 0
      },
      // inline constrained emphasis (single line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
      },
      // inline constrained emphasis (multi-line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
      },
      // inline constrained emphasis using single quote (legacy)
      {
        className: "emphasis",
        // must not follow a word character or be followed by a single quote or space
        begin: "\\B'(?!['\\s])",
        end: "(\\n{2}|')",
        // allow escaped single quote followed by word char
        contains: [
          {
            begin: "\\\\'\\w",
            relevance: 0
          }
        ],
        relevance: 0
      }
    ], l = {
      className: "symbol",
      begin: "^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",
      relevance: 10
    }, c = {
      className: "bullet",
      begin: "^(\\*+|-+|\\.+|[^\\n]+?::)\\s+"
    };
    return {
      name: "AsciiDoc",
      aliases: ["adoc"],
      contains: [
        // block comment
        e.COMMENT(
          "^/{4,}\\n",
          "\\n/{4,}$",
          // can also be done as...
          // '^/{4,}$',
          // '^/{4,}$',
          { relevance: 10 }
        ),
        // line comment
        e.COMMENT(
          "^//",
          "$",
          { relevance: 0 }
        ),
        // title
        {
          className: "title",
          begin: "^\\.\\w.*$"
        },
        // example, admonition & sidebar blocks
        {
          begin: "^[=\\*]{4,}\\n",
          end: "\\n^[=\\*]{4,}$",
          relevance: 10
        },
        // headings
        {
          className: "section",
          relevance: 10,
          variants: [
            { begin: "^(={1,6})[ 	].+?([ 	]\\1)?$" },
            { begin: "^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$" }
          ]
        },
        // document attributes
        {
          className: "meta",
          begin: "^:.+?:",
          end: "\\s",
          excludeEnd: !0,
          relevance: 10
        },
        // block attributes
        {
          className: "meta",
          begin: "^\\[.+?\\]$",
          relevance: 0
        },
        // quoteblocks
        {
          className: "quote",
          begin: "^_{4,}\\n",
          end: "\\n_{4,}$",
          relevance: 10
        },
        // listing and literal blocks
        {
          className: "code",
          begin: "^[\\-\\.]{4,}\\n",
          end: "\\n[\\-\\.]{4,}$",
          relevance: 10
        },
        // passthrough blocks
        {
          begin: "^\\+{4,}\\n",
          end: "\\n\\+{4,}$",
          contains: [
            {
              begin: "<",
              end: ">",
              subLanguage: "xml",
              relevance: 0
            }
          ],
          relevance: 10
        },
        c,
        l,
        ...a,
        ...i,
        ...s,
        // inline smart quotes
        {
          className: "string",
          variants: [
            { begin: "``.+?''" },
            { begin: "`.+?'" }
          ]
        },
        // inline unconstrained emphasis
        {
          className: "code",
          begin: /`{2}/,
          end: /(\n{2}|`{2})/
        },
        // inline code snippets (TODO should get same treatment as strong and emphasis)
        {
          className: "code",
          begin: "(`.+?`|\\+.+?\\+)",
          relevance: 0
        },
        // indented literal block
        {
          className: "code",
          begin: "^[ \\t]",
          end: "$",
          relevance: 0
        },
        r,
        // images and links
        {
          begin: "(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]",
          returnBegin: !0,
          contains: [
            {
              begin: "(link|image:?):",
              relevance: 0
            },
            {
              className: "link",
              begin: "\\w",
              end: "[^\\[]+",
              relevance: 0
            },
            {
              className: "string",
              begin: "\\[",
              end: "\\]",
              excludeBegin: !0,
              excludeEnd: !0,
              relevance: 0
            }
          ],
          relevance: 10
        }
      ]
    };
  }
  return F_ = t, F_;
}
var B_, sR;
function pJ() {
  if (sR) return B_;
  sR = 1;
  function t(e) {
    const n = e.regex, r = [
      "false",
      "synchronized",
      "int",
      "abstract",
      "float",
      "private",
      "char",
      "boolean",
      "static",
      "null",
      "if",
      "const",
      "for",
      "true",
      "while",
      "long",
      "throw",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "return",
      "void",
      "enum",
      "else",
      "extends",
      "implements",
      "break",
      "transient",
      "new",
      "catch",
      "instanceof",
      "byte",
      "super",
      "volatile",
      "case",
      "assert",
      "short",
      "package",
      "default",
      "double",
      "public",
      "try",
      "this",
      "switch",
      "continue",
      "throws",
      "privileged",
      "aspectOf",
      "adviceexecution",
      "proceed",
      "cflowbelow",
      "cflow",
      "initialization",
      "preinitialization",
      "staticinitialization",
      "withincode",
      "target",
      "within",
      "execution",
      "getWithinTypeName",
      "handler",
      "thisJoinPoint",
      "thisJoinPointStaticPart",
      "thisEnclosingJoinPointStaticPart",
      "declare",
      "parents",
      "warning",
      "error",
      "soft",
      "precedence",
      "thisAspectInstance"
    ], a = [
      "get",
      "set",
      "args",
      "call"
    ];
    return {
      name: "AspectJ",
      keywords: r,
      illegal: /<\/|#/,
      contains: [
        e.COMMENT(
          /\/\*\*/,
          /\*\//,
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: /@[A-Za-z]+/
              }
            ]
          }
        ),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "class",
          beginKeywords: "aspect",
          end: /[{;=]/,
          excludeEnd: !0,
          illegal: /[:;"\[\]]/,
          contains: [
            { beginKeywords: "extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton" },
            e.UNDERSCORE_TITLE_MODE,
            {
              begin: /\([^\)]*/,
              end: /[)]+/,
              keywords: r.concat(a),
              excludeEnd: !1
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /[{;=]/,
          excludeEnd: !0,
          relevance: 0,
          keywords: "class interface",
          illegal: /[:"\[\]]/,
          contains: [
            { beginKeywords: "extends implements" },
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        {
          // AspectJ Constructs
          beginKeywords: "pointcut after before around throwing returning",
          end: /[)]/,
          excludeEnd: !1,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: n.concat(e.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: !0,
              contains: [e.UNDERSCORE_TITLE_MODE]
            }
          ]
        },
        {
          begin: /[:]/,
          returnBegin: !0,
          end: /[{;]/,
          relevance: 0,
          excludeEnd: !1,
          keywords: r,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: n.concat(e.UNDERSCORE_IDENT_RE, /\s*\(/),
              keywords: r.concat(a),
              relevance: 0
            },
            e.QUOTE_STRING_MODE
          ]
        },
        {
          // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
          beginKeywords: "new throw",
          relevance: 0
        },
        {
          // the function class is a bit different for AspectJ compared to the Java language
          className: "function",
          begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
          returnBegin: !0,
          end: /[{;=]/,
          keywords: r,
          excludeEnd: !0,
          contains: [
            {
              begin: n.concat(e.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: !0,
              relevance: 0,
              contains: [e.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              relevance: 0,
              keywords: r,
              contains: [
                e.APOS_STRING_MODE,
                e.QUOTE_STRING_MODE,
                e.C_NUMBER_MODE,
                e.C_BLOCK_COMMENT_MODE
              ]
            },
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        e.C_NUMBER_MODE,
        {
          // annotation is also used in this language
          className: "meta",
          begin: /@[A-Za-z]+/
        }
      ]
    };
  }
  return B_ = t, B_;
}
var U_, oR;
function _J() {
  if (oR) return U_;
  oR = 1;
  function t(e) {
    const n = { begin: "`[\\s\\S]" };
    return {
      name: "AutoHotkey",
      case_insensitive: !0,
      aliases: ["ahk"],
      keywords: {
        keyword: "Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",
        literal: "true false NOT AND OR",
        built_in: "ComSpec Clipboard ClipboardAll ErrorLevel"
      },
      contains: [
        n,
        e.inherit(e.QUOTE_STRING_MODE, { contains: [n] }),
        e.COMMENT(";", "$", { relevance: 0 }),
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: e.NUMBER_RE,
          relevance: 0
        },
        {
          // subst would be the most accurate however fails the point of
          // highlighting. variable is comparably the most accurate that actually
          // has some effect
          className: "variable",
          begin: "%[a-zA-Z0-9#_$@]+%"
        },
        {
          className: "built_in",
          begin: "^\\s*\\w+\\s*(,|%)"
          // I don't really know if this is totally relevant
        },
        {
          // symbol would be most accurate however is highlighted just like
          // built_in and that makes up a lot of AutoHotkey code meaning that it
          // would fail to highlight anything
          className: "title",
          variants: [
            { begin: '^[^\\n";]+::(?!=)' },
            {
              begin: '^[^\\n";]+:(?!=)',
              // zero relevance as it catches a lot of things
              // followed by a single ':' in many languages
              relevance: 0
            }
          ]
        },
        {
          className: "meta",
          begin: "^\\s*#\\w+",
          end: "$",
          relevance: 0
        },
        {
          className: "built_in",
          begin: "A_[a-zA-Z0-9]+"
        },
        {
          // consecutive commas, not for highlighting but just for relevance
          begin: ",\\s*,"
        }
      ]
    };
  }
  return U_ = t, U_;
}
var G_, lR;
function mJ() {
  if (lR) return G_;
  lR = 1;
  function t(e) {
    const n = "ByRef Case Const ContinueCase ContinueLoop Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With", r = [
      "EndRegion",
      "forcedef",
      "forceref",
      "ignorefunc",
      "include",
      "include-once",
      "NoTrayIcon",
      "OnAutoItStartRegister",
      "pragma",
      "Region",
      "RequireAdmin",
      "Tidy_Off",
      "Tidy_On",
      "Tidy_Parameters"
    ], a = "True False And Null Not Or Default", i = "Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive", s = { variants: [
      e.COMMENT(";", "$", { relevance: 0 }),
      e.COMMENT("#cs", "#ce"),
      e.COMMENT("#comments-start", "#comments-end")
    ] }, l = { begin: "\\$[A-z0-9_]+" }, c = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [
            {
              begin: /''/,
              relevance: 0
            }
          ]
        }
      ]
    }, d = { variants: [
      e.BINARY_NUMBER_MODE,
      e.C_NUMBER_MODE
    ] }, p = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: r },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          keywords: { keyword: "include" },
          end: "$",
          contains: [
            c,
            {
              className: "string",
              variants: [
                {
                  begin: "<",
                  end: ">"
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    {
                      begin: /""/,
                      relevance: 0
                    }
                  ]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [
                    {
                      begin: /''/,
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        c,
        s
      ]
    }, _ = {
      className: "symbol",
      // begin: '@',
      // end: '$',
      // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
      // relevance: 5
      begin: "@[A-z0-9_]+"
    }, f = {
      beginKeywords: "Func",
      end: "$",
      illegal: "\\$|\\[|%",
      contains: [
        e.inherit(e.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          contains: [
            l,
            c,
            d
          ]
        }
      ]
    };
    return {
      name: "AutoIt",
      case_insensitive: !0,
      illegal: /\/\*/,
      keywords: {
        keyword: n,
        built_in: i,
        literal: a
      },
      contains: [
        s,
        l,
        c,
        d,
        p,
        _,
        f
      ]
    };
  }
  return G_ = t, G_;
}
var H_, cR;
function fJ() {
  if (cR) return H_;
  cR = 1;
  function t(e) {
    return {
      name: "AVR Assembly",
      case_insensitive: !0,
      keywords: {
        $pattern: "\\.?" + e.IDENT_RE,
        keyword: (
          /* mnemonic */
          "adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr"
        ),
        built_in: (
          /* general purpose registers */
          "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf"
        ),
        meta: ".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"
      },
      contains: [
        e.C_BLOCK_COMMENT_MODE,
        e.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        e.C_NUMBER_MODE,
        // 0x..., decimal, float
        e.BINARY_NUMBER_MODE,
        // 0b...
        {
          className: "number",
          begin: "\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"
          // $..., 0o...
        },
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          illegal: "[^\\\\][^']"
        },
        {
          className: "symbol",
          begin: "^[A-Za-z0-9_.$]+:"
        },
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        {
          // substitution within a macro
          className: "subst",
          begin: "@[0-9]+"
        }
      ]
    };
  }
  return H_ = t, H_;
}
var Y_, uR;
function gJ() {
  if (uR) return Y_;
  uR = 1;
  function t(e) {
    const n = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, r = "BEGIN END if else while do for in break continue delete next nextfile function func exit|10", a = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /(u|b)?r?'''/,
          end: /'''/,
          relevance: 10
        },
        {
          begin: /(u|b)?r?"""/,
          end: /"""/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /(b|br)'/,
          end: /'/
        },
        {
          begin: /(b|br)"/,
          end: /"/
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Awk",
      keywords: { keyword: r },
      contains: [
        n,
        a,
        e.REGEXP_MODE,
        e.HASH_COMMENT_MODE,
        e.NUMBER_MODE
      ]
    };
  }
  return Y_ = t, Y_;
}
var z_, dR;
function hJ() {
  if (dR) return z_;
  dR = 1;
  function t(e) {
    const n = e.UNDERSCORE_IDENT_RE, s = {
      keyword: [
        "abstract",
        "as",
        "asc",
        "avg",
        "break",
        "breakpoint",
        "by",
        "byref",
        "case",
        "catch",
        "changecompany",
        "class",
        "client",
        "client",
        "common",
        "const",
        "continue",
        "count",
        "crosscompany",
        "delegate",
        "delete_from",
        "desc",
        "display",
        "div",
        "do",
        "edit",
        "else",
        "eventhandler",
        "exists",
        "extends",
        "final",
        "finally",
        "firstfast",
        "firstonly",
        "firstonly1",
        "firstonly10",
        "firstonly100",
        "firstonly1000",
        "flush",
        "for",
        "forceliterals",
        "forcenestedloop",
        "forceplaceholders",
        "forceselectorder",
        "forupdate",
        "from",
        "generateonly",
        "group",
        "hint",
        "if",
        "implements",
        "in",
        "index",
        "insert_recordset",
        "interface",
        "internal",
        "is",
        "join",
        "like",
        "maxof",
        "minof",
        "mod",
        "namespace",
        "new",
        "next",
        "nofetch",
        "notexists",
        "optimisticlock",
        "order",
        "outer",
        "pessimisticlock",
        "print",
        "private",
        "protected",
        "public",
        "readonly",
        "repeatableread",
        "retry",
        "return",
        "reverse",
        "select",
        "server",
        "setting",
        "static",
        "sum",
        "super",
        "switch",
        "this",
        "throw",
        "try",
        "ttsabort",
        "ttsbegin",
        "ttscommit",
        "unchecked",
        "update_recordset",
        "using",
        "validtimestate",
        "void",
        "where",
        "while"
      ],
      built_in: [
        "anytype",
        "boolean",
        "byte",
        "char",
        "container",
        "date",
        "double",
        "enum",
        "guid",
        "int",
        "int64",
        "long",
        "real",
        "short",
        "str",
        "utcdatetime",
        "var"
      ],
      literal: [
        "default",
        "false",
        "null",
        "true"
      ]
    }, l = {
      variants: [
        { match: [
          /(class|interface)\s+/,
          n,
          /\s+(extends|implements)\s+/,
          n
        ] },
        { match: [
          /class\s+/,
          n
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: s
    };
    return {
      name: "X++",
      aliases: ["x++"],
      keywords: s,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        l
      ]
    };
  }
  return z_ = t, z_;
}
var q_, pR;
function EJ() {
  if (pR) return q_;
  pR = 1;
  function t(e) {
    const n = e.regex, r = {}, a = {
      begin: /\$\{/,
      end: /\}/,
      contains: [
        "self",
        {
          begin: /:-/,
          contains: [r]
        }
        // default values
      ]
    };
    Object.assign(r, {
      className: "variable",
      variants: [
        { begin: n.concat(
          /\$[\w\d#@][\w\d_]*/,
          // negative look-ahead tries to avoid matching patterns that are not
          // Perl at all like $ident$, @ident@, etc.
          "(?![\\w\\d])(?![$])"
        ) },
        a
      ]
    });
    const i = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      contains: [e.BACKSLASH_ESCAPE]
    }, s = {
      begin: /<<-?\s*(?=\w+)/,
      starts: { contains: [
        e.END_SAME_AS_BEGIN({
          begin: /(\w+)/,
          end: /(\w+)/,
          className: "string"
        })
      ] }
    }, l = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e.BACKSLASH_ESCAPE,
        r,
        i
      ]
    };
    i.contains.push(l);
    const c = {
      match: /\\"/
    }, d = {
      className: "string",
      begin: /'/,
      end: /'/
    }, p = {
      match: /\\'/
    }, _ = {
      begin: /\$?\(\(/,
      end: /\)\)/,
      contains: [
        {
          begin: /\d+#[0-9a-f]+/,
          className: "number"
        },
        e.NUMBER_MODE,
        r
      ]
    }, f = [
      "fish",
      "bash",
      "zsh",
      "sh",
      "csh",
      "ksh",
      "tcsh",
      "dash",
      "scsh"
    ], g = e.SHEBANG({
      binary: `(${f.join("|")})`,
      relevance: 10
    }), E = {
      className: "function",
      begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
      returnBegin: !0,
      contains: [e.inherit(e.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
      relevance: 0
    }, T = [
      "if",
      "then",
      "else",
      "elif",
      "fi",
      "for",
      "while",
      "until",
      "in",
      "do",
      "done",
      "case",
      "esac",
      "function",
      "select"
    ], R = [
      "true",
      "false"
    ], A = { match: /(\/[a-z._-]+)+/ }, I = [
      "break",
      "cd",
      "continue",
      "eval",
      "exec",
      "exit",
      "export",
      "getopts",
      "hash",
      "pwd",
      "readonly",
      "return",
      "shift",
      "test",
      "times",
      "trap",
      "umask",
      "unset"
    ], x = [
      "alias",
      "bind",
      "builtin",
      "caller",
      "command",
      "declare",
      "echo",
      "enable",
      "help",
      "let",
      "local",
      "logout",
      "mapfile",
      "printf",
      "read",
      "readarray",
      "source",
      "type",
      "typeset",
      "ulimit",
      "unalias"
    ], P = [
      "autoload",
      "bg",
      "bindkey",
      "bye",
      "cap",
      "chdir",
      "clone",
      "comparguments",
      "compcall",
      "compctl",
      "compdescribe",
      "compfiles",
      "compgroups",
      "compquote",
      "comptags",
      "comptry",
      "compvalues",
      "dirs",
      "disable",
      "disown",
      "echotc",
      "echoti",
      "emulate",
      "fc",
      "fg",
      "float",
      "functions",
      "getcap",
      "getln",
      "history",
      "integer",
      "jobs",
      "kill",
      "limit",
      "log",
      "noglob",
      "popd",
      "print",
      "pushd",
      "pushln",
      "rehash",
      "sched",
      "setcap",
      "setopt",
      "stat",
      "suspend",
      "ttyctl",
      "unfunction",
      "unhash",
      "unlimit",
      "unsetopt",
      "vared",
      "wait",
      "whence",
      "where",
      "which",
      "zcompile",
      "zformat",
      "zftp",
      "zle",
      "zmodload",
      "zparseopts",
      "zprof",
      "zpty",
      "zregexparse",
      "zsocket",
      "zstyle",
      "ztcp"
    ], D = [
      "chcon",
      "chgrp",
      "chown",
      "chmod",
      "cp",
      "dd",
      "df",
      "dir",
      "dircolors",
      "ln",
      "ls",
      "mkdir",
      "mkfifo",
      "mknod",
      "mktemp",
      "mv",
      "realpath",
      "rm",
      "rmdir",
      "shred",
      "sync",
      "touch",
      "truncate",
      "vdir",
      "b2sum",
      "base32",
      "base64",
      "cat",
      "cksum",
      "comm",
      "csplit",
      "cut",
      "expand",
      "fmt",
      "fold",
      "head",
      "join",
      "md5sum",
      "nl",
      "numfmt",
      "od",
      "paste",
      "ptx",
      "pr",
      "sha1sum",
      "sha224sum",
      "sha256sum",
      "sha384sum",
      "sha512sum",
      "shuf",
      "sort",
      "split",
      "sum",
      "tac",
      "tail",
      "tr",
      "tsort",
      "unexpand",
      "uniq",
      "wc",
      "arch",
      "basename",
      "chroot",
      "date",
      "dirname",
      "du",
      "echo",
      "env",
      "expr",
      "factor",
      // "false", // keyword literal already
      "groups",
      "hostid",
      "id",
      "link",
      "logname",
      "nice",
      "nohup",
      "nproc",
      "pathchk",
      "pinky",
      "printenv",
      "printf",
      "pwd",
      "readlink",
      "runcon",
      "seq",
      "sleep",
      "stat",
      "stdbuf",
      "stty",
      "tee",
      "test",
      "timeout",
      // "true", // keyword literal already
      "tty",
      "uname",
      "unlink",
      "uptime",
      "users",
      "who",
      "whoami",
      "yes"
    ];
    return {
      name: "Bash",
      aliases: ["sh"],
      keywords: {
        $pattern: /\b[a-z][a-z0-9._-]+\b/,
        keyword: T,
        literal: R,
        built_in: [
          ...I,
          ...x,
          // Shell modifiers
          "set",
          "shopt",
          ...P,
          ...D
        ]
      },
      contains: [
        g,
        // to catch known shells and boost relevancy
        e.SHEBANG(),
        // to catch unknown shells but still highlight the shebang
        E,
        _,
        e.HASH_COMMENT_MODE,
        s,
        A,
        l,
        c,
        d,
        p,
        r
      ]
    };
  }
  return q_ = t, q_;
}
var V_, _R;
function SJ() {
  if (_R) return V_;
  _R = 1;
  function t(e) {
    return {
      name: "BASIC",
      case_insensitive: !0,
      illegal: "^.",
      // Support explicitly typed variables that end with $%! or #.
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_$%!#]*",
        keyword: [
          "ABS",
          "ASC",
          "AND",
          "ATN",
          "AUTO|0",
          "BEEP",
          "BLOAD|10",
          "BSAVE|10",
          "CALL",
          "CALLS",
          "CDBL",
          "CHAIN",
          "CHDIR",
          "CHR$|10",
          "CINT",
          "CIRCLE",
          "CLEAR",
          "CLOSE",
          "CLS",
          "COLOR",
          "COM",
          "COMMON",
          "CONT",
          "COS",
          "CSNG",
          "CSRLIN",
          "CVD",
          "CVI",
          "CVS",
          "DATA",
          "DATE$",
          "DEFDBL",
          "DEFINT",
          "DEFSNG",
          "DEFSTR",
          "DEF|0",
          "SEG",
          "USR",
          "DELETE",
          "DIM",
          "DRAW",
          "EDIT",
          "END",
          "ENVIRON",
          "ENVIRON$",
          "EOF",
          "EQV",
          "ERASE",
          "ERDEV",
          "ERDEV$",
          "ERL",
          "ERR",
          "ERROR",
          "EXP",
          "FIELD",
          "FILES",
          "FIX",
          "FOR|0",
          "FRE",
          "GET",
          "GOSUB|10",
          "GOTO",
          "HEX$",
          "IF",
          "THEN",
          "ELSE|0",
          "INKEY$",
          "INP",
          "INPUT",
          "INPUT#",
          "INPUT$",
          "INSTR",
          "IMP",
          "INT",
          "IOCTL",
          "IOCTL$",
          "KEY",
          "ON",
          "OFF",
          "LIST",
          "KILL",
          "LEFT$",
          "LEN",
          "LET",
          "LINE",
          "LLIST",
          "LOAD",
          "LOC",
          "LOCATE",
          "LOF",
          "LOG",
          "LPRINT",
          "USING",
          "LSET",
          "MERGE",
          "MID$",
          "MKDIR",
          "MKD$",
          "MKI$",
          "MKS$",
          "MOD",
          "NAME",
          "NEW",
          "NEXT",
          "NOISE",
          "NOT",
          "OCT$",
          "ON",
          "OR",
          "PEN",
          "PLAY",
          "STRIG",
          "OPEN",
          "OPTION",
          "BASE",
          "OUT",
          "PAINT",
          "PALETTE",
          "PCOPY",
          "PEEK",
          "PMAP",
          "POINT",
          "POKE",
          "POS",
          "PRINT",
          "PRINT]",
          "PSET",
          "PRESET",
          "PUT",
          "RANDOMIZE",
          "READ",
          "REM",
          "RENUM",
          "RESET|0",
          "RESTORE",
          "RESUME",
          "RETURN|0",
          "RIGHT$",
          "RMDIR",
          "RND",
          "RSET",
          "RUN",
          "SAVE",
          "SCREEN",
          "SGN",
          "SHELL",
          "SIN",
          "SOUND",
          "SPACE$",
          "SPC",
          "SQR",
          "STEP",
          "STICK",
          "STOP",
          "STR$",
          "STRING$",
          "SWAP",
          "SYSTEM",
          "TAB",
          "TAN",
          "TIME$",
          "TIMER",
          "TROFF",
          "TRON",
          "TO",
          "USR",
          "VAL",
          "VARPTR",
          "VARPTR$",
          "VIEW",
          "WAIT",
          "WHILE",
          "WEND",
          "WIDTH",
          "WINDOW",
          "WRITE",
          "XOR"
        ]
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.COMMENT("REM", "$", { relevance: 10 }),
        e.COMMENT("'", "$", { relevance: 0 }),
        {
          // Match line numbers
          className: "symbol",
          begin: "^[0-9]+ ",
          relevance: 10
        },
        {
          // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?([edED]\\d+)?[#!]?",
          relevance: 0
        },
        {
          // Match hexadecimal numbers (&Hxxxx)
          className: "number",
          begin: "(&[hH][0-9a-fA-F]{1,4})"
        },
        {
          // Match octal numbers (&Oxxxxxx)
          className: "number",
          begin: "(&[oO][0-7]{1,6})"
        }
      ]
    };
  }
  return V_ = t, V_;
}
var $_, mR;
function bJ() {
  if (mR) return $_;
  mR = 1;
  function t(e) {
    return {
      name: "Backus–Naur Form",
      contains: [
        // Attribute
        {
          className: "attribute",
          begin: /</,
          end: />/
        },
        // Specific
        {
          begin: /::=/,
          end: /$/,
          contains: [
            {
              begin: /</,
              end: />/
            },
            // Common
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE
          ]
        }
      ]
    };
  }
  return $_ = t, $_;
}
var W_, fR;
function TJ() {
  if (fR) return W_;
  fR = 1;
  function t(e) {
    const n = {
      className: "literal",
      begin: /[+-]+/,
      relevance: 0
    };
    return {
      name: "Brainfuck",
      aliases: ["bf"],
      contains: [
        e.COMMENT(
          /[^\[\]\.,\+\-<> \r\n]/,
          /[\[\]\.,\+\-<> \r\n]/,
          {
            contains: [
              {
                match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
                relevance: 0
              }
            ],
            returnEnd: !0,
            relevance: 0
          }
        ),
        {
          className: "title",
          begin: "[\\[\\]]",
          relevance: 0
        },
        {
          className: "string",
          begin: "[\\.,]",
          relevance: 0
        },
        {
          // this mode works as the only relevance counter
          // it looks ahead to find the start of a run of literals
          // so only the runs are counted as relevant
          begin: /(?=\+\+|--)/,
          contains: [n]
        },
        n
      ]
    };
  }
  return W_ = t, W_;
}
var K_, gR;
function yJ() {
  if (gR) return K_;
  gR = 1;
  function t(e) {
    const n = e.regex, r = e.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), a = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", l = "(" + a + "|" + n.optional(i) + "[a-zA-Z_]\\w*" + n.optional("<[^<>]+>") + ")", c = {
      className: "type",
      variants: [
        { begin: "\\b[a-z\\d_]*_t\\b" },
        { match: /\batomic_[a-z]{3,6}\b/ }
      ]
    }, p = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
          end: "'",
          illegal: "."
        },
        e.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, _ = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, f = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e.inherit(p, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        r,
        e.C_BLOCK_COMMENT_MODE
      ]
    }, g = {
      className: "title",
      begin: n.optional(i) + e.IDENT_RE,
      relevance: 0
    }, E = n.optional(i) + e.IDENT_RE + "\\s*\\(", A = {
      keyword: [
        "asm",
        "auto",
        "break",
        "case",
        "continue",
        "default",
        "do",
        "else",
        "enum",
        "extern",
        "for",
        "fortran",
        "goto",
        "if",
        "inline",
        "register",
        "restrict",
        "return",
        "sizeof",
        "struct",
        "switch",
        "typedef",
        "union",
        "volatile",
        "while",
        "_Alignas",
        "_Alignof",
        "_Atomic",
        "_Generic",
        "_Noreturn",
        "_Static_assert",
        "_Thread_local",
        // aliases
        "alignas",
        "alignof",
        "noreturn",
        "static_assert",
        "thread_local",
        // not a C keyword but is, for all intents and purposes, treated exactly like one.
        "_Pragma"
      ],
      type: [
        "float",
        "double",
        "signed",
        "unsigned",
        "int",
        "short",
        "long",
        "char",
        "void",
        "_Bool",
        "_Complex",
        "_Imaginary",
        "_Decimal32",
        "_Decimal64",
        "_Decimal128",
        // modifiers
        "const",
        "static",
        // aliases
        "complex",
        "bool",
        "imaginary"
      ],
      literal: "true false NULL",
      // TODO: apply hinting work similar to what was done in cpp.js
      built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
    }, I = [
      f,
      c,
      r,
      e.C_BLOCK_COMMENT_MODE,
      _,
      p
    ], x = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: A,
      contains: I.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: A,
          contains: I.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, P = {
      begin: "(" + l + "[\\*&\\s]+)+" + E,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: A,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: a,
          keywords: A,
          relevance: 0
        },
        {
          begin: E,
          returnBegin: !0,
          contains: [e.inherit(g, { className: "title.function" })],
          relevance: 0
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: A,
          relevance: 0,
          contains: [
            r,
            e.C_BLOCK_COMMENT_MODE,
            p,
            _,
            c,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: A,
              relevance: 0,
              contains: [
                "self",
                r,
                e.C_BLOCK_COMMENT_MODE,
                p,
                _,
                c
              ]
            }
          ]
        },
        c,
        r,
        e.C_BLOCK_COMMENT_MODE,
        f
      ]
    };
    return {
      name: "C",
      aliases: ["h"],
      keywords: A,
      // Until differentiations are added between `c` and `cpp`, `c` will
      // not be auto-detected to avoid auto-detect conflicts between C and C++
      disableAutodetect: !0,
      illegal: "</",
      contains: [].concat(
        x,
        P,
        I,
        [
          f,
          {
            begin: e.IDENT_RE + "::",
            keywords: A
          },
          {
            className: "class",
            beginKeywords: "enum class struct union",
            end: /[{;:<>=]/,
            contains: [
              { beginKeywords: "final class struct" },
              e.TITLE_MODE
            ]
          }
        ]
      ),
      exports: {
        preprocessor: f,
        strings: p,
        keywords: A
      }
    };
  }
  return K_ = t, K_;
}
var Q_, hR;
function vJ() {
  if (hR) return Q_;
  hR = 1;
  function t(e) {
    const n = e.regex, r = [
      "div",
      "mod",
      "in",
      "and",
      "or",
      "not",
      "xor",
      "asserterror",
      "begin",
      "case",
      "do",
      "downto",
      "else",
      "end",
      "exit",
      "for",
      "local",
      "if",
      "of",
      "repeat",
      "then",
      "to",
      "until",
      "while",
      "with",
      "var"
    ], a = "false true", i = [
      e.C_LINE_COMMENT_MODE,
      e.COMMENT(
        /\{/,
        /\}/,
        { relevance: 0 }
      ),
      e.COMMENT(
        /\(\*/,
        /\*\)/,
        { relevance: 10 }
      )
    ], s = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    }, l = {
      className: "string",
      begin: /(#\d+)+/
    }, c = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(DT|D|T)",
      relevance: 0
    }, d = {
      className: "string",
      // not a string technically but makes sense to be highlighted in the same style
      begin: '"',
      end: '"'
    }, p = {
      match: [
        /procedure/,
        /\s+/,
        /[a-zA-Z_][\w@]*/,
        /\s*/
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: r,
          contains: [
            s,
            l,
            e.NUMBER_MODE
          ]
        },
        ...i
      ]
    }, _ = [
      "Table",
      "Form",
      "Report",
      "Dataport",
      "Codeunit",
      "XMLport",
      "MenuSuite",
      "Page",
      "Query"
    ], f = {
      match: [
        /OBJECT/,
        /\s+/,
        n.either(..._),
        /\s+/,
        /\d+/,
        /\s+(?=[^\s])/,
        /.*/,
        /$/
      ],
      relevance: 3,
      scope: {
        1: "keyword",
        3: "type",
        5: "number",
        7: "title"
      }
    };
    return {
      name: "C/AL",
      case_insensitive: !0,
      keywords: {
        keyword: r,
        literal: a
      },
      illegal: /\/\*/,
      contains: [
        {
          match: /[\w]+(?=\=)/,
          scope: "attribute",
          relevance: 0
        },
        s,
        l,
        c,
        d,
        e.NUMBER_MODE,
        f,
        p
      ]
    };
  }
  return Q_ = t, Q_;
}
var j_, ER;
function CJ() {
  if (ER) return j_;
  ER = 1;
  function t(e) {
    const n = [
      "struct",
      "enum",
      "interface",
      "union",
      "group",
      "import",
      "using",
      "const",
      "annotation",
      "extends",
      "in",
      "of",
      "on",
      "as",
      "with",
      "from",
      "fixed"
    ], r = [
      "Void",
      "Bool",
      "Int8",
      "Int16",
      "Int32",
      "Int64",
      "UInt8",
      "UInt16",
      "UInt32",
      "UInt64",
      "Float32",
      "Float64",
      "Text",
      "Data",
      "AnyPointer",
      "AnyStruct",
      "Capability",
      "List"
    ], a = [
      "true",
      "false"
    ], i = {
      variants: [
        { match: [
          /(struct|enum|interface)/,
          /\s+/,
          e.IDENT_RE
        ] },
        { match: [
          /extends/,
          /\s*\(/,
          e.IDENT_RE,
          /\s*\)/
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Cap’n Proto",
      aliases: ["capnp"],
      keywords: {
        keyword: n,
        type: r,
        literal: a
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.HASH_COMMENT_MODE,
        {
          className: "meta",
          begin: /@0x[\w\d]{16};/,
          illegal: /\n/
        },
        {
          className: "symbol",
          begin: /@\d+\b/
        },
        i
      ]
    };
  }
  return j_ = t, j_;
}
var X_, SR;
function RJ() {
  if (SR) return X_;
  SR = 1;
  function t(e) {
    const n = [
      "assembly",
      "module",
      "package",
      "import",
      "alias",
      "class",
      "interface",
      "object",
      "given",
      "value",
      "assign",
      "void",
      "function",
      "new",
      "of",
      "extends",
      "satisfies",
      "abstracts",
      "in",
      "out",
      "return",
      "break",
      "continue",
      "throw",
      "assert",
      "dynamic",
      "if",
      "else",
      "switch",
      "case",
      "for",
      "while",
      "try",
      "catch",
      "finally",
      "then",
      "let",
      "this",
      "outer",
      "super",
      "is",
      "exists",
      "nonempty"
    ], r = [
      "shared",
      "abstract",
      "formal",
      "default",
      "actual",
      "variable",
      "late",
      "native",
      "deprecated",
      "final",
      "sealed",
      "annotation",
      "suppressWarnings",
      "small"
    ], a = [
      "doc",
      "by",
      "license",
      "see",
      "throws",
      "tagged"
    ], i = {
      className: "subst",
      excludeBegin: !0,
      excludeEnd: !0,
      begin: /``/,
      end: /``/,
      keywords: n,
      relevance: 10
    }, s = [
      {
        // verbatim string
        className: "string",
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        // string literal or template
        className: "string",
        begin: '"',
        end: '"',
        contains: [i]
      },
      {
        // character literal
        className: "string",
        begin: "'",
        end: "'"
      },
      {
        // numeric literal
        className: "number",
        begin: "#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",
        relevance: 0
      }
    ];
    return i.contains = s, {
      name: "Ceylon",
      keywords: {
        keyword: n.concat(r),
        meta: a
      },
      illegal: "\\$[^01]|#[^0-9a-fA-F]",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        {
          // compiler annotation
          className: "meta",
          begin: '@[a-z]\\w*(?::"[^"]*")?'
        }
      ].concat(s)
    };
  }
  return X_ = t, X_;
}
var Z_, bR;
function AJ() {
  if (bR) return Z_;
  bR = 1;
  function t(e) {
    return {
      name: "Clean",
      aliases: [
        "icl",
        "dcl"
      ],
      keywords: {
        keyword: [
          "if",
          "let",
          "in",
          "with",
          "where",
          "case",
          "of",
          "class",
          "instance",
          "otherwise",
          "implementation",
          "definition",
          "system",
          "module",
          "from",
          "import",
          "qualified",
          "as",
          "special",
          "code",
          "inline",
          "foreign",
          "export",
          "ccall",
          "stdcall",
          "generic",
          "derive",
          "infix",
          "infixl",
          "infixr"
        ],
        built_in: "Int Real Char Bool",
        literal: "True False"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          // relevance booster
          begin: "->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>"
        }
      ]
    };
  }
  return Z_ = t, Z_;
}
var J_, TR;
function OJ() {
  if (TR) return J_;
  TR = 1;
  function t(e) {
    const n = "a-zA-Z_\\-!.?+*=<>&'", r = "[#]?[" + n + "][" + n + "0-9/;:$#]*", a = "def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord", i = {
      $pattern: r,
      built_in: (
        // Clojure keywords
        a + " cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy first rest cons cast coll last butlast sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"
      )
    }, s = {
      begin: r,
      relevance: 0
    }, l = {
      scope: "number",
      relevance: 0,
      variants: [
        { match: /[-+]?0[xX][0-9a-fA-F]+N?/ },
        // hexadecimal                 // 0x2a
        { match: /[-+]?0[0-7]+N?/ },
        // octal                       // 052
        { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ },
        // variable radix from 2 to 36 // 2r101010, 8r52, 36r16
        { match: /[-+]?[0-9]+\/[0-9]+N?/ },
        // ratio                       // 1/2
        { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ },
        // float        // 0.42 4.2E-1M 42E1 42M
        { match: /[-+]?([1-9][0-9]*|0)N?/ }
        // int (don't match leading 0) // 42 42N
      ]
    }, c = {
      scope: "character",
      variants: [
        { match: /\\o[0-3]?[0-7]{1,2}/ },
        // Unicode Octal 0 - 377
        { match: /\\u[0-9a-fA-F]{4}/ },
        // Unicode Hex 0000 - FFFF
        { match: /\\(newline|space|tab|formfeed|backspace|return)/ },
        // special characters
        {
          match: /\\\S/,
          relevance: 0
        }
        // any non-whitespace char
      ]
    }, d = {
      scope: "regex",
      begin: /#"/,
      end: /"/,
      contains: [e.BACKSLASH_ESCAPE]
    }, p = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), _ = {
      scope: "punctuation",
      match: /,/,
      relevance: 0
    }, f = e.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), g = {
      className: "literal",
      begin: /\b(true|false|nil)\b/
    }, E = {
      begin: "\\[|(#::?" + r + ")?\\{",
      end: "[\\]\\}]",
      relevance: 0
    }, T = {
      className: "symbol",
      begin: "[:]{1,2}" + r
    }, R = {
      begin: "\\(",
      end: "\\)"
    }, A = {
      endsWithParent: !0,
      relevance: 0
    }, I = {
      keywords: i,
      className: "name",
      begin: r,
      relevance: 0,
      starts: A
    }, x = [
      _,
      R,
      c,
      d,
      p,
      f,
      T,
      E,
      l,
      g,
      s
    ], P = {
      beginKeywords: a,
      keywords: {
        $pattern: r,
        keyword: a
      },
      end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
      contains: [
        {
          className: "title",
          begin: r,
          relevance: 0,
          excludeEnd: !0,
          // we can only have a single title
          endsParent: !0
        }
      ].concat(x)
    };
    return R.contains = [
      P,
      I,
      A
    ], A.contains = x, E.contains = x, {
      name: "Clojure",
      aliases: [
        "clj",
        "edn"
      ],
      illegal: /\S/,
      contains: [
        _,
        R,
        c,
        d,
        p,
        f,
        T,
        E,
        l,
        g
      ]
    };
  }
  return J_ = t, J_;
}
var em, yR;
function NJ() {
  if (yR) return em;
  yR = 1;
  function t(e) {
    return {
      name: "Clojure REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^([\w.-]+|\s*#_)?=>/,
          starts: {
            end: /$/,
            subLanguage: "clojure"
          }
        }
      ]
    };
  }
  return em = t, em;
}
var tm, vR;
function IJ() {
  if (vR) return tm;
  vR = 1;
  function t(e) {
    return {
      name: "CMake",
      aliases: ["cmake.in"],
      case_insensitive: !0,
      keywords: { keyword: (
        // scripting commands
        "break cmake_host_system_information cmake_minimum_required cmake_parse_arguments cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro endwhile execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include include_guard list macro mark_as_advanced math message option return separate_arguments set_directory_properties set_property set site_name string unset variable_watch while add_compile_definitions add_compile_options add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_link_options add_subdirectory add_test aux_source_directory build_command create_test_sourcelist define_property enable_language enable_testing export fltk_wrap_ui get_source_file_property get_target_property get_test_property include_directories include_external_msproject include_regular_expression install link_directories link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions set_source_files_properties set_target_properties set_tests_properties source_group target_compile_definitions target_compile_features target_compile_options target_include_directories target_link_directories target_link_libraries target_link_options target_sources try_compile try_run ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload build_name exec_program export_library_dependencies install_files install_programs install_targets load_command make_directory output_required_files remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or not command policy target test exists is_newer_than is_directory is_symlink is_absolute matches less greater equal less_equal greater_equal strless strgreater strequal strless_equal strgreater_equal version_less version_greater version_equal version_less_equal version_greater_equal in_list defined"
      ) },
      contains: [
        {
          className: "variable",
          begin: /\$\{/,
          end: /\}/
        },
        e.COMMENT(/#\[\[/, /]]/),
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE
      ]
    };
  }
  return tm = t, tm;
}
var nm, CR;
function xJ() {
  if (CR) return nm;
  CR = 1;
  const t = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], e = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], n = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], r = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], a = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], i = [].concat(
    a,
    n,
    r
  );
  function s(l) {
    const c = [
      "npm",
      "print"
    ], d = [
      "yes",
      "no",
      "on",
      "off"
    ], p = [
      "then",
      "unless",
      "until",
      "loop",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not"
    ], _ = [
      "var",
      "const",
      "let",
      "function",
      "static"
    ], f = (D) => (L) => !D.includes(L), g = {
      keyword: t.concat(p).filter(f(_)),
      literal: e.concat(d),
      built_in: i.concat(c)
    }, E = "[A-Za-z$_][0-9A-Za-z$_]*", T = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: g
    }, R = [
      l.BINARY_NUMBER_MODE,
      l.inherit(l.C_NUMBER_MODE, { starts: {
        end: "(\\s*/)?",
        relevance: 0
      } }),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [l.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [l.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              l.BACKSLASH_ESCAPE,
              T
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              l.BACKSLASH_ESCAPE,
              T
            ]
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "///",
            end: "///",
            contains: [
              T,
              l.HASH_COMMENT_MODE
            ]
          },
          {
            begin: "//[gim]{0,3}(?=\\W)",
            relevance: 0
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/
          }
        ]
      },
      {
        begin: "@" + E
        // relevance booster
      },
      {
        subLanguage: "javascript",
        excludeBegin: !0,
        excludeEnd: !0,
        variants: [
          {
            begin: "```",
            end: "```"
          },
          {
            begin: "`",
            end: "`"
          }
        ]
      }
    ];
    T.contains = R;
    const A = l.inherit(l.TITLE_MODE, { begin: E }), I = "(\\(.*\\)\\s*)?\\B[-=]>", x = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: !0,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: g,
          contains: ["self"].concat(R)
        }
      ]
    }, P = {
      variants: [
        { match: [
          /class\s+/,
          E,
          /\s+extends\s+/,
          E
        ] },
        { match: [
          /class\s+/,
          E
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: g
    };
    return {
      name: "CoffeeScript",
      aliases: [
        "coffee",
        "cson",
        "iced"
      ],
      keywords: g,
      illegal: /\/\*/,
      contains: [
        ...R,
        l.COMMENT("###", "###"),
        l.HASH_COMMENT_MODE,
        {
          className: "function",
          begin: "^\\s*" + E + "\\s*=\\s*" + I,
          end: "[-=]>",
          returnBegin: !0,
          contains: [
            A,
            x
          ]
        },
        {
          // anonymous function start
          begin: /[:\(,=]\s*/,
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: I,
              end: "[-=]>",
              returnBegin: !0,
              contains: [x]
            }
          ]
        },
        P,
        {
          begin: E + ":",
          end: ":",
          returnBegin: !0,
          returnEnd: !0,
          relevance: 0
        }
      ]
    };
  }
  return nm = s, nm;
}
var rm, RR;
function DJ() {
  if (RR) return rm;
  RR = 1;
  function t(e) {
    return {
      name: "Coq",
      keywords: {
        keyword: [
          "_|0",
          "as",
          "at",
          "cofix",
          "else",
          "end",
          "exists",
          "exists2",
          "fix",
          "for",
          "forall",
          "fun",
          "if",
          "IF",
          "in",
          "let",
          "match",
          "mod",
          "Prop",
          "return",
          "Set",
          "then",
          "Type",
          "using",
          "where",
          "with",
          "Abort",
          "About",
          "Add",
          "Admit",
          "Admitted",
          "All",
          "Arguments",
          "Assumptions",
          "Axiom",
          "Back",
          "BackTo",
          "Backtrack",
          "Bind",
          "Blacklist",
          "Canonical",
          "Cd",
          "Check",
          "Class",
          "Classes",
          "Close",
          "Coercion",
          "Coercions",
          "CoFixpoint",
          "CoInductive",
          "Collection",
          "Combined",
          "Compute",
          "Conjecture",
          "Conjectures",
          "Constant",
          "constr",
          "Constraint",
          "Constructors",
          "Context",
          "Corollary",
          "CreateHintDb",
          "Cut",
          "Declare",
          "Defined",
          "Definition",
          "Delimit",
          "Dependencies",
          "Dependent",
          "Derive",
          "Drop",
          "eauto",
          "End",
          "Equality",
          "Eval",
          "Example",
          "Existential",
          "Existentials",
          "Existing",
          "Export",
          "exporting",
          "Extern",
          "Extract",
          "Extraction",
          "Fact",
          "Field",
          "Fields",
          "File",
          "Fixpoint",
          "Focus",
          "for",
          "From",
          "Function",
          "Functional",
          "Generalizable",
          "Global",
          "Goal",
          "Grab",
          "Grammar",
          "Graph",
          "Guarded",
          "Heap",
          "Hint",
          "HintDb",
          "Hints",
          "Hypotheses",
          "Hypothesis",
          "ident",
          "Identity",
          "If",
          "Immediate",
          "Implicit",
          "Import",
          "Include",
          "Inductive",
          "Infix",
          "Info",
          "Initial",
          "Inline",
          "Inspect",
          "Instance",
          "Instances",
          "Intro",
          "Intros",
          "Inversion",
          "Inversion_clear",
          "Language",
          "Left",
          "Lemma",
          "Let",
          "Libraries",
          "Library",
          "Load",
          "LoadPath",
          "Local",
          "Locate",
          "Ltac",
          "ML",
          "Mode",
          "Module",
          "Modules",
          "Monomorphic",
          "Morphism",
          "Next",
          "NoInline",
          "Notation",
          "Obligation",
          "Obligations",
          "Opaque",
          "Open",
          "Optimize",
          "Options",
          "Parameter",
          "Parameters",
          "Parametric",
          "Path",
          "Paths",
          "pattern",
          "Polymorphic",
          "Preterm",
          "Print",
          "Printing",
          "Program",
          "Projections",
          "Proof",
          "Proposition",
          "Pwd",
          "Qed",
          "Quit",
          "Rec",
          "Record",
          "Recursive",
          "Redirect",
          "Relation",
          "Remark",
          "Remove",
          "Require",
          "Reserved",
          "Reset",
          "Resolve",
          "Restart",
          "Rewrite",
          "Right",
          "Ring",
          "Rings",
          "Save",
          "Scheme",
          "Scope",
          "Scopes",
          "Script",
          "Search",
          "SearchAbout",
          "SearchHead",
          "SearchPattern",
          "SearchRewrite",
          "Section",
          "Separate",
          "Set",
          "Setoid",
          "Show",
          "Solve",
          "Sorted",
          "Step",
          "Strategies",
          "Strategy",
          "Structure",
          "SubClass",
          "Table",
          "Tables",
          "Tactic",
          "Term",
          "Test",
          "Theorem",
          "Time",
          "Timeout",
          "Transparent",
          "Type",
          "Typeclasses",
          "Types",
          "Undelimit",
          "Undo",
          "Unfocus",
          "Unfocused",
          "Unfold",
          "Universe",
          "Universes",
          "Unset",
          "Unshelve",
          "using",
          "Variable",
          "Variables",
          "Variant",
          "Verbose",
          "Visibility",
          "where",
          "with"
        ],
        built_in: [
          "abstract",
          "absurd",
          "admit",
          "after",
          "apply",
          "as",
          "assert",
          "assumption",
          "at",
          "auto",
          "autorewrite",
          "autounfold",
          "before",
          "bottom",
          "btauto",
          "by",
          "case",
          "case_eq",
          "cbn",
          "cbv",
          "change",
          "classical_left",
          "classical_right",
          "clear",
          "clearbody",
          "cofix",
          "compare",
          "compute",
          "congruence",
          "constr_eq",
          "constructor",
          "contradict",
          "contradiction",
          "cut",
          "cutrewrite",
          "cycle",
          "decide",
          "decompose",
          "dependent",
          "destruct",
          "destruction",
          "dintuition",
          "discriminate",
          "discrR",
          "do",
          "double",
          "dtauto",
          "eapply",
          "eassumption",
          "eauto",
          "ecase",
          "econstructor",
          "edestruct",
          "ediscriminate",
          "eelim",
          "eexact",
          "eexists",
          "einduction",
          "einjection",
          "eleft",
          "elim",
          "elimtype",
          "enough",
          "equality",
          "erewrite",
          "eright",
          "esimplify_eq",
          "esplit",
          "evar",
          "exact",
          "exactly_once",
          "exfalso",
          "exists",
          "f_equal",
          "fail",
          "field",
          "field_simplify",
          "field_simplify_eq",
          "first",
          "firstorder",
          "fix",
          "fold",
          "fourier",
          "functional",
          "generalize",
          "generalizing",
          "gfail",
          "give_up",
          "has_evar",
          "hnf",
          "idtac",
          "in",
          "induction",
          "injection",
          "instantiate",
          "intro",
          "intro_pattern",
          "intros",
          "intuition",
          "inversion",
          "inversion_clear",
          "is_evar",
          "is_var",
          "lapply",
          "lazy",
          "left",
          "lia",
          "lra",
          "move",
          "native_compute",
          "nia",
          "nsatz",
          "omega",
          "once",
          "pattern",
          "pose",
          "progress",
          "proof",
          "psatz",
          "quote",
          "record",
          "red",
          "refine",
          "reflexivity",
          "remember",
          "rename",
          "repeat",
          "replace",
          "revert",
          "revgoals",
          "rewrite",
          "rewrite_strat",
          "right",
          "ring",
          "ring_simplify",
          "rtauto",
          "set",
          "setoid_reflexivity",
          "setoid_replace",
          "setoid_rewrite",
          "setoid_symmetry",
          "setoid_transitivity",
          "shelve",
          "shelve_unifiable",
          "simpl",
          "simple",
          "simplify_eq",
          "solve",
          "specialize",
          "split",
          "split_Rabs",
          "split_Rmult",
          "stepl",
          "stepr",
          "subst",
          "sum",
          "swap",
          "symmetry",
          "tactic",
          "tauto",
          "time",
          "timeout",
          "top",
          "transitivity",
          "trivial",
          "try",
          "tryif",
          "unfold",
          "unify",
          "until",
          "using",
          "vm_compute",
          "with"
        ]
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.COMMENT("\\(\\*", "\\*\\)"),
        e.C_NUMBER_MODE,
        {
          className: "type",
          excludeBegin: !0,
          begin: "\\|\\s*",
          end: "\\w+"
        },
        {
          // relevance booster
          begin: /[-=]>/
        }
      ]
    };
  }
  return rm = t, rm;
}
var am, AR;
function wJ() {
  if (AR) return am;
  AR = 1;
  function t(e) {
    return {
      name: "Caché Object Script",
      case_insensitive: !0,
      aliases: ["cls"],
      keywords: "property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii",
      contains: [
        {
          className: "number",
          begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
          relevance: 0
        },
        {
          className: "string",
          variants: [
            {
              begin: '"',
              end: '"',
              contains: [
                {
                  // escaped
                  begin: '""',
                  relevance: 0
                }
              ]
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "comment",
          begin: /;/,
          end: "$",
          relevance: 0
        },
        {
          // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
          className: "built_in",
          begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
        },
        {
          // Macro command: quit $$$OK
          className: "built_in",
          begin: /\$\$\$[a-zA-Z]+/
        },
        {
          // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
          className: "built_in",
          begin: /%[a-z]+(?:\.[a-z]+)*/
        },
        {
          // Global variable: set ^globalName = 12 write ^globalName
          className: "symbol",
          begin: /\^%?[a-zA-Z][\w]*/
        },
        {
          // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
          className: "keyword",
          begin: /##class|##super|#define|#dim/
        },
        // sub-languages: are not fully supported by hljs by 11/15/2015
        // left for the future implementation.
        {
          begin: /&sql\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          subLanguage: "sql"
        },
        {
          begin: /&(js|jscript|javascript)</,
          end: />/,
          excludeBegin: !0,
          excludeEnd: !0,
          subLanguage: "javascript"
        },
        {
          // this brakes first and last tag, but this is the only way to embed a valid html
          begin: /&html<\s*</,
          end: />\s*>/,
          subLanguage: "xml"
        }
      ]
    };
  }
  return am = t, am;
}
var im, OR;
function LJ() {
  if (OR) return im;
  OR = 1;
  function t(e) {
    const n = e.regex, r = e.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), a = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", l = "(?!struct)(" + a + "|" + n.optional(i) + "[a-zA-Z_]\\w*" + n.optional("<[^<>]+>") + ")", c = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    }, p = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)" + "|.)",
          end: "'",
          illegal: "."
        },
        e.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, _ = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, f = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e.inherit(p, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        r,
        e.C_BLOCK_COMMENT_MODE
      ]
    }, g = {
      className: "title",
      begin: n.optional(i) + e.IDENT_RE,
      relevance: 0
    }, E = n.optional(i) + e.IDENT_RE + "\\s*\\(", T = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ], R = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ], A = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ], I = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ], D = {
      type: R,
      keyword: T,
      literal: [
        "NULL",
        "false",
        "nullopt",
        "nullptr",
        "true"
      ],
      built_in: ["_Pragma"],
      _type_hints: A
    }, L = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: I
      },
      begin: n.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        e.IDENT_RE,
        n.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    }, K = [
      L,
      f,
      c,
      r,
      e.C_BLOCK_COMMENT_MODE,
      _,
      p
    ], J = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: D,
      contains: K.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: D,
          contains: K.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, X = {
      className: "function",
      begin: "(" + l + "[\\*&\\s]+)+" + E,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: D,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: a,
          keywords: D,
          relevance: 0
        },
        {
          begin: E,
          returnBegin: !0,
          contains: [g],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: !0,
          contains: [
            p,
            _
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: D,
          relevance: 0,
          contains: [
            r,
            e.C_BLOCK_COMMENT_MODE,
            p,
            _,
            c,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: D,
              relevance: 0,
              contains: [
                "self",
                r,
                e.C_BLOCK_COMMENT_MODE,
                p,
                _,
                c
              ]
            }
          ]
        },
        c,
        r,
        e.C_BLOCK_COMMENT_MODE,
        f
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: D,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        J,
        X,
        L,
        K,
        [
          f,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
            end: ">",
            keywords: D,
            contains: [
              "self",
              c
            ]
          },
          {
            begin: e.IDENT_RE + "::",
            keywords: D
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  return im = t, im;
}
var sm, NR;
function MJ() {
  if (NR) return sm;
  NR = 1;
  function t(e) {
    const n = "primitive rsc_template", r = "group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml";
    return {
      name: "crmsh",
      aliases: [
        "crm",
        "pcmk"
      ],
      case_insensitive: !0,
      keywords: {
        keyword: "params meta operations op rule attributes utilization" + " " + "read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\" + " " + "number string",
        literal: "Master Started Slave Stopped start promote demote stop monitor true false"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        {
          beginKeywords: "node",
          starts: {
            end: "\\s*([\\w_-]+:)?",
            starts: {
              className: "title",
              end: "\\s*[\\$\\w_][\\w_-]*"
            }
          }
        },
        {
          beginKeywords: n,
          starts: {
            className: "title",
            end: "\\s*[\\$\\w_][\\w_-]*",
            starts: { end: "\\s*@?[\\w_][\\w_\\.:-]*" }
          }
        },
        {
          begin: "\\b(" + r.split(" ").join("|") + ")\\s+",
          keywords: r,
          starts: {
            className: "title",
            end: "[\\$\\w_][\\w_-]*"
          }
        },
        {
          beginKeywords: "property rsc_defaults op_defaults",
          starts: {
            className: "title",
            end: "\\s*([\\w_-]+:)?"
          }
        },
        e.QUOTE_STRING_MODE,
        {
          className: "meta",
          begin: "(ocf|systemd|service|lsb):[\\w_:-]+",
          relevance: 0
        },
        {
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?(ms|s|h|m)?",
          relevance: 0
        },
        {
          className: "literal",
          begin: "[-]?(infinity|inf)",
          relevance: 0
        },
        {
          className: "attr",
          begin: /([A-Za-z$_#][\w_-]+)=/,
          relevance: 0
        },
        {
          className: "tag",
          begin: "</?",
          end: "/?>",
          relevance: 0
        }
      ]
    };
  }
  return sm = t, sm;
}
var om, IR;
function kJ() {
  if (IR) return om;
  IR = 1;
  function t(e) {
    const n = "(_?[ui](8|16|32|64|128))?", r = "(_?f(32|64))?", a = "[a-zA-Z_]\\w*[!?=]?", i = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?", s = "[A-Za-z_]\\w*(::\\w+)*(\\?|!)?", l = {
      $pattern: a,
      keyword: "abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",
      literal: "false nil true"
    }, c = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: l
    }, d = {
      // negative-look forward attemps to prevent false matches like:
      // @ident@ or $ident$ that might indicate this is not ruby at all
      className: "variable",
      begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
    }, p = {
      className: "template-variable",
      variants: [
        {
          begin: "\\{\\{",
          end: "\\}\\}"
        },
        {
          begin: "\\{%",
          end: "%\\}"
        }
      ],
      keywords: l
    };
    function _(I, x) {
      const P = [
        {
          begin: I,
          end: x
        }
      ];
      return P[0].contains = P, P;
    }
    const f = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        c
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: "%[Qwi]?\\(",
          end: "\\)",
          contains: _("\\(", "\\)")
        },
        {
          begin: "%[Qwi]?\\[",
          end: "\\]",
          contains: _("\\[", "\\]")
        },
        {
          begin: "%[Qwi]?\\{",
          end: /\}/,
          contains: _(/\{/, /\}/)
        },
        {
          begin: "%[Qwi]?<",
          end: ">",
          contains: _("<", ">")
        },
        {
          begin: "%[Qwi]?\\|",
          end: "\\|"
        },
        {
          begin: /<<-\w+$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    }, g = {
      className: "string",
      variants: [
        {
          begin: "%q\\(",
          end: "\\)",
          contains: _("\\(", "\\)")
        },
        {
          begin: "%q\\[",
          end: "\\]",
          contains: _("\\[", "\\]")
        },
        {
          begin: "%q\\{",
          end: /\}/,
          contains: _(/\{/, /\}/)
        },
        {
          begin: "%q<",
          end: ">",
          contains: _("<", ">")
        },
        {
          begin: "%q\\|",
          end: "\\|"
        },
        {
          begin: /<<-'\w+'$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    }, E = {
      begin: "(?!%\\})(" + e.RE_STARTERS_RE + "|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*",
      keywords: "case if select unless until when while",
      contains: [
        {
          className: "regexp",
          contains: [
            e.BACKSLASH_ESCAPE,
            c
          ],
          variants: [
            {
              begin: "//[a-z]*",
              relevance: 0
            },
            {
              begin: "/(?!\\/)",
              end: "/[a-z]*"
            }
          ]
        }
      ],
      relevance: 0
    }, T = {
      className: "regexp",
      contains: [
        e.BACKSLASH_ESCAPE,
        c
      ],
      variants: [
        {
          begin: "%r\\(",
          end: "\\)",
          contains: _("\\(", "\\)")
        },
        {
          begin: "%r\\[",
          end: "\\]",
          contains: _("\\[", "\\]")
        },
        {
          begin: "%r\\{",
          end: /\}/,
          contains: _(/\{/, /\}/)
        },
        {
          begin: "%r<",
          end: ">",
          contains: _("<", ">")
        },
        {
          begin: "%r\\|",
          end: "\\|"
        }
      ],
      relevance: 0
    }, R = {
      className: "meta",
      begin: "@\\[",
      end: "\\]",
      contains: [e.inherit(e.QUOTE_STRING_MODE, { className: "string" })]
    }, A = [
      p,
      f,
      g,
      T,
      E,
      R,
      d,
      e.HASH_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "class module struct",
        end: "$|;",
        illegal: /=/,
        contains: [
          e.HASH_COMMENT_MODE,
          e.inherit(e.TITLE_MODE, { begin: s }),
          {
            // relevance booster for inheritance
            begin: "<"
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "lib enum union",
        end: "$|;",
        illegal: /=/,
        contains: [
          e.HASH_COMMENT_MODE,
          e.inherit(e.TITLE_MODE, { begin: s })
        ]
      },
      {
        beginKeywords: "annotation",
        end: "$|;",
        illegal: /=/,
        contains: [
          e.HASH_COMMENT_MODE,
          e.inherit(e.TITLE_MODE, { begin: s })
        ],
        relevance: 2
      },
      {
        className: "function",
        beginKeywords: "def",
        end: /\B\b/,
        contains: [
          e.inherit(e.TITLE_MODE, {
            begin: i,
            endsParent: !0
          })
        ]
      },
      {
        className: "function",
        beginKeywords: "fun macro",
        end: /\B\b/,
        contains: [
          e.inherit(e.TITLE_MODE, {
            begin: i,
            endsParent: !0
          })
        ],
        relevance: 2
      },
      {
        className: "symbol",
        begin: e.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":",
        contains: [
          f,
          { begin: i }
        ],
        relevance: 0
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + n },
          { begin: "\\b0o([0-7_]+)" + n },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + n },
          { begin: "\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?" + r + "(?!_)" },
          { begin: "\\b([1-9][0-9_]*|0)" + n }
        ],
        relevance: 0
      }
    ];
    return c.contains = A, p.contains = A.slice(1), {
      name: "Crystal",
      aliases: ["cr"],
      keywords: l,
      contains: A
    };
  }
  return om = t, om;
}
var lm, xR;
function PJ() {
  if (xR) return lm;
  xR = 1;
  function t(e) {
    const n = [
      "bool",
      "byte",
      "char",
      "decimal",
      "delegate",
      "double",
      "dynamic",
      "enum",
      "float",
      "int",
      "long",
      "nint",
      "nuint",
      "object",
      "sbyte",
      "short",
      "string",
      "ulong",
      "uint",
      "ushort"
    ], r = [
      "public",
      "private",
      "protected",
      "static",
      "internal",
      "protected",
      "abstract",
      "async",
      "extern",
      "override",
      "unsafe",
      "virtual",
      "new",
      "sealed",
      "partial"
    ], a = [
      "default",
      "false",
      "null",
      "true"
    ], i = [
      "abstract",
      "as",
      "base",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "do",
      "else",
      "event",
      "explicit",
      "extern",
      "finally",
      "fixed",
      "for",
      "foreach",
      "goto",
      "if",
      "implicit",
      "in",
      "interface",
      "internal",
      "is",
      "lock",
      "namespace",
      "new",
      "operator",
      "out",
      "override",
      "params",
      "private",
      "protected",
      "public",
      "readonly",
      "record",
      "ref",
      "return",
      "scoped",
      "sealed",
      "sizeof",
      "stackalloc",
      "static",
      "struct",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "unchecked",
      "unsafe",
      "using",
      "virtual",
      "void",
      "volatile",
      "while"
    ], s = [
      "add",
      "alias",
      "and",
      "ascending",
      "async",
      "await",
      "by",
      "descending",
      "equals",
      "from",
      "get",
      "global",
      "group",
      "init",
      "into",
      "join",
      "let",
      "nameof",
      "not",
      "notnull",
      "on",
      "or",
      "orderby",
      "partial",
      "remove",
      "select",
      "set",
      "unmanaged",
      "value|0",
      "var",
      "when",
      "where",
      "with",
      "yield"
    ], l = {
      keyword: i.concat(s),
      built_in: n,
      literal: a
    }, c = e.inherit(e.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" }), d = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, p = {
      className: "string",
      begin: '@"',
      end: '"',
      contains: [{ begin: '""' }]
    }, _ = e.inherit(p, { illegal: /\n/ }), f = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: l
    }, g = e.inherit(f, { illegal: /\n/ }), E = {
      className: "string",
      begin: /\$"/,
      end: '"',
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        e.BACKSLASH_ESCAPE,
        g
      ]
    }, T = {
      className: "string",
      begin: /\$@"/,
      end: '"',
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        f
      ]
    }, R = e.inherit(T, {
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        g
      ]
    });
    f.contains = [
      T,
      E,
      p,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      d,
      e.C_BLOCK_COMMENT_MODE
    ], g.contains = [
      R,
      E,
      _,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      d,
      e.inherit(e.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
    ];
    const A = { variants: [
      T,
      E,
      p,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE
    ] }, I = {
      begin: "<",
      end: ">",
      contains: [
        { beginKeywords: "in out" },
        c
      ]
    }, x = e.IDENT_RE + "(<" + e.IDENT_RE + "(\\s*,\\s*" + e.IDENT_RE + ")*>)?(\\[\\])?", P = {
      // prevents expressions like `@class` from incorrect flagging
      // `class` as a keyword
      begin: "@" + e.IDENT_RE,
      relevance: 0
    };
    return {
      name: "C#",
      aliases: [
        "cs",
        "c#"
      ],
      keywords: l,
      illegal: /::/,
      contains: [
        e.COMMENT(
          "///",
          "$",
          {
            returnBegin: !0,
            contains: [
              {
                className: "doctag",
                variants: [
                  {
                    begin: "///",
                    relevance: 0
                  },
                  { begin: "<!--|-->" },
                  {
                    begin: "</?",
                    end: ">"
                  }
                ]
              }
            ]
          }
        ),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
        },
        A,
        d,
        {
          beginKeywords: "class interface",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:,]/,
          contains: [
            { beginKeywords: "where class" },
            c,
            I,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            c,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "record",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            c,
            I,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // [Attributes("")]
          className: "meta",
          begin: "^\\s*\\[(?=[\\w])",
          excludeBegin: !0,
          end: "\\]",
          excludeEnd: !0,
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new return throw await else",
          relevance: 0
        },
        {
          className: "function",
          begin: "(" + x + "\\s+)+" + e.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
          returnBegin: !0,
          end: /\s*[{;=]/,
          excludeEnd: !0,
          keywords: l,
          contains: [
            // prevents these from being highlighted `title`
            {
              beginKeywords: r.join(" "),
              relevance: 0
            },
            {
              begin: e.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
              returnBegin: !0,
              contains: [
                e.TITLE_MODE,
                I
              ],
              relevance: 0
            },
            { match: /\(\)/ },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0,
              keywords: l,
              relevance: 0,
              contains: [
                A,
                d,
                e.C_BLOCK_COMMENT_MODE
              ]
            },
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        P
      ]
    };
  }
  return lm = t, lm;
}
var cm, DR;
function FJ() {
  if (DR) return cm;
  DR = 1;
  function t(e) {
    return {
      name: "CSP",
      case_insensitive: !1,
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_-]*",
        keyword: [
          "base-uri",
          "child-src",
          "connect-src",
          "default-src",
          "font-src",
          "form-action",
          "frame-ancestors",
          "frame-src",
          "img-src",
          "manifest-src",
          "media-src",
          "object-src",
          "plugin-types",
          "report-uri",
          "sandbox",
          "script-src",
          "style-src",
          "trusted-types",
          "unsafe-hashes",
          "worker-src"
        ]
      },
      contains: [
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "attribute",
          begin: "^Content",
          end: ":",
          excludeEnd: !0
        }
      ]
    };
  }
  return cm = t, cm;
}
var um, wR;
function BJ() {
  if (wR) return um;
  wR = 1;
  const t = (l) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: l.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        l.APOS_STRING_MODE,
        l.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: l.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], r = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], a = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], i = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse();
  function s(l) {
    const c = l.regex, d = t(l), p = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ }, _ = "and or not only", f = /@-?\w[\w]*(-\w+)*/, g = "[a-zA-Z-][a-zA-Z0-9_-]*", E = [
      l.APOS_STRING_MODE,
      l.QUOTE_STRING_MODE
    ];
    return {
      name: "CSS",
      case_insensitive: !0,
      illegal: /[=|'\$]/,
      keywords: { keyframePosition: "from to" },
      classNameAliases: {
        // for visual continuity with `tag {}` and because we
        // don't have a great class for this?
        keyframePosition: "selector-tag"
      },
      contains: [
        d.BLOCK_COMMENT,
        p,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        d.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: /#[A-Za-z0-9_-]+/,
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\." + g,
          relevance: 0
        },
        d.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          variants: [
            { begin: ":(" + r.join("|") + ")" },
            { begin: ":(:)?(" + a.join("|") + ")" }
          ]
        },
        // we may actually need this (12/2020)
        // { // pseudo-selector params
        //   begin: /\(/,
        //   end: /\)/,
        //   contains: [ hljs.CSS_NUMBER_MODE ]
        // },
        d.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + i.join("|") + ")\\b"
        },
        // attribute values
        {
          begin: /:/,
          end: /[;}{]/,
          contains: [
            d.BLOCK_COMMENT,
            d.HEXCOLOR,
            d.IMPORTANT,
            d.CSS_NUMBER_MODE,
            ...E,
            // needed to highlight these as strings and to avoid issues with
            // illegal characters that might be inside urls that would tigger the
            // languages illegal stack
            {
              begin: /(url|data-uri)\(/,
              end: /\)/,
              relevance: 0,
              // from keywords
              keywords: { built_in: "url data-uri" },
              contains: [
                ...E,
                {
                  className: "string",
                  // any character other than `)` as in `url()` will be the start
                  // of a string, which ends with `)` (from the parent mode)
                  begin: /[^)]/,
                  endsWithParent: !0,
                  excludeEnd: !0
                }
              ]
            },
            d.FUNCTION_DISPATCH
          ]
        },
        {
          begin: c.lookahead(/@/),
          end: "[{;]",
          relevance: 0,
          illegal: /:/,
          // break on Less variables @var: ...
          contains: [
            {
              className: "keyword",
              begin: f
            },
            {
              begin: /\s/,
              endsWithParent: !0,
              excludeEnd: !0,
              relevance: 0,
              keywords: {
                $pattern: /[a-z-]+/,
                keyword: _,
                attribute: n.join(" ")
              },
              contains: [
                {
                  begin: /[a-z-]+(?=:)/,
                  className: "attribute"
                },
                ...E,
                d.CSS_NUMBER_MODE
              ]
            }
          ]
        },
        {
          className: "selector-tag",
          begin: "\\b(" + e.join("|") + ")\\b"
        }
      ]
    };
  }
  return um = s, um;
}
var dm, LR;
function UJ() {
  if (LR) return dm;
  LR = 1;
  function t(e) {
    const n = {
      $pattern: e.UNDERSCORE_IDENT_RE,
      keyword: "abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",
      built_in: "bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",
      literal: "false null true"
    }, r = "(0|[1-9][\\d_]*)", a = "(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)", i = "0[bB][01_]+", s = "([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)", l = "0[xX]" + s, c = "([eE][+-]?" + a + ")", d = "(" + a + "(\\.\\d*|" + c + ")|\\d+\\." + a + "|\\." + r + c + "?)", p = "(0[xX](" + s + "\\." + s + "|\\.?" + s + ")[pP][+-]?" + a + ")", _ = "(" + r + "|" + i + "|" + l + ")", f = "(" + p + "|" + d + ")", g = `\\\\(['"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};`, E = {
      className: "number",
      begin: "\\b" + _ + "(L|u|U|Lu|LU|uL|UL)?",
      relevance: 0
    }, T = {
      className: "number",
      begin: "\\b(" + f + "([fF]|L|i|[fF]i|Li)?|" + _ + "(i|[fF]i|Li))",
      relevance: 0
    }, R = {
      className: "string",
      begin: "'(" + g + "|.)",
      end: "'",
      illegal: "."
    }, I = {
      className: "string",
      begin: '"',
      contains: [{
        begin: g,
        relevance: 0
      }],
      end: '"[cwd]?'
    }, x = {
      className: "string",
      begin: '[rq]"',
      end: '"[cwd]?',
      relevance: 5
    }, P = {
      className: "string",
      begin: "`",
      end: "`[cwd]?"
    }, D = {
      className: "string",
      begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
      relevance: 10
    }, L = {
      className: "string",
      begin: 'q"\\{',
      end: '\\}"'
    }, K = {
      className: "meta",
      begin: "^#!",
      end: "$",
      relevance: 5
    }, J = {
      className: "meta",
      begin: "#(line)",
      end: "$",
      relevance: 5
    }, X = {
      className: "keyword",
      begin: "@[a-zA-Z_][a-zA-Z_\\d]*"
    }, $ = e.COMMENT(
      "\\/\\+",
      "\\+\\/",
      {
        contains: ["self"],
        relevance: 10
      }
    );
    return {
      name: "D",
      keywords: n,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        $,
        D,
        I,
        x,
        P,
        L,
        T,
        E,
        R,
        K,
        J,
        X
      ]
    };
  }
  return dm = t, dm;
}
var pm, MR;
function GJ() {
  if (MR) return pm;
  MR = 1;
  function t(e) {
    const n = e.regex, r = {
      begin: /<\/?[A-Za-z_]/,
      end: ">",
      subLanguage: "xml",
      relevance: 0
    }, a = {
      begin: "^[-\\*]{3,}",
      end: "$"
    }, i = {
      className: "code",
      variants: [
        // TODO: fix to allow these to work with sublanguage also
        { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
        { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
        // needed to allow markdown as a sublanguage to work
        {
          begin: "```",
          end: "```+[ ]*$"
        },
        {
          begin: "~~~",
          end: "~~~+[ ]*$"
        },
        { begin: "`.+?`" },
        {
          begin: "(?=^( {4}|\\t))",
          // use contains to gobble up multiple lines to allow the block to be whatever size
          // but only have a single open/close tag vs one per line
          contains: [
            {
              begin: "^( {4}|\\t)",
              end: "(\\n)$"
            }
          ],
          relevance: 0
        }
      ]
    }, s = {
      className: "bullet",
      begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
      end: "\\s+",
      excludeEnd: !0
    }, l = {
      begin: /^\[[^\n]+\]:/,
      returnBegin: !0,
      contains: [
        {
          className: "symbol",
          begin: /\[/,
          end: /\]/,
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "link",
          begin: /:\s*/,
          end: /$/,
          excludeBegin: !0
        }
      ]
    }, c = /[A-Za-z][A-Za-z0-9+.-]*/, d = {
      variants: [
        // too much like nested array access in so many languages
        // to have any real relevance
        {
          begin: /\[.+?\]\[.*?\]/,
          relevance: 0
        },
        // popular internet URLs
        {
          begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
          relevance: 2
        },
        {
          begin: n.concat(/\[.+?\]\(/, c, /:\/\/.*?\)/),
          relevance: 2
        },
        // relative urls
        {
          begin: /\[.+?\]\([./?&#].*?\)/,
          relevance: 1
        },
        // whatever else, lower relevance (might not be a link at all)
        {
          begin: /\[.*?\]\(.*?\)/,
          relevance: 0
        }
      ],
      returnBegin: !0,
      contains: [
        {
          // empty strings for alt or link text
          match: /\[(?=\])/
        },
        {
          className: "string",
          relevance: 0,
          begin: "\\[",
          end: "\\]",
          excludeBegin: !0,
          returnEnd: !0
        },
        {
          className: "link",
          relevance: 0,
          begin: "\\]\\(",
          end: "\\)",
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "symbol",
          relevance: 0,
          begin: "\\]\\[",
          end: "\\]",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    }, p = {
      className: "strong",
      contains: [],
      // defined later
      variants: [
        {
          begin: /_{2}(?!\s)/,
          end: /_{2}/
        },
        {
          begin: /\*{2}(?!\s)/,
          end: /\*{2}/
        }
      ]
    }, _ = {
      className: "emphasis",
      contains: [],
      // defined later
      variants: [
        {
          begin: /\*(?![*\s])/,
          end: /\*/
        },
        {
          begin: /_(?![_\s])/,
          end: /_/,
          relevance: 0
        }
      ]
    }, f = e.inherit(p, { contains: [] }), g = e.inherit(_, { contains: [] });
    p.contains.push(g), _.contains.push(f);
    let E = [
      r,
      d
    ];
    return [
      p,
      _,
      f,
      g
    ].forEach((A) => {
      A.contains = A.contains.concat(E);
    }), E = E.concat(p, _), {
      name: "Markdown",
      aliases: [
        "md",
        "mkdown",
        "mkd"
      ],
      contains: [
        {
          className: "section",
          variants: [
            {
              begin: "^#{1,6}",
              end: "$",
              contains: E
            },
            {
              begin: "(?=^.+?\\n[=-]{2,}$)",
              contains: [
                { begin: "^[=-]*$" },
                {
                  begin: "^",
                  end: "\\n",
                  contains: E
                }
              ]
            }
          ]
        },
        r,
        s,
        p,
        _,
        {
          className: "quote",
          begin: "^>\\s+",
          contains: E,
          end: "$"
        },
        i,
        a,
        d,
        l
      ]
    };
  }
  return pm = t, pm;
}
var _m, kR;
function HJ() {
  if (kR) return _m;
  kR = 1;
  function t(e) {
    const n = {
      className: "subst",
      variants: [{ begin: "\\$[A-Za-z0-9_]+" }]
    }, r = {
      className: "subst",
      variants: [
        {
          begin: /\$\{/,
          end: /\}/
        }
      ],
      keywords: "true false null this is new super"
    }, a = {
      className: "string",
      variants: [
        {
          begin: "r'''",
          end: "'''"
        },
        {
          begin: 'r"""',
          end: '"""'
        },
        {
          begin: "r'",
          end: "'",
          illegal: "\\n"
        },
        {
          begin: 'r"',
          end: '"',
          illegal: "\\n"
        },
        {
          begin: "'''",
          end: "'''",
          contains: [
            e.BACKSLASH_ESCAPE,
            n,
            r
          ]
        },
        {
          begin: '"""',
          end: '"""',
          contains: [
            e.BACKSLASH_ESCAPE,
            n,
            r
          ]
        },
        {
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [
            e.BACKSLASH_ESCAPE,
            n,
            r
          ]
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [
            e.BACKSLASH_ESCAPE,
            n,
            r
          ]
        }
      ]
    };
    r.contains = [
      e.C_NUMBER_MODE,
      a
    ];
    const i = [
      // dart:core
      "Comparable",
      "DateTime",
      "Duration",
      "Function",
      "Iterable",
      "Iterator",
      "List",
      "Map",
      "Match",
      "Object",
      "Pattern",
      "RegExp",
      "Set",
      "Stopwatch",
      "String",
      "StringBuffer",
      "StringSink",
      "Symbol",
      "Type",
      "Uri",
      "bool",
      "double",
      "int",
      "num",
      // dart:html
      "Element",
      "ElementList"
    ], s = i.map((d) => `${d}?`);
    return {
      name: "Dart",
      keywords: {
        keyword: [
          "abstract",
          "as",
          "assert",
          "async",
          "await",
          "base",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "covariant",
          "default",
          "deferred",
          "do",
          "dynamic",
          "else",
          "enum",
          "export",
          "extends",
          "extension",
          "external",
          "factory",
          "false",
          "final",
          "finally",
          "for",
          "Function",
          "get",
          "hide",
          "if",
          "implements",
          "import",
          "in",
          "interface",
          "is",
          "late",
          "library",
          "mixin",
          "new",
          "null",
          "on",
          "operator",
          "part",
          "required",
          "rethrow",
          "return",
          "sealed",
          "set",
          "show",
          "static",
          "super",
          "switch",
          "sync",
          "this",
          "throw",
          "true",
          "try",
          "typedef",
          "var",
          "void",
          "when",
          "while",
          "with",
          "yield"
        ],
        built_in: i.concat(s).concat([
          // dart:core
          "Never",
          "Null",
          "dynamic",
          "print",
          // dart:html
          "document",
          "querySelector",
          "querySelectorAll",
          "window"
        ]),
        $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
      },
      contains: [
        a,
        e.COMMENT(
          /\/\*\*(?!\/)/,
          /\*\//,
          {
            subLanguage: "markdown",
            relevance: 0
          }
        ),
        e.COMMENT(
          /\/{3,} ?/,
          /$/,
          { contains: [
            {
              subLanguage: "markdown",
              begin: ".",
              end: "$",
              relevance: 0
            }
          ] }
        ),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: !0,
          contains: [
            { beginKeywords: "extends implements" },
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        },
        {
          begin: "=>"
          // No markup, just a relevance booster
        }
      ]
    };
  }
  return _m = t, _m;
}
var mm, PR;
function YJ() {
  if (PR) return mm;
  PR = 1;
  function t(e) {
    const n = [
      "exports",
      "register",
      "file",
      "shl",
      "array",
      "record",
      "property",
      "for",
      "mod",
      "while",
      "set",
      "ally",
      "label",
      "uses",
      "raise",
      "not",
      "stored",
      "class",
      "safecall",
      "var",
      "interface",
      "or",
      "private",
      "static",
      "exit",
      "index",
      "inherited",
      "to",
      "else",
      "stdcall",
      "override",
      "shr",
      "asm",
      "far",
      "resourcestring",
      "finalization",
      "packed",
      "virtual",
      "out",
      "and",
      "protected",
      "library",
      "do",
      "xorwrite",
      "goto",
      "near",
      "function",
      "end",
      "div",
      "overload",
      "object",
      "unit",
      "begin",
      "string",
      "on",
      "inline",
      "repeat",
      "until",
      "destructor",
      "write",
      "message",
      "program",
      "with",
      "read",
      "initialization",
      "except",
      "default",
      "nil",
      "if",
      "case",
      "cdecl",
      "in",
      "downto",
      "threadvar",
      "of",
      "try",
      "pascal",
      "const",
      "external",
      "constructor",
      "type",
      "public",
      "then",
      "implementation",
      "finally",
      "published",
      "procedure",
      "absolute",
      "reintroduce",
      "operator",
      "as",
      "is",
      "abstract",
      "alias",
      "assembler",
      "bitpacked",
      "break",
      "continue",
      "cppdecl",
      "cvar",
      "enumerator",
      "experimental",
      "platform",
      "deprecated",
      "unimplemented",
      "dynamic",
      "export",
      "far16",
      "forward",
      "generic",
      "helper",
      "implements",
      "interrupt",
      "iochecks",
      "local",
      "name",
      "nodefault",
      "noreturn",
      "nostackframe",
      "oldfpccall",
      "otherwise",
      "saveregisters",
      "softfloat",
      "specialize",
      "strict",
      "unaligned",
      "varargs"
    ], r = [
      e.C_LINE_COMMENT_MODE,
      e.COMMENT(/\{/, /\}/, { relevance: 0 }),
      e.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
    ], a = {
      className: "meta",
      variants: [
        {
          begin: /\{\$/,
          end: /\}/
        },
        {
          begin: /\(\*\$/,
          end: /\*\)/
        }
      ]
    }, i = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    }, s = {
      className: "number",
      relevance: 0,
      // Source: https://www.freepascal.org/docs-html/ref/refse6.html
      variants: [
        {
          // Hexadecimal notation, e.g., $7F.
          begin: "\\$[0-9A-Fa-f]+"
        },
        {
          // Octal notation, e.g., &42.
          begin: "&[0-7]+"
        },
        {
          // Binary notation, e.g., %1010.
          begin: "%[01]+"
        }
      ]
    }, l = {
      className: "string",
      begin: /(#\d+)+/
    }, c = {
      begin: e.IDENT_RE + "\\s*=\\s*class\\s*\\(",
      returnBegin: !0,
      contains: [e.TITLE_MODE]
    }, d = {
      className: "function",
      beginKeywords: "function constructor destructor procedure",
      end: /[:;]/,
      keywords: "function constructor|10 destructor|10 procedure|10",
      contains: [
        e.TITLE_MODE,
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: n,
          contains: [
            i,
            l,
            a
          ].concat(r)
        },
        a
      ].concat(r)
    };
    return {
      name: "Delphi",
      aliases: [
        "dpr",
        "dfm",
        "pas",
        "pascal"
      ],
      case_insensitive: !0,
      keywords: n,
      illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
      contains: [
        i,
        l,
        e.NUMBER_MODE,
        s,
        c,
        d,
        a
      ].concat(r)
    };
  }
  return mm = t, mm;
}
var fm, FR;
function zJ() {
  if (FR) return fm;
  FR = 1;
  function t(e) {
    const n = e.regex;
    return {
      name: "Diff",
      aliases: ["patch"],
      contains: [
        {
          className: "meta",
          relevance: 10,
          match: n.either(
            /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
            /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
            /^--- +\d+,\d+ +----$/
          )
        },
        {
          className: "comment",
          variants: [
            {
              begin: n.either(
                /Index: /,
                /^index/,
                /={3,}/,
                /^-{3}/,
                /^\*{3} /,
                /^\+{3}/,
                /^diff --git/
              ),
              end: /$/
            },
            { match: /^\*{15}$/ }
          ]
        },
        {
          className: "addition",
          begin: /^\+/,
          end: /$/
        },
        {
          className: "deletion",
          begin: /^-/,
          end: /$/
        },
        {
          className: "addition",
          begin: /^!/,
          end: /$/
        }
      ]
    };
  }
  return fm = t, fm;
}
var gm, BR;
function qJ() {
  if (BR) return gm;
  BR = 1;
  function t(e) {
    const n = {
      begin: /\|[A-Za-z]+:?/,
      keywords: { name: "truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone" },
      contains: [
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE
      ]
    };
    return {
      name: "Django",
      aliases: ["jinja"],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        e.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
        e.COMMENT(/\{#/, /#\}/),
        {
          className: "template-tag",
          begin: /\{%/,
          end: /%\}/,
          contains: [
            {
              className: "name",
              begin: /\w+/,
              keywords: { name: "comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim" },
              starts: {
                endsWithParent: !0,
                keywords: "in by as",
                contains: [n],
                relevance: 0
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [n]
        }
      ]
    };
  }
  return gm = t, gm;
}
var hm, UR;
function VJ() {
  if (UR) return hm;
  UR = 1;
  function t(e) {
    return {
      name: "DNS Zone",
      aliases: [
        "bind",
        "zone"
      ],
      keywords: [
        "IN",
        "A",
        "AAAA",
        "AFSDB",
        "APL",
        "CAA",
        "CDNSKEY",
        "CDS",
        "CERT",
        "CNAME",
        "DHCID",
        "DLV",
        "DNAME",
        "DNSKEY",
        "DS",
        "HIP",
        "IPSECKEY",
        "KEY",
        "KX",
        "LOC",
        "MX",
        "NAPTR",
        "NS",
        "NSEC",
        "NSEC3",
        "NSEC3PARAM",
        "PTR",
        "RRSIG",
        "RP",
        "SIG",
        "SOA",
        "SRV",
        "SSHFP",
        "TA",
        "TKEY",
        "TLSA",
        "TSIG",
        "TXT"
      ],
      contains: [
        e.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "meta",
          begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
        },
        // IPv6
        {
          className: "number",
          begin: "((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"
        },
        // IPv4
        {
          className: "number",
          begin: "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"
        },
        e.inherit(e.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
      ]
    };
  }
  return hm = t, hm;
}
var Em, GR;
function $J() {
  if (GR) return Em;
  GR = 1;
  function t(e) {
    return {
      name: "Dockerfile",
      aliases: ["docker"],
      case_insensitive: !0,
      keywords: [
        "from",
        "maintainer",
        "expose",
        "env",
        "arg",
        "user",
        "onbuild",
        "stopsignal"
      ],
      contains: [
        e.HASH_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        {
          beginKeywords: "run cmd entrypoint volume add copy workdir label healthcheck shell",
          starts: {
            end: /[^\\]$/,
            subLanguage: "bash"
          }
        }
      ],
      illegal: "</"
    };
  }
  return Em = t, Em;
}
var Sm, HR;
function WJ() {
  if (HR) return Sm;
  HR = 1;
  function t(e) {
    const n = e.COMMENT(
      /^\s*@?rem\b/,
      /$/,
      { relevance: 10 }
    );
    return {
      name: "Batch file (DOS)",
      aliases: [
        "bat",
        "cmd"
      ],
      case_insensitive: !0,
      illegal: /\/\*/,
      keywords: {
        keyword: [
          "if",
          "else",
          "goto",
          "for",
          "in",
          "do",
          "call",
          "exit",
          "not",
          "exist",
          "errorlevel",
          "defined",
          "equ",
          "neq",
          "lss",
          "leq",
          "gtr",
          "geq"
        ],
        built_in: [
          "prn",
          "nul",
          "lpt3",
          "lpt2",
          "lpt1",
          "con",
          "com4",
          "com3",
          "com2",
          "com1",
          "aux",
          "shift",
          "cd",
          "dir",
          "echo",
          "setlocal",
          "endlocal",
          "set",
          "pause",
          "copy",
          "append",
          "assoc",
          "at",
          "attrib",
          "break",
          "cacls",
          "cd",
          "chcp",
          "chdir",
          "chkdsk",
          "chkntfs",
          "cls",
          "cmd",
          "color",
          "comp",
          "compact",
          "convert",
          "date",
          "dir",
          "diskcomp",
          "diskcopy",
          "doskey",
          "erase",
          "fs",
          "find",
          "findstr",
          "format",
          "ftype",
          "graftabl",
          "help",
          "keyb",
          "label",
          "md",
          "mkdir",
          "mode",
          "more",
          "move",
          "path",
          "pause",
          "print",
          "popd",
          "pushd",
          "promt",
          "rd",
          "recover",
          "rem",
          "rename",
          "replace",
          "restore",
          "rmdir",
          "shift",
          "sort",
          "start",
          "subst",
          "time",
          "title",
          "tree",
          "type",
          "ver",
          "verify",
          "vol",
          // winutils
          "ping",
          "net",
          "ipconfig",
          "taskkill",
          "xcopy",
          "ren",
          "del"
        ]
      },
      contains: [
        {
          className: "variable",
          begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
        },
        {
          className: "function",
          begin: {
            className: "symbol",
            begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)",
            relevance: 0
          }.begin,
          end: "goto:eof",
          contains: [
            e.inherit(e.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            n
          ]
        },
        {
          className: "number",
          begin: "\\b\\d+",
          relevance: 0
        },
        n
      ]
    };
  }
  return Sm = t, Sm;
}
var bm, YR;
function KJ() {
  if (YR) return bm;
  YR = 1;
  function t(e) {
    return {
      keywords: "dsconfig",
      contains: [
        {
          className: "keyword",
          begin: "^dsconfig",
          end: /\s/,
          excludeEnd: !0,
          relevance: 10
        },
        {
          className: "built_in",
          begin: /(list|create|get|set|delete)-(\w+)/,
          end: /\s/,
          excludeEnd: !0,
          illegal: "!@#$%^&*()",
          relevance: 10
        },
        {
          className: "built_in",
          begin: /--(\w+)/,
          end: /\s/,
          excludeEnd: !0
        },
        {
          className: "string",
          begin: /"/,
          end: /"/
        },
        {
          className: "string",
          begin: /'/,
          end: /'/
        },
        {
          className: "string",
          begin: /[\w\-?]+:\w+/,
          end: /\W/,
          relevance: 0
        },
        {
          className: "string",
          begin: /\w+(\-\w+)*/,
          end: /(?=\W)/,
          relevance: 0
        },
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return bm = t, bm;
}
var Tm, zR;
function QJ() {
  if (zR) return Tm;
  zR = 1;
  function t(e) {
    const n = {
      className: "string",
      variants: [
        e.inherit(e.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
        {
          begin: '(u8?|U)?R"',
          end: '"',
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: "'\\\\?.",
          end: "'",
          illegal: "."
        }
      ]
    }, r = {
      className: "number",
      variants: [
        { begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)" },
        { begin: e.C_NUMBER_RE }
      ],
      relevance: 0
    }, a = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "if else elif endif define undef ifdef ifndef" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            e.inherit(n, { className: "string" }),
            {
              className: "string",
              begin: "<",
              end: ">",
              illegal: "\\n"
            }
          ]
        },
        n,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    }, i = {
      className: "variable",
      begin: /&[a-z\d_]*\b/
    }, s = {
      className: "keyword",
      begin: "/[a-z][a-z\\d-]*/"
    }, l = {
      className: "symbol",
      begin: "^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"
    }, c = {
      className: "params",
      relevance: 0,
      begin: "<",
      end: ">",
      contains: [
        r,
        i
      ]
    }, d = {
      className: "title.class",
      begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
      relevance: 0.2
    }, p = {
      className: "title.class",
      begin: /^\/(?=\s*\{)/,
      relevance: 10
    }, _ = {
      match: /[a-z][a-z-,]+(?=;)/,
      relevance: 0,
      scope: "attr"
    }, f = {
      relevance: 0,
      match: [
        /[a-z][a-z-,]+/,
        /\s*/,
        /=/
      ],
      scope: {
        1: "attr",
        3: "operator"
      }
    }, g = {
      scope: "punctuation",
      relevance: 0,
      // `};` combined is just to avoid tons of useless punctuation nodes
      match: /\};|[;{}]/
    };
    return {
      name: "Device Tree",
      contains: [
        p,
        i,
        s,
        l,
        d,
        f,
        _,
        c,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        r,
        n,
        a,
        g,
        {
          begin: e.IDENT_RE + "::",
          keywords: ""
        }
      ]
    };
  }
  return Tm = t, Tm;
}
var ym, qR;
function jJ() {
  if (qR) return ym;
  qR = 1;
  function t(e) {
    return {
      name: "Dust",
      aliases: ["dst"],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        {
          className: "template-tag",
          begin: /\{[#\/]/,
          end: /\}/,
          illegal: /;/,
          contains: [
            {
              className: "name",
              begin: /[a-zA-Z\.-]+/,
              starts: {
                endsWithParent: !0,
                relevance: 0,
                contains: [e.QUOTE_STRING_MODE]
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{/,
          end: /\}/,
          illegal: /;/,
          keywords: "if eq ne lt lte gt gte select default math sep"
        }
      ]
    };
  }
  return ym = t, ym;
}
var vm, VR;
function XJ() {
  if (VR) return vm;
  VR = 1;
  function t(e) {
    const n = e.COMMENT(/\(\*/, /\*\)/), r = {
      className: "attribute",
      begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
    }, i = {
      begin: /=/,
      end: /[.;]/,
      contains: [
        n,
        {
          className: "meta",
          begin: /\?.*\?/
        },
        {
          // terminals
          className: "string",
          variants: [
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        }
      ]
    };
    return {
      name: "Extended Backus-Naur Form",
      illegal: /\S/,
      contains: [
        n,
        r,
        i
      ]
    };
  }
  return vm = t, vm;
}
var Cm, $R;
function ZJ() {
  if ($R) return Cm;
  $R = 1;
  function t(e) {
    const n = e.regex, r = "[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?", a = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?", l = {
      $pattern: r,
      keyword: [
        "after",
        "alias",
        "and",
        "case",
        "catch",
        "cond",
        "defstruct",
        "defguard",
        "do",
        "else",
        "end",
        "fn",
        "for",
        "if",
        "import",
        "in",
        "not",
        "or",
        "quote",
        "raise",
        "receive",
        "require",
        "reraise",
        "rescue",
        "try",
        "unless",
        "unquote",
        "unquote_splicing",
        "use",
        "when",
        "with|0"
      ],
      literal: [
        "false",
        "nil",
        "true"
      ]
    }, c = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: l
    }, d = {
      className: "number",
      begin: "(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",
      relevance: 0
    }, _ = {
      match: /\\[\s\S]/,
      scope: "char.escape",
      relevance: 0
    }, f = `[/|([{<"']`, g = [
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /\//,
        end: /\//
      },
      {
        begin: /\|/,
        end: /\|/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        begin: /\[/,
        end: /\]/
      },
      {
        begin: /\{/,
        end: /\}/
      },
      {
        begin: /</,
        end: />/
      }
    ], E = (L) => ({
      scope: "char.escape",
      begin: n.concat(/\\/, L),
      relevance: 0
    }), T = {
      className: "string",
      begin: "~[a-z](?=" + f + ")",
      contains: g.map((L) => e.inherit(
        L,
        { contains: [
          E(L.end),
          _,
          c
        ] }
      ))
    }, R = {
      className: "string",
      begin: "~[A-Z](?=" + f + ")",
      contains: g.map((L) => e.inherit(
        L,
        { contains: [E(L.end)] }
      ))
    }, A = {
      className: "regex",
      variants: [
        {
          begin: "~r(?=" + f + ")",
          contains: g.map((L) => e.inherit(
            L,
            {
              end: n.concat(L.end, /[uismxfU]{0,7}/),
              contains: [
                E(L.end),
                _,
                c
              ]
            }
          ))
        },
        {
          begin: "~R(?=" + f + ")",
          contains: g.map(
            (L) => e.inherit(
              L,
              {
                end: n.concat(L.end, /[uismxfU]{0,7}/),
                contains: [E(L.end)]
              }
            )
          )
        }
      ]
    }, I = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        c
      ],
      variants: [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: /~S"""/,
          end: /"""/,
          contains: []
          // override default
        },
        {
          begin: /~S"/,
          end: /"/,
          contains: []
          // override default
        },
        {
          begin: /~S'''/,
          end: /'''/,
          contains: []
          // override default
        },
        {
          begin: /~S'/,
          end: /'/,
          contains: []
          // override default
        },
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    }, x = {
      className: "function",
      beginKeywords: "def defp defmacro defmacrop",
      end: /\B\b/,
      // the mode is ended by the title
      contains: [
        e.inherit(e.TITLE_MODE, {
          begin: r,
          endsParent: !0
        })
      ]
    }, P = e.inherit(x, {
      className: "class",
      beginKeywords: "defimpl defmodule defprotocol defrecord",
      end: /\bdo\b|$|;/
    }), D = [
      I,
      A,
      R,
      T,
      e.HASH_COMMENT_MODE,
      P,
      x,
      { begin: "::" },
      {
        className: "symbol",
        begin: ":(?![\\s:])",
        contains: [
          I,
          { begin: a }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        begin: r + ":(?!:)",
        relevance: 0
      },
      {
        // Usage of a module, struct, etc.
        className: "title.class",
        begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
        relevance: 0
      },
      d,
      {
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))"
      }
      // -> has been removed, capnproto always uses this grammar construct
    ];
    return c.contains = D, {
      name: "Elixir",
      aliases: [
        "ex",
        "exs"
      ],
      keywords: l,
      contains: D
    };
  }
  return Cm = t, Cm;
}
var Rm, WR;
function JJ() {
  if (WR) return Rm;
  WR = 1;
  function t(e) {
    const n = { variants: [
      e.COMMENT("--", "$"),
      e.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] }, r = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (built-in, infix).
      relevance: 0
    }, a = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        n
      ]
    }, i = {
      begin: /\{/,
      end: /\}/,
      contains: a.contains
    }, s = {
      className: "string",
      begin: "'\\\\?.",
      end: "'",
      illegal: "."
    };
    return {
      name: "Elm",
      keywords: [
        "let",
        "in",
        "if",
        "then",
        "else",
        "case",
        "of",
        "where",
        "module",
        "import",
        "exposing",
        "type",
        "alias",
        "as",
        "infix",
        "infixl",
        "infixr",
        "port",
        "effect",
        "command",
        "subscription"
      ],
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "port effect module",
          end: "exposing",
          keywords: "port effect module where command subscription exposing",
          contains: [
            a,
            n
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "import",
          end: "$",
          keywords: "import as exposing",
          contains: [
            a,
            n
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "type",
          end: "$",
          keywords: "type alias",
          contains: [
            r,
            a,
            i,
            n
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            e.C_NUMBER_MODE,
            n
          ]
        },
        {
          begin: "port",
          end: "$",
          keywords: "port",
          contains: [n]
        },
        // Literals and names.
        s,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        r,
        e.inherit(e.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        n,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ],
      illegal: /;/
    };
  }
  return Rm = t, Rm;
}
var Am, KR;
function eee() {
  if (KR) return Am;
  KR = 1;
  function t(e) {
    const n = e.regex, r = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)", a = n.either(
      /\b([A-Z]+[a-z0-9]+)+/,
      // ends in caps
      /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
    ), i = n.concat(a, /(::\w+)*/), l = {
      "variable.constant": [
        "__FILE__",
        "__LINE__",
        "__ENCODING__"
      ],
      "variable.language": [
        "self",
        "super"
      ],
      keyword: [
        "alias",
        "and",
        "begin",
        "BEGIN",
        "break",
        "case",
        "class",
        "defined",
        "do",
        "else",
        "elsif",
        "end",
        "END",
        "ensure",
        "for",
        "if",
        "in",
        "module",
        "next",
        "not",
        "or",
        "redo",
        "require",
        "rescue",
        "retry",
        "return",
        "then",
        "undef",
        "unless",
        "until",
        "when",
        "while",
        "yield",
        ...[
          "include",
          "extend",
          "prepend",
          "public",
          "private",
          "protected",
          "raise",
          "throw"
        ]
      ],
      built_in: [
        "proc",
        "lambda",
        "attr_accessor",
        "attr_reader",
        "attr_writer",
        "define_method",
        "private_constant",
        "module_function"
      ],
      literal: [
        "true",
        "false",
        "nil"
      ]
    }, c = {
      className: "doctag",
      begin: "@[A-Za-z]+"
    }, d = {
      begin: "#<",
      end: ">"
    }, p = [
      e.COMMENT(
        "#",
        "$",
        { contains: [c] }
      ),
      e.COMMENT(
        "^=begin",
        "^=end",
        {
          contains: [c],
          relevance: 10
        }
      ),
      e.COMMENT("^__END__", e.MATCH_NOTHING_RE)
    ], _ = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: l
    }, f = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        _
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: /%[qQwWx]?\(/,
          end: /\)/
        },
        {
          begin: /%[qQwWx]?\[/,
          end: /\]/
        },
        {
          begin: /%[qQwWx]?\{/,
          end: /\}/
        },
        {
          begin: /%[qQwWx]?</,
          end: />/
        },
        {
          begin: /%[qQwWx]?\//,
          end: /\//
        },
        {
          begin: /%[qQwWx]?%/,
          end: /%/
        },
        {
          begin: /%[qQwWx]?-/,
          end: /-/
        },
        {
          begin: /%[qQwWx]?\|/,
          end: /\|/
        },
        // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
        // where ? is the last character of a preceding identifier, as in: `func?4`
        { begin: /\B\?(\\\d{1,3})/ },
        { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
        { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
        { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
        { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
        { begin: /\B\?\\?\S/ },
        // heredocs
        {
          // this guard makes sure that we have an entire heredoc and not a false
          // positive (auto-detect, etc.)
          begin: n.concat(
            /<<[-~]?'?/,
            n.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
          ),
          contains: [
            e.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              contains: [
                e.BACKSLASH_ESCAPE,
                _
              ]
            })
          ]
        }
      ]
    }, g = "[1-9](_?[0-9])*|0", E = "[0-9](_?[0-9])*", T = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal integer/float, optionally exponential or rational, optionally imaginary
        { begin: `\\b(${g})(\\.(${E}))?([eE][+-]?(${E})|r)?i?\\b` },
        // explicit decimal/binary/octal/hexadecimal integer,
        // optionally rational and/or imaginary
        { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
        // 0-prefixed implicit octal integer, optionally rational and/or imaginary
        { begin: "\\b0(_?[0-7])+r?i?\\b" }
      ]
    }, R = {
      variants: [
        {
          match: /\(\)/
        },
        {
          className: "params",
          begin: /\(/,
          end: /(?=\))/,
          excludeBegin: !0,
          endsParent: !0,
          keywords: l
        }
      ]
    }, K = [
      f,
      {
        variants: [
          {
            match: [
              /class\s+/,
              i,
              /\s+<\s+/,
              i
            ]
          },
          {
            match: [
              /\b(class|module)\s+/,
              i
            ]
          }
        ],
        scope: {
          2: "title.class",
          4: "title.class.inherited"
        },
        keywords: l
      },
      {
        match: [
          /(include|extend)\s+/,
          i
        ],
        scope: {
          2: "title.class"
        },
        keywords: l
      },
      {
        relevance: 0,
        match: [
          i,
          /\.new[. (]/
        ],
        scope: {
          1: "title.class"
        }
      },
      {
        relevance: 0,
        match: /\b[A-Z][A-Z_0-9]+\b/,
        className: "variable.constant"
      },
      {
        relevance: 0,
        match: a,
        scope: "title.class"
      },
      {
        match: [
          /def/,
          /\s+/,
          r
        ],
        scope: {
          1: "keyword",
          3: "title.function"
        },
        contains: [
          R
        ]
      },
      {
        // swallow namespace qualifiers before symbols
        begin: e.IDENT_RE + "::"
      },
      {
        className: "symbol",
        begin: e.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":(?!\\s)",
        contains: [
          f,
          { begin: r }
        ],
        relevance: 0
      },
      T,
      {
        // negative-look forward attempts to prevent false matches like:
        // @ident@ or $ident$ that might indicate this is not ruby at all
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
      },
      {
        className: "params",
        begin: /\|/,
        end: /\|/,
        excludeBegin: !0,
        excludeEnd: !0,
        relevance: 0,
        // this could be a lot of things (in other languages) other than params
        keywords: l
      },
      {
        // regexp container
        begin: "(" + e.RE_STARTERS_RE + "|unless)\\s*",
        keywords: "unless",
        contains: [
          {
            className: "regexp",
            contains: [
              e.BACKSLASH_ESCAPE,
              _
            ],
            illegal: /\n/,
            variants: [
              {
                begin: "/",
                end: "/[a-z]*"
              },
              {
                begin: /%r\{/,
                end: /\}[a-z]*/
              },
              {
                begin: "%r\\(",
                end: "\\)[a-z]*"
              },
              {
                begin: "%r!",
                end: "![a-z]*"
              },
              {
                begin: "%r\\[",
                end: "\\][a-z]*"
              }
            ]
          }
        ].concat(d, p),
        relevance: 0
      }
    ].concat(d, p);
    _.contains = K, R.contains = K;
    const ae = [
      {
        begin: /^\s*=>/,
        starts: {
          end: "$",
          contains: K
        }
      },
      {
        className: "meta.prompt",
        begin: "^(" + "[>?]>" + "|" + "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]" + "|" + "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>" + ")(?=[ ])",
        starts: {
          end: "$",
          keywords: l,
          contains: K
        }
      }
    ];
    return p.unshift(d), {
      name: "Ruby",
      aliases: [
        "rb",
        "gemspec",
        "podspec",
        "thor",
        "irb"
      ],
      keywords: l,
      illegal: /\/\*/,
      contains: [e.SHEBANG({ binary: "ruby" })].concat(ae).concat(p).concat(K)
    };
  }
  return Am = t, Am;
}
var Om, QR;
function tee() {
  if (QR) return Om;
  QR = 1;
  function t(e) {
    return {
      name: "ERB",
      subLanguage: "xml",
      contains: [
        e.COMMENT("<%#", "%>"),
        {
          begin: "<%[%=-]?",
          end: "[%-]?%>",
          subLanguage: "ruby",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    };
  }
  return Om = t, Om;
}
var Nm, jR;
function nee() {
  if (jR) return Nm;
  jR = 1;
  function t(e) {
    const n = e.regex;
    return {
      name: "Erlang REPL",
      keywords: {
        built_in: "spawn spawn_link self",
        keyword: "after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"
      },
      contains: [
        {
          className: "meta.prompt",
          begin: "^[0-9]+> ",
          relevance: 10
        },
        e.COMMENT("%", "$"),
        {
          className: "number",
          begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
          relevance: 0
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        { begin: n.concat(
          /\?(::)?/,
          /([A-Z]\w*)/,
          // at least one identifier
          /((::)[A-Z]\w*)*/
          // perhaps more
        ) },
        { begin: "->" },
        { begin: "ok" },
        { begin: "!" },
        {
          begin: "(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",
          relevance: 0
        },
        {
          begin: "[A-Z][a-zA-Z0-9_']*",
          relevance: 0
        }
      ]
    };
  }
  return Nm = t, Nm;
}
var Im, XR;
function ree() {
  if (XR) return Im;
  XR = 1;
  function t(e) {
    const n = "[a-z'][a-zA-Z0-9_']*", r = "(" + n + ":" + n + "|" + n + ")", a = {
      keyword: "after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",
      literal: "false true"
    }, i = e.COMMENT("%", "$"), s = {
      className: "number",
      begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
      relevance: 0
    }, l = { begin: "fun\\s+" + n + "/\\d+" }, c = {
      begin: r + "\\(",
      end: "\\)",
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          begin: r,
          relevance: 0
        },
        {
          begin: "\\(",
          end: "\\)",
          endsWithParent: !0,
          returnEnd: !0,
          relevance: 0
          // "contains" defined later
        }
      ]
    }, d = {
      begin: /\{/,
      end: /\}/,
      relevance: 0
      // "contains" defined later
    }, p = {
      begin: "\\b_([A-Z][A-Za-z0-9_]*)?",
      relevance: 0
    }, _ = {
      begin: "[A-Z][a-zA-Z0-9_]*",
      relevance: 0
    }, f = {
      begin: "#" + e.UNDERSCORE_IDENT_RE,
      relevance: 0,
      returnBegin: !0,
      contains: [
        {
          begin: "#" + e.UNDERSCORE_IDENT_RE,
          relevance: 0
        },
        {
          begin: /\{/,
          end: /\}/,
          relevance: 0
          // "contains" defined later
        }
      ]
    }, g = {
      beginKeywords: "fun receive if try case",
      end: "end",
      keywords: a
    };
    g.contains = [
      i,
      l,
      e.inherit(e.APOS_STRING_MODE, { className: "" }),
      g,
      c,
      e.QUOTE_STRING_MODE,
      s,
      d,
      p,
      _,
      f
    ];
    const E = [
      i,
      l,
      g,
      c,
      e.QUOTE_STRING_MODE,
      s,
      d,
      p,
      _,
      f
    ];
    c.contains[1].contains = E, d.contains = E, f.contains[1].contains = E;
    const T = [
      "-module",
      "-record",
      "-undef",
      "-export",
      "-ifdef",
      "-ifndef",
      "-author",
      "-copyright",
      "-doc",
      "-vsn",
      "-import",
      "-include",
      "-include_lib",
      "-compile",
      "-define",
      "-else",
      "-endif",
      "-file",
      "-behaviour",
      "-behavior",
      "-spec"
    ], R = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: E
    };
    return {
      name: "Erlang",
      aliases: ["erl"],
      keywords: a,
      illegal: "(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",
      contains: [
        {
          className: "function",
          begin: "^" + n + "\\s*\\(",
          end: "->",
          returnBegin: !0,
          illegal: "\\(|#|//|/\\*|\\\\|:|;",
          contains: [
            R,
            e.inherit(e.TITLE_MODE, { begin: n })
          ],
          starts: {
            end: ";|\\.",
            keywords: a,
            contains: E
          }
        },
        i,
        {
          begin: "^-",
          end: "\\.",
          relevance: 0,
          excludeEnd: !0,
          returnBegin: !0,
          keywords: {
            $pattern: "-" + e.IDENT_RE,
            keyword: T.map((A) => `${A}|1.5`).join(" ")
          },
          contains: [R]
        },
        s,
        e.QUOTE_STRING_MODE,
        f,
        p,
        _,
        d,
        { begin: /\.$/ }
        // relevance booster
      ]
    };
  }
  return Im = t, Im;
}
var xm, ZR;
function aee() {
  if (ZR) return xm;
  ZR = 1;
  function t(e) {
    return {
      name: "Excel formulae",
      aliases: [
        "xlsx",
        "xls"
      ],
      case_insensitive: !0,
      keywords: {
        $pattern: /[a-zA-Z][\w\.]*/,
        built_in: [
          "ABS",
          "ACCRINT",
          "ACCRINTM",
          "ACOS",
          "ACOSH",
          "ACOT",
          "ACOTH",
          "AGGREGATE",
          "ADDRESS",
          "AMORDEGRC",
          "AMORLINC",
          "AND",
          "ARABIC",
          "AREAS",
          "ASC",
          "ASIN",
          "ASINH",
          "ATAN",
          "ATAN2",
          "ATANH",
          "AVEDEV",
          "AVERAGE",
          "AVERAGEA",
          "AVERAGEIF",
          "AVERAGEIFS",
          "BAHTTEXT",
          "BASE",
          "BESSELI",
          "BESSELJ",
          "BESSELK",
          "BESSELY",
          "BETADIST",
          "BETA.DIST",
          "BETAINV",
          "BETA.INV",
          "BIN2DEC",
          "BIN2HEX",
          "BIN2OCT",
          "BINOMDIST",
          "BINOM.DIST",
          "BINOM.DIST.RANGE",
          "BINOM.INV",
          "BITAND",
          "BITLSHIFT",
          "BITOR",
          "BITRSHIFT",
          "BITXOR",
          "CALL",
          "CEILING",
          "CEILING.MATH",
          "CEILING.PRECISE",
          "CELL",
          "CHAR",
          "CHIDIST",
          "CHIINV",
          "CHITEST",
          "CHISQ.DIST",
          "CHISQ.DIST.RT",
          "CHISQ.INV",
          "CHISQ.INV.RT",
          "CHISQ.TEST",
          "CHOOSE",
          "CLEAN",
          "CODE",
          "COLUMN",
          "COLUMNS",
          "COMBIN",
          "COMBINA",
          "COMPLEX",
          "CONCAT",
          "CONCATENATE",
          "CONFIDENCE",
          "CONFIDENCE.NORM",
          "CONFIDENCE.T",
          "CONVERT",
          "CORREL",
          "COS",
          "COSH",
          "COT",
          "COTH",
          "COUNT",
          "COUNTA",
          "COUNTBLANK",
          "COUNTIF",
          "COUNTIFS",
          "COUPDAYBS",
          "COUPDAYS",
          "COUPDAYSNC",
          "COUPNCD",
          "COUPNUM",
          "COUPPCD",
          "COVAR",
          "COVARIANCE.P",
          "COVARIANCE.S",
          "CRITBINOM",
          "CSC",
          "CSCH",
          "CUBEKPIMEMBER",
          "CUBEMEMBER",
          "CUBEMEMBERPROPERTY",
          "CUBERANKEDMEMBER",
          "CUBESET",
          "CUBESETCOUNT",
          "CUBEVALUE",
          "CUMIPMT",
          "CUMPRINC",
          "DATE",
          "DATEDIF",
          "DATEVALUE",
          "DAVERAGE",
          "DAY",
          "DAYS",
          "DAYS360",
          "DB",
          "DBCS",
          "DCOUNT",
          "DCOUNTA",
          "DDB",
          "DEC2BIN",
          "DEC2HEX",
          "DEC2OCT",
          "DECIMAL",
          "DEGREES",
          "DELTA",
          "DEVSQ",
          "DGET",
          "DISC",
          "DMAX",
          "DMIN",
          "DOLLAR",
          "DOLLARDE",
          "DOLLARFR",
          "DPRODUCT",
          "DSTDEV",
          "DSTDEVP",
          "DSUM",
          "DURATION",
          "DVAR",
          "DVARP",
          "EDATE",
          "EFFECT",
          "ENCODEURL",
          "EOMONTH",
          "ERF",
          "ERF.PRECISE",
          "ERFC",
          "ERFC.PRECISE",
          "ERROR.TYPE",
          "EUROCONVERT",
          "EVEN",
          "EXACT",
          "EXP",
          "EXPON.DIST",
          "EXPONDIST",
          "FACT",
          "FACTDOUBLE",
          "FALSE|0",
          "F.DIST",
          "FDIST",
          "F.DIST.RT",
          "FILTERXML",
          "FIND",
          "FINDB",
          "F.INV",
          "F.INV.RT",
          "FINV",
          "FISHER",
          "FISHERINV",
          "FIXED",
          "FLOOR",
          "FLOOR.MATH",
          "FLOOR.PRECISE",
          "FORECAST",
          "FORECAST.ETS",
          "FORECAST.ETS.CONFINT",
          "FORECAST.ETS.SEASONALITY",
          "FORECAST.ETS.STAT",
          "FORECAST.LINEAR",
          "FORMULATEXT",
          "FREQUENCY",
          "F.TEST",
          "FTEST",
          "FV",
          "FVSCHEDULE",
          "GAMMA",
          "GAMMA.DIST",
          "GAMMADIST",
          "GAMMA.INV",
          "GAMMAINV",
          "GAMMALN",
          "GAMMALN.PRECISE",
          "GAUSS",
          "GCD",
          "GEOMEAN",
          "GESTEP",
          "GETPIVOTDATA",
          "GROWTH",
          "HARMEAN",
          "HEX2BIN",
          "HEX2DEC",
          "HEX2OCT",
          "HLOOKUP",
          "HOUR",
          "HYPERLINK",
          "HYPGEOM.DIST",
          "HYPGEOMDIST",
          "IF",
          "IFERROR",
          "IFNA",
          "IFS",
          "IMABS",
          "IMAGINARY",
          "IMARGUMENT",
          "IMCONJUGATE",
          "IMCOS",
          "IMCOSH",
          "IMCOT",
          "IMCSC",
          "IMCSCH",
          "IMDIV",
          "IMEXP",
          "IMLN",
          "IMLOG10",
          "IMLOG2",
          "IMPOWER",
          "IMPRODUCT",
          "IMREAL",
          "IMSEC",
          "IMSECH",
          "IMSIN",
          "IMSINH",
          "IMSQRT",
          "IMSUB",
          "IMSUM",
          "IMTAN",
          "INDEX",
          "INDIRECT",
          "INFO",
          "INT",
          "INTERCEPT",
          "INTRATE",
          "IPMT",
          "IRR",
          "ISBLANK",
          "ISERR",
          "ISERROR",
          "ISEVEN",
          "ISFORMULA",
          "ISLOGICAL",
          "ISNA",
          "ISNONTEXT",
          "ISNUMBER",
          "ISODD",
          "ISREF",
          "ISTEXT",
          "ISO.CEILING",
          "ISOWEEKNUM",
          "ISPMT",
          "JIS",
          "KURT",
          "LARGE",
          "LCM",
          "LEFT",
          "LEFTB",
          "LEN",
          "LENB",
          "LINEST",
          "LN",
          "LOG",
          "LOG10",
          "LOGEST",
          "LOGINV",
          "LOGNORM.DIST",
          "LOGNORMDIST",
          "LOGNORM.INV",
          "LOOKUP",
          "LOWER",
          "MATCH",
          "MAX",
          "MAXA",
          "MAXIFS",
          "MDETERM",
          "MDURATION",
          "MEDIAN",
          "MID",
          "MIDBs",
          "MIN",
          "MINIFS",
          "MINA",
          "MINUTE",
          "MINVERSE",
          "MIRR",
          "MMULT",
          "MOD",
          "MODE",
          "MODE.MULT",
          "MODE.SNGL",
          "MONTH",
          "MROUND",
          "MULTINOMIAL",
          "MUNIT",
          "N",
          "NA",
          "NEGBINOM.DIST",
          "NEGBINOMDIST",
          "NETWORKDAYS",
          "NETWORKDAYS.INTL",
          "NOMINAL",
          "NORM.DIST",
          "NORMDIST",
          "NORMINV",
          "NORM.INV",
          "NORM.S.DIST",
          "NORMSDIST",
          "NORM.S.INV",
          "NORMSINV",
          "NOT",
          "NOW",
          "NPER",
          "NPV",
          "NUMBERVALUE",
          "OCT2BIN",
          "OCT2DEC",
          "OCT2HEX",
          "ODD",
          "ODDFPRICE",
          "ODDFYIELD",
          "ODDLPRICE",
          "ODDLYIELD",
          "OFFSET",
          "OR",
          "PDURATION",
          "PEARSON",
          "PERCENTILE.EXC",
          "PERCENTILE.INC",
          "PERCENTILE",
          "PERCENTRANK.EXC",
          "PERCENTRANK.INC",
          "PERCENTRANK",
          "PERMUT",
          "PERMUTATIONA",
          "PHI",
          "PHONETIC",
          "PI",
          "PMT",
          "POISSON.DIST",
          "POISSON",
          "POWER",
          "PPMT",
          "PRICE",
          "PRICEDISC",
          "PRICEMAT",
          "PROB",
          "PRODUCT",
          "PROPER",
          "PV",
          "QUARTILE",
          "QUARTILE.EXC",
          "QUARTILE.INC",
          "QUOTIENT",
          "RADIANS",
          "RAND",
          "RANDBETWEEN",
          "RANK.AVG",
          "RANK.EQ",
          "RANK",
          "RATE",
          "RECEIVED",
          "REGISTER.ID",
          "REPLACE",
          "REPLACEB",
          "REPT",
          "RIGHT",
          "RIGHTB",
          "ROMAN",
          "ROUND",
          "ROUNDDOWN",
          "ROUNDUP",
          "ROW",
          "ROWS",
          "RRI",
          "RSQ",
          "RTD",
          "SEARCH",
          "SEARCHB",
          "SEC",
          "SECH",
          "SECOND",
          "SERIESSUM",
          "SHEET",
          "SHEETS",
          "SIGN",
          "SIN",
          "SINH",
          "SKEW",
          "SKEW.P",
          "SLN",
          "SLOPE",
          "SMALL",
          "SQL.REQUEST",
          "SQRT",
          "SQRTPI",
          "STANDARDIZE",
          "STDEV",
          "STDEV.P",
          "STDEV.S",
          "STDEVA",
          "STDEVP",
          "STDEVPA",
          "STEYX",
          "SUBSTITUTE",
          "SUBTOTAL",
          "SUM",
          "SUMIF",
          "SUMIFS",
          "SUMPRODUCT",
          "SUMSQ",
          "SUMX2MY2",
          "SUMX2PY2",
          "SUMXMY2",
          "SWITCH",
          "SYD",
          "T",
          "TAN",
          "TANH",
          "TBILLEQ",
          "TBILLPRICE",
          "TBILLYIELD",
          "T.DIST",
          "T.DIST.2T",
          "T.DIST.RT",
          "TDIST",
          "TEXT",
          "TEXTJOIN",
          "TIME",
          "TIMEVALUE",
          "T.INV",
          "T.INV.2T",
          "TINV",
          "TODAY",
          "TRANSPOSE",
          "TREND",
          "TRIM",
          "TRIMMEAN",
          "TRUE|0",
          "TRUNC",
          "T.TEST",
          "TTEST",
          "TYPE",
          "UNICHAR",
          "UNICODE",
          "UPPER",
          "VALUE",
          "VAR",
          "VAR.P",
          "VAR.S",
          "VARA",
          "VARP",
          "VARPA",
          "VDB",
          "VLOOKUP",
          "WEBSERVICE",
          "WEEKDAY",
          "WEEKNUM",
          "WEIBULL",
          "WEIBULL.DIST",
          "WORKDAY",
          "WORKDAY.INTL",
          "XIRR",
          "XNPV",
          "XOR",
          "YEAR",
          "YEARFRAC",
          "YIELD",
          "YIELDDISC",
          "YIELDMAT",
          "Z.TEST",
          "ZTEST"
        ]
      },
      contains: [
        {
          /* matches a beginning equal sign found in Excel formula examples */
          begin: /^=/,
          end: /[^=]/,
          returnEnd: !0,
          illegal: /=/,
          /* only allow single equal sign at front of line */
          relevance: 10
        },
        /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
        {
          /* matches a reference to a single cell */
          className: "symbol",
          begin: /\b[A-Z]{1,2}\d+\b/,
          end: /[^\d]/,
          excludeEnd: !0,
          relevance: 0
        },
        {
          /* matches a reference to a range of cells */
          className: "symbol",
          begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
          relevance: 0
        },
        e.BACKSLASH_ESCAPE,
        e.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: e.NUMBER_RE + "(%)?",
          relevance: 0
        },
        /* Excel formula comments are done by putting the comment in a function call to N() */
        e.COMMENT(
          /\bN\(/,
          /\)/,
          {
            excludeBegin: !0,
            excludeEnd: !0,
            illegal: /\n/
          }
        )
      ]
    };
  }
  return xm = t, xm;
}
var Dm, JR;
function iee() {
  if (JR) return Dm;
  JR = 1;
  function t(e) {
    return {
      name: "FIX",
      contains: [
        {
          begin: /[^\u2401\u0001]+/,
          end: /[\u2401\u0001]/,
          excludeEnd: !0,
          returnBegin: !0,
          returnEnd: !1,
          contains: [
            {
              begin: /([^\u2401\u0001=]+)/,
              end: /=([^\u2401\u0001=]+)/,
              returnEnd: !0,
              returnBegin: !1,
              className: "attr"
            },
            {
              begin: /=/,
              end: /([\u2401\u0001])/,
              excludeEnd: !0,
              excludeBegin: !0,
              className: "string"
            }
          ]
        }
      ],
      case_insensitive: !0
    };
  }
  return Dm = t, Dm;
}
var wm, eA;
function see() {
  if (eA) return wm;
  eA = 1;
  function t(e) {
    const n = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    }, r = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        }
      ]
    }, i = {
      className: "function",
      beginKeywords: "def",
      end: /[:={\[(\n;]/,
      excludeEnd: !0,
      contains: [{
        className: "title",
        relevance: 0,
        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
      }]
    };
    return {
      name: "Flix",
      keywords: {
        keyword: [
          "case",
          "class",
          "def",
          "else",
          "enum",
          "if",
          "impl",
          "import",
          "in",
          "lat",
          "rel",
          "index",
          "let",
          "match",
          "namespace",
          "switch",
          "type",
          "yield",
          "with"
        ],
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        n,
        r,
        i,
        e.C_NUMBER_MODE
      ]
    };
  }
  return wm = t, wm;
}
var Lm, tA;
function oee() {
  if (tA) return Lm;
  tA = 1;
  function t(e) {
    const n = e.regex, r = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    }, a = { variants: [
      e.COMMENT("!", "$", { relevance: 0 }),
      // allow FORTRAN 77 style comments
      e.COMMENT("^C[ ]", "$", { relevance: 0 }),
      e.COMMENT("^C$", "$", { relevance: 0 })
    ] }, i = /(_[a-z_\d]+)?/, s = /([de][+-]?\d+)?/, l = {
      className: "number",
      variants: [
        { begin: n.concat(/\b\d+/, /\.(\d*)/, s, i) },
        { begin: n.concat(/\b\d+/, s, i) },
        { begin: n.concat(/\.\d+/, s, i) }
      ],
      relevance: 0
    }, c = {
      className: "function",
      beginKeywords: "subroutine function program",
      illegal: "[${=\\n]",
      contains: [
        e.UNDERSCORE_TITLE_MODE,
        r
      ]
    }, d = {
      className: "string",
      relevance: 0,
      variants: [
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Fortran",
      case_insensitive: !0,
      aliases: [
        "f90",
        "f95"
      ],
      keywords: {
        keyword: [
          "kind",
          "do",
          "concurrent",
          "local",
          "shared",
          "while",
          "private",
          "call",
          "intrinsic",
          "where",
          "elsewhere",
          "type",
          "endtype",
          "endmodule",
          "endselect",
          "endinterface",
          "end",
          "enddo",
          "endif",
          "if",
          "forall",
          "endforall",
          "only",
          "contains",
          "default",
          "return",
          "stop",
          "then",
          "block",
          "endblock",
          "endassociate",
          "public",
          "subroutine|10",
          "function",
          "program",
          ".and.",
          ".or.",
          ".not.",
          ".le.",
          ".eq.",
          ".ge.",
          ".gt.",
          ".lt.",
          "goto",
          "save",
          "else",
          "use",
          "module",
          "select",
          "case",
          "access",
          "blank",
          "direct",
          "exist",
          "file",
          "fmt",
          "form",
          "formatted",
          "iostat",
          "name",
          "named",
          "nextrec",
          "number",
          "opened",
          "rec",
          "recl",
          "sequential",
          "status",
          "unformatted",
          "unit",
          "continue",
          "format",
          "pause",
          "cycle",
          "exit",
          "c_null_char",
          "c_alert",
          "c_backspace",
          "c_form_feed",
          "flush",
          "wait",
          "decimal",
          "round",
          "iomsg",
          "synchronous",
          "nopass",
          "non_overridable",
          "pass",
          "protected",
          "volatile",
          "abstract",
          "extends",
          "import",
          "non_intrinsic",
          "value",
          "deferred",
          "generic",
          "final",
          "enumerator",
          "class",
          "associate",
          "bind",
          "enum",
          "c_int",
          "c_short",
          "c_long",
          "c_long_long",
          "c_signed_char",
          "c_size_t",
          "c_int8_t",
          "c_int16_t",
          "c_int32_t",
          "c_int64_t",
          "c_int_least8_t",
          "c_int_least16_t",
          "c_int_least32_t",
          "c_int_least64_t",
          "c_int_fast8_t",
          "c_int_fast16_t",
          "c_int_fast32_t",
          "c_int_fast64_t",
          "c_intmax_t",
          "C_intptr_t",
          "c_float",
          "c_double",
          "c_long_double",
          "c_float_complex",
          "c_double_complex",
          "c_long_double_complex",
          "c_bool",
          "c_char",
          "c_null_ptr",
          "c_null_funptr",
          "c_new_line",
          "c_carriage_return",
          "c_horizontal_tab",
          "c_vertical_tab",
          "iso_c_binding",
          "c_loc",
          "c_funloc",
          "c_associated",
          "c_f_pointer",
          "c_ptr",
          "c_funptr",
          "iso_fortran_env",
          "character_storage_size",
          "error_unit",
          "file_storage_size",
          "input_unit",
          "iostat_end",
          "iostat_eor",
          "numeric_storage_size",
          "output_unit",
          "c_f_procpointer",
          "ieee_arithmetic",
          "ieee_support_underflow_control",
          "ieee_get_underflow_mode",
          "ieee_set_underflow_mode",
          "newunit",
          "contiguous",
          "recursive",
          "pad",
          "position",
          "action",
          "delim",
          "readwrite",
          "eor",
          "advance",
          "nml",
          "interface",
          "procedure",
          "namelist",
          "include",
          "sequence",
          "elemental",
          "pure",
          "impure",
          "integer",
          "real",
          "character",
          "complex",
          "logical",
          "codimension",
          "dimension",
          "allocatable|10",
          "parameter",
          "external",
          "implicit|10",
          "none",
          "double",
          "precision",
          "assign",
          "intent",
          "optional",
          "pointer",
          "target",
          "in",
          "out",
          "common",
          "equivalence",
          "data"
        ],
        literal: [
          ".False.",
          ".True."
        ],
        built_in: [
          "alog",
          "alog10",
          "amax0",
          "amax1",
          "amin0",
          "amin1",
          "amod",
          "cabs",
          "ccos",
          "cexp",
          "clog",
          "csin",
          "csqrt",
          "dabs",
          "dacos",
          "dasin",
          "datan",
          "datan2",
          "dcos",
          "dcosh",
          "ddim",
          "dexp",
          "dint",
          "dlog",
          "dlog10",
          "dmax1",
          "dmin1",
          "dmod",
          "dnint",
          "dsign",
          "dsin",
          "dsinh",
          "dsqrt",
          "dtan",
          "dtanh",
          "float",
          "iabs",
          "idim",
          "idint",
          "idnint",
          "ifix",
          "isign",
          "max0",
          "max1",
          "min0",
          "min1",
          "sngl",
          "algama",
          "cdabs",
          "cdcos",
          "cdexp",
          "cdlog",
          "cdsin",
          "cdsqrt",
          "cqabs",
          "cqcos",
          "cqexp",
          "cqlog",
          "cqsin",
          "cqsqrt",
          "dcmplx",
          "dconjg",
          "derf",
          "derfc",
          "dfloat",
          "dgamma",
          "dimag",
          "dlgama",
          "iqint",
          "qabs",
          "qacos",
          "qasin",
          "qatan",
          "qatan2",
          "qcmplx",
          "qconjg",
          "qcos",
          "qcosh",
          "qdim",
          "qerf",
          "qerfc",
          "qexp",
          "qgamma",
          "qimag",
          "qlgama",
          "qlog",
          "qlog10",
          "qmax1",
          "qmin1",
          "qmod",
          "qnint",
          "qsign",
          "qsin",
          "qsinh",
          "qsqrt",
          "qtan",
          "qtanh",
          "abs",
          "acos",
          "aimag",
          "aint",
          "anint",
          "asin",
          "atan",
          "atan2",
          "char",
          "cmplx",
          "conjg",
          "cos",
          "cosh",
          "exp",
          "ichar",
          "index",
          "int",
          "log",
          "log10",
          "max",
          "min",
          "nint",
          "sign",
          "sin",
          "sinh",
          "sqrt",
          "tan",
          "tanh",
          "print",
          "write",
          "dim",
          "lge",
          "lgt",
          "lle",
          "llt",
          "mod",
          "nullify",
          "allocate",
          "deallocate",
          "adjustl",
          "adjustr",
          "all",
          "allocated",
          "any",
          "associated",
          "bit_size",
          "btest",
          "ceiling",
          "count",
          "cshift",
          "date_and_time",
          "digits",
          "dot_product",
          "eoshift",
          "epsilon",
          "exponent",
          "floor",
          "fraction",
          "huge",
          "iand",
          "ibclr",
          "ibits",
          "ibset",
          "ieor",
          "ior",
          "ishft",
          "ishftc",
          "lbound",
          "len_trim",
          "matmul",
          "maxexponent",
          "maxloc",
          "maxval",
          "merge",
          "minexponent",
          "minloc",
          "minval",
          "modulo",
          "mvbits",
          "nearest",
          "pack",
          "present",
          "product",
          "radix",
          "random_number",
          "random_seed",
          "range",
          "repeat",
          "reshape",
          "rrspacing",
          "scale",
          "scan",
          "selected_int_kind",
          "selected_real_kind",
          "set_exponent",
          "shape",
          "size",
          "spacing",
          "spread",
          "sum",
          "system_clock",
          "tiny",
          "transpose",
          "trim",
          "ubound",
          "unpack",
          "verify",
          "achar",
          "iachar",
          "transfer",
          "dble",
          "entry",
          "dprod",
          "cpu_time",
          "command_argument_count",
          "get_command",
          "get_command_argument",
          "get_environment_variable",
          "is_iostat_end",
          "ieee_arithmetic",
          "ieee_support_underflow_control",
          "ieee_get_underflow_mode",
          "ieee_set_underflow_mode",
          "is_iostat_eor",
          "move_alloc",
          "new_line",
          "selected_char_kind",
          "same_type_as",
          "extends_type_of",
          "acosh",
          "asinh",
          "atanh",
          "bessel_j0",
          "bessel_j1",
          "bessel_jn",
          "bessel_y0",
          "bessel_y1",
          "bessel_yn",
          "erf",
          "erfc",
          "erfc_scaled",
          "gamma",
          "log_gamma",
          "hypot",
          "norm2",
          "atomic_define",
          "atomic_ref",
          "execute_command_line",
          "leadz",
          "trailz",
          "storage_size",
          "merge_bits",
          "bge",
          "bgt",
          "ble",
          "blt",
          "dshiftl",
          "dshiftr",
          "findloc",
          "iall",
          "iany",
          "iparity",
          "image_index",
          "lcobound",
          "ucobound",
          "maskl",
          "maskr",
          "num_images",
          "parity",
          "popcnt",
          "poppar",
          "shifta",
          "shiftl",
          "shiftr",
          "this_image",
          "sync",
          "change",
          "team",
          "co_broadcast",
          "co_max",
          "co_min",
          "co_sum",
          "co_reduce"
        ]
      },
      illegal: /\/\*/,
      contains: [
        d,
        c,
        // allow `C = value` for assignments so they aren't misdetected
        // as Fortran 77 style comments
        {
          begin: /^C\s*=(?!=)/,
          relevance: 0
        },
        a,
        l
      ]
    };
  }
  return Lm = t, Lm;
}
var Mm, nA;
function lee() {
  if (nA) return Mm;
  nA = 1;
  function t(l) {
    return new RegExp(l.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
  }
  function e(l) {
    return l ? typeof l == "string" ? l : l.source : null;
  }
  function n(l) {
    return r("(?=", l, ")");
  }
  function r(...l) {
    return l.map((d) => e(d)).join("");
  }
  function a(l) {
    const c = l[l.length - 1];
    return typeof c == "object" && c.constructor === Object ? (l.splice(l.length - 1, 1), c) : {};
  }
  function i(...l) {
    return "(" + (a(l).capture ? "" : "?:") + l.map((p) => e(p)).join("|") + ")";
  }
  function s(l) {
    const c = [
      "abstract",
      "and",
      "as",
      "assert",
      "base",
      "begin",
      "class",
      "default",
      "delegate",
      "do",
      "done",
      "downcast",
      "downto",
      "elif",
      "else",
      "end",
      "exception",
      "extern",
      // "false", // literal
      "finally",
      "fixed",
      "for",
      "fun",
      "function",
      "global",
      "if",
      "in",
      "inherit",
      "inline",
      "interface",
      "internal",
      "lazy",
      "let",
      "match",
      "member",
      "module",
      "mutable",
      "namespace",
      "new",
      // "not", // built_in
      // "null", // literal
      "of",
      "open",
      "or",
      "override",
      "private",
      "public",
      "rec",
      "return",
      "static",
      "struct",
      "then",
      "to",
      // "true", // literal
      "try",
      "type",
      "upcast",
      "use",
      "val",
      "void",
      "when",
      "while",
      "with",
      "yield"
    ], d = {
      // monad builder keywords (matches before non-bang keywords)
      scope: "keyword",
      match: /\b(yield|return|let|do|match|use)!/
    }, p = [
      "if",
      "else",
      "endif",
      "line",
      "nowarn",
      "light",
      "r",
      "i",
      "I",
      "load",
      "time",
      "help",
      "quit"
    ], _ = [
      "true",
      "false",
      "null",
      "Some",
      "None",
      "Ok",
      "Error",
      "infinity",
      "infinityf",
      "nan",
      "nanf"
    ], f = [
      "__LINE__",
      "__SOURCE_DIRECTORY__",
      "__SOURCE_FILE__"
    ], g = [
      // basic types
      "bool",
      "byte",
      "sbyte",
      "int8",
      "int16",
      "int32",
      "uint8",
      "uint16",
      "uint32",
      "int",
      "uint",
      "int64",
      "uint64",
      "nativeint",
      "unativeint",
      "decimal",
      "float",
      "double",
      "float32",
      "single",
      "char",
      "string",
      "unit",
      "bigint",
      // other native types or lowercase aliases
      "option",
      "voption",
      "list",
      "array",
      "seq",
      "byref",
      "exn",
      "inref",
      "nativeptr",
      "obj",
      "outref",
      "voidptr",
      // other important FSharp types
      "Result"
    ], T = {
      keyword: c,
      literal: _,
      built_in: [
        // Somewhat arbitrary list of builtin functions and values.
        // Most of them are declared in Microsoft.FSharp.Core
        // I tried to stay relevant by adding only the most idiomatic
        // and most used symbols that are not already declared as types.
        "not",
        "ref",
        "raise",
        "reraise",
        "dict",
        "readOnlyDict",
        "set",
        "get",
        "enum",
        "sizeof",
        "typeof",
        "typedefof",
        "nameof",
        "nullArg",
        "invalidArg",
        "invalidOp",
        "id",
        "fst",
        "snd",
        "ignore",
        "lock",
        "using",
        "box",
        "unbox",
        "tryUnbox",
        "printf",
        "printfn",
        "sprintf",
        "eprintf",
        "eprintfn",
        "fprintf",
        "fprintfn",
        "failwith",
        "failwithf"
      ],
      "variable.constant": f
    }, A = {
      variants: [
        l.COMMENT(/\(\*(?!\))/, /\*\)/, {
          contains: ["self"]
        }),
        l.C_LINE_COMMENT_MODE
      ]
    }, I = /[a-zA-Z_](\w|')*/, x = {
      scope: "variable",
      begin: /``/,
      end: /``/
    }, P = /\B('|\^)/, D = {
      scope: "symbol",
      variants: [
        // the type name is a quoted identifier:
        { match: r(P, /``.*?``/) },
        // the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):
        { match: r(P, l.UNDERSCORE_IDENT_RE) }
      ],
      relevance: 0
    }, L = function({ includeEqual: Ce }) {
      let he;
      Ce ? he = "!%&*+-/<=>@^|~?" : he = "!%&*+-/<>@^|~?";
      const Ne = Array.from(he), ye = r("[", ...Ne.map(t), "]"), Ue = i(ye, /\./), Me = r(Ue, n(Ue)), Qe = i(
        r(Me, Ue, "*"),
        // Matches at least 2 chars operators
        r(ye, "+")
        // Matches at least one char operators
      );
      return {
        scope: "operator",
        match: i(
          // symbolic operators:
          Qe,
          // other symbolic keywords:
          // Type casting and conversion operators:
          /:\?>/,
          /:\?/,
          /:>/,
          /:=/,
          // Reference cell assignment
          /::?/,
          // : or ::
          /\$/
        ),
        // A single $ can be used as an operator
        relevance: 0
      };
    }, K = L({ includeEqual: !0 }), J = L({ includeEqual: !1 }), X = function(Ce, he) {
      return {
        begin: r(
          // a type annotation is a
          Ce,
          // should be a colon or the 'of' keyword
          n(
            // that has to be followed by
            r(
              /\s*/,
              // optional space
              i(
                // then either of:
                /\w/,
                // word
                /'/,
                // generic type name
                /\^/,
                // generic type name
                /#/,
                // flexible type name
                /``/,
                // quoted type name
                /\(/,
                // parens type expression
                /{\|/
                // anonymous type annotation
              )
            )
          )
        ),
        beginScope: he,
        // BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.
        // Examples where \n is required at the end:
        // - abstract member definitions in classes: abstract Property : int * string
        // - return type annotations: let f f' = f' () : returnTypeAnnotation
        // - record fields definitions: { A : int \n B : string }
        end: n(
          i(
            /\n/,
            /=/
          )
        ),
        relevance: 0,
        // we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null
        keywords: l.inherit(T, { type: g }),
        contains: [
          A,
          D,
          l.inherit(x, { scope: null }),
          // match to avoid strange patterns inside that may break the parsing
          J
        ]
      };
    }, $ = X(/:/, "operator"), ae = X(/\bof\b/, "keyword"), ce = {
      begin: [
        /(^|\s+)/,
        // prevents matching the following: `match s.stype with`
        /type/,
        /\s+/,
        I
      ],
      beginScope: {
        2: "keyword",
        4: "title.class"
      },
      end: n(/\(|=|$/),
      keywords: T,
      // match keywords in type constraints. e.g.: when 'a : null
      contains: [
        A,
        l.inherit(x, { scope: null }),
        // match to avoid strange patterns inside that may break the parsing
        D,
        {
          // For visual consistency, highlight type brackets as operators.
          scope: "operator",
          match: /<|>/
        },
        $
        // generic types can have constraints, which are type annotations. e.g. type MyType<'T when 'T : delegate<obj * string>> =
      ]
    }, ve = {
      // computation expressions:
      scope: "computation-expression",
      // BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f
      match: /\b[_a-z]\w*(?=\s*\{)/
    }, ge = {
      // preprocessor directives and fsi commands:
      begin: [
        /^\s*/,
        r(/#/, i(...p)),
        /\b/
      ],
      beginScope: { 2: "meta" },
      end: n(/\s|$/)
    }, fe = {
      variants: [
        l.BINARY_NUMBER_MODE,
        l.C_NUMBER_MODE
      ]
    }, Fe = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        l.BACKSLASH_ESCAPE
      ]
    }, ne = {
      scope: "string",
      begin: /@"/,
      end: /"/,
      contains: [
        {
          match: /""/
          // escaped "
        },
        l.BACKSLASH_ESCAPE
      ]
    }, se = {
      scope: "string",
      begin: /"""/,
      end: /"""/,
      relevance: 2
    }, z = {
      scope: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: T
    }, v = {
      scope: "string",
      begin: /\$"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        l.BACKSLASH_ESCAPE,
        z
      ]
    }, H = {
      scope: "string",
      begin: /(\$@|@\$)"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        {
          match: /""/
        },
        l.BACKSLASH_ESCAPE,
        z
      ]
    }, oe = {
      scope: "string",
      begin: /\$"""/,
      end: /"""/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        z
      ],
      relevance: 2
    }, k = {
      scope: "string",
      match: r(
        /'/,
        i(
          /[^\\']/,
          // either a single non escaped char...
          /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/
          // ...or an escape sequence
        ),
        /'/
      )
    };
    return z.contains = [
      H,
      v,
      ne,
      Fe,
      k,
      d,
      A,
      x,
      $,
      ve,
      ge,
      fe,
      D,
      K
    ], {
      name: "F#",
      aliases: [
        "fs",
        "f#"
      ],
      keywords: T,
      illegal: /\/\*/,
      classNameAliases: {
        "computation-expression": "keyword"
      },
      contains: [
        d,
        {
          variants: [
            oe,
            H,
            v,
            se,
            ne,
            Fe,
            k
          ]
        },
        A,
        x,
        ce,
        {
          // e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]
          // or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]
          scope: "meta",
          begin: /\[</,
          end: />\]/,
          relevance: 2,
          contains: [
            x,
            // can contain any constant value
            se,
            ne,
            Fe,
            k,
            fe
          ]
        },
        ae,
        $,
        ve,
        ge,
        fe,
        D,
        K
      ]
    };
  }
  return Mm = s, Mm;
}
var km, rA;
function cee() {
  if (rA) return km;
  rA = 1;
  function t(e) {
    const n = e.regex, r = {
      keyword: "abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",
      literal: "eps inf na",
      built_in: "abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"
    }, a = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0
    }, i = {
      className: "symbol",
      variants: [
        { begin: /=[lgenxc]=/ },
        { begin: /\$/ }
      ]
    }, s = {
      // One-line quoted comment string
      className: "comment",
      variants: [
        {
          begin: "'",
          end: "'"
        },
        {
          begin: '"',
          end: '"'
        }
      ],
      illegal: "\\n",
      contains: [e.BACKSLASH_ESCAPE]
    }, l = {
      begin: "/",
      end: "/",
      keywords: r,
      contains: [
        s,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    }, c = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/, d = {
      // Parameter/set/variable description text
      begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
      excludeBegin: !0,
      end: "$",
      endsWithParent: !0,
      contains: [
        s,
        l,
        {
          className: "comment",
          // one comment word, then possibly more
          begin: n.concat(
            c,
            // [ ] because \s would be too broad (matching newlines)
            n.anyNumberOfTimes(n.concat(/[ ]+/, c))
          ),
          relevance: 0
        }
      ]
    };
    return {
      name: "GAMS",
      aliases: ["gms"],
      case_insensitive: !0,
      keywords: r,
      contains: [
        e.COMMENT(/^\$ontext/, /^\$offtext/),
        {
          className: "meta",
          begin: "^\\$[a-z0-9]+",
          end: "$",
          returnBegin: !0,
          contains: [
            {
              className: "keyword",
              begin: "^\\$[a-z0-9]+"
            }
          ]
        },
        e.COMMENT("^\\*", "$"),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        // Declarations
        {
          beginKeywords: "set sets parameter parameters variable variables scalar scalars equation equations",
          end: ";",
          contains: [
            e.COMMENT("^\\*", "$"),
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.QUOTE_STRING_MODE,
            e.APOS_STRING_MODE,
            l,
            d
          ]
        },
        {
          // table environment
          beginKeywords: "table",
          end: ";",
          returnBegin: !0,
          contains: [
            {
              // table header row
              beginKeywords: "table",
              end: "$",
              contains: [d]
            },
            e.COMMENT("^\\*", "$"),
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.QUOTE_STRING_MODE,
            e.APOS_STRING_MODE,
            e.C_NUMBER_MODE
            // Table does not contain DESCTEXT or ASSIGNMENT
          ]
        },
        // Function definitions
        {
          className: "function",
          begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
          returnBegin: !0,
          contains: [
            {
              // Function title
              className: "title",
              begin: /^[a-z0-9_]+/
            },
            a,
            i
          ]
        },
        e.C_NUMBER_MODE,
        i
      ]
    };
  }
  return km = t, km;
}
var Pm, aA;
function uee() {
  if (aA) return Pm;
  aA = 1;
  function t(e) {
    const n = {
      keyword: "bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint ne ge le gt lt and xor or not eq eqv",
      built_in: "abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester strtrim",
      literal: "DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR"
    }, r = e.COMMENT("@", "@"), a = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            {
              className: "string",
              begin: '"',
              end: '"',
              illegal: "\\n"
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        r
      ]
    }, i = {
      begin: /\bstruct\s+/,
      end: /\s/,
      keywords: "struct",
      contains: [
        {
          className: "type",
          begin: e.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    }, s = [
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        excludeBegin: !0,
        excludeEnd: !0,
        endsWithParent: !0,
        relevance: 0,
        contains: [
          {
            // dots
            className: "literal",
            begin: /\.\.\./
          },
          e.C_NUMBER_MODE,
          e.C_BLOCK_COMMENT_MODE,
          r,
          i
        ]
      }
    ], l = {
      className: "title",
      begin: e.UNDERSCORE_IDENT_RE,
      relevance: 0
    }, c = function(g, E, T) {
      const R = e.inherit(
        {
          className: "function",
          beginKeywords: g,
          end: E,
          excludeEnd: !0,
          contains: [].concat(s)
        },
        {}
      );
      return R.contains.push(l), R.contains.push(e.C_NUMBER_MODE), R.contains.push(e.C_BLOCK_COMMENT_MODE), R.contains.push(r), R;
    }, d = {
      // these are explicitly named internal function calls
      className: "built_in",
      begin: "\\b(" + n.built_in.split(" ").join("|") + ")\\b"
    }, p = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [e.BACKSLASH_ESCAPE],
      relevance: 0
    }, _ = {
      // className: "fn_ref",
      begin: e.UNDERSCORE_IDENT_RE + "\\s*\\(",
      returnBegin: !0,
      keywords: n,
      relevance: 0,
      contains: [
        { beginKeywords: n.keyword },
        d,
        {
          // ambiguously named function calls get a relevance of 0
          className: "built_in",
          begin: e.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    }, f = {
      // className: "fn_ref_params",
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: {
        built_in: n.built_in,
        literal: n.literal
      },
      contains: [
        e.C_NUMBER_MODE,
        e.C_BLOCK_COMMENT_MODE,
        r,
        d,
        _,
        p,
        "self"
      ]
    };
    return _.contains.push(f), {
      name: "GAUSS",
      aliases: ["gss"],
      case_insensitive: !0,
      // language is case-insensitive
      keywords: n,
      illegal: /(\{[%#]|[%#]\}| <- )/,
      contains: [
        e.C_NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        r,
        p,
        a,
        {
          className: "keyword",
          begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
        },
        c("proc keyword", ";"),
        c("fn", "="),
        {
          beginKeywords: "for threadfor",
          end: /;/,
          // end: /\(/,
          relevance: 0,
          contains: [
            e.C_BLOCK_COMMENT_MODE,
            r,
            f
          ]
        },
        {
          // custom method guard
          // excludes method names from keyword processing
          variants: [
            { begin: e.UNDERSCORE_IDENT_RE + "\\." + e.UNDERSCORE_IDENT_RE },
            { begin: e.UNDERSCORE_IDENT_RE + "\\s*=" }
          ],
          relevance: 0
        },
        _,
        i
      ]
    };
  }
  return Pm = t, Pm;
}
var Fm, iA;
function dee() {
  if (iA) return Fm;
  iA = 1;
  function t(e) {
    const n = "[A-Z_][A-Z0-9_.]*", r = "%", a = {
      $pattern: n,
      keyword: "IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT EQ LT GT NE GE LE OR XOR"
    }, i = {
      className: "meta",
      begin: "([O])([0-9]+)"
    }, s = e.inherit(e.C_NUMBER_MODE, { begin: "([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|" + e.C_NUMBER_RE }), l = [
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      e.COMMENT(/\(/, /\)/),
      s,
      e.inherit(e.APOS_STRING_MODE, { illegal: null }),
      e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "name",
        begin: "([G])([0-9]+\\.?[0-9]?)"
      },
      {
        className: "name",
        begin: "([M])([0-9]+\\.?[0-9]?)"
      },
      {
        className: "attr",
        begin: "(VC|VS|#)",
        end: "(\\d+)"
      },
      {
        className: "attr",
        begin: "(VZOFX|VZOFY|VZOFZ)"
      },
      {
        className: "built_in",
        begin: "(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)",
        contains: [s],
        end: "\\]"
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "N",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      }
    ];
    return {
      name: "G-code (ISO 6983)",
      aliases: ["nc"],
      // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
      // However, most prefer all uppercase and uppercase is customary.
      case_insensitive: !0,
      keywords: a,
      contains: [
        {
          className: "meta",
          begin: r
        },
        i
      ].concat(l)
    };
  }
  return Fm = t, Fm;
}
var Bm, sA;
function pee() {
  if (sA) return Bm;
  sA = 1;
  function t(e) {
    return {
      name: "Gherkin",
      aliases: ["feature"],
      keywords: "Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",
      contains: [
        {
          className: "symbol",
          begin: "\\*",
          relevance: 0
        },
        {
          className: "meta",
          begin: "@[^@\\s]+"
        },
        {
          begin: "\\|",
          end: "\\|\\w*$",
          contains: [
            {
              className: "string",
              begin: "[^|]+"
            }
          ]
        },
        {
          className: "variable",
          begin: "<",
          end: ">"
        },
        e.HASH_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        e.QUOTE_STRING_MODE
      ]
    };
  }
  return Bm = t, Bm;
}
var Um, oA;
function _ee() {
  if (oA) return Um;
  oA = 1;
  function t(e) {
    return {
      name: "GLSL",
      keywords: {
        keyword: (
          // Statements
          "break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly"
        ),
        type: "atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",
        built_in: (
          // Constants
          "gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow"
        ),
        literal: "true false"
      },
      illegal: '"',
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        }
      ]
    };
  }
  return Um = t, Um;
}
var Gm, lA;
function mee() {
  if (lA) return Gm;
  lA = 1;
  function t(e) {
    return {
      name: "GML",
      case_insensitive: !1,
      // language is case-insensitive
      keywords: {
        keyword: [
          "#endregion",
          "#macro",
          "#region",
          "and",
          "begin",
          "break",
          "case",
          "constructor",
          "continue",
          "default",
          "delete",
          "div",
          "do",
          "else",
          "end",
          "enum",
          "exit",
          "for",
          "function",
          "globalvar",
          "if",
          "mod",
          "not",
          "or",
          "repeat",
          "return",
          "switch",
          "then",
          "until",
          "var",
          "while",
          "with",
          "xor"
        ],
        built_in: [
          "abs",
          "achievement_available",
          "achievement_event",
          "achievement_get_challenges",
          "achievement_get_info",
          "achievement_get_pic",
          "achievement_increment",
          "achievement_load_friends",
          "achievement_load_leaderboard",
          "achievement_load_progress",
          "achievement_login",
          "achievement_login_status",
          "achievement_logout",
          "achievement_post",
          "achievement_post_score",
          "achievement_reset",
          "achievement_send_challenge",
          "achievement_show",
          "achievement_show_achievements",
          "achievement_show_challenge_notifications",
          "achievement_show_leaderboards",
          "action_inherited",
          "action_kill_object",
          "ads_disable",
          "ads_enable",
          "ads_engagement_active",
          "ads_engagement_available",
          "ads_engagement_launch",
          "ads_event",
          "ads_event_preload",
          "ads_get_display_height",
          "ads_get_display_width",
          "ads_interstitial_available",
          "ads_interstitial_display",
          "ads_move",
          "ads_set_reward_callback",
          "ads_setup",
          "alarm_get",
          "alarm_set",
          "analytics_event",
          "analytics_event_ext",
          "angle_difference",
          "ansi_char",
          "application_get_position",
          "application_surface_draw_enable",
          "application_surface_enable",
          "application_surface_is_enabled",
          "arccos",
          "arcsin",
          "arctan",
          "arctan2",
          "array_copy",
          "array_create",
          "array_delete",
          "array_equals",
          "array_height_2d",
          "array_insert",
          "array_length",
          "array_length_1d",
          "array_length_2d",
          "array_pop",
          "array_push",
          "array_resize",
          "array_sort",
          "asset_get_index",
          "asset_get_type",
          "audio_channel_num",
          "audio_create_buffer_sound",
          "audio_create_play_queue",
          "audio_create_stream",
          "audio_create_sync_group",
          "audio_debug",
          "audio_destroy_stream",
          "audio_destroy_sync_group",
          "audio_emitter_create",
          "audio_emitter_exists",
          "audio_emitter_falloff",
          "audio_emitter_free",
          "audio_emitter_gain",
          "audio_emitter_get_gain",
          "audio_emitter_get_listener_mask",
          "audio_emitter_get_pitch",
          "audio_emitter_get_vx",
          "audio_emitter_get_vy",
          "audio_emitter_get_vz",
          "audio_emitter_get_x",
          "audio_emitter_get_y",
          "audio_emitter_get_z",
          "audio_emitter_pitch",
          "audio_emitter_position",
          "audio_emitter_set_listener_mask",
          "audio_emitter_velocity",
          "audio_exists",
          "audio_falloff_set_model",
          "audio_free_buffer_sound",
          "audio_free_play_queue",
          "audio_get_listener_count",
          "audio_get_listener_info",
          "audio_get_listener_mask",
          "audio_get_master_gain",
          "audio_get_name",
          "audio_get_recorder_count",
          "audio_get_recorder_info",
          "audio_get_type",
          "audio_group_is_loaded",
          "audio_group_load",
          "audio_group_load_progress",
          "audio_group_name",
          "audio_group_set_gain",
          "audio_group_stop_all",
          "audio_group_unload",
          "audio_is_paused",
          "audio_is_playing",
          "audio_listener_get_data",
          "audio_listener_orientation",
          "audio_listener_position",
          "audio_listener_set_orientation",
          "audio_listener_set_position",
          "audio_listener_set_velocity",
          "audio_listener_velocity",
          "audio_master_gain",
          "audio_music_gain",
          "audio_music_is_playing",
          "audio_pause_all",
          "audio_pause_music",
          "audio_pause_sound",
          "audio_pause_sync_group",
          "audio_play_in_sync_group",
          "audio_play_music",
          "audio_play_sound",
          "audio_play_sound_at",
          "audio_play_sound_on",
          "audio_queue_sound",
          "audio_resume_all",
          "audio_resume_music",
          "audio_resume_sound",
          "audio_resume_sync_group",
          "audio_set_listener_mask",
          "audio_set_master_gain",
          "audio_sound_gain",
          "audio_sound_get_gain",
          "audio_sound_get_listener_mask",
          "audio_sound_get_pitch",
          "audio_sound_get_track_position",
          "audio_sound_length",
          "audio_sound_pitch",
          "audio_sound_set_listener_mask",
          "audio_sound_set_track_position",
          "audio_start_recording",
          "audio_start_sync_group",
          "audio_stop_all",
          "audio_stop_music",
          "audio_stop_recording",
          "audio_stop_sound",
          "audio_stop_sync_group",
          "audio_sync_group_debug",
          "audio_sync_group_get_track_pos",
          "audio_sync_group_is_playing",
          "audio_system",
          "background_get_height",
          "background_get_width",
          "base64_decode",
          "base64_encode",
          "browser_input_capture",
          "buffer_async_group_begin",
          "buffer_async_group_end",
          "buffer_async_group_option",
          "buffer_base64_decode",
          "buffer_base64_decode_ext",
          "buffer_base64_encode",
          "buffer_copy",
          "buffer_copy_from_vertex_buffer",
          "buffer_create",
          "buffer_create_from_vertex_buffer",
          "buffer_create_from_vertex_buffer_ext",
          "buffer_delete",
          "buffer_exists",
          "buffer_fill",
          "buffer_get_address",
          "buffer_get_alignment",
          "buffer_get_size",
          "buffer_get_surface",
          "buffer_get_type",
          "buffer_load",
          "buffer_load_async",
          "buffer_load_ext",
          "buffer_load_partial",
          "buffer_md5",
          "buffer_peek",
          "buffer_poke",
          "buffer_read",
          "buffer_resize",
          "buffer_save",
          "buffer_save_async",
          "buffer_save_ext",
          "buffer_seek",
          "buffer_set_surface",
          "buffer_sha1",
          "buffer_sizeof",
          "buffer_tell",
          "buffer_write",
          "camera_apply",
          "camera_create",
          "camera_create_view",
          "camera_destroy",
          "camera_get_active",
          "camera_get_begin_script",
          "camera_get_default",
          "camera_get_end_script",
          "camera_get_proj_mat",
          "camera_get_update_script",
          "camera_get_view_angle",
          "camera_get_view_border_x",
          "camera_get_view_border_y",
          "camera_get_view_height",
          "camera_get_view_mat",
          "camera_get_view_speed_x",
          "camera_get_view_speed_y",
          "camera_get_view_target",
          "camera_get_view_width",
          "camera_get_view_x",
          "camera_get_view_y",
          "camera_set_begin_script",
          "camera_set_default",
          "camera_set_end_script",
          "camera_set_proj_mat",
          "camera_set_update_script",
          "camera_set_view_angle",
          "camera_set_view_border",
          "camera_set_view_mat",
          "camera_set_view_pos",
          "camera_set_view_size",
          "camera_set_view_speed",
          "camera_set_view_target",
          "ceil",
          "choose",
          "chr",
          "clamp",
          "clickable_add",
          "clickable_add_ext",
          "clickable_change",
          "clickable_change_ext",
          "clickable_delete",
          "clickable_exists",
          "clickable_set_style",
          "clipboard_get_text",
          "clipboard_has_text",
          "clipboard_set_text",
          "cloud_file_save",
          "cloud_string_save",
          "cloud_synchronise",
          "code_is_compiled",
          "collision_circle",
          "collision_circle_list",
          "collision_ellipse",
          "collision_ellipse_list",
          "collision_line",
          "collision_line_list",
          "collision_point",
          "collision_point_list",
          "collision_rectangle",
          "collision_rectangle_list",
          "color_get_blue",
          "color_get_green",
          "color_get_hue",
          "color_get_red",
          "color_get_saturation",
          "color_get_value",
          "colour_get_blue",
          "colour_get_green",
          "colour_get_hue",
          "colour_get_red",
          "colour_get_saturation",
          "colour_get_value",
          "cos",
          "darccos",
          "darcsin",
          "darctan",
          "darctan2",
          "date_compare_date",
          "date_compare_datetime",
          "date_compare_time",
          "date_create_datetime",
          "date_current_datetime",
          "date_date_of",
          "date_date_string",
          "date_datetime_string",
          "date_day_span",
          "date_days_in_month",
          "date_days_in_year",
          "date_get_day",
          "date_get_day_of_year",
          "date_get_hour",
          "date_get_hour_of_year",
          "date_get_minute",
          "date_get_minute_of_year",
          "date_get_month",
          "date_get_second",
          "date_get_second_of_year",
          "date_get_timezone",
          "date_get_week",
          "date_get_weekday",
          "date_get_year",
          "date_hour_span",
          "date_inc_day",
          "date_inc_hour",
          "date_inc_minute",
          "date_inc_month",
          "date_inc_second",
          "date_inc_week",
          "date_inc_year",
          "date_is_today",
          "date_leap_year",
          "date_minute_span",
          "date_month_span",
          "date_second_span",
          "date_set_timezone",
          "date_time_of",
          "date_time_string",
          "date_valid_datetime",
          "date_week_span",
          "date_year_span",
          "dcos",
          "debug_event",
          "debug_get_callstack",
          "degtorad",
          "device_get_tilt_x",
          "device_get_tilt_y",
          "device_get_tilt_z",
          "device_is_keypad_open",
          "device_mouse_check_button",
          "device_mouse_check_button_pressed",
          "device_mouse_check_button_released",
          "device_mouse_dbclick_enable",
          "device_mouse_raw_x",
          "device_mouse_raw_y",
          "device_mouse_x",
          "device_mouse_x_to_gui",
          "device_mouse_y",
          "device_mouse_y_to_gui",
          "directory_create",
          "directory_destroy",
          "directory_exists",
          "display_get_dpi_x",
          "display_get_dpi_y",
          "display_get_gui_height",
          "display_get_gui_width",
          "display_get_height",
          "display_get_orientation",
          "display_get_sleep_margin",
          "display_get_timing_method",
          "display_get_width",
          "display_mouse_get_x",
          "display_mouse_get_y",
          "display_mouse_set",
          "display_reset",
          "display_set_gui_maximise",
          "display_set_gui_maximize",
          "display_set_gui_size",
          "display_set_sleep_margin",
          "display_set_timing_method",
          "display_set_ui_visibility",
          "distance_to_object",
          "distance_to_point",
          "dot_product",
          "dot_product_3d",
          "dot_product_3d_normalised",
          "dot_product_3d_normalized",
          "dot_product_normalised",
          "dot_product_normalized",
          "draw_arrow",
          "draw_background",
          "draw_background_ext",
          "draw_background_part_ext",
          "draw_background_tiled",
          "draw_button",
          "draw_circle",
          "draw_circle_color",
          "draw_circle_colour",
          "draw_clear",
          "draw_clear_alpha",
          "draw_ellipse",
          "draw_ellipse_color",
          "draw_ellipse_colour",
          "draw_enable_alphablend",
          "draw_enable_drawevent",
          "draw_enable_swf_aa",
          "draw_flush",
          "draw_get_alpha",
          "draw_get_color",
          "draw_get_colour",
          "draw_get_lighting",
          "draw_get_swf_aa_level",
          "draw_getpixel",
          "draw_getpixel_ext",
          "draw_healthbar",
          "draw_highscore",
          "draw_light_define_ambient",
          "draw_light_define_direction",
          "draw_light_define_point",
          "draw_light_enable",
          "draw_light_get",
          "draw_light_get_ambient",
          "draw_line",
          "draw_line_color",
          "draw_line_colour",
          "draw_line_width",
          "draw_line_width_color",
          "draw_line_width_colour",
          "draw_path",
          "draw_point",
          "draw_point_color",
          "draw_point_colour",
          "draw_primitive_begin",
          "draw_primitive_begin_texture",
          "draw_primitive_end",
          "draw_rectangle",
          "draw_rectangle_color",
          "draw_rectangle_colour",
          "draw_roundrect",
          "draw_roundrect_color",
          "draw_roundrect_color_ext",
          "draw_roundrect_colour",
          "draw_roundrect_colour_ext",
          "draw_roundrect_ext",
          "draw_self",
          "draw_set_alpha",
          "draw_set_alpha_test",
          "draw_set_alpha_test_ref_value",
          "draw_set_blend_mode",
          "draw_set_blend_mode_ext",
          "draw_set_circle_precision",
          "draw_set_color",
          "draw_set_color_write_enable",
          "draw_set_colour",
          "draw_set_font",
          "draw_set_halign",
          "draw_set_lighting",
          "draw_set_swf_aa_level",
          "draw_set_valign",
          "draw_skeleton",
          "draw_skeleton_collision",
          "draw_skeleton_instance",
          "draw_skeleton_time",
          "draw_sprite",
          "draw_sprite_ext",
          "draw_sprite_general",
          "draw_sprite_part",
          "draw_sprite_part_ext",
          "draw_sprite_pos",
          "draw_sprite_stretched",
          "draw_sprite_stretched_ext",
          "draw_sprite_tiled",
          "draw_sprite_tiled_ext",
          "draw_surface",
          "draw_surface_ext",
          "draw_surface_general",
          "draw_surface_part",
          "draw_surface_part_ext",
          "draw_surface_stretched",
          "draw_surface_stretched_ext",
          "draw_surface_tiled",
          "draw_surface_tiled_ext",
          "draw_text",
          "draw_text_color",
          "draw_text_colour",
          "draw_text_ext",
          "draw_text_ext_color",
          "draw_text_ext_colour",
          "draw_text_ext_transformed",
          "draw_text_ext_transformed_color",
          "draw_text_ext_transformed_colour",
          "draw_text_transformed",
          "draw_text_transformed_color",
          "draw_text_transformed_colour",
          "draw_texture_flush",
          "draw_tile",
          "draw_tilemap",
          "draw_triangle",
          "draw_triangle_color",
          "draw_triangle_colour",
          "draw_vertex",
          "draw_vertex_color",
          "draw_vertex_colour",
          "draw_vertex_texture",
          "draw_vertex_texture_color",
          "draw_vertex_texture_colour",
          "ds_exists",
          "ds_grid_add",
          "ds_grid_add_disk",
          "ds_grid_add_grid_region",
          "ds_grid_add_region",
          "ds_grid_clear",
          "ds_grid_copy",
          "ds_grid_create",
          "ds_grid_destroy",
          "ds_grid_get",
          "ds_grid_get_disk_max",
          "ds_grid_get_disk_mean",
          "ds_grid_get_disk_min",
          "ds_grid_get_disk_sum",
          "ds_grid_get_max",
          "ds_grid_get_mean",
          "ds_grid_get_min",
          "ds_grid_get_sum",
          "ds_grid_height",
          "ds_grid_multiply",
          "ds_grid_multiply_disk",
          "ds_grid_multiply_grid_region",
          "ds_grid_multiply_region",
          "ds_grid_read",
          "ds_grid_resize",
          "ds_grid_set",
          "ds_grid_set_disk",
          "ds_grid_set_grid_region",
          "ds_grid_set_region",
          "ds_grid_shuffle",
          "ds_grid_sort",
          "ds_grid_value_disk_exists",
          "ds_grid_value_disk_x",
          "ds_grid_value_disk_y",
          "ds_grid_value_exists",
          "ds_grid_value_x",
          "ds_grid_value_y",
          "ds_grid_width",
          "ds_grid_write",
          "ds_list_add",
          "ds_list_clear",
          "ds_list_copy",
          "ds_list_create",
          "ds_list_delete",
          "ds_list_destroy",
          "ds_list_empty",
          "ds_list_find_index",
          "ds_list_find_value",
          "ds_list_insert",
          "ds_list_mark_as_list",
          "ds_list_mark_as_map",
          "ds_list_read",
          "ds_list_replace",
          "ds_list_set",
          "ds_list_shuffle",
          "ds_list_size",
          "ds_list_sort",
          "ds_list_write",
          "ds_map_add",
          "ds_map_add_list",
          "ds_map_add_map",
          "ds_map_clear",
          "ds_map_copy",
          "ds_map_create",
          "ds_map_delete",
          "ds_map_destroy",
          "ds_map_empty",
          "ds_map_exists",
          "ds_map_find_first",
          "ds_map_find_last",
          "ds_map_find_next",
          "ds_map_find_previous",
          "ds_map_find_value",
          "ds_map_read",
          "ds_map_replace",
          "ds_map_replace_list",
          "ds_map_replace_map",
          "ds_map_secure_load",
          "ds_map_secure_load_buffer",
          "ds_map_secure_save",
          "ds_map_secure_save_buffer",
          "ds_map_set",
          "ds_map_size",
          "ds_map_write",
          "ds_priority_add",
          "ds_priority_change_priority",
          "ds_priority_clear",
          "ds_priority_copy",
          "ds_priority_create",
          "ds_priority_delete_max",
          "ds_priority_delete_min",
          "ds_priority_delete_value",
          "ds_priority_destroy",
          "ds_priority_empty",
          "ds_priority_find_max",
          "ds_priority_find_min",
          "ds_priority_find_priority",
          "ds_priority_read",
          "ds_priority_size",
          "ds_priority_write",
          "ds_queue_clear",
          "ds_queue_copy",
          "ds_queue_create",
          "ds_queue_dequeue",
          "ds_queue_destroy",
          "ds_queue_empty",
          "ds_queue_enqueue",
          "ds_queue_head",
          "ds_queue_read",
          "ds_queue_size",
          "ds_queue_tail",
          "ds_queue_write",
          "ds_set_precision",
          "ds_stack_clear",
          "ds_stack_copy",
          "ds_stack_create",
          "ds_stack_destroy",
          "ds_stack_empty",
          "ds_stack_pop",
          "ds_stack_push",
          "ds_stack_read",
          "ds_stack_size",
          "ds_stack_top",
          "ds_stack_write",
          "dsin",
          "dtan",
          "effect_clear",
          "effect_create_above",
          "effect_create_below",
          "environment_get_variable",
          "event_inherited",
          "event_perform",
          "event_perform_object",
          "event_user",
          "exp",
          "external_call",
          "external_define",
          "external_free",
          "facebook_accesstoken",
          "facebook_check_permission",
          "facebook_dialog",
          "facebook_graph_request",
          "facebook_init",
          "facebook_launch_offerwall",
          "facebook_login",
          "facebook_logout",
          "facebook_post_message",
          "facebook_request_publish_permissions",
          "facebook_request_read_permissions",
          "facebook_send_invite",
          "facebook_status",
          "facebook_user_id",
          "file_attributes",
          "file_bin_close",
          "file_bin_open",
          "file_bin_position",
          "file_bin_read_byte",
          "file_bin_rewrite",
          "file_bin_seek",
          "file_bin_size",
          "file_bin_write_byte",
          "file_copy",
          "file_delete",
          "file_exists",
          "file_find_close",
          "file_find_first",
          "file_find_next",
          "file_rename",
          "file_text_close",
          "file_text_eof",
          "file_text_eoln",
          "file_text_open_append",
          "file_text_open_from_string",
          "file_text_open_read",
          "file_text_open_write",
          "file_text_read_real",
          "file_text_read_string",
          "file_text_readln",
          "file_text_write_real",
          "file_text_write_string",
          "file_text_writeln",
          "filename_change_ext",
          "filename_dir",
          "filename_drive",
          "filename_ext",
          "filename_name",
          "filename_path",
          "floor",
          "font_add",
          "font_add_enable_aa",
          "font_add_get_enable_aa",
          "font_add_sprite",
          "font_add_sprite_ext",
          "font_delete",
          "font_exists",
          "font_get_bold",
          "font_get_first",
          "font_get_fontname",
          "font_get_italic",
          "font_get_last",
          "font_get_name",
          "font_get_size",
          "font_get_texture",
          "font_get_uvs",
          "font_replace",
          "font_replace_sprite",
          "font_replace_sprite_ext",
          "font_set_cache_size",
          "font_texture_page_size",
          "frac",
          "game_end",
          "game_get_speed",
          "game_load",
          "game_load_buffer",
          "game_restart",
          "game_save",
          "game_save_buffer",
          "game_set_speed",
          "gamepad_axis_count",
          "gamepad_axis_value",
          "gamepad_button_check",
          "gamepad_button_check_pressed",
          "gamepad_button_check_released",
          "gamepad_button_count",
          "gamepad_button_value",
          "gamepad_get_axis_deadzone",
          "gamepad_get_button_threshold",
          "gamepad_get_description",
          "gamepad_get_device_count",
          "gamepad_is_connected",
          "gamepad_is_supported",
          "gamepad_set_axis_deadzone",
          "gamepad_set_button_threshold",
          "gamepad_set_color",
          "gamepad_set_colour",
          "gamepad_set_vibration",
          "gesture_double_tap_distance",
          "gesture_double_tap_time",
          "gesture_drag_distance",
          "gesture_drag_time",
          "gesture_flick_speed",
          "gesture_get_double_tap_distance",
          "gesture_get_double_tap_time",
          "gesture_get_drag_distance",
          "gesture_get_drag_time",
          "gesture_get_flick_speed",
          "gesture_get_pinch_angle_away",
          "gesture_get_pinch_angle_towards",
          "gesture_get_pinch_distance",
          "gesture_get_rotate_angle",
          "gesture_get_rotate_time",
          "gesture_get_tap_count",
          "gesture_pinch_angle_away",
          "gesture_pinch_angle_towards",
          "gesture_pinch_distance",
          "gesture_rotate_angle",
          "gesture_rotate_time",
          "gesture_tap_count",
          "get_integer",
          "get_integer_async",
          "get_login_async",
          "get_open_filename",
          "get_open_filename_ext",
          "get_save_filename",
          "get_save_filename_ext",
          "get_string",
          "get_string_async",
          "get_timer",
          "gml_pragma",
          "gml_release_mode",
          "gpu_get_alphatestenable",
          "gpu_get_alphatestfunc",
          "gpu_get_alphatestref",
          "gpu_get_blendenable",
          "gpu_get_blendmode",
          "gpu_get_blendmode_dest",
          "gpu_get_blendmode_destalpha",
          "gpu_get_blendmode_ext",
          "gpu_get_blendmode_ext_sepalpha",
          "gpu_get_blendmode_src",
          "gpu_get_blendmode_srcalpha",
          "gpu_get_colorwriteenable",
          "gpu_get_colourwriteenable",
          "gpu_get_cullmode",
          "gpu_get_fog",
          "gpu_get_lightingenable",
          "gpu_get_state",
          "gpu_get_tex_filter",
          "gpu_get_tex_filter_ext",
          "gpu_get_tex_max_aniso",
          "gpu_get_tex_max_aniso_ext",
          "gpu_get_tex_max_mip",
          "gpu_get_tex_max_mip_ext",
          "gpu_get_tex_min_mip",
          "gpu_get_tex_min_mip_ext",
          "gpu_get_tex_mip_bias",
          "gpu_get_tex_mip_bias_ext",
          "gpu_get_tex_mip_enable",
          "gpu_get_tex_mip_enable_ext",
          "gpu_get_tex_mip_filter",
          "gpu_get_tex_mip_filter_ext",
          "gpu_get_tex_repeat",
          "gpu_get_tex_repeat_ext",
          "gpu_get_texfilter",
          "gpu_get_texfilter_ext",
          "gpu_get_texrepeat",
          "gpu_get_texrepeat_ext",
          "gpu_get_zfunc",
          "gpu_get_ztestenable",
          "gpu_get_zwriteenable",
          "gpu_pop_state",
          "gpu_push_state",
          "gpu_set_alphatestenable",
          "gpu_set_alphatestfunc",
          "gpu_set_alphatestref",
          "gpu_set_blendenable",
          "gpu_set_blendmode",
          "gpu_set_blendmode_ext",
          "gpu_set_blendmode_ext_sepalpha",
          "gpu_set_colorwriteenable",
          "gpu_set_colourwriteenable",
          "gpu_set_cullmode",
          "gpu_set_fog",
          "gpu_set_lightingenable",
          "gpu_set_state",
          "gpu_set_tex_filter",
          "gpu_set_tex_filter_ext",
          "gpu_set_tex_max_aniso",
          "gpu_set_tex_max_aniso_ext",
          "gpu_set_tex_max_mip",
          "gpu_set_tex_max_mip_ext",
          "gpu_set_tex_min_mip",
          "gpu_set_tex_min_mip_ext",
          "gpu_set_tex_mip_bias",
          "gpu_set_tex_mip_bias_ext",
          "gpu_set_tex_mip_enable",
          "gpu_set_tex_mip_enable_ext",
          "gpu_set_tex_mip_filter",
          "gpu_set_tex_mip_filter_ext",
          "gpu_set_tex_repeat",
          "gpu_set_tex_repeat_ext",
          "gpu_set_texfilter",
          "gpu_set_texfilter_ext",
          "gpu_set_texrepeat",
          "gpu_set_texrepeat_ext",
          "gpu_set_zfunc",
          "gpu_set_ztestenable",
          "gpu_set_zwriteenable",
          "highscore_add",
          "highscore_clear",
          "highscore_name",
          "highscore_value",
          "http_get",
          "http_get_file",
          "http_post_string",
          "http_request",
          "iap_acquire",
          "iap_activate",
          "iap_consume",
          "iap_enumerate_products",
          "iap_product_details",
          "iap_purchase_details",
          "iap_restore_all",
          "iap_status",
          "ini_close",
          "ini_key_delete",
          "ini_key_exists",
          "ini_open",
          "ini_open_from_string",
          "ini_read_real",
          "ini_read_string",
          "ini_section_delete",
          "ini_section_exists",
          "ini_write_real",
          "ini_write_string",
          "instance_activate_all",
          "instance_activate_layer",
          "instance_activate_object",
          "instance_activate_region",
          "instance_change",
          "instance_copy",
          "instance_create",
          "instance_create_depth",
          "instance_create_layer",
          "instance_deactivate_all",
          "instance_deactivate_layer",
          "instance_deactivate_object",
          "instance_deactivate_region",
          "instance_destroy",
          "instance_exists",
          "instance_find",
          "instance_furthest",
          "instance_id_get",
          "instance_nearest",
          "instance_number",
          "instance_place",
          "instance_place_list",
          "instance_position",
          "instance_position_list",
          "int64",
          "io_clear",
          "irandom",
          "irandom_range",
          "is_array",
          "is_bool",
          "is_infinity",
          "is_int32",
          "is_int64",
          "is_matrix",
          "is_method",
          "is_nan",
          "is_numeric",
          "is_ptr",
          "is_real",
          "is_string",
          "is_struct",
          "is_undefined",
          "is_vec3",
          "is_vec4",
          "json_decode",
          "json_encode",
          "keyboard_check",
          "keyboard_check_direct",
          "keyboard_check_pressed",
          "keyboard_check_released",
          "keyboard_clear",
          "keyboard_get_map",
          "keyboard_get_numlock",
          "keyboard_key_press",
          "keyboard_key_release",
          "keyboard_set_map",
          "keyboard_set_numlock",
          "keyboard_unset_map",
          "keyboard_virtual_height",
          "keyboard_virtual_hide",
          "keyboard_virtual_show",
          "keyboard_virtual_status",
          "layer_add_instance",
          "layer_background_alpha",
          "layer_background_blend",
          "layer_background_change",
          "layer_background_create",
          "layer_background_destroy",
          "layer_background_exists",
          "layer_background_get_alpha",
          "layer_background_get_blend",
          "layer_background_get_htiled",
          "layer_background_get_id",
          "layer_background_get_index",
          "layer_background_get_speed",
          "layer_background_get_sprite",
          "layer_background_get_stretch",
          "layer_background_get_visible",
          "layer_background_get_vtiled",
          "layer_background_get_xscale",
          "layer_background_get_yscale",
          "layer_background_htiled",
          "layer_background_index",
          "layer_background_speed",
          "layer_background_sprite",
          "layer_background_stretch",
          "layer_background_visible",
          "layer_background_vtiled",
          "layer_background_xscale",
          "layer_background_yscale",
          "layer_create",
          "layer_depth",
          "layer_destroy",
          "layer_destroy_instances",
          "layer_element_move",
          "layer_exists",
          "layer_force_draw_depth",
          "layer_get_all",
          "layer_get_all_elements",
          "layer_get_depth",
          "layer_get_element_layer",
          "layer_get_element_type",
          "layer_get_forced_depth",
          "layer_get_hspeed",
          "layer_get_id",
          "layer_get_id_at_depth",
          "layer_get_name",
          "layer_get_script_begin",
          "layer_get_script_end",
          "layer_get_shader",
          "layer_get_target_room",
          "layer_get_visible",
          "layer_get_vspeed",
          "layer_get_x",
          "layer_get_y",
          "layer_has_instance",
          "layer_hspeed",
          "layer_instance_get_instance",
          "layer_is_draw_depth_forced",
          "layer_reset_target_room",
          "layer_script_begin",
          "layer_script_end",
          "layer_set_target_room",
          "layer_set_visible",
          "layer_shader",
          "layer_sprite_alpha",
          "layer_sprite_angle",
          "layer_sprite_blend",
          "layer_sprite_change",
          "layer_sprite_create",
          "layer_sprite_destroy",
          "layer_sprite_exists",
          "layer_sprite_get_alpha",
          "layer_sprite_get_angle",
          "layer_sprite_get_blend",
          "layer_sprite_get_id",
          "layer_sprite_get_index",
          "layer_sprite_get_speed",
          "layer_sprite_get_sprite",
          "layer_sprite_get_x",
          "layer_sprite_get_xscale",
          "layer_sprite_get_y",
          "layer_sprite_get_yscale",
          "layer_sprite_index",
          "layer_sprite_speed",
          "layer_sprite_x",
          "layer_sprite_xscale",
          "layer_sprite_y",
          "layer_sprite_yscale",
          "layer_tile_alpha",
          "layer_tile_blend",
          "layer_tile_change",
          "layer_tile_create",
          "layer_tile_destroy",
          "layer_tile_exists",
          "layer_tile_get_alpha",
          "layer_tile_get_blend",
          "layer_tile_get_region",
          "layer_tile_get_sprite",
          "layer_tile_get_visible",
          "layer_tile_get_x",
          "layer_tile_get_xscale",
          "layer_tile_get_y",
          "layer_tile_get_yscale",
          "layer_tile_region",
          "layer_tile_visible",
          "layer_tile_x",
          "layer_tile_xscale",
          "layer_tile_y",
          "layer_tile_yscale",
          "layer_tilemap_create",
          "layer_tilemap_destroy",
          "layer_tilemap_exists",
          "layer_tilemap_get_id",
          "layer_vspeed",
          "layer_x",
          "layer_y",
          "lengthdir_x",
          "lengthdir_y",
          "lerp",
          "ln",
          "load_csv",
          "log10",
          "log2",
          "logn",
          "make_color_hsv",
          "make_color_rgb",
          "make_colour_hsv",
          "make_colour_rgb",
          "math_get_epsilon",
          "math_set_epsilon",
          "matrix_build",
          "matrix_build_identity",
          "matrix_build_lookat",
          "matrix_build_projection_ortho",
          "matrix_build_projection_perspective",
          "matrix_build_projection_perspective_fov",
          "matrix_get",
          "matrix_multiply",
          "matrix_set",
          "matrix_stack_clear",
          "matrix_stack_is_empty",
          "matrix_stack_multiply",
          "matrix_stack_pop",
          "matrix_stack_push",
          "matrix_stack_set",
          "matrix_stack_top",
          "matrix_transform_vertex",
          "max",
          "md5_file",
          "md5_string_unicode",
          "md5_string_utf8",
          "mean",
          "median",
          "merge_color",
          "merge_colour",
          "min",
          "motion_add",
          "motion_set",
          "mouse_check_button",
          "mouse_check_button_pressed",
          "mouse_check_button_released",
          "mouse_clear",
          "mouse_wheel_down",
          "mouse_wheel_up",
          "move_bounce_all",
          "move_bounce_solid",
          "move_contact_all",
          "move_contact_solid",
          "move_outside_all",
          "move_outside_solid",
          "move_random",
          "move_snap",
          "move_towards_point",
          "move_wrap",
          "mp_grid_add_cell",
          "mp_grid_add_instances",
          "mp_grid_add_rectangle",
          "mp_grid_clear_all",
          "mp_grid_clear_cell",
          "mp_grid_clear_rectangle",
          "mp_grid_create",
          "mp_grid_destroy",
          "mp_grid_draw",
          "mp_grid_get_cell",
          "mp_grid_path",
          "mp_grid_to_ds_grid",
          "mp_linear_path",
          "mp_linear_path_object",
          "mp_linear_step",
          "mp_linear_step_object",
          "mp_potential_path",
          "mp_potential_path_object",
          "mp_potential_settings",
          "mp_potential_step",
          "mp_potential_step_object",
          "network_connect",
          "network_connect_raw",
          "network_create_server",
          "network_create_server_raw",
          "network_create_socket",
          "network_create_socket_ext",
          "network_destroy",
          "network_resolve",
          "network_send_broadcast",
          "network_send_packet",
          "network_send_raw",
          "network_send_udp",
          "network_send_udp_raw",
          "network_set_config",
          "network_set_timeout",
          "object_exists",
          "object_get_depth",
          "object_get_mask",
          "object_get_name",
          "object_get_parent",
          "object_get_persistent",
          "object_get_physics",
          "object_get_solid",
          "object_get_sprite",
          "object_get_visible",
          "object_is_ancestor",
          "object_set_mask",
          "object_set_persistent",
          "object_set_solid",
          "object_set_sprite",
          "object_set_visible",
          "ord",
          "os_get_config",
          "os_get_info",
          "os_get_language",
          "os_get_region",
          "os_is_network_connected",
          "os_is_paused",
          "os_lock_orientation",
          "os_powersave_enable",
          "parameter_count",
          "parameter_string",
          "part_emitter_burst",
          "part_emitter_clear",
          "part_emitter_create",
          "part_emitter_destroy",
          "part_emitter_destroy_all",
          "part_emitter_exists",
          "part_emitter_region",
          "part_emitter_stream",
          "part_particles_clear",
          "part_particles_count",
          "part_particles_create",
          "part_particles_create_color",
          "part_particles_create_colour",
          "part_system_automatic_draw",
          "part_system_automatic_update",
          "part_system_clear",
          "part_system_create",
          "part_system_create_layer",
          "part_system_depth",
          "part_system_destroy",
          "part_system_draw_order",
          "part_system_drawit",
          "part_system_exists",
          "part_system_get_layer",
          "part_system_layer",
          "part_system_position",
          "part_system_update",
          "part_type_alpha1",
          "part_type_alpha2",
          "part_type_alpha3",
          "part_type_blend",
          "part_type_clear",
          "part_type_color1",
          "part_type_color2",
          "part_type_color3",
          "part_type_color_hsv",
          "part_type_color_mix",
          "part_type_color_rgb",
          "part_type_colour1",
          "part_type_colour2",
          "part_type_colour3",
          "part_type_colour_hsv",
          "part_type_colour_mix",
          "part_type_colour_rgb",
          "part_type_create",
          "part_type_death",
          "part_type_destroy",
          "part_type_direction",
          "part_type_exists",
          "part_type_gravity",
          "part_type_life",
          "part_type_orientation",
          "part_type_scale",
          "part_type_shape",
          "part_type_size",
          "part_type_speed",
          "part_type_sprite",
          "part_type_step",
          "path_add",
          "path_add_point",
          "path_append",
          "path_assign",
          "path_change_point",
          "path_clear_points",
          "path_delete",
          "path_delete_point",
          "path_duplicate",
          "path_end",
          "path_exists",
          "path_flip",
          "path_get_closed",
          "path_get_kind",
          "path_get_length",
          "path_get_name",
          "path_get_number",
          "path_get_point_speed",
          "path_get_point_x",
          "path_get_point_y",
          "path_get_precision",
          "path_get_speed",
          "path_get_time",
          "path_get_x",
          "path_get_y",
          "path_insert_point",
          "path_mirror",
          "path_rescale",
          "path_reverse",
          "path_rotate",
          "path_set_closed",
          "path_set_kind",
          "path_set_precision",
          "path_shift",
          "path_start",
          "physics_apply_angular_impulse",
          "physics_apply_force",
          "physics_apply_impulse",
          "physics_apply_local_force",
          "physics_apply_local_impulse",
          "physics_apply_torque",
          "physics_draw_debug",
          "physics_fixture_add_point",
          "physics_fixture_bind",
          "physics_fixture_bind_ext",
          "physics_fixture_create",
          "physics_fixture_delete",
          "physics_fixture_set_angular_damping",
          "physics_fixture_set_awake",
          "physics_fixture_set_box_shape",
          "physics_fixture_set_chain_shape",
          "physics_fixture_set_circle_shape",
          "physics_fixture_set_collision_group",
          "physics_fixture_set_density",
          "physics_fixture_set_edge_shape",
          "physics_fixture_set_friction",
          "physics_fixture_set_kinematic",
          "physics_fixture_set_linear_damping",
          "physics_fixture_set_polygon_shape",
          "physics_fixture_set_restitution",
          "physics_fixture_set_sensor",
          "physics_get_density",
          "physics_get_friction",
          "physics_get_restitution",
          "physics_joint_delete",
          "physics_joint_distance_create",
          "physics_joint_enable_motor",
          "physics_joint_friction_create",
          "physics_joint_gear_create",
          "physics_joint_get_value",
          "physics_joint_prismatic_create",
          "physics_joint_pulley_create",
          "physics_joint_revolute_create",
          "physics_joint_rope_create",
          "physics_joint_set_value",
          "physics_joint_weld_create",
          "physics_joint_wheel_create",
          "physics_mass_properties",
          "physics_particle_count",
          "physics_particle_create",
          "physics_particle_delete",
          "physics_particle_delete_region_box",
          "physics_particle_delete_region_circle",
          "physics_particle_delete_region_poly",
          "physics_particle_draw",
          "physics_particle_draw_ext",
          "physics_particle_get_damping",
          "physics_particle_get_data",
          "physics_particle_get_data_particle",
          "physics_particle_get_density",
          "physics_particle_get_gravity_scale",
          "physics_particle_get_group_flags",
          "physics_particle_get_max_count",
          "physics_particle_get_radius",
          "physics_particle_group_add_point",
          "physics_particle_group_begin",
          "physics_particle_group_box",
          "physics_particle_group_circle",
          "physics_particle_group_count",
          "physics_particle_group_delete",
          "physics_particle_group_end",
          "physics_particle_group_get_ang_vel",
          "physics_particle_group_get_angle",
          "physics_particle_group_get_centre_x",
          "physics_particle_group_get_centre_y",
          "physics_particle_group_get_data",
          "physics_particle_group_get_inertia",
          "physics_particle_group_get_mass",
          "physics_particle_group_get_vel_x",
          "physics_particle_group_get_vel_y",
          "physics_particle_group_get_x",
          "physics_particle_group_get_y",
          "physics_particle_group_join",
          "physics_particle_group_polygon",
          "physics_particle_set_category_flags",
          "physics_particle_set_damping",
          "physics_particle_set_density",
          "physics_particle_set_flags",
          "physics_particle_set_gravity_scale",
          "physics_particle_set_group_flags",
          "physics_particle_set_max_count",
          "physics_particle_set_radius",
          "physics_pause_enable",
          "physics_remove_fixture",
          "physics_set_density",
          "physics_set_friction",
          "physics_set_restitution",
          "physics_test_overlap",
          "physics_world_create",
          "physics_world_draw_debug",
          "physics_world_gravity",
          "physics_world_update_iterations",
          "physics_world_update_speed",
          "place_empty",
          "place_free",
          "place_meeting",
          "place_snapped",
          "point_direction",
          "point_distance",
          "point_distance_3d",
          "point_in_circle",
          "point_in_rectangle",
          "point_in_triangle",
          "position_change",
          "position_destroy",
          "position_empty",
          "position_meeting",
          "power",
          "ptr",
          "push_cancel_local_notification",
          "push_get_first_local_notification",
          "push_get_next_local_notification",
          "push_local_notification",
          "radtodeg",
          "random",
          "random_get_seed",
          "random_range",
          "random_set_seed",
          "randomise",
          "randomize",
          "real",
          "rectangle_in_circle",
          "rectangle_in_rectangle",
          "rectangle_in_triangle",
          "room_add",
          "room_assign",
          "room_duplicate",
          "room_exists",
          "room_get_camera",
          "room_get_name",
          "room_get_viewport",
          "room_goto",
          "room_goto_next",
          "room_goto_previous",
          "room_instance_add",
          "room_instance_clear",
          "room_next",
          "room_previous",
          "room_restart",
          "room_set_background_color",
          "room_set_background_colour",
          "room_set_camera",
          "room_set_height",
          "room_set_persistent",
          "room_set_view",
          "room_set_view_enabled",
          "room_set_viewport",
          "room_set_width",
          "round",
          "screen_save",
          "screen_save_part",
          "script_execute",
          "script_exists",
          "script_get_name",
          "sha1_file",
          "sha1_string_unicode",
          "sha1_string_utf8",
          "shader_current",
          "shader_enable_corner_id",
          "shader_get_name",
          "shader_get_sampler_index",
          "shader_get_uniform",
          "shader_is_compiled",
          "shader_reset",
          "shader_set",
          "shader_set_uniform_f",
          "shader_set_uniform_f_array",
          "shader_set_uniform_i",
          "shader_set_uniform_i_array",
          "shader_set_uniform_matrix",
          "shader_set_uniform_matrix_array",
          "shaders_are_supported",
          "shop_leave_rating",
          "show_debug_message",
          "show_debug_overlay",
          "show_error",
          "show_message",
          "show_message_async",
          "show_question",
          "show_question_async",
          "sign",
          "sin",
          "skeleton_animation_clear",
          "skeleton_animation_get",
          "skeleton_animation_get_duration",
          "skeleton_animation_get_ext",
          "skeleton_animation_get_frame",
          "skeleton_animation_get_frames",
          "skeleton_animation_list",
          "skeleton_animation_mix",
          "skeleton_animation_set",
          "skeleton_animation_set_ext",
          "skeleton_animation_set_frame",
          "skeleton_attachment_create",
          "skeleton_attachment_get",
          "skeleton_attachment_set",
          "skeleton_bone_data_get",
          "skeleton_bone_data_set",
          "skeleton_bone_state_get",
          "skeleton_bone_state_set",
          "skeleton_collision_draw_set",
          "skeleton_get_bounds",
          "skeleton_get_minmax",
          "skeleton_get_num_bounds",
          "skeleton_skin_get",
          "skeleton_skin_list",
          "skeleton_skin_set",
          "skeleton_slot_data",
          "sprite_add",
          "sprite_add_from_surface",
          "sprite_assign",
          "sprite_collision_mask",
          "sprite_create_from_surface",
          "sprite_delete",
          "sprite_duplicate",
          "sprite_exists",
          "sprite_flush",
          "sprite_flush_multi",
          "sprite_get_bbox_bottom",
          "sprite_get_bbox_left",
          "sprite_get_bbox_right",
          "sprite_get_bbox_top",
          "sprite_get_height",
          "sprite_get_name",
          "sprite_get_number",
          "sprite_get_speed",
          "sprite_get_speed_type",
          "sprite_get_texture",
          "sprite_get_tpe",
          "sprite_get_uvs",
          "sprite_get_width",
          "sprite_get_xoffset",
          "sprite_get_yoffset",
          "sprite_merge",
          "sprite_prefetch",
          "sprite_prefetch_multi",
          "sprite_replace",
          "sprite_save",
          "sprite_save_strip",
          "sprite_set_alpha_from_sprite",
          "sprite_set_cache_size",
          "sprite_set_cache_size_ext",
          "sprite_set_offset",
          "sprite_set_speed",
          "sqr",
          "sqrt",
          "steam_activate_overlay",
          "steam_activate_overlay_browser",
          "steam_activate_overlay_store",
          "steam_activate_overlay_user",
          "steam_available_languages",
          "steam_clear_achievement",
          "steam_create_leaderboard",
          "steam_current_game_language",
          "steam_download_friends_scores",
          "steam_download_scores",
          "steam_download_scores_around_user",
          "steam_file_delete",
          "steam_file_exists",
          "steam_file_persisted",
          "steam_file_read",
          "steam_file_share",
          "steam_file_size",
          "steam_file_write",
          "steam_file_write_file",
          "steam_get_achievement",
          "steam_get_app_id",
          "steam_get_persona_name",
          "steam_get_quota_free",
          "steam_get_quota_total",
          "steam_get_stat_avg_rate",
          "steam_get_stat_float",
          "steam_get_stat_int",
          "steam_get_user_account_id",
          "steam_get_user_persona_name",
          "steam_get_user_steam_id",
          "steam_initialised",
          "steam_is_cloud_enabled_for_account",
          "steam_is_cloud_enabled_for_app",
          "steam_is_overlay_activated",
          "steam_is_overlay_enabled",
          "steam_is_screenshot_requested",
          "steam_is_user_logged_on",
          "steam_reset_all_stats",
          "steam_reset_all_stats_achievements",
          "steam_send_screenshot",
          "steam_set_achievement",
          "steam_set_stat_avg_rate",
          "steam_set_stat_float",
          "steam_set_stat_int",
          "steam_stats_ready",
          "steam_ugc_create_item",
          "steam_ugc_create_query_all",
          "steam_ugc_create_query_all_ex",
          "steam_ugc_create_query_user",
          "steam_ugc_create_query_user_ex",
          "steam_ugc_download",
          "steam_ugc_get_item_install_info",
          "steam_ugc_get_item_update_info",
          "steam_ugc_get_item_update_progress",
          "steam_ugc_get_subscribed_items",
          "steam_ugc_num_subscribed_items",
          "steam_ugc_query_add_excluded_tag",
          "steam_ugc_query_add_required_tag",
          "steam_ugc_query_set_allow_cached_response",
          "steam_ugc_query_set_cloud_filename_filter",
          "steam_ugc_query_set_match_any_tag",
          "steam_ugc_query_set_ranked_by_trend_days",
          "steam_ugc_query_set_return_long_description",
          "steam_ugc_query_set_return_total_only",
          "steam_ugc_query_set_search_text",
          "steam_ugc_request_item_details",
          "steam_ugc_send_query",
          "steam_ugc_set_item_content",
          "steam_ugc_set_item_description",
          "steam_ugc_set_item_preview",
          "steam_ugc_set_item_tags",
          "steam_ugc_set_item_title",
          "steam_ugc_set_item_visibility",
          "steam_ugc_start_item_update",
          "steam_ugc_submit_item_update",
          "steam_ugc_subscribe_item",
          "steam_ugc_unsubscribe_item",
          "steam_upload_score",
          "steam_upload_score_buffer",
          "steam_upload_score_buffer_ext",
          "steam_upload_score_ext",
          "steam_user_installed_dlc",
          "steam_user_owns_dlc",
          "string",
          "string_byte_at",
          "string_byte_length",
          "string_char_at",
          "string_copy",
          "string_count",
          "string_delete",
          "string_digits",
          "string_format",
          "string_hash_to_newline",
          "string_height",
          "string_height_ext",
          "string_insert",
          "string_length",
          "string_letters",
          "string_lettersdigits",
          "string_lower",
          "string_ord_at",
          "string_pos",
          "string_repeat",
          "string_replace",
          "string_replace_all",
          "string_set_byte_at",
          "string_upper",
          "string_width",
          "string_width_ext",
          "surface_copy",
          "surface_copy_part",
          "surface_create",
          "surface_create_ext",
          "surface_depth_disable",
          "surface_exists",
          "surface_free",
          "surface_get_depth_disable",
          "surface_get_height",
          "surface_get_texture",
          "surface_get_width",
          "surface_getpixel",
          "surface_getpixel_ext",
          "surface_reset_target",
          "surface_resize",
          "surface_save",
          "surface_save_part",
          "surface_set_target",
          "surface_set_target_ext",
          "tan",
          "texture_get_height",
          "texture_get_texel_height",
          "texture_get_texel_width",
          "texture_get_uvs",
          "texture_get_width",
          "texture_global_scale",
          "texture_set_stage",
          "tile_get_empty",
          "tile_get_flip",
          "tile_get_index",
          "tile_get_mirror",
          "tile_get_rotate",
          "tile_set_empty",
          "tile_set_flip",
          "tile_set_index",
          "tile_set_mirror",
          "tile_set_rotate",
          "tilemap_clear",
          "tilemap_get",
          "tilemap_get_at_pixel",
          "tilemap_get_cell_x_at_pixel",
          "tilemap_get_cell_y_at_pixel",
          "tilemap_get_frame",
          "tilemap_get_global_mask",
          "tilemap_get_height",
          "tilemap_get_mask",
          "tilemap_get_tile_height",
          "tilemap_get_tile_width",
          "tilemap_get_tileset",
          "tilemap_get_width",
          "tilemap_get_x",
          "tilemap_get_y",
          "tilemap_set",
          "tilemap_set_at_pixel",
          "tilemap_set_global_mask",
          "tilemap_set_mask",
          "tilemap_tileset",
          "tilemap_x",
          "tilemap_y",
          "timeline_add",
          "timeline_clear",
          "timeline_delete",
          "timeline_exists",
          "timeline_get_name",
          "timeline_max_moment",
          "timeline_moment_add_script",
          "timeline_moment_clear",
          "timeline_size",
          "typeof",
          "url_get_domain",
          "url_open",
          "url_open_ext",
          "url_open_full",
          "variable_global_exists",
          "variable_global_get",
          "variable_global_set",
          "variable_instance_exists",
          "variable_instance_get",
          "variable_instance_get_names",
          "variable_instance_set",
          "variable_struct_exists",
          "variable_struct_get",
          "variable_struct_get_names",
          "variable_struct_names_count",
          "variable_struct_remove",
          "variable_struct_set",
          "vertex_argb",
          "vertex_begin",
          "vertex_color",
          "vertex_colour",
          "vertex_create_buffer",
          "vertex_create_buffer_ext",
          "vertex_create_buffer_from_buffer",
          "vertex_create_buffer_from_buffer_ext",
          "vertex_delete_buffer",
          "vertex_end",
          "vertex_float1",
          "vertex_float2",
          "vertex_float3",
          "vertex_float4",
          "vertex_format_add_color",
          "vertex_format_add_colour",
          "vertex_format_add_custom",
          "vertex_format_add_normal",
          "vertex_format_add_position",
          "vertex_format_add_position_3d",
          "vertex_format_add_texcoord",
          "vertex_format_add_textcoord",
          "vertex_format_begin",
          "vertex_format_delete",
          "vertex_format_end",
          "vertex_freeze",
          "vertex_get_buffer_size",
          "vertex_get_number",
          "vertex_normal",
          "vertex_position",
          "vertex_position_3d",
          "vertex_submit",
          "vertex_texcoord",
          "vertex_ubyte4",
          "view_get_camera",
          "view_get_hport",
          "view_get_surface_id",
          "view_get_visible",
          "view_get_wport",
          "view_get_xport",
          "view_get_yport",
          "view_set_camera",
          "view_set_hport",
          "view_set_surface_id",
          "view_set_visible",
          "view_set_wport",
          "view_set_xport",
          "view_set_yport",
          "virtual_key_add",
          "virtual_key_delete",
          "virtual_key_hide",
          "virtual_key_show",
          "win8_appbar_add_element",
          "win8_appbar_enable",
          "win8_appbar_remove_element",
          "win8_device_touchscreen_available",
          "win8_license_initialize_sandbox",
          "win8_license_trial_version",
          "win8_livetile_badge_clear",
          "win8_livetile_badge_notification",
          "win8_livetile_notification_begin",
          "win8_livetile_notification_end",
          "win8_livetile_notification_expiry",
          "win8_livetile_notification_image_add",
          "win8_livetile_notification_secondary_begin",
          "win8_livetile_notification_tag",
          "win8_livetile_notification_text_add",
          "win8_livetile_queue_enable",
          "win8_livetile_tile_clear",
          "win8_livetile_tile_notification",
          "win8_search_add_suggestions",
          "win8_search_disable",
          "win8_search_enable",
          "win8_secondarytile_badge_notification",
          "win8_secondarytile_delete",
          "win8_secondarytile_pin",
          "win8_settingscharm_add_entry",
          "win8_settingscharm_add_html_entry",
          "win8_settingscharm_add_xaml_entry",
          "win8_settingscharm_get_xaml_property",
          "win8_settingscharm_remove_entry",
          "win8_settingscharm_set_xaml_property",
          "win8_share_file",
          "win8_share_image",
          "win8_share_screenshot",
          "win8_share_text",
          "win8_share_url",
          "window_center",
          "window_device",
          "window_get_caption",
          "window_get_color",
          "window_get_colour",
          "window_get_cursor",
          "window_get_fullscreen",
          "window_get_height",
          "window_get_visible_rects",
          "window_get_width",
          "window_get_x",
          "window_get_y",
          "window_handle",
          "window_has_focus",
          "window_mouse_get_x",
          "window_mouse_get_y",
          "window_mouse_set",
          "window_set_caption",
          "window_set_color",
          "window_set_colour",
          "window_set_cursor",
          "window_set_fullscreen",
          "window_set_max_height",
          "window_set_max_width",
          "window_set_min_height",
          "window_set_min_width",
          "window_set_position",
          "window_set_rectangle",
          "window_set_size",
          "window_view_mouse_get_x",
          "window_view_mouse_get_y",
          "window_views_mouse_get_x",
          "window_views_mouse_get_y",
          "winphone_license_trial_version",
          "winphone_tile_back_content",
          "winphone_tile_back_content_wide",
          "winphone_tile_back_image",
          "winphone_tile_back_image_wide",
          "winphone_tile_back_title",
          "winphone_tile_background_color",
          "winphone_tile_background_colour",
          "winphone_tile_count",
          "winphone_tile_cycle_images",
          "winphone_tile_front_image",
          "winphone_tile_front_image_small",
          "winphone_tile_front_image_wide",
          "winphone_tile_icon_image",
          "winphone_tile_small_background_image",
          "winphone_tile_small_icon_image",
          "winphone_tile_title",
          "winphone_tile_wide_content",
          "zip_unzip"
        ],
        literal: [
          "all",
          "false",
          "noone",
          "pointer_invalid",
          "pointer_null",
          "true",
          "undefined"
        ],
        symbol: [
          "ANSI_CHARSET",
          "ARABIC_CHARSET",
          "BALTIC_CHARSET",
          "CHINESEBIG5_CHARSET",
          "DEFAULT_CHARSET",
          "EASTEUROPE_CHARSET",
          "GB2312_CHARSET",
          "GM_build_date",
          "GM_runtime_version",
          "GM_version",
          "GREEK_CHARSET",
          "HANGEUL_CHARSET",
          "HEBREW_CHARSET",
          "JOHAB_CHARSET",
          "MAC_CHARSET",
          "OEM_CHARSET",
          "RUSSIAN_CHARSET",
          "SHIFTJIS_CHARSET",
          "SYMBOL_CHARSET",
          "THAI_CHARSET",
          "TURKISH_CHARSET",
          "VIETNAMESE_CHARSET",
          "achievement_achievement_info",
          "achievement_filter_all_players",
          "achievement_filter_favorites_only",
          "achievement_filter_friends_only",
          "achievement_friends_info",
          "achievement_leaderboard_info",
          "achievement_our_info",
          "achievement_pic_loaded",
          "achievement_show_achievement",
          "achievement_show_bank",
          "achievement_show_friend_picker",
          "achievement_show_leaderboard",
          "achievement_show_profile",
          "achievement_show_purchase_prompt",
          "achievement_show_ui",
          "achievement_type_achievement_challenge",
          "achievement_type_score_challenge",
          "asset_font",
          "asset_object",
          "asset_path",
          "asset_room",
          "asset_script",
          "asset_shader",
          "asset_sound",
          "asset_sprite",
          "asset_tiles",
          "asset_timeline",
          "asset_unknown",
          "audio_3d",
          "audio_falloff_exponent_distance",
          "audio_falloff_exponent_distance_clamped",
          "audio_falloff_inverse_distance",
          "audio_falloff_inverse_distance_clamped",
          "audio_falloff_linear_distance",
          "audio_falloff_linear_distance_clamped",
          "audio_falloff_none",
          "audio_mono",
          "audio_new_system",
          "audio_old_system",
          "audio_stereo",
          "bm_add",
          "bm_complex",
          "bm_dest_alpha",
          "bm_dest_color",
          "bm_dest_colour",
          "bm_inv_dest_alpha",
          "bm_inv_dest_color",
          "bm_inv_dest_colour",
          "bm_inv_src_alpha",
          "bm_inv_src_color",
          "bm_inv_src_colour",
          "bm_max",
          "bm_normal",
          "bm_one",
          "bm_src_alpha",
          "bm_src_alpha_sat",
          "bm_src_color",
          "bm_src_colour",
          "bm_subtract",
          "bm_zero",
          "browser_chrome",
          "browser_edge",
          "browser_firefox",
          "browser_ie",
          "browser_ie_mobile",
          "browser_not_a_browser",
          "browser_opera",
          "browser_safari",
          "browser_safari_mobile",
          "browser_tizen",
          "browser_unknown",
          "browser_windows_store",
          "buffer_bool",
          "buffer_f16",
          "buffer_f32",
          "buffer_f64",
          "buffer_fast",
          "buffer_fixed",
          "buffer_generalerror",
          "buffer_grow",
          "buffer_invalidtype",
          "buffer_network",
          "buffer_outofbounds",
          "buffer_outofspace",
          "buffer_s16",
          "buffer_s32",
          "buffer_s8",
          "buffer_seek_end",
          "buffer_seek_relative",
          "buffer_seek_start",
          "buffer_string",
          "buffer_surface_copy",
          "buffer_text",
          "buffer_u16",
          "buffer_u32",
          "buffer_u64",
          "buffer_u8",
          "buffer_vbuffer",
          "buffer_wrap",
          "button_type",
          "c_aqua",
          "c_black",
          "c_blue",
          "c_dkgray",
          "c_fuchsia",
          "c_gray",
          "c_green",
          "c_lime",
          "c_ltgray",
          "c_maroon",
          "c_navy",
          "c_olive",
          "c_orange",
          "c_purple",
          "c_red",
          "c_silver",
          "c_teal",
          "c_white",
          "c_yellow",
          "cmpfunc_always",
          "cmpfunc_equal",
          "cmpfunc_greater",
          "cmpfunc_greaterequal",
          "cmpfunc_less",
          "cmpfunc_lessequal",
          "cmpfunc_never",
          "cmpfunc_notequal",
          "cr_appstart",
          "cr_arrow",
          "cr_beam",
          "cr_cross",
          "cr_default",
          "cr_drag",
          "cr_handpoint",
          "cr_hourglass",
          "cr_none",
          "cr_size_all",
          "cr_size_nesw",
          "cr_size_ns",
          "cr_size_nwse",
          "cr_size_we",
          "cr_uparrow",
          "cull_clockwise",
          "cull_counterclockwise",
          "cull_noculling",
          "device_emulator",
          "device_ios_ipad",
          "device_ios_ipad_retina",
          "device_ios_iphone",
          "device_ios_iphone5",
          "device_ios_iphone6",
          "device_ios_iphone6plus",
          "device_ios_iphone_retina",
          "device_ios_unknown",
          "device_tablet",
          "display_landscape",
          "display_landscape_flipped",
          "display_portrait",
          "display_portrait_flipped",
          "dll_cdecl",
          "dll_stdcall",
          "ds_type_grid",
          "ds_type_list",
          "ds_type_map",
          "ds_type_priority",
          "ds_type_queue",
          "ds_type_stack",
          "ef_cloud",
          "ef_ellipse",
          "ef_explosion",
          "ef_firework",
          "ef_flare",
          "ef_rain",
          "ef_ring",
          "ef_smoke",
          "ef_smokeup",
          "ef_snow",
          "ef_spark",
          "ef_star",
          // for example ev_ are types of events
          "ev_alarm",
          "ev_animation_end",
          "ev_boundary",
          "ev_cleanup",
          "ev_close_button",
          "ev_collision",
          "ev_create",
          "ev_destroy",
          "ev_draw",
          "ev_draw_begin",
          "ev_draw_end",
          "ev_draw_post",
          "ev_draw_pre",
          "ev_end_of_path",
          "ev_game_end",
          "ev_game_start",
          "ev_gesture",
          "ev_gesture_double_tap",
          "ev_gesture_drag_end",
          "ev_gesture_drag_start",
          "ev_gesture_dragging",
          "ev_gesture_flick",
          "ev_gesture_pinch_end",
          "ev_gesture_pinch_in",
          "ev_gesture_pinch_out",
          "ev_gesture_pinch_start",
          "ev_gesture_rotate_end",
          "ev_gesture_rotate_start",
          "ev_gesture_rotating",
          "ev_gesture_tap",
          "ev_global_gesture_double_tap",
          "ev_global_gesture_drag_end",
          "ev_global_gesture_drag_start",
          "ev_global_gesture_dragging",
          "ev_global_gesture_flick",
          "ev_global_gesture_pinch_end",
          "ev_global_gesture_pinch_in",
          "ev_global_gesture_pinch_out",
          "ev_global_gesture_pinch_start",
          "ev_global_gesture_rotate_end",
          "ev_global_gesture_rotate_start",
          "ev_global_gesture_rotating",
          "ev_global_gesture_tap",
          "ev_global_left_button",
          "ev_global_left_press",
          "ev_global_left_release",
          "ev_global_middle_button",
          "ev_global_middle_press",
          "ev_global_middle_release",
          "ev_global_right_button",
          "ev_global_right_press",
          "ev_global_right_release",
          "ev_gui",
          "ev_gui_begin",
          "ev_gui_end",
          "ev_joystick1_button1",
          "ev_joystick1_button2",
          "ev_joystick1_button3",
          "ev_joystick1_button4",
          "ev_joystick1_button5",
          "ev_joystick1_button6",
          "ev_joystick1_button7",
          "ev_joystick1_button8",
          "ev_joystick1_down",
          "ev_joystick1_left",
          "ev_joystick1_right",
          "ev_joystick1_up",
          "ev_joystick2_button1",
          "ev_joystick2_button2",
          "ev_joystick2_button3",
          "ev_joystick2_button4",
          "ev_joystick2_button5",
          "ev_joystick2_button6",
          "ev_joystick2_button7",
          "ev_joystick2_button8",
          "ev_joystick2_down",
          "ev_joystick2_left",
          "ev_joystick2_right",
          "ev_joystick2_up",
          "ev_keyboard",
          "ev_keypress",
          "ev_keyrelease",
          "ev_left_button",
          "ev_left_press",
          "ev_left_release",
          "ev_middle_button",
          "ev_middle_press",
          "ev_middle_release",
          "ev_mouse",
          "ev_mouse_enter",
          "ev_mouse_leave",
          "ev_mouse_wheel_down",
          "ev_mouse_wheel_up",
          "ev_no_button",
          "ev_no_more_health",
          "ev_no_more_lives",
          "ev_other",
          "ev_outside",
          "ev_right_button",
          "ev_right_press",
          "ev_right_release",
          "ev_room_end",
          "ev_room_start",
          "ev_step",
          "ev_step_begin",
          "ev_step_end",
          "ev_step_normal",
          "ev_trigger",
          "ev_user0",
          "ev_user1",
          "ev_user2",
          "ev_user3",
          "ev_user4",
          "ev_user5",
          "ev_user6",
          "ev_user7",
          "ev_user8",
          "ev_user9",
          "ev_user10",
          "ev_user11",
          "ev_user12",
          "ev_user13",
          "ev_user14",
          "ev_user15",
          "fa_archive",
          "fa_bottom",
          "fa_center",
          "fa_directory",
          "fa_hidden",
          "fa_left",
          "fa_middle",
          "fa_readonly",
          "fa_right",
          "fa_sysfile",
          "fa_top",
          "fa_volumeid",
          "fb_login_default",
          "fb_login_fallback_to_webview",
          "fb_login_forcing_safari",
          "fb_login_forcing_webview",
          "fb_login_no_fallback_to_webview",
          "fb_login_use_system_account",
          "gamespeed_fps",
          "gamespeed_microseconds",
          "ge_lose",
          "global",
          "gp_axislh",
          "gp_axislv",
          "gp_axisrh",
          "gp_axisrv",
          "gp_face1",
          "gp_face2",
          "gp_face3",
          "gp_face4",
          "gp_padd",
          "gp_padl",
          "gp_padr",
          "gp_padu",
          "gp_select",
          "gp_shoulderl",
          "gp_shoulderlb",
          "gp_shoulderr",
          "gp_shoulderrb",
          "gp_start",
          "gp_stickl",
          "gp_stickr",
          "iap_available",
          "iap_canceled",
          "iap_ev_consume",
          "iap_ev_product",
          "iap_ev_purchase",
          "iap_ev_restore",
          "iap_ev_storeload",
          "iap_failed",
          "iap_purchased",
          "iap_refunded",
          "iap_status_available",
          "iap_status_loading",
          "iap_status_processing",
          "iap_status_restoring",
          "iap_status_unavailable",
          "iap_status_uninitialised",
          "iap_storeload_failed",
          "iap_storeload_ok",
          "iap_unavailable",
          "input_type",
          "kbv_autocapitalize_characters",
          "kbv_autocapitalize_none",
          "kbv_autocapitalize_sentences",
          "kbv_autocapitalize_words",
          "kbv_returnkey_continue",
          "kbv_returnkey_default",
          "kbv_returnkey_done",
          "kbv_returnkey_emergency",
          "kbv_returnkey_go",
          "kbv_returnkey_google",
          "kbv_returnkey_join",
          "kbv_returnkey_next",
          "kbv_returnkey_route",
          "kbv_returnkey_search",
          "kbv_returnkey_send",
          "kbv_returnkey_yahoo",
          "kbv_type_ascii",
          "kbv_type_default",
          "kbv_type_email",
          "kbv_type_numbers",
          "kbv_type_phone",
          "kbv_type_phone_name",
          "kbv_type_url",
          "layerelementtype_background",
          "layerelementtype_instance",
          "layerelementtype_oldtilemap",
          "layerelementtype_particlesystem",
          "layerelementtype_sprite",
          "layerelementtype_tile",
          "layerelementtype_tilemap",
          "layerelementtype_undefined",
          "lb_disp_none",
          "lb_disp_numeric",
          "lb_disp_time_ms",
          "lb_disp_time_sec",
          "lb_sort_ascending",
          "lb_sort_descending",
          "lb_sort_none",
          "leaderboard_type_number",
          "leaderboard_type_time_mins_secs",
          "lighttype_dir",
          "lighttype_point",
          "local",
          "matrix_projection",
          "matrix_view",
          "matrix_world",
          "mb_any",
          "mb_left",
          "mb_middle",
          "mb_none",
          "mb_right",
          "mip_markedonly",
          "mip_off",
          "mip_on",
          "network_config_connect_timeout",
          "network_config_disable_reliable_udp",
          "network_config_enable_reliable_udp",
          "network_config_use_non_blocking_socket",
          "network_socket_bluetooth",
          "network_socket_tcp",
          "network_socket_udp",
          "network_type_connect",
          "network_type_data",
          "network_type_disconnect",
          "network_type_non_blocking_connect",
          "of_challen",
          "of_challenge_tie",
          "of_challenge_win",
          "os_3ds",
          "os_android",
          "os_bb10",
          "os_ios",
          "os_linux",
          "os_macosx",
          "os_ps3",
          "os_ps4",
          "os_psvita",
          "os_switch",
          "os_symbian",
          "os_tizen",
          "os_tvos",
          "os_unknown",
          "os_uwp",
          "os_wiiu",
          "os_win32",
          "os_win8native",
          "os_windows",
          "os_winphone",
          "os_xbox360",
          "os_xboxone",
          "other",
          "ov_achievements",
          "ov_community",
          "ov_friends",
          "ov_gamegroup",
          "ov_players",
          "ov_settings",
          "path_action_continue",
          "path_action_restart",
          "path_action_reverse",
          "path_action_stop",
          "phy_debug_render_aabb",
          "phy_debug_render_collision_pairs",
          "phy_debug_render_coms",
          "phy_debug_render_core_shapes",
          "phy_debug_render_joints",
          "phy_debug_render_obb",
          "phy_debug_render_shapes",
          "phy_joint_anchor_1_x",
          "phy_joint_anchor_1_y",
          "phy_joint_anchor_2_x",
          "phy_joint_anchor_2_y",
          "phy_joint_angle",
          "phy_joint_angle_limits",
          "phy_joint_damping_ratio",
          "phy_joint_frequency",
          "phy_joint_length_1",
          "phy_joint_length_2",
          "phy_joint_lower_angle_limit",
          "phy_joint_max_force",
          "phy_joint_max_length",
          "phy_joint_max_motor_force",
          "phy_joint_max_motor_torque",
          "phy_joint_max_torque",
          "phy_joint_motor_force",
          "phy_joint_motor_speed",
          "phy_joint_motor_torque",
          "phy_joint_reaction_force_x",
          "phy_joint_reaction_force_y",
          "phy_joint_reaction_torque",
          "phy_joint_speed",
          "phy_joint_translation",
          "phy_joint_upper_angle_limit",
          "phy_particle_data_flag_category",
          "phy_particle_data_flag_color",
          "phy_particle_data_flag_colour",
          "phy_particle_data_flag_position",
          "phy_particle_data_flag_typeflags",
          "phy_particle_data_flag_velocity",
          "phy_particle_flag_colormixing",
          "phy_particle_flag_colourmixing",
          "phy_particle_flag_elastic",
          "phy_particle_flag_powder",
          "phy_particle_flag_spring",
          "phy_particle_flag_tensile",
          "phy_particle_flag_viscous",
          "phy_particle_flag_wall",
          "phy_particle_flag_water",
          "phy_particle_flag_zombie",
          "phy_particle_group_flag_rigid",
          "phy_particle_group_flag_solid",
          "pi",
          "pr_linelist",
          "pr_linestrip",
          "pr_pointlist",
          "pr_trianglefan",
          "pr_trianglelist",
          "pr_trianglestrip",
          "ps_distr_gaussian",
          "ps_distr_invgaussian",
          "ps_distr_linear",
          "ps_shape_diamond",
          "ps_shape_ellipse",
          "ps_shape_line",
          "ps_shape_rectangle",
          "pt_shape_circle",
          "pt_shape_cloud",
          "pt_shape_disk",
          "pt_shape_explosion",
          "pt_shape_flare",
          "pt_shape_line",
          "pt_shape_pixel",
          "pt_shape_ring",
          "pt_shape_smoke",
          "pt_shape_snow",
          "pt_shape_spark",
          "pt_shape_sphere",
          "pt_shape_square",
          "pt_shape_star",
          "spritespeed_framespergameframe",
          "spritespeed_framespersecond",
          "text_type",
          "tf_anisotropic",
          "tf_linear",
          "tf_point",
          "tile_flip",
          "tile_index_mask",
          "tile_mirror",
          "tile_rotate",
          "timezone_local",
          "timezone_utc",
          "tm_countvsyncs",
          "tm_sleep",
          "ty_real",
          "ty_string",
          "ugc_filetype_community",
          "ugc_filetype_microtrans",
          "ugc_list_Favorited",
          "ugc_list_Followed",
          "ugc_list_Published",
          "ugc_list_Subscribed",
          "ugc_list_UsedOrPlayed",
          "ugc_list_VotedDown",
          "ugc_list_VotedOn",
          "ugc_list_VotedUp",
          "ugc_list_WillVoteLater",
          "ugc_match_AllGuides",
          "ugc_match_Artwork",
          "ugc_match_Collections",
          "ugc_match_ControllerBindings",
          "ugc_match_IntegratedGuides",
          "ugc_match_Items",
          "ugc_match_Items_Mtx",
          "ugc_match_Items_ReadyToUse",
          "ugc_match_Screenshots",
          "ugc_match_UsableInGame",
          "ugc_match_Videos",
          "ugc_match_WebGuides",
          "ugc_query_AcceptedForGameRankedByAcceptanceDate",
          "ugc_query_CreatedByFollowedUsersRankedByPublicationDate",
          "ugc_query_CreatedByFriendsRankedByPublicationDate",
          "ugc_query_FavoritedByFriendsRankedByPublicationDate",
          "ugc_query_NotYetRated",
          "ugc_query_RankedByNumTimesReported",
          "ugc_query_RankedByPublicationDate",
          "ugc_query_RankedByTextSearch",
          "ugc_query_RankedByTotalVotesAsc",
          "ugc_query_RankedByTrend",
          "ugc_query_RankedByVote",
          "ugc_query_RankedByVotesUp",
          "ugc_result_success",
          "ugc_sortorder_CreationOrderAsc",
          "ugc_sortorder_CreationOrderDesc",
          "ugc_sortorder_ForModeration",
          "ugc_sortorder_LastUpdatedDesc",
          "ugc_sortorder_SubscriptionDateDesc",
          "ugc_sortorder_TitleAsc",
          "ugc_sortorder_VoteScoreDesc",
          "ugc_visibility_friends_only",
          "ugc_visibility_private",
          "ugc_visibility_public",
          "vertex_type_color",
          "vertex_type_colour",
          "vertex_type_float1",
          "vertex_type_float2",
          "vertex_type_float3",
          "vertex_type_float4",
          "vertex_type_ubyte4",
          "vertex_usage_binormal",
          "vertex_usage_blendindices",
          "vertex_usage_blendweight",
          "vertex_usage_color",
          "vertex_usage_colour",
          "vertex_usage_depth",
          "vertex_usage_fog",
          "vertex_usage_normal",
          "vertex_usage_position",
          "vertex_usage_psize",
          "vertex_usage_sample",
          "vertex_usage_tangent",
          "vertex_usage_texcoord",
          "vertex_usage_textcoord",
          "vk_add",
          "vk_alt",
          "vk_anykey",
          "vk_backspace",
          "vk_control",
          "vk_decimal",
          "vk_delete",
          "vk_divide",
          "vk_down",
          "vk_end",
          "vk_enter",
          "vk_escape",
          "vk_f1",
          "vk_f2",
          "vk_f3",
          "vk_f4",
          "vk_f5",
          "vk_f6",
          "vk_f7",
          "vk_f8",
          "vk_f9",
          "vk_f10",
          "vk_f11",
          "vk_f12",
          "vk_home",
          "vk_insert",
          "vk_lalt",
          "vk_lcontrol",
          "vk_left",
          "vk_lshift",
          "vk_multiply",
          "vk_nokey",
          "vk_numpad0",
          "vk_numpad1",
          "vk_numpad2",
          "vk_numpad3",
          "vk_numpad4",
          "vk_numpad5",
          "vk_numpad6",
          "vk_numpad7",
          "vk_numpad8",
          "vk_numpad9",
          "vk_pagedown",
          "vk_pageup",
          "vk_pause",
          "vk_printscreen",
          "vk_ralt",
          "vk_rcontrol",
          "vk_return",
          "vk_right",
          "vk_rshift",
          "vk_shift",
          "vk_space",
          "vk_subtract",
          "vk_tab",
          "vk_up"
        ],
        "variable.language": [
          "alarm",
          "application_surface",
          "argument",
          "argument0",
          "argument1",
          "argument2",
          "argument3",
          "argument4",
          "argument5",
          "argument6",
          "argument7",
          "argument8",
          "argument9",
          "argument10",
          "argument11",
          "argument12",
          "argument13",
          "argument14",
          "argument15",
          "argument_count",
          "argument_relative",
          "async_load",
          "background_color",
          "background_colour",
          "background_showcolor",
          "background_showcolour",
          "bbox_bottom",
          "bbox_left",
          "bbox_right",
          "bbox_top",
          "browser_height",
          "browser_width",
          "caption_health",
          "caption_lives",
          "caption_score",
          "current_day",
          "current_hour",
          "current_minute",
          "current_month",
          "current_second",
          "current_time",
          "current_weekday",
          "current_year",
          "cursor_sprite",
          "debug_mode",
          "delta_time",
          "depth",
          "direction",
          "display_aa",
          "error_last",
          "error_occurred",
          "event_action",
          "event_data",
          "event_number",
          "event_object",
          "event_type",
          "fps",
          "fps_real",
          "friction",
          "game_display_name",
          "game_id",
          "game_project_name",
          "game_save_id",
          "gamemaker_pro",
          "gamemaker_registered",
          "gamemaker_version",
          "gravity",
          "gravity_direction",
          "health",
          "hspeed",
          "iap_data",
          "id|0",
          "image_alpha",
          "image_angle",
          "image_blend",
          "image_index",
          "image_number",
          "image_speed",
          "image_xscale",
          "image_yscale",
          "instance_count",
          "instance_id",
          "keyboard_key",
          "keyboard_lastchar",
          "keyboard_lastkey",
          "keyboard_string",
          "layer",
          "lives",
          "mask_index",
          "mouse_button",
          "mouse_lastbutton",
          "mouse_x",
          "mouse_y",
          "object_index",
          "os_browser",
          "os_device",
          "os_type",
          "os_version",
          "path_endaction",
          "path_index",
          "path_orientation",
          "path_position",
          "path_positionprevious",
          "path_scale",
          "path_speed",
          "persistent",
          "phy_active",
          "phy_angular_damping",
          "phy_angular_velocity",
          "phy_bullet",
          "phy_col_normal_x",
          "phy_col_normal_y",
          "phy_collision_points",
          "phy_collision_x",
          "phy_collision_y",
          "phy_com_x",
          "phy_com_y",
          "phy_dynamic",
          "phy_fixed_rotation",
          "phy_inertia",
          "phy_kinematic",
          "phy_linear_damping",
          "phy_linear_velocity_x",
          "phy_linear_velocity_y",
          "phy_mass",
          "phy_position_x",
          "phy_position_xprevious",
          "phy_position_y",
          "phy_position_yprevious",
          "phy_rotation",
          "phy_sleeping",
          "phy_speed",
          "phy_speed_x",
          "phy_speed_y",
          "program_directory",
          "room",
          "room_caption",
          "room_first",
          "room_height",
          "room_last",
          "room_persistent",
          "room_speed",
          "room_width",
          "score",
          "self",
          "show_health",
          "show_lives",
          "show_score",
          "solid",
          "speed",
          "sprite_height",
          "sprite_index",
          "sprite_width",
          "sprite_xoffset",
          "sprite_yoffset",
          "temp_directory",
          "timeline_index",
          "timeline_loop",
          "timeline_position",
          "timeline_running",
          "timeline_speed",
          "view_angle",
          "view_camera",
          "view_current",
          "view_enabled",
          "view_hborder",
          "view_hport",
          "view_hspeed",
          "view_hview",
          "view_object",
          "view_surface_id",
          "view_vborder",
          "view_visible",
          "view_vspeed",
          "view_wport",
          "view_wview",
          "view_xport",
          "view_xview",
          "view_yport",
          "view_yview",
          "visible",
          "vspeed",
          "webgl_enabled",
          "working_directory",
          "xprevious",
          "xstart",
          "x|0",
          "yprevious",
          "ystart",
          "y|0"
        ]
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return Gm = t, Gm;
}
var Hm, cA;
function fee() {
  if (cA) return Hm;
  cA = 1;
  function t(e) {
    const s = {
      keyword: [
        "break",
        "case",
        "chan",
        "const",
        "continue",
        "default",
        "defer",
        "else",
        "fallthrough",
        "for",
        "func",
        "go",
        "goto",
        "if",
        "import",
        "interface",
        "map",
        "package",
        "range",
        "return",
        "select",
        "struct",
        "switch",
        "type",
        "var"
      ],
      type: [
        "bool",
        "byte",
        "complex64",
        "complex128",
        "error",
        "float32",
        "float64",
        "int8",
        "int16",
        "int32",
        "int64",
        "string",
        "uint8",
        "uint16",
        "uint32",
        "uint64",
        "int",
        "uint",
        "uintptr",
        "rune"
      ],
      literal: [
        "true",
        "false",
        "iota",
        "nil"
      ],
      built_in: [
        "append",
        "cap",
        "close",
        "complex",
        "copy",
        "imag",
        "len",
        "make",
        "new",
        "panic",
        "print",
        "println",
        "real",
        "recover",
        "delete"
      ]
    };
    return {
      name: "Go",
      aliases: ["golang"],
      keywords: s,
      illegal: "</",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          variants: [
            e.QUOTE_STRING_MODE,
            e.APOS_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        },
        {
          className: "number",
          variants: [
            {
              begin: e.C_NUMBER_RE + "[i]",
              relevance: 1
            },
            e.C_NUMBER_MODE
          ]
        },
        {
          begin: /:=/
          // relevance booster
        },
        {
          className: "function",
          beginKeywords: "func",
          end: "\\s*(\\{|$)",
          excludeEnd: !0,
          contains: [
            e.TITLE_MODE,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: !0,
              keywords: s,
              illegal: /["']/
            }
          ]
        }
      ]
    };
  }
  return Hm = t, Hm;
}
var Ym, uA;
function gee() {
  if (uA) return Ym;
  uA = 1;
  function t(e) {
    return {
      name: "Golo",
      keywords: {
        keyword: [
          "println",
          "readln",
          "print",
          "import",
          "module",
          "function",
          "local",
          "return",
          "let",
          "var",
          "while",
          "for",
          "foreach",
          "times",
          "in",
          "case",
          "when",
          "match",
          "with",
          "break",
          "continue",
          "augment",
          "augmentation",
          "each",
          "find",
          "filter",
          "reduce",
          "if",
          "then",
          "else",
          "otherwise",
          "try",
          "catch",
          "finally",
          "raise",
          "throw",
          "orIfNull",
          "DynamicObject|10",
          "DynamicVariable",
          "struct",
          "Observable",
          "map",
          "set",
          "vector",
          "list",
          "array"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        }
      ]
    };
  }
  return Ym = t, Ym;
}
var zm, dA;
function hee() {
  if (dA) return zm;
  dA = 1;
  function t(e) {
    return {
      name: "Gradle",
      case_insensitive: !0,
      keywords: [
        "task",
        "project",
        "allprojects",
        "subprojects",
        "artifacts",
        "buildscript",
        "configurations",
        "dependencies",
        "repositories",
        "sourceSets",
        "description",
        "delete",
        "from",
        "into",
        "include",
        "exclude",
        "source",
        "classpath",
        "destinationDir",
        "includes",
        "options",
        "sourceCompatibility",
        "targetCompatibility",
        "group",
        "flatDir",
        "doLast",
        "doFirst",
        "flatten",
        "todir",
        "fromdir",
        "ant",
        "def",
        "abstract",
        "break",
        "case",
        "catch",
        "continue",
        "default",
        "do",
        "else",
        "extends",
        "final",
        "finally",
        "for",
        "if",
        "implements",
        "instanceof",
        "native",
        "new",
        "private",
        "protected",
        "public",
        "return",
        "static",
        "switch",
        "synchronized",
        "throw",
        "throws",
        "transient",
        "try",
        "volatile",
        "while",
        "strictfp",
        "package",
        "import",
        "false",
        "null",
        "super",
        "this",
        "true",
        "antlrtask",
        "checkstyle",
        "codenarc",
        "copy",
        "boolean",
        "byte",
        "char",
        "class",
        "double",
        "float",
        "int",
        "interface",
        "long",
        "short",
        "void",
        "compile",
        "runTime",
        "file",
        "fileTree",
        "abs",
        "any",
        "append",
        "asList",
        "asWritable",
        "call",
        "collect",
        "compareTo",
        "count",
        "div",
        "dump",
        "each",
        "eachByte",
        "eachFile",
        "eachLine",
        "every",
        "find",
        "findAll",
        "flatten",
        "getAt",
        "getErr",
        "getIn",
        "getOut",
        "getText",
        "grep",
        "immutable",
        "inject",
        "inspect",
        "intersect",
        "invokeMethods",
        "isCase",
        "join",
        "leftShift",
        "minus",
        "multiply",
        "newInputStream",
        "newOutputStream",
        "newPrintWriter",
        "newReader",
        "newWriter",
        "next",
        "plus",
        "pop",
        "power",
        "previous",
        "print",
        "println",
        "push",
        "putAt",
        "read",
        "readBytes",
        "readLines",
        "reverse",
        "reverseEach",
        "round",
        "size",
        "sort",
        "splitEachLine",
        "step",
        "subMap",
        "times",
        "toInteger",
        "toList",
        "tokenize",
        "upto",
        "waitForOrKill",
        "withPrintWriter",
        "withReader",
        "withStream",
        "withWriter",
        "withWriterAppend",
        "write",
        "writeLine"
      ],
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.REGEXP_MODE
      ]
    };
  }
  return zm = t, zm;
}
var qm, pA;
function Eee() {
  if (pA) return qm;
  pA = 1;
  function t(e) {
    const n = e.regex, r = /[_A-Za-z][_0-9A-Za-z]*/;
    return {
      name: "GraphQL",
      aliases: ["gql"],
      case_insensitive: !0,
      disableAutodetect: !1,
      keywords: {
        keyword: [
          "query",
          "mutation",
          "subscription",
          "type",
          "input",
          "schema",
          "directive",
          "interface",
          "union",
          "scalar",
          "fragment",
          "enum",
          "on"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        {
          scope: "punctuation",
          match: /[.]{3}/,
          relevance: 0
        },
        {
          scope: "punctuation",
          begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
          relevance: 0
        },
        {
          scope: "variable",
          begin: /\$/,
          end: /\W/,
          excludeEnd: !0,
          relevance: 0
        },
        {
          scope: "meta",
          match: /@\w+/,
          excludeEnd: !0
        },
        {
          scope: "symbol",
          begin: n.concat(r, n.lookahead(/\s*:/)),
          relevance: 0
        }
      ],
      illegal: [
        /[;<']/,
        /BEGIN/
      ]
    };
  }
  return qm = t, qm;
}
var Vm, _A;
function See() {
  if (_A) return Vm;
  _A = 1;
  function t(n, r = {}) {
    return r.variants = n, r;
  }
  function e(n) {
    const r = n.regex, a = "[A-Za-z0-9_$]+", i = t([
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      n.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      )
    ]), s = {
      className: "regexp",
      begin: /~?\/[^\/\n]+\//,
      contains: [n.BACKSLASH_ESCAPE]
    }, l = t([
      n.BINARY_NUMBER_MODE,
      n.C_NUMBER_MODE
    ]), c = t(
      [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: "\\$/",
          end: "/\\$",
          relevance: 10
        },
        n.APOS_STRING_MODE,
        n.QUOTE_STRING_MODE
      ],
      { className: "string" }
    ), d = {
      match: [
        /(class|interface|trait|enum|record|extends|implements)/,
        /\s+/,
        n.UNDERSCORE_IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Groovy",
      keywords: {
        "variable.language": "this super",
        literal: "true false null",
        type: [
          "byte",
          "short",
          "char",
          "int",
          "long",
          "boolean",
          "float",
          "double",
          "void"
        ],
        keyword: [
          // groovy specific keywords
          "def",
          "as",
          "in",
          "assert",
          "trait",
          // common keywords with Java
          "abstract",
          "static",
          "volatile",
          "transient",
          "public",
          "private",
          "protected",
          "synchronized",
          "final",
          "class",
          "interface",
          "enum",
          "if",
          "else",
          "for",
          "while",
          "switch",
          "case",
          "break",
          "default",
          "continue",
          "throw",
          "throws",
          "try",
          "catch",
          "finally",
          "implements",
          "extends",
          "new",
          "import",
          "package",
          "return",
          "instanceof",
          "var"
        ]
      },
      contains: [
        n.SHEBANG({
          binary: "groovy",
          relevance: 10
        }),
        i,
        c,
        s,
        l,
        d,
        {
          className: "meta",
          begin: "@[A-Za-z]+",
          relevance: 0
        },
        {
          // highlight map keys and named parameters as attrs
          className: "attr",
          begin: a + "[ 	]*:",
          relevance: 0
        },
        {
          // catch middle element of the ternary operator
          // to avoid highlight it as a label, named parameter, or map key
          begin: /\?/,
          end: /:/,
          relevance: 0,
          contains: [
            i,
            c,
            s,
            l,
            "self"
          ]
        },
        {
          // highlight labeled statements
          className: "symbol",
          begin: "^[ 	]*" + r.lookahead(a + ":"),
          excludeBegin: !0,
          end: a + ":",
          relevance: 0
        }
      ],
      illegal: /#|<\//
    };
  }
  return Vm = e, Vm;
}
var $m, mA;
function bee() {
  if (mA) return $m;
  mA = 1;
  function t(e) {
    return {
      name: "HAML",
      case_insensitive: !0,
      contains: [
        {
          className: "meta",
          begin: "^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",
          relevance: 10
        },
        // FIXME these comments should be allowed to span indented lines
        e.COMMENT(
          "^\\s*(!=#|=#|-#|/).*$",
          null,
          { relevance: 0 }
        ),
        {
          begin: "^\\s*(-|=|!=)(?!#)",
          end: /$/,
          subLanguage: "ruby",
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "tag",
          begin: "^\\s*%",
          contains: [
            {
              className: "selector-tag",
              begin: "\\w+"
            },
            {
              className: "selector-id",
              begin: "#[\\w-]+"
            },
            {
              className: "selector-class",
              begin: "\\.[\\w-]+"
            },
            {
              begin: /\{\s*/,
              end: /\s*\}/,
              contains: [
                {
                  begin: ":\\w+\\s*=>",
                  end: ",\\s+",
                  returnBegin: !0,
                  endsWithParent: !0,
                  contains: [
                    {
                      className: "attr",
                      begin: ":\\w+"
                    },
                    e.APOS_STRING_MODE,
                    e.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            },
            {
              begin: "\\(\\s*",
              end: "\\s*\\)",
              excludeEnd: !0,
              contains: [
                {
                  begin: "\\w+\\s*=",
                  end: "\\s+",
                  returnBegin: !0,
                  endsWithParent: !0,
                  contains: [
                    {
                      className: "attr",
                      begin: "\\w+",
                      relevance: 0
                    },
                    e.APOS_STRING_MODE,
                    e.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        { begin: "^\\s*[=~]\\s*" },
        {
          begin: /#\{/,
          end: /\}/,
          subLanguage: "ruby",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    };
  }
  return $m = t, $m;
}
var Wm, fA;
function Tee() {
  if (fA) return Wm;
  fA = 1;
  function t(e) {
    const n = e.regex, r = {
      $pattern: /[\w.\/]+/,
      built_in: [
        "action",
        "bindattr",
        "collection",
        "component",
        "concat",
        "debugger",
        "each",
        "each-in",
        "get",
        "hash",
        "if",
        "in",
        "input",
        "link-to",
        "loc",
        "log",
        "lookup",
        "mut",
        "outlet",
        "partial",
        "query-params",
        "render",
        "template",
        "textarea",
        "unbound",
        "unless",
        "view",
        "with",
        "yield"
      ]
    }, a = {
      $pattern: /[\w.\/]+/,
      literal: [
        "true",
        "false",
        "undefined",
        "null"
      ]
    }, i = /""|"[^"]+"/, s = /''|'[^']+'/, l = /\[\]|\[[^\]]+\]/, c = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/, d = /(\.|\/)/, p = n.either(
      i,
      s,
      l,
      c
    ), _ = n.concat(
      n.optional(/\.|\.\/|\//),
      // relative or absolute path
      p,
      n.anyNumberOfTimes(n.concat(
        d,
        p
      ))
    ), f = n.concat(
      "(",
      l,
      "|",
      c,
      ")(?==)"
    ), g = { begin: _ }, E = e.inherit(g, { keywords: a }), T = {
      begin: /\(/,
      end: /\)/
      // the "contains" is added below when all necessary sub-modes are defined
    }, R = {
      // fka "attribute-assignment", parameters of the form 'key=value'
      className: "attr",
      begin: f,
      relevance: 0,
      starts: {
        begin: /=/,
        end: /=/,
        starts: { contains: [
          e.NUMBER_MODE,
          e.QUOTE_STRING_MODE,
          e.APOS_STRING_MODE,
          E,
          T
        ] }
      }
    }, A = {
      // parameters of the form '{{#with x as | y |}}...{{/with}}'
      begin: /as\s+\|/,
      keywords: { keyword: "as" },
      end: /\|/,
      contains: [
        {
          // define sub-mode in order to prevent highlighting of block-parameter named "as"
          begin: /\w+/
        }
      ]
    }, I = {
      contains: [
        e.NUMBER_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        A,
        R,
        E,
        T
      ],
      returnEnd: !0
      // the property "end" is defined through inheritance when the mode is used. If depends
      // on the surrounding mode, but "endsWithParent" does not work here (i.e. it includes the
      // end-token of the surrounding mode)
    }, x = e.inherit(g, {
      className: "name",
      keywords: r,
      starts: e.inherit(I, { end: /\)/ })
    });
    T.contains = [x];
    const P = e.inherit(g, {
      keywords: r,
      className: "name",
      starts: e.inherit(I, { end: /\}\}/ })
    }), D = e.inherit(g, {
      keywords: r,
      className: "name"
    }), L = e.inherit(g, {
      className: "name",
      keywords: r,
      starts: e.inherit(I, { end: /\}\}/ })
    });
    return {
      name: "Handlebars",
      aliases: [
        "hbs",
        "html.hbs",
        "html.handlebars",
        "htmlbars"
      ],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        {
          begin: /\\\{\{/,
          skip: !0
        },
        {
          begin: /\\\\(?=\{\{)/,
          skip: !0
        },
        e.COMMENT(/\{\{!--/, /--\}\}/),
        e.COMMENT(/\{\{!/, /\}\}/),
        {
          // open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"
          className: "template-tag",
          begin: /\{\{\{\{(?!\/)/,
          end: /\}\}\}\}/,
          contains: [P],
          starts: {
            end: /\{\{\{\{\//,
            returnEnd: !0,
            subLanguage: "xml"
          }
        },
        {
          // close raw block
          className: "template-tag",
          begin: /\{\{\{\{\//,
          end: /\}\}\}\}/,
          contains: [D]
        },
        {
          // open block statement
          className: "template-tag",
          begin: /\{\{#/,
          end: /\}\}/,
          contains: [P]
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else\}\})/,
          end: /\}\}/,
          keywords: "else"
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else if)/,
          end: /\}\}/,
          keywords: "else if"
        },
        {
          // closing block statement
          className: "template-tag",
          begin: /\{\{\//,
          end: /\}\}/,
          contains: [D]
        },
        {
          // template variable or helper-call that is NOT html-escaped
          className: "template-variable",
          begin: /\{\{\{/,
          end: /\}\}\}/,
          contains: [L]
        },
        {
          // template variable or helper-call that is html-escaped
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [L]
        }
      ]
    };
  }
  return Wm = t, Wm;
}
var Km, gA;
function yee() {
  if (gA) return Km;
  gA = 1;
  function t(e) {
    const n = "([0-9]_*)+", r = "([0-9a-fA-F]_*)+", a = "([01]_*)+", i = "([0-7]_*)+", d = "([!#$%&*+.\\/<=>?@\\\\^~-]|(?!([(),;\\[\\]`|{}]|[_:\"']))(\\p{S}|\\p{P}))", p = { variants: [
      // Double dash forms a valid comment only if it's not part of legal lexeme.
      // See: Haskell 98 report: https://www.haskell.org/onlinereport/lexemes.html
      //
      // The commented code does the job, but we can't use negative lookbehind,
      // due to poor support by Safari browser.
      // > hljs.COMMENT(`(?<!${symbol})--+(?!${symbol})`, '$'),
      // So instead, we'll add a no-markup rule before the COMMENT rule in the rules list
      // to match the problematic infix operators that contain double dash.
      e.COMMENT("--+", "$"),
      e.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] }, _ = {
      className: "meta",
      begin: /\{-#/,
      end: /#-\}/
    }, f = {
      className: "meta",
      begin: "^#",
      end: "$"
    }, g = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (build-in, infix).
      relevance: 0
    }, E = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        _,
        f,
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        e.inherit(e.TITLE_MODE, { begin: "[_a-z][\\w']*" }),
        p
      ]
    }, T = {
      begin: /\{/,
      end: /\}/,
      contains: E.contains
    }, R = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${n})(\\.(${n}))?([eE][+-]?(${n}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0[xX]_*(${r})(\\.(${r}))?([pP][+-]?(${n}))?\\b` },
        // octal-literal
        { match: `\\b0[oO](${i})\\b` },
        // binary-literal
        { match: `\\b0[bB](${a})\\b` }
      ]
    };
    return {
      name: "Haskell",
      aliases: ["hs"],
      keywords: "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
      unicodeRegex: !0,
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "module",
          end: "where",
          keywords: "module where",
          contains: [
            E,
            p
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "\\bimport\\b",
          end: "$",
          keywords: "import qualified as hiding",
          contains: [
            E,
            p
          ],
          illegal: "\\W\\.|;"
        },
        {
          className: "class",
          begin: "^(\\s*)?(class|instance)\\b",
          end: "where",
          keywords: "class family instance where",
          contains: [
            g,
            E,
            p
          ]
        },
        {
          className: "class",
          begin: "\\b(data|(new)?type)\\b",
          end: "$",
          keywords: "data family type newtype deriving",
          contains: [
            _,
            g,
            E,
            T,
            p
          ]
        },
        {
          beginKeywords: "default",
          end: "$",
          contains: [
            g,
            E,
            p
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            e.C_NUMBER_MODE,
            p
          ]
        },
        {
          begin: "\\bforeign\\b",
          end: "$",
          keywords: "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
          contains: [
            g,
            e.QUOTE_STRING_MODE,
            p
          ]
        },
        {
          className: "meta",
          begin: "#!\\/usr\\/bin\\/env runhaskell",
          end: "$"
        },
        // "Whitespaces".
        _,
        f,
        // Literals and names.
        // Single characters.
        {
          scope: "string",
          begin: /'(?=\\?.')/,
          end: /'/,
          contains: [
            {
              scope: "char.escape",
              match: /\\./
            }
          ]
        },
        e.QUOTE_STRING_MODE,
        R,
        g,
        e.inherit(e.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        // No markup, prevents infix operators from being recognized as comments.
        { begin: `(?!-)${d}--+|--+(?!-)${d}` },
        p,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ]
    };
  }
  return Km = t, Km;
}
var Qm, hA;
function vee() {
  if (hA) return Qm;
  hA = 1;
  function t(e) {
    const n = "[a-zA-Z_$][a-zA-Z0-9_$]*", r = /(-?)(\b0[xX][a-fA-F0-9_]+|(\b\d+(\.[\d_]*)?|\.[\d_]+)(([eE][-+]?\d+)|i32|u32|i64|f64)?)/;
    return {
      name: "Haxe",
      aliases: ["hx"],
      keywords: {
        keyword: "abstract break case cast catch continue default do dynamic else enum extern final for function here if import in inline is macro never new override package private get set public return static super switch this throw trace try typedef untyped using var while " + "Int Float String Bool Dynamic Void Array ",
        built_in: "trace this",
        literal: "true false null _"
      },
      contains: [
        {
          className: "string",
          // interpolate-able strings
          begin: "'",
          end: "'",
          contains: [
            e.BACKSLASH_ESCAPE,
            {
              className: "subst",
              // interpolation
              begin: /\$\{/,
              end: /\}/
            },
            {
              className: "subst",
              // interpolation
              begin: /\$/,
              end: /\W\}/
            }
          ]
        },
        e.QUOTE_STRING_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: r,
          relevance: 0
        },
        {
          className: "variable",
          begin: "\\$" + n
        },
        {
          className: "meta",
          // compiler meta
          begin: /@:?/,
          end: /\(|$/,
          excludeEnd: !0
        },
        {
          className: "meta",
          // compiler conditionals
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elseif end error" }
        },
        {
          className: "type",
          // function types
          begin: /:[ \t]*/,
          end: /[^A-Za-z0-9_ \t\->]/,
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0
        },
        {
          className: "type",
          // types
          begin: /:[ \t]*/,
          end: /\W/,
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "type",
          // instantiation
          begin: /new */,
          end: /\W/,
          excludeBegin: !0,
          excludeEnd: !0
        },
        {
          className: "title.class",
          // enums
          beginKeywords: "enum",
          end: /\{/,
          contains: [e.TITLE_MODE]
        },
        {
          className: "title.class",
          // abstracts
          begin: "\\babstract\\b(?=\\s*" + e.IDENT_RE + "\\s*\\()",
          end: /[\{$]/,
          contains: [
            {
              className: "type",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0
            },
            {
              className: "type",
              begin: /from +/,
              end: /\W/,
              excludeBegin: !0,
              excludeEnd: !0
            },
            {
              className: "type",
              begin: /to +/,
              end: /\W/,
              excludeBegin: !0,
              excludeEnd: !0
            },
            e.TITLE_MODE
          ],
          keywords: { keyword: "abstract from to" }
        },
        {
          className: "title.class",
          // classes
          begin: /\b(class|interface) +/,
          end: /[\{$]/,
          excludeEnd: !0,
          keywords: "class interface",
          contains: [
            {
              className: "keyword",
              begin: /\b(extends|implements) +/,
              keywords: "extends implements",
              contains: [
                {
                  className: "type",
                  begin: e.IDENT_RE,
                  relevance: 0
                }
              ]
            },
            e.TITLE_MODE
          ]
        },
        {
          className: "title.function",
          beginKeywords: "function",
          end: /\(/,
          excludeEnd: !0,
          illegal: /\S/,
          contains: [e.TITLE_MODE]
        }
      ],
      illegal: /<\//
    };
  }
  return Qm = t, Qm;
}
var jm, EA;
function Cee() {
  if (EA) return jm;
  EA = 1;
  function t(e) {
    return {
      name: "HSP",
      case_insensitive: !0,
      keywords: {
        $pattern: /[\w._]+/,
        keyword: "goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        {
          // multi-line string
          className: "string",
          begin: /\{"/,
          end: /"\}/,
          contains: [e.BACKSLASH_ESCAPE]
        },
        e.COMMENT(";", "$", { relevance: 0 }),
        {
          // pre-processor
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib" },
          contains: [
            e.inherit(e.QUOTE_STRING_MODE, { className: "string" }),
            e.NUMBER_MODE,
            e.C_NUMBER_MODE,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // label
          className: "symbol",
          begin: "^\\*(\\w+|@)"
        },
        e.NUMBER_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return jm = t, jm;
}
var Xm, SA;
function Ree() {
  if (SA) return Xm;
  SA = 1;
  function t(e) {
    const n = e.regex, r = "HTTP/([32]|1\\.[01])", a = /[A-Za-z][A-Za-z0-9-]*/, i = {
      className: "attribute",
      begin: n.concat("^", a, "(?=\\:\\s)"),
      starts: { contains: [
        {
          className: "punctuation",
          begin: /: /,
          relevance: 0,
          starts: {
            end: "$",
            relevance: 0
          }
        }
      ] }
    }, s = [
      i,
      {
        begin: "\\n\\n",
        starts: {
          subLanguage: [],
          endsWithParent: !0
        }
      }
    ];
    return {
      name: "HTTP",
      aliases: ["https"],
      illegal: /\S/,
      contains: [
        // response
        {
          begin: "^(?=" + r + " \\d{3})",
          end: /$/,
          contains: [
            {
              className: "meta",
              begin: r
            },
            {
              className: "number",
              begin: "\\b\\d{3}\\b"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: s
          }
        },
        // request
        {
          begin: "(?=^[A-Z]+ (.*?) " + r + "$)",
          end: /$/,
          contains: [
            {
              className: "string",
              begin: " ",
              end: " ",
              excludeBegin: !0,
              excludeEnd: !0
            },
            {
              className: "meta",
              begin: r
            },
            {
              className: "keyword",
              begin: "[A-Z]+"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: s
          }
        },
        // to allow headers to work even without a preamble
        e.inherit(i, { relevance: 0 })
      ]
    };
  }
  return Xm = t, Xm;
}
var Zm, bA;
function Aee() {
  if (bA) return Zm;
  bA = 1;
  function t(e) {
    const n = "a-zA-Z_\\-!.?+*=<>&#'", r = "[" + n + "][" + n + "0-9/;:]*", a = {
      $pattern: r,
      built_in: (
        // keywords
        "!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"
      )
    }, i = "[-+]?\\d+(\\.\\d+)?", s = {
      begin: r,
      relevance: 0
    }, l = {
      className: "number",
      begin: i,
      relevance: 0
    }, c = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), d = e.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), p = {
      className: "literal",
      begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
    }, _ = {
      begin: "[\\[\\{]",
      end: "[\\]\\}]",
      relevance: 0
    }, f = {
      className: "comment",
      begin: "\\^" + r
    }, g = e.COMMENT("\\^\\{", "\\}"), E = {
      className: "symbol",
      begin: "[:]{1,2}" + r
    }, T = {
      begin: "\\(",
      end: "\\)"
    }, R = {
      endsWithParent: !0,
      relevance: 0
    }, A = {
      className: "name",
      relevance: 0,
      keywords: a,
      begin: r,
      starts: R
    }, I = [
      T,
      c,
      f,
      g,
      d,
      E,
      _,
      l,
      p,
      s
    ];
    return T.contains = [
      e.COMMENT("comment", ""),
      A,
      R
    ], R.contains = I, _.contains = I, {
      name: "Hy",
      aliases: ["hylang"],
      illegal: /\S/,
      contains: [
        e.SHEBANG(),
        T,
        c,
        f,
        g,
        d,
        E,
        _,
        l,
        p
      ]
    };
  }
  return Zm = t, Zm;
}
var Jm, TA;
function Oee() {
  if (TA) return Jm;
  TA = 1;
  function t(e) {
    const n = "\\[", r = "\\]";
    return {
      name: "Inform 7",
      aliases: ["i7"],
      case_insensitive: !0,
      keywords: {
        // Some keywords more or less unique to I7, for relevance.
        keyword: (
          // kind:
          "thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"
        )
      },
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0,
          contains: [
            {
              className: "subst",
              begin: n,
              end: r
            }
          ]
        },
        {
          className: "section",
          begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
          end: "$"
        },
        {
          // Rule definition
          // This is here for relevance.
          begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
          end: ":",
          contains: [
            {
              // Rule name
              begin: "\\(This",
              end: "\\)"
            }
          ]
        },
        {
          className: "comment",
          begin: n,
          end: r,
          contains: ["self"]
        }
      ]
    };
  }
  return Jm = t, Jm;
}
var ef, yA;
function Nee() {
  if (yA) return ef;
  yA = 1;
  function t(e) {
    const n = e.regex, r = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: /([+-]+)?[\d]+_[\d_]+/ },
        { begin: e.NUMBER_RE }
      ]
    }, a = e.COMMENT();
    a.variants = [
      {
        begin: /;/,
        end: /$/
      },
      {
        begin: /#/,
        end: /$/
      }
    ];
    const i = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d"][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, s = {
      className: "literal",
      begin: /\bon|off|true|false|yes|no\b/
    }, l = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: "'''",
          end: "'''",
          relevance: 10
        },
        {
          begin: '"""',
          end: '"""',
          relevance: 10
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    }, c = {
      begin: /\[/,
      end: /\]/,
      contains: [
        a,
        s,
        i,
        l,
        r,
        "self"
      ],
      relevance: 0
    }, d = /[A-Za-z0-9_-]+/, p = /"(\\"|[^"])*"/, _ = /'[^']*'/, f = n.either(
      d,
      p,
      _
    ), g = n.concat(
      f,
      "(\\s*\\.\\s*",
      f,
      ")*",
      n.lookahead(/\s*=\s*[^#\s]/)
    );
    return {
      name: "TOML, also INI",
      aliases: ["toml"],
      case_insensitive: !0,
      illegal: /\S/,
      contains: [
        a,
        {
          className: "section",
          begin: /\[+/,
          end: /\]+/
        },
        {
          begin: g,
          className: "attr",
          starts: {
            end: /$/,
            contains: [
              a,
              c,
              s,
              i,
              l,
              r
            ]
          }
        }
      ]
    };
  }
  return ef = t, ef;
}
var tf, vA;
function Iee() {
  if (vA) return tf;
  vA = 1;
  function t(e) {
    const n = e.regex, r = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    }, a = /(_[a-z_\d]+)?/, i = /([de][+-]?\d+)?/, s = {
      className: "number",
      variants: [
        { begin: n.concat(/\b\d+/, /\.(\d*)/, i, a) },
        { begin: n.concat(/\b\d+/, i, a) },
        { begin: n.concat(/\.\d+/, i, a) }
      ],
      relevance: 0
    };
    return {
      name: "IRPF90",
      case_insensitive: !0,
      keywords: {
        literal: ".False. .True.",
        keyword: "kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",
        built_in: "alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"
      },
      illegal: /\/\*/,
      contains: [
        e.inherit(e.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        {
          className: "function",
          beginKeywords: "subroutine function program",
          illegal: "[${=\\n]",
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            r
          ]
        },
        e.COMMENT("!", "$", { relevance: 0 }),
        e.COMMENT("begin_doc", "end_doc", { relevance: 10 }),
        s
      ]
    };
  }
  return tf = t, tf;
}
var nf, CA;
function xee() {
  if (CA) return nf;
  CA = 1;
  function t(e) {
    const n = "[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*", r = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*", a = "and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока except exitfor finally foreach все if если in в not не or или try while пока ", Ce = "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT SYSRES_CONST_ACCES_RIGHT_TYPE_FULL SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE SYSRES_CONST_ACCESS_NO_ACCESS_VIEW SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_TYPE_CHANGE SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE SYSRES_CONST_ACCESS_TYPE_EXISTS SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE SYSRES_CONST_ACCESS_TYPE_FULL SYSRES_CONST_ACCESS_TYPE_FULL_CODE SYSRES_CONST_ACCESS_TYPE_VIEW SYSRES_CONST_ACCESS_TYPE_VIEW_CODE SYSRES_CONST_ACTION_TYPE_ABORT SYSRES_CONST_ACTION_TYPE_ACCEPT SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT SYSRES_CONST_ACTION_TYPE_CHANGE_CARD SYSRES_CONST_ACTION_TYPE_CHANGE_KIND SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE SYSRES_CONST_ACTION_TYPE_CONTINUE SYSRES_CONST_ACTION_TYPE_COPY SYSRES_CONST_ACTION_TYPE_CREATE SYSRES_CONST_ACTION_TYPE_CREATE_VERSION SYSRES_CONST_ACTION_TYPE_DELETE SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT SYSRES_CONST_ACTION_TYPE_DELETE_VERSION SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE SYSRES_CONST_ACTION_TYPE_LOCK SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY SYSRES_CONST_ACTION_TYPE_MARK_AS_READED SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED SYSRES_CONST_ACTION_TYPE_MODIFY SYSRES_CONST_ACTION_TYPE_MODIFY_CARD SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE SYSRES_CONST_ACTION_TYPE_PERFORM SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY SYSRES_CONST_ACTION_TYPE_RESTART SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE SYSRES_CONST_ACTION_TYPE_REVISION SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL SYSRES_CONST_ACTION_TYPE_SIGN SYSRES_CONST_ACTION_TYPE_START SYSRES_CONST_ACTION_TYPE_UNLOCK SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER SYSRES_CONST_ACTION_TYPE_VERSION_STATE SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY SYSRES_CONST_ACTION_TYPE_VIEW SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE SYSRES_CONST_ADD_REFERENCE_MODE_NAME SYSRES_CONST_ADDITION_REQUISITE_CODE SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS SYSRES_CONST_ALL_USERS_GROUP SYSRES_CONST_ALL_USERS_GROUP_NAME SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE SYSRES_CONST_APPROVING_SIGNATURE_NAME SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN SYSRES_CONST_ATTACH_TYPE_DOC SYSRES_CONST_ATTACH_TYPE_EDOC SYSRES_CONST_ATTACH_TYPE_FOLDER SYSRES_CONST_ATTACH_TYPE_JOB SYSRES_CONST_ATTACH_TYPE_REFERENCE SYSRES_CONST_ATTACH_TYPE_TASK SYSRES_CONST_AUTH_ENCODED_PASSWORD SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE SYSRES_CONST_AUTH_NOVELL SYSRES_CONST_AUTH_PASSWORD SYSRES_CONST_AUTH_PASSWORD_CODE SYSRES_CONST_AUTH_WINDOWS SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_AUTO_ENUM_METHOD_FLAG SYSRES_CONST_AUTO_NUMERATION_CODE SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_USAGE_ALL SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE SYSRES_CONST_AUTOTEXT_USAGE_SIGN SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE SYSRES_CONST_AUTOTEXT_USAGE_WORK SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BTN_PART SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT SYSRES_CONST_CARD_PART SYSRES_CONST_CARD_REFERENCE_MODE_NAME SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT SYSRES_CONST_CODE_COMPONENT_TYPE_URL SYSRES_CONST_CODE_REQUISITE_ACCESS SYSRES_CONST_CODE_REQUISITE_CODE SYSRES_CONST_CODE_REQUISITE_COMPONENT SYSRES_CONST_CODE_REQUISITE_DESCRIPTION SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT SYSRES_CONST_CODE_REQUISITE_RECORD SYSRES_CONST_COMMENT_REQ_CODE SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE SYSRES_CONST_COMP_CODE_GRD SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DOCS SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_COMPONENT_TYPE_EDOCS SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_COMPONENT_TYPE_OTHER SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES SYSRES_CONST_COMPONENT_TYPE_REFERENCES SYSRES_CONST_COMPONENT_TYPE_REPORTS SYSRES_CONST_COMPONENT_TYPE_SCRIPTS SYSRES_CONST_COMPONENT_TYPE_URL SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION SYSRES_CONST_CONST_FIRM_STATUS_COMMON SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL SYSRES_CONST_CONST_NEGATIVE_VALUE SYSRES_CONST_CONST_POSITIVE_VALUE SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE SYSRES_CONST_CONTENTS_REQUISITE_CODE SYSRES_CONST_DATA_TYPE_BOOLEAN SYSRES_CONST_DATA_TYPE_DATE SYSRES_CONST_DATA_TYPE_FLOAT SYSRES_CONST_DATA_TYPE_INTEGER SYSRES_CONST_DATA_TYPE_PICK SYSRES_CONST_DATA_TYPE_REFERENCE SYSRES_CONST_DATA_TYPE_STRING SYSRES_CONST_DATA_TYPE_TEXT SYSRES_CONST_DATA_TYPE_VARIANT SYSRES_CONST_DATE_CLOSE_REQ_CODE SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR SYSRES_CONST_DATE_OPEN_REQ_CODE SYSRES_CONST_DATE_REQUISITE SYSRES_CONST_DATE_REQUISITE_CODE SYSRES_CONST_DATE_REQUISITE_NAME SYSRES_CONST_DATE_REQUISITE_TYPE SYSRES_CONST_DATE_TYPE_CHAR SYSRES_CONST_DATETIME_FORMAT_VALUE SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_DET1_PART SYSRES_CONST_DET2_PART SYSRES_CONST_DET3_PART SYSRES_CONST_DET4_PART SYSRES_CONST_DET5_PART SYSRES_CONST_DET6_PART SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE SYSRES_CONST_DETAIL_REQ_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME SYSRES_CONST_DOCUMENT_STORAGES_CODE SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME SYSRES_CONST_DOUBLE_REQUISITE_CODE SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE SYSRES_CONST_EDITORS_REFERENCE_CODE SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE SYSRES_CONST_EDOC_DATE_REQUISITE_CODE SYSRES_CONST_EDOC_KIND_REFERENCE_CODE SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE SYSRES_CONST_EDOC_NONE_ENCODE_CODE SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_READONLY_ACCESS_CODE SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE SYSRES_CONST_EDOC_WRITE_ACCES_CODE SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_END_DATE_REQUISITE_CODE SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE SYSRES_CONST_EXIST_CONST SYSRES_CONST_EXIST_VALUE SYSRES_CONST_EXPORT_LOCK_TYPE_ASK SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK SYSRES_CONST_EXPORT_VERSION_TYPE_ASK SYSRES_CONST_EXPORT_VERSION_TYPE_LAST SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE SYSRES_CONST_EXTENSION_REQUISITE_CODE SYSRES_CONST_FILTER_NAME_REQUISITE_CODE SYSRES_CONST_FILTER_REQUISITE_CODE SYSRES_CONST_FILTER_TYPE_COMMON_CODE SYSRES_CONST_FILTER_TYPE_COMMON_NAME SYSRES_CONST_FILTER_TYPE_USER_CODE SYSRES_CONST_FILTER_TYPE_USER_NAME SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR SYSRES_CONST_FLOAT_REQUISITE_TYPE SYSRES_CONST_FOLDER_AUTHOR_VALUE SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS SYSRES_CONST_FOLDER_KIND_COMPONENTS SYSRES_CONST_FOLDER_KIND_EDOCS SYSRES_CONST_FOLDER_KIND_JOBS SYSRES_CONST_FOLDER_KIND_TASKS SYSRES_CONST_FOLDER_TYPE_COMMON SYSRES_CONST_FOLDER_TYPE_COMPONENT SYSRES_CONST_FOLDER_TYPE_FAVORITES SYSRES_CONST_FOLDER_TYPE_INBOX SYSRES_CONST_FOLDER_TYPE_OUTBOX SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH SYSRES_CONST_FOLDER_TYPE_SEARCH SYSRES_CONST_FOLDER_TYPE_SHORTCUTS SYSRES_CONST_FOLDER_TYPE_USER SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG SYSRES_CONST_FULL_SUBSTITUTE_TYPE SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE SYSRES_CONST_FUNCTION_CANCEL_RESULT SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM SYSRES_CONST_FUNCTION_CATEGORY_USER SYSRES_CONST_FUNCTION_FAILURE_RESULT SYSRES_CONST_FUNCTION_SAVE_RESULT SYSRES_CONST_GENERATED_REQUISITE SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_USER_REQUISITE_CODE SYSRES_CONST_GROUPS_REFERENCE_CODE SYSRES_CONST_GROUPS_REQUISITE_CODE SYSRES_CONST_HIDDEN_MODE_NAME SYSRES_CONST_HIGH_LVL_REQUISITE_CODE SYSRES_CONST_HISTORY_ACTION_CREATE_CODE SYSRES_CONST_HISTORY_ACTION_DELETE_CODE SYSRES_CONST_HISTORY_ACTION_EDIT_CODE SYSRES_CONST_HOUR_CHAR SYSRES_CONST_ID_REQUISITE_CODE SYSRES_CONST_IDSPS_REQUISITE_CODE SYSRES_CONST_IMAGE_MODE_COLOR SYSRES_CONST_IMAGE_MODE_GREYSCALE SYSRES_CONST_IMAGE_MODE_MONOCHROME SYSRES_CONST_IMPORTANCE_HIGH SYSRES_CONST_IMPORTANCE_LOW SYSRES_CONST_IMPORTANCE_NORMAL SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE SYSRES_CONST_INT_REQUISITE SYSRES_CONST_INT_REQUISITE_TYPE SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR SYSRES_CONST_INTEGER_TYPE_CHAR SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_JOB_BLOCK_DESCRIPTION SYSRES_CONST_JOB_KIND_CONTROL_JOB SYSRES_CONST_JOB_KIND_JOB SYSRES_CONST_JOB_KIND_NOTICE SYSRES_CONST_JOB_STATE_ABORTED SYSRES_CONST_JOB_STATE_COMPLETE SYSRES_CONST_JOB_STATE_WORKING SYSRES_CONST_KIND_REQUISITE_CODE SYSRES_CONST_KIND_REQUISITE_NAME SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE SYSRES_CONST_KOD_INPUT_TYPE SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT SYSRES_CONST_LINK_OBJECT_KIND_EDOC SYSRES_CONST_LINK_OBJECT_KIND_FOLDER SYSRES_CONST_LINK_OBJECT_KIND_JOB SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE SYSRES_CONST_LINK_OBJECT_KIND_TASK SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE SYSRES_CONST_LIST_REFERENCE_MODE_NAME SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE SYSRES_CONST_MAIN_VIEW_CODE SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE SYSRES_CONST_MAXIMIZED_MODE_NAME SYSRES_CONST_ME_VALUE SYSRES_CONST_MESSAGE_ATTENTION_CAPTION SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION SYSRES_CONST_MESSAGE_ERROR_CAPTION SYSRES_CONST_MESSAGE_INFORMATION_CAPTION SYSRES_CONST_MINIMIZED_MODE_NAME SYSRES_CONST_MINUTE_CHAR SYSRES_CONST_MODULE_REQUISITE_CODE SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION SYSRES_CONST_MONTH_FORMAT_VALUE SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_NAME_REQUISITE_CODE SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE SYSRES_CONST_NAMEAN_INPUT_TYPE SYSRES_CONST_NEGATIVE_PICK_VALUE SYSRES_CONST_NEGATIVE_VALUE SYSRES_CONST_NO SYSRES_CONST_NO_PICK_VALUE SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE SYSRES_CONST_NO_VALUE SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_NORMAL_MODE_NAME SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_NOTE_REQUISITE_CODE SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION SYSRES_CONST_NUM_REQUISITE SYSRES_CONST_NUM_STR_REQUISITE_CODE SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG SYSRES_CONST_NUMERATION_AUTO_STRONG SYSRES_CONST_NUMERATION_FROM_DICTONARY SYSRES_CONST_NUMERATION_MANUAL SYSRES_CONST_NUMERIC_TYPE_CHAR SYSRES_CONST_NUMREQ_REQUISITE_CODE SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_ORIGINALREF_REQUISITE_CODE SYSRES_CONST_OURFIRM_REF_CODE SYSRES_CONST_OURFIRM_REQUISITE_CODE SYSRES_CONST_OURFIRM_VAR SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE SYSRES_CONST_PICK_NEGATIVE_RESULT SYSRES_CONST_PICK_POSITIVE_RESULT SYSRES_CONST_PICK_REQUISITE SYSRES_CONST_PICK_REQUISITE_TYPE SYSRES_CONST_PICK_TYPE_CHAR SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE SYSRES_CONST_PLATFORM_VERSION_COMMENT SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_POSITIVE_PICK_VALUE SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE SYSRES_CONST_PRIORITY_REQUISITE_CODE SYSRES_CONST_QUALIFIED_TASK_TYPE SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE SYSRES_CONST_RECSTAT_REQUISITE_CODE SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_REF_REQUISITE SYSRES_CONST_REF_REQUISITE_TYPE SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE SYSRES_CONST_REFERENCE_TYPE_CHAR SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_MODE_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_EDIT_CODE SYSRES_CONST_REQ_MODE_HIDDEN_CODE SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_VIEW_CODE SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE SYSRES_CONST_REQ_SECTION_VALUE SYSRES_CONST_REQ_TYPE_VALUE SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME SYSRES_CONST_REQUISITE_FORMAT_LEFT SYSRES_CONST_REQUISITE_FORMAT_RIGHT SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_REQUISITE_SECTION_ACTIONS SYSRES_CONST_REQUISITE_SECTION_BUTTON SYSRES_CONST_REQUISITE_SECTION_BUTTONS SYSRES_CONST_REQUISITE_SECTION_CARD SYSRES_CONST_REQUISITE_SECTION_TABLE SYSRES_CONST_REQUISITE_SECTION_TABLE10 SYSRES_CONST_REQUISITE_SECTION_TABLE11 SYSRES_CONST_REQUISITE_SECTION_TABLE12 SYSRES_CONST_REQUISITE_SECTION_TABLE13 SYSRES_CONST_REQUISITE_SECTION_TABLE14 SYSRES_CONST_REQUISITE_SECTION_TABLE15 SYSRES_CONST_REQUISITE_SECTION_TABLE16 SYSRES_CONST_REQUISITE_SECTION_TABLE17 SYSRES_CONST_REQUISITE_SECTION_TABLE18 SYSRES_CONST_REQUISITE_SECTION_TABLE19 SYSRES_CONST_REQUISITE_SECTION_TABLE2 SYSRES_CONST_REQUISITE_SECTION_TABLE20 SYSRES_CONST_REQUISITE_SECTION_TABLE21 SYSRES_CONST_REQUISITE_SECTION_TABLE22 SYSRES_CONST_REQUISITE_SECTION_TABLE23 SYSRES_CONST_REQUISITE_SECTION_TABLE24 SYSRES_CONST_REQUISITE_SECTION_TABLE3 SYSRES_CONST_REQUISITE_SECTION_TABLE4 SYSRES_CONST_REQUISITE_SECTION_TABLE5 SYSRES_CONST_REQUISITE_SECTION_TABLE6 SYSRES_CONST_REQUISITE_SECTION_TABLE7 SYSRES_CONST_REQUISITE_SECTION_TABLE8 SYSRES_CONST_REQUISITE_SECTION_TABLE9 SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_RIGHT_ALIGNMENT_CODE SYSRES_CONST_ROLES_REFERENCE_CODE SYSRES_CONST_ROUTE_STEP_AFTER_RUS SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS SYSRES_CONST_ROUTE_TYPE_COMPLEX SYSRES_CONST_ROUTE_TYPE_PARALLEL SYSRES_CONST_ROUTE_TYPE_SERIAL SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE SYSRES_CONST_SEARCHES_COMPONENT_CONTENT SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME SYSRES_CONST_SEARCHES_EDOC_CONTENT SYSRES_CONST_SEARCHES_FOLDER_CONTENT SYSRES_CONST_SEARCHES_JOB_CONTENT SYSRES_CONST_SEARCHES_REFERENCE_CODE SYSRES_CONST_SEARCHES_TASK_CONTENT SYSRES_CONST_SECOND_CHAR SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE SYSRES_CONST_SECTION_REQUISITE_CODE SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE SYSRES_CONST_SELECT_REFERENCE_MODE_NAME SYSRES_CONST_SELECT_TYPE_SELECTABLE SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD SYSRES_CONST_SELECT_TYPE_UNSLECTABLE SYSRES_CONST_SERVER_TYPE_MAIN SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE SYSRES_CONST_STATE_REQ_NAME SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE SYSRES_CONST_STATE_REQUISITE_CODE SYSRES_CONST_STATIC_ROLE_TYPE_CODE SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE SYSRES_CONST_STATUS_VALUE_AUTOCLEANING SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE SYSRES_CONST_STATUS_VALUE_COMPLETE SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE SYSRES_CONST_STATUS_VALUE_RED_SQUARE SYSRES_CONST_STATUS_VALUE_SUSPEND SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE SYSRES_CONST_STORAGE_TYPE_FILE SYSRES_CONST_STORAGE_TYPE_SQL_SERVER SYSRES_CONST_STR_REQUISITE SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR SYSRES_CONST_STRING_REQUISITE_CODE SYSRES_CONST_STRING_REQUISITE_TYPE SYSRES_CONST_STRING_TYPE_CHAR SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE SYSRES_CONST_SYSTEM_VERSION_COMMENT SYSRES_CONST_TASK_ACCESS_TYPE_ALL SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD SYSRES_CONST_TASK_ENCODE_TYPE_NONE SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD SYSRES_CONST_TASK_ROUTE_ALL_CONDITION SYSRES_CONST_TASK_ROUTE_AND_CONDITION SYSRES_CONST_TASK_ROUTE_OR_CONDITION SYSRES_CONST_TASK_STATE_ABORTED SYSRES_CONST_TASK_STATE_COMPLETE SYSRES_CONST_TASK_STATE_CONTINUED SYSRES_CONST_TASK_STATE_CONTROL SYSRES_CONST_TASK_STATE_INIT SYSRES_CONST_TASK_STATE_WORKING SYSRES_CONST_TASK_TITLE SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE SYSRES_CONST_TASK_TYPES_REFERENCE_CODE SYSRES_CONST_TEMPLATES_REFERENCE_CODE SYSRES_CONST_TEST_DATE_REQUISITE_NAME SYSRES_CONST_TEST_DEV_DATABASE_NAME SYSRES_CONST_TEST_DEV_SYSTEM_CODE SYSRES_CONST_TEST_EDMS_DATABASE_NAME SYSRES_CONST_TEST_EDMS_MAIN_CODE SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME SYSRES_CONST_TEST_EDMS_SECOND_CODE SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME SYSRES_CONST_TEST_EDMS_SYSTEM_CODE SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME SYSRES_CONST_TEXT_REQUISITE SYSRES_CONST_TEXT_REQUISITE_CODE SYSRES_CONST_TEXT_REQUISITE_TYPE SYSRES_CONST_TEXT_TYPE_CHAR SYSRES_CONST_TYPE_CODE_REQUISITE_CODE SYSRES_CONST_TYPE_REQUISITE_CODE SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME SYSRES_CONST_USE_ACCESS_TYPE_CODE SYSRES_CONST_USE_ACCESS_TYPE_NAME SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE SYSRES_CONST_USER_CATEGORY_NORMAL SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE SYSRES_CONST_USER_COMMON_CATEGORY SYSRES_CONST_USER_COMMON_CATEGORY_CODE SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_USER_LOGIN_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_USER_SERVICE_CATEGORY SYSRES_CONST_USER_SERVICE_CATEGORY_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME SYSRES_CONST_USER_STATUS_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_DEVELOPER_NAME SYSRES_CONST_USER_STATUS_DISABLED_CODE SYSRES_CONST_USER_STATUS_DISABLED_NAME SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_USER_CODE SYSRES_CONST_USER_STATUS_USER_NAME SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER SYSRES_CONST_USER_TYPE_REQUISITE_CODE SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE SYSRES_CONST_USERS_REFERENCE_CODE SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME SYSRES_CONST_USERS_REQUISITE_CODE SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME SYSRES_CONST_VIEW_DEFAULT_CODE SYSRES_CONST_VIEW_DEFAULT_NAME SYSRES_CONST_VIEWER_REQUISITE_CODE SYSRES_CONST_WAITING_BLOCK_DESCRIPTION SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT SYSRES_CONST_XML_ENCODING SYSRES_CONST_XREC_STAT_REQUISITE_CODE SYSRES_CONST_XRECID_FIELD_NAME SYSRES_CONST_YES SYSRES_CONST_YES_NO_2_REQUISITE_CODE SYSRES_CONST_YES_NO_REQUISITE_CODE SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_YES_PICK_VALUE SYSRES_CONST_YES_VALUE " + "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE " + "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME " + "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY " + "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION " + "JOB_BLOCK_ABORT_DEADLINE_PROPERTY JOB_BLOCK_AFTER_FINISH_EVENT JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT JOB_BLOCK_ATTACHMENT_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT JOB_BLOCK_BEFORE_START_EVENT JOB_BLOCK_CREATED_JOBS_PROPERTY JOB_BLOCK_DEADLINE_PROPERTY JOB_BLOCK_EXECUTION_RESULTS_PROPERTY JOB_BLOCK_IS_PARALLEL_PROPERTY JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY JOB_BLOCK_JOB_TEXT_PROPERTY JOB_BLOCK_NAME_PROPERTY JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY JOB_BLOCK_PERFORMER_PROPERTY JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY JOB_BLOCK_SUBJECT_PROPERTY " + "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE " + "smHidden smMaximized smMinimized smNormal wmNo wmYes " + "COMPONENT_TOKEN_LINK_KIND DOCUMENT_LINK_KIND EDOCUMENT_LINK_KIND FOLDER_LINK_KIND JOB_LINK_KIND REFERENCE_LINK_KIND TASK_LINK_KIND " + "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE " + "MONITOR_BLOCK_AFTER_FINISH_EVENT MONITOR_BLOCK_BEFORE_START_EVENT MONITOR_BLOCK_DEADLINE_PROPERTY MONITOR_BLOCK_INTERVAL_PROPERTY MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY MONITOR_BLOCK_NAME_PROPERTY MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY " + "NOTICE_BLOCK_AFTER_FINISH_EVENT NOTICE_BLOCK_ATTACHMENT_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY NOTICE_BLOCK_BEFORE_START_EVENT NOTICE_BLOCK_CREATED_NOTICES_PROPERTY NOTICE_BLOCK_DEADLINE_PROPERTY NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY NOTICE_BLOCK_NAME_PROPERTY NOTICE_BLOCK_NOTICE_TEXT_PROPERTY NOTICE_BLOCK_PERFORMER_PROPERTY NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY NOTICE_BLOCK_SUBJECT_PROPERTY " + "dseAfterCancel dseAfterClose dseAfterDelete dseAfterDeleteOutOfTransaction dseAfterInsert dseAfterOpen dseAfterScroll dseAfterUpdate dseAfterUpdateOutOfTransaction dseBeforeCancel dseBeforeClose dseBeforeDelete dseBeforeDetailUpdate dseBeforeInsert dseBeforeOpen dseBeforeUpdate dseOnAnyRequisiteChange dseOnCloseRecord dseOnDeleteError dseOnOpenRecord dseOnPrepareUpdate dseOnUpdateError dseOnUpdateRatifiedRecord dseOnValidDelete dseOnValidUpdate reOnChange reOnChangeValues SELECTION_BEGIN_ROUTE_EVENT SELECTION_END_ROUTE_EVENT " + "CURRENT_PERIOD_IS_REQUIRED PREVIOUS_CARD_TYPE_NAME SHOW_RECORD_PROPERTIES_FORM " + "ACCESS_RIGHTS_SETTING_DIALOG_CODE ADMINISTRATOR_USER_CODE ANALYTIC_REPORT_TYPE asrtHideLocal asrtHideRemote CALCULATED_ROLE_TYPE_CODE COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE DCTS_TEST_PROTOCOLS_FOLDER_PATH E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER E_EDOC_VERSION_ALREDY_SIGNED E_EDOC_VERSION_ALREDY_SIGNED_BY_USER EDOC_TYPES_CODE_REQUISITE_FIELD_NAME EDOCUMENTS_ALIAS_NAME FILES_FOLDER_PATH FILTER_OPERANDS_DELIMITER FILTER_OPERATIONS_DELIMITER FORMCARD_NAME FORMLIST_NAME GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE INTEGRATED_REPORT_TYPE IS_BUILDER_APPLICATION_ROLE IS_BUILDER_APPLICATION_ROLE2 IS_BUILDER_USERS ISBSYSDEV LOG_FOLDER_PATH mbCancel mbNo mbNoToAll mbOK mbYes mbYesToAll MEMORY_DATASET_DESRIPTIONS_FILENAME mrNo mrNoToAll mrYes mrYesToAll MULTIPLE_SELECT_DIALOG_CODE NONOPERATING_RECORD_FLAG_FEMININE NONOPERATING_RECORD_FLAG_MASCULINE OPERATING_RECORD_FLAG_FEMININE OPERATING_RECORD_FLAG_MASCULINE PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE PROGRAM_INITIATED_LOOKUP_ACTION ratDelete ratEdit ratInsert REPORT_TYPE REQUIRED_PICK_VALUES_VARIABLE rmCard rmList SBRTE_PROGID_DEV SBRTE_PROGID_RELEASE STATIC_ROLE_TYPE_CODE SUPPRESS_EMPTY_TEMPLATE_CREATION SYSTEM_USER_CODE UPDATE_DIALOG_DATASET USED_IN_OBJECT_HINT_PARAM USER_INITIATED_LOOKUP_ACTION USER_NAME_FORMAT USER_SELECTION_RESTRICTIONS WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH ELS_SUBTYPE_CONTROL_NAME ELS_FOLDER_KIND_CONTROL_NAME REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME " + "PRIVILEGE_COMPONENT_FULL_ACCESS PRIVILEGE_DEVELOPMENT_EXPORT PRIVILEGE_DEVELOPMENT_IMPORT PRIVILEGE_DOCUMENT_DELETE PRIVILEGE_ESD PRIVILEGE_FOLDER_DELETE PRIVILEGE_MANAGE_ACCESS_RIGHTS PRIVILEGE_MANAGE_REPLICATION PRIVILEGE_MANAGE_SESSION_SERVER PRIVILEGE_OBJECT_FULL_ACCESS PRIVILEGE_OBJECT_VIEW PRIVILEGE_RESERVE_LICENSE PRIVILEGE_SYSTEM_CUSTOMIZE PRIVILEGE_SYSTEM_DEVELOP PRIVILEGE_SYSTEM_INSTALL PRIVILEGE_TASK_DELETE PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE PRIVILEGES_PSEUDOREFERENCE_CODE " + "ACCESS_TYPES_PSEUDOREFERENCE_CODE ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE COMPONENTS_PSEUDOREFERENCE_CODE FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE GROUPS_PSEUDOREFERENCE_CODE RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE REFTYPES_PSEUDOREFERENCE_CODE REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE SEND_PROTOCOL_PSEUDOREFERENCE_CODE SUBSTITUTES_PSEUDOREFERENCE_CODE SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE UNITS_PSEUDOREFERENCE_CODE USERS_PSEUDOREFERENCE_CODE VIEWERS_PSEUDOREFERENCE_CODE " + "CERTIFICATE_TYPE_ENCRYPT CERTIFICATE_TYPE_SIGN CERTIFICATE_TYPE_SIGN_AND_ENCRYPT " + "STORAGE_TYPE_FILE STORAGE_TYPE_NAS_CIFS STORAGE_TYPE_SAPERION STORAGE_TYPE_SQL_SERVER " + "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE COMPTYPE2_REQUISITE_TASKS_VALUE COMPTYPE2_REQUISITE_FOLDERS_VALUE COMPTYPE2_REQUISITE_REFERENCES_VALUE " + "SYSREQ_CODE SYSREQ_COMPTYPE2 SYSREQ_CONST_AVAILABLE_FOR_WEB SYSREQ_CONST_COMMON_CODE SYSREQ_CONST_COMMON_VALUE SYSREQ_CONST_FIRM_CODE SYSREQ_CONST_FIRM_STATUS SYSREQ_CONST_FIRM_VALUE SYSREQ_CONST_SERVER_STATUS SYSREQ_CONTENTS SYSREQ_DATE_OPEN SYSREQ_DATE_CLOSE SYSREQ_DESCRIPTION SYSREQ_DESCRIPTION_LOCALIZE_ID SYSREQ_DOUBLE SYSREQ_EDOC_ACCESS_TYPE SYSREQ_EDOC_AUTHOR SYSREQ_EDOC_CREATED SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE SYSREQ_EDOC_EDITOR SYSREQ_EDOC_ENCODE_TYPE SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_EXPORT_DATE SYSREQ_EDOC_EXPORTER SYSREQ_EDOC_KIND SYSREQ_EDOC_LIFE_STAGE_NAME SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE SYSREQ_EDOC_MODIFIED SYSREQ_EDOC_NAME SYSREQ_EDOC_NOTE SYSREQ_EDOC_QUALIFIED_ID SYSREQ_EDOC_SESSION_KEY SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_SIGNATURE_TYPE SYSREQ_EDOC_SIGNED SYSREQ_EDOC_STORAGE SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE SYSREQ_EDOC_STORAGES_CHECK_RIGHTS SYSREQ_EDOC_STORAGES_COMPUTER_NAME SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE SYSREQ_EDOC_STORAGES_FUNCTION SYSREQ_EDOC_STORAGES_INITIALIZED SYSREQ_EDOC_STORAGES_LOCAL_PATH SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT SYSREQ_EDOC_STORAGES_SERVER_NAME SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME SYSREQ_EDOC_STORAGES_TYPE SYSREQ_EDOC_TEXT_MODIFIED SYSREQ_EDOC_TYPE_ACT_CODE SYSREQ_EDOC_TYPE_ACT_DESCRIPTION SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_EDOC_TYPE_ACT_SECTION SYSREQ_EDOC_TYPE_ADD_PARAMS SYSREQ_EDOC_TYPE_COMMENT SYSREQ_EDOC_TYPE_EVENT_TEXT SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID SYSREQ_EDOC_TYPE_NUMERATION_METHOD SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE SYSREQ_EDOC_TYPE_REQ_CODE SYSREQ_EDOC_TYPE_REQ_DESCRIPTION SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_REQ_IS_LEADING SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED SYSREQ_EDOC_TYPE_REQ_NUMBER SYSREQ_EDOC_TYPE_REQ_ON_CHANGE SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_EDOC_TYPE_REQ_ON_SELECT SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND SYSREQ_EDOC_TYPE_REQ_SECTION SYSREQ_EDOC_TYPE_VIEW_CARD SYSREQ_EDOC_TYPE_VIEW_CODE SYSREQ_EDOC_TYPE_VIEW_COMMENT SYSREQ_EDOC_TYPE_VIEW_IS_MAIN SYSREQ_EDOC_TYPE_VIEW_NAME SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_EDOC_VERSION_AUTHOR SYSREQ_EDOC_VERSION_CRC SYSREQ_EDOC_VERSION_DATA SYSREQ_EDOC_VERSION_EDITOR SYSREQ_EDOC_VERSION_EXPORT_DATE SYSREQ_EDOC_VERSION_EXPORTER SYSREQ_EDOC_VERSION_HIDDEN SYSREQ_EDOC_VERSION_LIFE_STAGE SYSREQ_EDOC_VERSION_MODIFIED SYSREQ_EDOC_VERSION_NOTE SYSREQ_EDOC_VERSION_SIGNATURE_TYPE SYSREQ_EDOC_VERSION_SIGNED SYSREQ_EDOC_VERSION_SIZE SYSREQ_EDOC_VERSION_SOURCE SYSREQ_EDOC_VERSION_TEXT_MODIFIED SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE SYSREQ_FOLDER_KIND SYSREQ_FUNC_CATEGORY SYSREQ_FUNC_COMMENT SYSREQ_FUNC_GROUP SYSREQ_FUNC_GROUP_COMMENT SYSREQ_FUNC_GROUP_NUMBER SYSREQ_FUNC_HELP SYSREQ_FUNC_PARAM_DEF_VALUE SYSREQ_FUNC_PARAM_IDENT SYSREQ_FUNC_PARAM_NUMBER SYSREQ_FUNC_PARAM_TYPE SYSREQ_FUNC_TEXT SYSREQ_GROUP_CATEGORY SYSREQ_ID SYSREQ_LAST_UPDATE SYSREQ_LEADER_REFERENCE SYSREQ_LINE_NUMBER SYSREQ_MAIN_RECORD_ID SYSREQ_NAME SYSREQ_NAME_LOCALIZE_ID SYSREQ_NOTE SYSREQ_ORIGINAL_RECORD SYSREQ_OUR_FIRM SYSREQ_PROFILING_SETTINGS_BATCH_LOGING SYSREQ_PROFILING_SETTINGS_BATCH_SIZE SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_START_LOGGED SYSREQ_RECORD_STATUS SYSREQ_REF_REQ_FIELD_NAME SYSREQ_REF_REQ_FORMAT SYSREQ_REF_REQ_GENERATED SYSREQ_REF_REQ_LENGTH SYSREQ_REF_REQ_PRECISION SYSREQ_REF_REQ_REFERENCE SYSREQ_REF_REQ_SECTION SYSREQ_REF_REQ_STORED SYSREQ_REF_REQ_TOKENS SYSREQ_REF_REQ_TYPE SYSREQ_REF_REQ_VIEW SYSREQ_REF_TYPE_ACT_CODE SYSREQ_REF_TYPE_ACT_DESCRIPTION SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_ACT_ON_EXECUTE SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_REF_TYPE_ACT_SECTION SYSREQ_REF_TYPE_ADD_PARAMS SYSREQ_REF_TYPE_COMMENT SYSREQ_REF_TYPE_COMMON_SETTINGS SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME SYSREQ_REF_TYPE_EVENT_TEXT SYSREQ_REF_TYPE_MAIN_LEADING_REF SYSREQ_REF_TYPE_NAME_IN_SINGULAR SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_REF_TYPE_NAME_LOCALIZE_ID SYSREQ_REF_TYPE_NUMERATION_METHOD SYSREQ_REF_TYPE_REQ_CODE SYSREQ_REF_TYPE_REQ_DESCRIPTION SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_REQ_IS_CONTROL SYSREQ_REF_TYPE_REQ_IS_FILTER SYSREQ_REF_TYPE_REQ_IS_LEADING SYSREQ_REF_TYPE_REQ_IS_REQUIRED SYSREQ_REF_TYPE_REQ_NUMBER SYSREQ_REF_TYPE_REQ_ON_CHANGE SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_REF_TYPE_REQ_ON_SELECT SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND SYSREQ_REF_TYPE_REQ_SECTION SYSREQ_REF_TYPE_VIEW_CARD SYSREQ_REF_TYPE_VIEW_CODE SYSREQ_REF_TYPE_VIEW_COMMENT SYSREQ_REF_TYPE_VIEW_IS_MAIN SYSREQ_REF_TYPE_VIEW_NAME SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_REFERENCE_TYPE_ID SYSREQ_STATE SYSREQ_STATЕ SYSREQ_SYSTEM_SETTINGS_VALUE SYSREQ_TYPE SYSREQ_UNIT SYSREQ_UNIT_ID SYSREQ_USER_GROUPS_GROUP_FULL_NAME SYSREQ_USER_GROUPS_GROUP_NAME SYSREQ_USER_GROUPS_GROUP_SERVER_NAME SYSREQ_USERS_ACCESS_RIGHTS SYSREQ_USERS_AUTHENTICATION SYSREQ_USERS_CATEGORY SYSREQ_USERS_COMPONENT SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC SYSREQ_USERS_DOMAIN SYSREQ_USERS_FULL_USER_NAME SYSREQ_USERS_GROUP SYSREQ_USERS_IS_MAIN_SERVER SYSREQ_USERS_LOGIN SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC SYSREQ_USERS_STATUS SYSREQ_USERS_USER_CERTIFICATE SYSREQ_USERS_USER_CERTIFICATE_INFO SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION SYSREQ_USERS_USER_CERTIFICATE_STATE SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT SYSREQ_USERS_USER_DEFAULT_CERTIFICATE SYSREQ_USERS_USER_DESCRIPTION SYSREQ_USERS_USER_GLOBAL_NAME SYSREQ_USERS_USER_LOGIN SYSREQ_USERS_USER_MAIN_SERVER SYSREQ_USERS_USER_TYPE SYSREQ_WORK_RULES_FOLDER_ID " + "RESULT_VAR_NAME RESULT_VAR_NAME_ENG " + "AUTO_NUMERATION_RULE_ID CANT_CHANGE_ID_REQUISITE_RULE_ID CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID CHECK_CODE_REQUISITE_RULE_ID CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID CHECK_FILTRATER_CHANGES_RULE_ID CHECK_RECORD_INTERVAL_RULE_ID CHECK_REFERENCE_INTERVAL_RULE_ID CHECK_REQUIRED_DATA_FULLNESS_RULE_ID CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID MAKE_RECORD_UNRATIFIED_RULE_ID RESTORE_AUTO_NUMERATION_RULE_ID SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID SET_IDSPS_VALUE_RULE_ID SET_NEXT_CODE_VALUE_RULE_ID SET_OURFIRM_BOUNDS_RULE_ID SET_OURFIRM_REQUISITE_RULE_ID " + "SCRIPT_BLOCK_AFTER_FINISH_EVENT SCRIPT_BLOCK_BEFORE_START_EVENT SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY SCRIPT_BLOCK_NAME_PROPERTY SCRIPT_BLOCK_SCRIPT_PROPERTY " + "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_AFTER_FINISH_EVENT SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT SUBTASK_BLOCK_ATTACHMENTS_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY SUBTASK_BLOCK_BEFORE_START_EVENT SUBTASK_BLOCK_CREATED_TASK_PROPERTY SUBTASK_BLOCK_CREATION_EVENT SUBTASK_BLOCK_DEADLINE_PROPERTY SUBTASK_BLOCK_IMPORTANCE_PROPERTY SUBTASK_BLOCK_INITIATOR_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY SUBTASK_BLOCK_JOBS_TYPE_PROPERTY SUBTASK_BLOCK_NAME_PROPERTY SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY SUBTASK_BLOCK_PERFORMERS_PROPERTY SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_START_EVENT SUBTASK_BLOCK_STEP_CONTROL_PROPERTY SUBTASK_BLOCK_SUBJECT_PROPERTY SUBTASK_BLOCK_TASK_CONTROL_PROPERTY SUBTASK_BLOCK_TEXT_PROPERTY SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY " + "SYSCOMP_CONTROL_JOBS SYSCOMP_FOLDERS SYSCOMP_JOBS SYSCOMP_NOTICES SYSCOMP_TASKS " + "SYSDLG_CREATE_EDOCUMENT SYSDLG_CREATE_EDOCUMENT_VERSION SYSDLG_CURRENT_PERIOD SYSDLG_EDIT_FUNCTION_HELP SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS SYSDLG_EXPORT_SINGLE_EDOCUMENT SYSDLG_IMPORT_EDOCUMENT SYSDLG_MULTIPLE_SELECT SYSDLG_SETUP_ACCESS_RIGHTS SYSDLG_SETUP_DEFAULT_RIGHTS SYSDLG_SETUP_FILTER_CONDITION SYSDLG_SETUP_SIGN_RIGHTS SYSDLG_SETUP_TASK_OBSERVERS SYSDLG_SETUP_TASK_ROUTE SYSDLG_SETUP_USERS_LIST SYSDLG_SIGN_EDOCUMENT SYSDLG_SIGN_MULTIPLE_EDOCUMENTS " + "SYSREF_ACCESS_RIGHTS_TYPES SYSREF_ADMINISTRATION_HISTORY SYSREF_ALL_AVAILABLE_COMPONENTS SYSREF_ALL_AVAILABLE_PRIVILEGES SYSREF_ALL_REPLICATING_COMPONENTS SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS SYSREF_CALENDAR_EVENTS SYSREF_COMPONENT_TOKEN_HISTORY SYSREF_COMPONENT_TOKENS SYSREF_COMPONENTS SYSREF_CONSTANTS SYSREF_DATA_RECEIVE_PROTOCOL SYSREF_DATA_SEND_PROTOCOL SYSREF_DIALOGS SYSREF_DIALOGS_REQUISITES SYSREF_EDITORS SYSREF_EDOC_CARDS SYSREF_EDOC_TYPES SYSREF_EDOCUMENT_CARD_REQUISITES SYSREF_EDOCUMENT_CARD_TYPES SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE SYSREF_EDOCUMENT_CARDS SYSREF_EDOCUMENT_HISTORY SYSREF_EDOCUMENT_KINDS SYSREF_EDOCUMENT_REQUISITES SYSREF_EDOCUMENT_SIGNATURES SYSREF_EDOCUMENT_TEMPLATES SYSREF_EDOCUMENT_TEXT_STORAGES SYSREF_EDOCUMENT_VIEWS SYSREF_FILTERER_SETUP_CONFLICTS SYSREF_FILTRATER_SETTING_CONFLICTS SYSREF_FOLDER_HISTORY SYSREF_FOLDERS SYSREF_FUNCTION_GROUPS SYSREF_FUNCTION_PARAMS SYSREF_FUNCTIONS SYSREF_JOB_HISTORY SYSREF_LINKS SYSREF_LOCALIZATION_DICTIONARY SYSREF_LOCALIZATION_LANGUAGES SYSREF_MODULES SYSREF_PRIVILEGES SYSREF_RECORD_HISTORY SYSREF_REFERENCE_REQUISITES SYSREF_REFERENCE_TYPE_VIEWS SYSREF_REFERENCE_TYPES SYSREF_REFERENCES SYSREF_REFERENCES_REQUISITES SYSREF_REMOTE_SERVERS SYSREF_REPLICATION_SESSIONS_LOG SYSREF_REPLICATION_SESSIONS_PROTOCOL SYSREF_REPORTS SYSREF_ROLES SYSREF_ROUTE_BLOCK_GROUPS SYSREF_ROUTE_BLOCKS SYSREF_SCRIPTS SYSREF_SEARCHES SYSREF_SERVER_EVENTS SYSREF_SERVER_EVENTS_HISTORY SYSREF_STANDARD_ROUTE_GROUPS SYSREF_STANDARD_ROUTES SYSREF_STATUSES SYSREF_SYSTEM_SETTINGS SYSREF_TASK_HISTORY SYSREF_TASK_KIND_GROUPS SYSREF_TASK_KINDS SYSREF_TASK_RIGHTS SYSREF_TASK_SIGNATURES SYSREF_TASKS SYSREF_UNITS SYSREF_USER_GROUPS SYSREF_USER_GROUPS_REFERENCE SYSREF_USER_SUBSTITUTION SYSREF_USERS SYSREF_USERS_REFERENCE SYSREF_VIEWERS SYSREF_WORKING_TIME_CALENDARS " + "ACCESS_RIGHTS_TABLE_NAME EDMS_ACCESS_TABLE_NAME EDOC_TYPES_TABLE_NAME " + "TEST_DEV_DB_NAME TEST_DEV_SYSTEM_CODE TEST_EDMS_DB_NAME TEST_EDMS_MAIN_CODE TEST_EDMS_MAIN_DB_NAME TEST_EDMS_SECOND_CODE TEST_EDMS_SECOND_DB_NAME TEST_EDMS_SYSTEM_CODE TEST_ISB5_MAIN_CODE TEST_ISB5_SECOND_CODE TEST_SQL_SERVER_2005_NAME TEST_SQL_SERVER_NAME " + "ATTENTION_CAPTION cbsCommandLinks cbsDefault CONFIRMATION_CAPTION ERROR_CAPTION INFORMATION_CAPTION mrCancel mrOk " + "EDOC_VERSION_ACTIVE_STAGE_CODE EDOC_VERSION_DESIGN_STAGE_CODE EDOC_VERSION_OBSOLETE_STAGE_CODE " + "cpDataEnciphermentEnabled cpDigitalSignatureEnabled cpID cpIssuer cpPluginVersion cpSerial cpSubjectName cpSubjSimpleName cpValidFromDate cpValidToDate " + "ISBL_SYNTAX NO_SYNTAX XML_SYNTAX " + "WAIT_BLOCK_AFTER_FINISH_EVENT WAIT_BLOCK_BEFORE_START_EVENT WAIT_BLOCK_DEADLINE_PROPERTY WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY WAIT_BLOCK_NAME_PROPERTY WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY " + "SYSRES_COMMON SYSRES_CONST SYSRES_MBFUNC SYSRES_SBDATA SYSRES_SBGUI SYSRES_SBINTF SYSRES_SBREFDSC SYSRES_SQLERRORS SYSRES_SYSCOMP ", hp = "atUser atGroup atRole " + "aemEnabledAlways aemDisabledAlways aemEnabledOnBrowse aemEnabledOnEdit aemDisabledOnBrowseEmpty " + "apBegin apEnd " + "alLeft alRight " + "asmNever asmNoButCustomize asmAsLastTime asmYesButCustomize asmAlways " + "cirCommon cirRevoked " + "ctSignature ctEncode ctSignatureEncode " + "clbUnchecked clbChecked clbGrayed " + "ceISB ceAlways ceNever " + "ctDocument ctReference ctScript ctUnknown ctReport ctDialog ctFunction ctFolder ctEDocument ctTask ctJob ctNotice ctControlJob " + "cfInternal cfDisplay " + "ciUnspecified ciWrite ciRead " + "ckFolder ckEDocument ckTask ckJob ckComponentToken ckAny ckReference ckScript ckReport ckDialog " + "ctISBLEditor ctBevel ctButton ctCheckListBox ctComboBox ctComboEdit ctGrid ctDBCheckBox ctDBComboBox ctDBEdit ctDBEllipsis ctDBMemo ctDBNavigator ctDBRadioGroup ctDBStatusLabel ctEdit ctGroupBox ctInplaceHint ctMemo ctPanel ctListBox ctRadioButton ctRichEdit ctTabSheet ctWebBrowser ctImage ctHyperLink ctLabel ctDBMultiEllipsis ctRibbon ctRichView ctInnerPanel ctPanelGroup ctBitButton " + "cctDate cctInteger cctNumeric cctPick cctReference cctString cctText " + "cltInternal cltPrimary cltGUI " + "dseBeforeOpen dseAfterOpen dseBeforeClose dseAfterClose dseOnValidDelete dseBeforeDelete dseAfterDelete dseAfterDeleteOutOfTransaction dseOnDeleteError dseBeforeInsert dseAfterInsert dseOnValidUpdate dseBeforeUpdate dseOnUpdateRatifiedRecord dseAfterUpdate dseAfterUpdateOutOfTransaction dseOnUpdateError dseAfterScroll dseOnOpenRecord dseOnCloseRecord dseBeforeCancel dseAfterCancel dseOnUpdateDeadlockError dseBeforeDetailUpdate dseOnPrepareUpdate dseOnAnyRequisiteChange " + "dssEdit dssInsert dssBrowse dssInActive " + "dftDate dftShortDate dftDateTime dftTimeStamp " + "dotDays dotHours dotMinutes dotSeconds " + "dtkndLocal dtkndUTC " + "arNone arView arEdit arFull " + "ddaView ddaEdit " + "emLock emEdit emSign emExportWithLock emImportWithUnlock emChangeVersionNote emOpenForModify emChangeLifeStage emDelete emCreateVersion emImport emUnlockExportedWithLock emStart emAbort emReInit emMarkAsReaded emMarkAsUnreaded emPerform emAccept emResume emChangeRights emEditRoute emEditObserver emRecoveryFromLocalCopy emChangeWorkAccessType emChangeEncodeTypeToCertificate emChangeEncodeTypeToPassword emChangeEncodeTypeToNone emChangeEncodeTypeToCertificatePassword emChangeStandardRoute emGetText emOpenForView emMoveToStorage emCreateObject emChangeVersionHidden emDeleteVersion emChangeLifeCycleStage emApprovingSign emExport emContinue emLockFromEdit emUnLockForEdit emLockForServer emUnlockFromServer emDelegateAccessRights emReEncode " + "ecotFile ecotProcess " + "eaGet eaCopy eaCreate eaCreateStandardRoute " + "edltAll edltNothing edltQuery " + "essmText essmCard " + "esvtLast esvtLastActive esvtSpecified " + "edsfExecutive edsfArchive " + "edstSQLServer edstFile " + "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile " + "vsDefault vsDesign vsActive vsObsolete " + "etNone etCertificate etPassword etCertificatePassword " + "ecException ecWarning ecInformation " + "estAll estApprovingOnly " + "evtLast evtLastActive evtQuery " + "fdtString fdtNumeric fdtInteger fdtDate fdtText fdtUnknown fdtWideString fdtLargeInteger " + "ftInbox ftOutbox ftFavorites ftCommonFolder ftUserFolder ftComponents ftQuickLaunch ftShortcuts ftSearch " + "grhAuto grhX1 grhX2 grhX3 " + "hltText hltRTF hltHTML " + "iffBMP iffJPEG iffMultiPageTIFF iffSinglePageTIFF iffTIFF iffPNG " + "im8bGrayscale im24bRGB im1bMonochrome " + "itBMP itJPEG itWMF itPNG " + "ikhInformation ikhWarning ikhError ikhNoIcon " + "icUnknown icScript icFunction icIntegratedReport icAnalyticReport icDataSetEventHandler icActionHandler icFormEventHandler icLookUpEventHandler icRequisiteChangeEventHandler icBeforeSearchEventHandler icRoleCalculation icSelectRouteEventHandler icBlockPropertyCalculation icBlockQueryParamsEventHandler icChangeSearchResultEventHandler icBlockEventHandler icSubTaskInitEventHandler icEDocDataSetEventHandler icEDocLookUpEventHandler icEDocActionHandler icEDocFormEventHandler icEDocRequisiteChangeEventHandler icStructuredConversionRule icStructuredConversionEventBefore icStructuredConversionEventAfter icWizardEventHandler icWizardFinishEventHandler icWizardStepEventHandler icWizardStepFinishEventHandler icWizardActionEnableEventHandler icWizardActionExecuteEventHandler icCreateJobsHandler icCreateNoticesHandler icBeforeLookUpEventHandler icAfterLookUpEventHandler icTaskAbortEventHandler icWorkflowBlockActionHandler icDialogDataSetEventHandler icDialogActionHandler icDialogLookUpEventHandler icDialogRequisiteChangeEventHandler icDialogFormEventHandler icDialogValidCloseEventHandler icBlockFormEventHandler icTaskFormEventHandler icReferenceMethod icEDocMethod icDialogMethod icProcessMessageHandler " + "isShow isHide isByUserSettings " + "jkJob jkNotice jkControlJob " + "jtInner jtLeft jtRight jtFull jtCross " + "lbpAbove lbpBelow lbpLeft lbpRight " + "eltPerConnection eltPerUser " + "sfcUndefined sfcBlack sfcGreen sfcRed sfcBlue sfcOrange sfcLilac " + "sfsItalic sfsStrikeout sfsNormal " + "ldctStandardRoute ldctWizard ldctScript ldctFunction ldctRouteBlock ldctIntegratedReport ldctAnalyticReport ldctReferenceType ldctEDocumentType ldctDialog ldctServerEvents " + "mrcrtNone mrcrtUser mrcrtMaximal mrcrtCustom " + "vtEqual vtGreaterOrEqual vtLessOrEqual vtRange " + "rdYesterday rdToday rdTomorrow rdThisWeek rdThisMonth rdThisYear rdNextMonth rdNextWeek rdLastWeek rdLastMonth " + "rdWindow rdFile rdPrinter " + "rdtString rdtNumeric rdtInteger rdtDate rdtReference rdtAccount rdtText rdtPick rdtUnknown rdtLargeInteger rdtDocument " + "reOnChange reOnChangeValues " + "ttGlobal ttLocal ttUser ttSystem " + "ssmBrowse ssmSelect ssmMultiSelect ssmBrowseModal " + "smSelect smLike smCard " + "stNone stAuthenticating stApproving " + "sctString sctStream " + "sstAnsiSort sstNaturalSort " + "svtEqual svtContain " + "soatString soatNumeric soatInteger soatDatetime soatReferenceRecord soatText soatPick soatBoolean soatEDocument soatAccount soatIntegerCollection soatNumericCollection soatStringCollection soatPickCollection soatDatetimeCollection soatBooleanCollection soatReferenceRecordCollection soatEDocumentCollection soatAccountCollection soatContents soatUnknown " + "tarAbortByUser tarAbortByWorkflowException " + "tvtAllWords tvtExactPhrase tvtAnyWord " + "usNone usCompleted usRedSquare usBlueSquare usYellowSquare usGreenSquare usOrangeSquare usPurpleSquare usFollowUp " + "utUnknown utUser utDeveloper utAdministrator utSystemDeveloper utDisconnected " + "btAnd btDetailAnd btOr btNotOr btOnly " + "vmView vmSelect vmNavigation " + "vsmSingle vsmMultiple vsmMultipleCheck vsmNoSelection " + "wfatPrevious wfatNext wfatCancel wfatFinish " + "wfepUndefined wfepText3 wfepText6 wfepText9 wfepSpinEdit wfepDropDown wfepRadioGroup wfepFlag wfepText12 wfepText15 wfepText18 wfepText21 wfepText24 wfepText27 wfepText30 wfepRadioGroupColumn1 wfepRadioGroupColumn2 wfepRadioGroupColumn3 " + "wfetQueryParameter wfetText wfetDelimiter wfetLabel " + "wptString wptInteger wptNumeric wptBoolean wptDateTime wptPick wptText wptUser wptUserList wptEDocumentInfo wptEDocumentInfoList wptReferenceRecordInfo wptReferenceRecordInfoList wptFolderInfo wptTaskInfo wptContents wptFileName wptDate " + "wsrComplete wsrGoNext wsrGoPrevious wsrCustom wsrCancel wsrGoFinal " + "wstForm wstEDocument wstTaskCard wstReferenceRecordCard wstFinal " + "waAll waPerformers waManual " + "wsbStart wsbFinish wsbNotice wsbStep wsbDecision wsbWait wsbMonitor wsbScript wsbConnector wsbSubTask wsbLifeCycleStage wsbPause " + "wdtInteger wdtFloat wdtString wdtPick wdtDateTime wdtBoolean wdtTask wdtJob wdtFolder wdtEDocument wdtReferenceRecord wdtUser wdtGroup wdtRole wdtIntegerCollection wdtFloatCollection wdtStringCollection wdtPickCollection wdtDateTimeCollection wdtBooleanCollection wdtTaskCollection wdtJobCollection wdtFolderCollection wdtEDocumentCollection wdtReferenceRecordCollection wdtUserCollection wdtGroupCollection wdtRoleCollection wdtContents wdtUserList wdtSearchDescription wdtDeadLine wdtPickSet wdtAccountCollection " + "wiLow wiNormal wiHigh " + "wrtSoft wrtHard " + "wsInit wsRunning wsDone wsControlled wsAborted wsContinued " + "wtmFull wtmFromCurrent wtmOnlyCurrent ", gc = "AddSubString AdjustLineBreaks AmountInWords Analysis ArrayDimCount ArrayHighBound ArrayLowBound ArrayOf ArrayReDim Assert Assigned BeginOfMonth BeginOfPeriod BuildProfilingOperationAnalysis CallProcedure CanReadFile CArrayElement CDataSetRequisite ChangeDate ChangeReferenceDataset Char CharPos CheckParam CheckParamValue CompareStrings ConstantExists ControlState ConvertDateStr Copy CopyFile CreateArray CreateCachedReference CreateConnection CreateDialog CreateDualListDialog CreateEditor CreateException CreateFile CreateFolderDialog CreateInputDialog CreateLinkFile CreateList CreateLock CreateMemoryDataSet CreateObject CreateOpenDialog CreateProgress CreateQuery CreateReference CreateReport CreateSaveDialog CreateScript CreateSQLPivotFunction CreateStringList CreateTreeListSelectDialog CSelectSQL CSQL CSubString CurrentUserID CurrentUserName CurrentVersion DataSetLocateEx DateDiff DateTimeDiff DateToStr DayOfWeek DeleteFile DirectoryExists DisableCheckAccessRights DisableCheckFullShowingRestriction DisableMassTaskSendingRestrictions DropTable DupeString EditText EnableCheckAccessRights EnableCheckFullShowingRestriction EnableMassTaskSendingRestrictions EndOfMonth EndOfPeriod ExceptionExists ExceptionsOff ExceptionsOn Execute ExecuteProcess Exit ExpandEnvironmentVariables ExtractFileDrive ExtractFileExt ExtractFileName ExtractFilePath ExtractParams FileExists FileSize FindFile FindSubString FirmContext ForceDirectories Format FormatDate FormatNumeric FormatSQLDate FormatString FreeException GetComponent GetComponentLaunchParam GetConstant GetLastException GetReferenceRecord GetRefTypeByRefID GetTableID GetTempFolder IfThen In IndexOf InputDialog InputDialogEx InteractiveMode IsFileLocked IsGraphicFile IsNumeric Length LoadString LoadStringFmt LocalTimeToUTC LowerCase Max MessageBox MessageBoxEx MimeDecodeBinary MimeDecodeString MimeEncodeBinary MimeEncodeString Min MoneyInWords MoveFile NewID Now OpenFile Ord Precision Raise ReadCertificateFromFile ReadFile ReferenceCodeByID ReferenceNumber ReferenceRequisiteMode ReferenceRequisiteValue RegionDateSettings RegionNumberSettings RegionTimeSettings RegRead RegWrite RenameFile Replace Round SelectServerCode SelectSQL ServerDateTime SetConstant SetManagedFolderFieldsState ShowConstantsInputDialog ShowMessage Sleep Split SQL SQL2XLSTAB SQLProfilingSendReport StrToDate SubString SubStringCount SystemSetting Time TimeDiff Today Transliterate Trim UpperCase UserStatus UTCToLocalTime ValidateXML VarIsClear VarIsEmpty VarIsNull WorkTimeDiff WriteFile WriteFileEx WriteObjectHistory Анализ БазаДанных БлокЕсть БлокЕстьРасш БлокИнфо БлокСнять БлокСнятьРасш БлокУстановить Ввод ВводМеню ВедС ВедСпр ВерхняяГраницаМассива ВнешПрогр Восст ВременнаяПапка Время ВыборSQL ВыбратьЗапись ВыделитьСтр Вызвать Выполнить ВыпПрогр ГрафическийФайл ГруппаДополнительно ДатаВремяСерв ДеньНедели ДиалогДаНет ДлинаСтр ДобПодстр ЕПусто ЕслиТо ЕЧисло ЗамПодстр ЗаписьСправочника ЗначПоляСпр ИДТипСпр ИзвлечьДиск ИзвлечьИмяФайла ИзвлечьПуть ИзвлечьРасширение ИзмДат ИзменитьРазмерМассива ИзмеренийМассива ИмяОрг ИмяПоляСпр Индекс ИндикаторЗакрыть ИндикаторОткрыть ИндикаторШаг ИнтерактивныйРежим ИтогТблСпр КодВидВедСпр КодВидСпрПоИД КодПоAnalit КодСимвола КодСпр КолПодстр КолПроп КонМес Конст КонстЕсть КонстЗнач КонТран КопироватьФайл КопияСтр КПериод КСтрТблСпр Макс МаксСтрТблСпр Массив Меню МенюРасш Мин НаборДанныхНайтиРасш НаимВидСпр НаимПоAnalit НаимСпр НастроитьПереводыСтрок НачМес НачТран НижняяГраницаМассива НомерСпр НПериод Окно Окр Окружение ОтлИнфДобавить ОтлИнфУдалить Отчет ОтчетАнал ОтчетИнт ПапкаСуществует Пауза ПВыборSQL ПереименоватьФайл Переменные ПереместитьФайл Подстр ПоискПодстр ПоискСтр ПолучитьИДТаблицы ПользовательДополнительно ПользовательИД ПользовательИмя ПользовательСтатус Прервать ПроверитьПараметр ПроверитьПараметрЗнач ПроверитьУсловие РазбСтр РазнВремя РазнДат РазнДатаВремя РазнРабВремя РегУстВрем РегУстДат РегУстЧсл РедТекст РеестрЗапись РеестрСписокИменПарам РеестрЧтение РеквСпр РеквСпрПр Сегодня Сейчас Сервер СерверПроцессИД СертификатФайлСчитать СжПроб Символ СистемаДиректумКод СистемаИнформация СистемаКод Содержит СоединениеЗакрыть СоединениеОткрыть СоздатьДиалог СоздатьДиалогВыбораИзДвухСписков СоздатьДиалогВыбораПапки СоздатьДиалогОткрытияФайла СоздатьДиалогСохраненияФайла СоздатьЗапрос СоздатьИндикатор СоздатьИсключение СоздатьКэшированныйСправочник СоздатьМассив СоздатьНаборДанных СоздатьОбъект СоздатьОтчет СоздатьПапку СоздатьРедактор СоздатьСоединение СоздатьСписок СоздатьСписокСтрок СоздатьСправочник СоздатьСценарий СоздСпр СостСпр Сохр СохрСпр СписокСистем Спр Справочник СпрБлокЕсть СпрБлокСнять СпрБлокСнятьРасш СпрБлокУстановить СпрИзмНабДан СпрКод СпрНомер СпрОбновить СпрОткрыть СпрОтменить СпрПарам СпрПолеЗнач СпрПолеИмя СпрРекв СпрРеквВведЗн СпрРеквНовые СпрРеквПр СпрРеквПредЗн СпрРеквРежим СпрРеквТипТекст СпрСоздать СпрСост СпрСохранить СпрТблИтог СпрТблСтр СпрТблСтрКол СпрТблСтрМакс СпрТблСтрМин СпрТблСтрПред СпрТблСтрСлед СпрТблСтрСозд СпрТблСтрУд СпрТекПредст СпрУдалить СравнитьСтр СтрВерхРегистр СтрНижнРегистр СтрТблСпр СумПроп Сценарий СценарийПарам ТекВерсия ТекОрг Точн Тран Транслитерация УдалитьТаблицу УдалитьФайл УдСпр УдСтрТблСпр Уст УстановкиКонстант ФайлАтрибутСчитать ФайлАтрибутУстановить ФайлВремя ФайлВремяУстановить ФайлВыбрать ФайлЗанят ФайлЗаписать ФайлИскать ФайлКопировать ФайлМожноЧитать ФайлОткрыть ФайлПереименовать ФайлПерекодировать ФайлПереместить ФайлПросмотреть ФайлРазмер ФайлСоздать ФайлСсылкаСоздать ФайлСуществует ФайлСчитать ФайлУдалить ФмтSQLДат ФмтДат ФмтСтр ФмтЧсл Формат ЦМассивЭлемент ЦНаборДанныхРеквизит ЦПодстр ", ko = "AltState Application CallType ComponentTokens CreatedJobs CreatedNotices ControlState DialogResult Dialogs EDocuments EDocumentVersionSource Folders GlobalIDs Job Jobs InputValue LookUpReference LookUpRequisiteNames LookUpSearch Object ParentComponent Processes References Requisite ReportName Reports Result Scripts Searches SelectedAttachments SelectedItems SelectMode Sender ServerEvents ServiceFactory ShiftState SubTask SystemDialogs Tasks Wizard Wizards Work ВызовСпособ ИмяОтчета РеквЗнач ", Po = "IApplication IAccessRights IAccountRepository IAccountSelectionRestrictions IAction IActionList IAdministrationHistoryDescription IAnchors IApplication IArchiveInfo IAttachment IAttachmentList ICheckListBox ICheckPointedList IColumn IComponent IComponentDescription IComponentToken IComponentTokenFactory IComponentTokenInfo ICompRecordInfo IConnection IContents IControl IControlJob IControlJobInfo IControlList ICrypto ICrypto2 ICustomJob ICustomJobInfo ICustomListBox ICustomObjectWizardStep ICustomWork ICustomWorkInfo IDataSet IDataSetAccessInfo IDataSigner IDateCriterion IDateRequisite IDateRequisiteDescription IDateValue IDeaAccessRights IDeaObjectInfo IDevelopmentComponentLock IDialog IDialogFactory IDialogPickRequisiteItems IDialogsFactory IDICSFactory IDocRequisite IDocumentInfo IDualListDialog IECertificate IECertificateInfo IECertificates IEditControl IEditorForm IEdmsExplorer IEdmsObject IEdmsObjectDescription IEdmsObjectFactory IEdmsObjectInfo IEDocument IEDocumentAccessRights IEDocumentDescription IEDocumentEditor IEDocumentFactory IEDocumentInfo IEDocumentStorage IEDocumentVersion IEDocumentVersionListDialog IEDocumentVersionSource IEDocumentWizardStep IEDocVerSignature IEDocVersionState IEnabledMode IEncodeProvider IEncrypter IEvent IEventList IException IExternalEvents IExternalHandler IFactory IField IFileDialog IFolder IFolderDescription IFolderDialog IFolderFactory IFolderInfo IForEach IForm IFormTitle IFormWizardStep IGlobalIDFactory IGlobalIDInfo IGrid IHasher IHistoryDescription IHyperLinkControl IImageButton IImageControl IInnerPanel IInplaceHint IIntegerCriterion IIntegerList IIntegerRequisite IIntegerValue IISBLEditorForm IJob IJobDescription IJobFactory IJobForm IJobInfo ILabelControl ILargeIntegerCriterion ILargeIntegerRequisite ILargeIntegerValue ILicenseInfo ILifeCycleStage IList IListBox ILocalIDInfo ILocalization ILock IMemoryDataSet IMessagingFactory IMetadataRepository INotice INoticeInfo INumericCriterion INumericRequisite INumericValue IObject IObjectDescription IObjectImporter IObjectInfo IObserver IPanelGroup IPickCriterion IPickProperty IPickRequisite IPickRequisiteDescription IPickRequisiteItem IPickRequisiteItems IPickValue IPrivilege IPrivilegeList IProcess IProcessFactory IProcessMessage IProgress IProperty IPropertyChangeEvent IQuery IReference IReferenceCriterion IReferenceEnabledMode IReferenceFactory IReferenceHistoryDescription IReferenceInfo IReferenceRecordCardWizardStep IReferenceRequisiteDescription IReferencesFactory IReferenceValue IRefRequisite IReport IReportFactory IRequisite IRequisiteDescription IRequisiteDescriptionList IRequisiteFactory IRichEdit IRouteStep IRule IRuleList ISchemeBlock IScript IScriptFactory ISearchCriteria ISearchCriterion ISearchDescription ISearchFactory ISearchFolderInfo ISearchForObjectDescription ISearchResultRestrictions ISecuredContext ISelectDialog IServerEvent IServerEventFactory IServiceDialog IServiceFactory ISignature ISignProvider ISignProvider2 ISignProvider3 ISimpleCriterion IStringCriterion IStringList IStringRequisite IStringRequisiteDescription IStringValue ISystemDialogsFactory ISystemInfo ITabSheet ITask ITaskAbortReasonInfo ITaskCardWizardStep ITaskDescription ITaskFactory ITaskInfo ITaskRoute ITextCriterion ITextRequisite ITextValue ITreeListSelectDialog IUser IUserList IValue IView IWebBrowserControl IWizard IWizardAction IWizardFactory IWizardFormElement IWizardParam IWizardPickParam IWizardReferenceParam IWizardStep IWorkAccessRights IWorkDescription IWorkflowAskableParam IWorkflowAskableParams IWorkflowBlock IWorkflowBlockResult IWorkflowEnabledMode IWorkflowParam IWorkflowPickParam IWorkflowReferenceParam IWorkState IWorkTreeCustomNode IWorkTreeJobNode IWorkTreeTaskNode IXMLEditorForm SBCrypto ", mi = Ce + hp, hc = ko, Ec = "null true false nil ", Sc = {
      className: "number",
      begin: e.NUMBER_RE,
      relevance: 0
    }, Fo = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    }, Bo = {
      className: "doctag",
      begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
      relevance: 0
    }, bc = {
      className: "comment",
      begin: "//",
      end: "$",
      relevance: 0,
      contains: [
        e.PHRASAL_WORDS_MODE,
        Bo
      ]
    }, Tc = {
      className: "comment",
      begin: "/\\*",
      end: "\\*/",
      relevance: 0,
      contains: [
        e.PHRASAL_WORDS_MODE,
        Bo
      ]
    }, yc = { variants: [
      bc,
      Tc
    ] }, As = {
      $pattern: n,
      keyword: a,
      built_in: mi,
      class: hc,
      literal: Ec
    }, Uo = {
      begin: "\\.\\s*" + e.UNDERSCORE_IDENT_RE,
      keywords: As,
      relevance: 0
    }, Go = {
      className: "type",
      begin: ":[ \\t]*(" + Po.trim().replace(/\s/g, "|") + ")",
      end: "[ \\t]*=",
      excludeEnd: !0
    }, vc = {
      className: "variable",
      keywords: As,
      begin: n,
      relevance: 0,
      contains: [
        Go,
        Uo
      ]
    }, Cc = r + "\\(";
    return {
      name: "ISBL",
      case_insensitive: !0,
      keywords: As,
      illegal: "\\$|\\?|%|,|;$|~|#|@|</",
      contains: [
        {
          className: "function",
          begin: Cc,
          end: "\\)$",
          returnBegin: !0,
          keywords: As,
          illegal: "[\\[\\]\\|\\$\\?%,~#@]",
          contains: [
            {
              className: "title",
              keywords: {
                $pattern: n,
                built_in: gc
              },
              begin: Cc,
              end: "\\(",
              returnBegin: !0,
              excludeEnd: !0
            },
            Uo,
            vc,
            Fo,
            Sc,
            yc
          ]
        },
        Go,
        Uo,
        vc,
        Fo,
        Sc,
        yc
      ]
    };
  }
  return nf = t, nf;
}
var rf, RA;
function Dee() {
  if (RA) return rf;
  RA = 1;
  var t = "[0-9](_*[0-9])*", e = `\\.(${t})`, n = "[0-9a-fA-F](_*[0-9a-fA-F])*", r = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${t})((${e})|\\.)?|(${e}))[eE][+-]?(${t})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${t})((${e})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${e})[fFdD]?\\b` },
      { begin: `\\b(${t})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${n})\\.?|(${n})?\\.(${n}))[pP][+-]?(${t})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${n})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function a(s, l, c) {
    return c === -1 ? "" : s.replace(l, (d) => a(s, l, c - 1));
  }
  function i(s) {
    const l = s.regex, c = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*", d = c + a("(?:<" + c + "~~~(?:\\s*,\\s*" + c + "~~~)*>)?", /~~~/g, 2), E = {
      keyword: [
        "synchronized",
        "abstract",
        "private",
        "var",
        "static",
        "if",
        "const ",
        "for",
        "while",
        "strictfp",
        "finally",
        "protected",
        "import",
        "native",
        "final",
        "void",
        "enum",
        "else",
        "break",
        "transient",
        "catch",
        "instanceof",
        "volatile",
        "case",
        "assert",
        "package",
        "default",
        "public",
        "try",
        "switch",
        "continue",
        "throws",
        "protected",
        "public",
        "private",
        "module",
        "requires",
        "exports",
        "do",
        "sealed",
        "yield",
        "permits"
      ],
      literal: [
        "false",
        "true",
        "null"
      ],
      type: [
        "char",
        "boolean",
        "long",
        "float",
        "int",
        "byte",
        "short",
        "double"
      ],
      built_in: [
        "super",
        "this"
      ]
    }, T = {
      className: "meta",
      begin: "@" + c,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: ["self"]
          // allow nested () inside our annotation
        }
      ]
    }, R = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      keywords: E,
      relevance: 0,
      contains: [s.C_BLOCK_COMMENT_MODE],
      endsParent: !0
    };
    return {
      name: "Java",
      aliases: ["jsp"],
      keywords: E,
      illegal: /<\/|#/,
      contains: [
        s.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        // relevance boost
        {
          begin: /import java\.[a-z]+\./,
          keywords: "import",
          relevance: 2
        },
        s.C_LINE_COMMENT_MODE,
        s.C_BLOCK_COMMENT_MODE,
        {
          begin: /"""/,
          end: /"""/,
          className: "string",
          contains: [s.BACKSLASH_ESCAPE]
        },
        s.APOS_STRING_MODE,
        s.QUOTE_STRING_MODE,
        {
          match: [
            /\b(?:class|interface|enum|extends|implements|new)/,
            /\s+/,
            c
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          // Exceptions for hyphenated keywords
          match: /non-sealed/,
          scope: "keyword"
        },
        {
          begin: [
            l.concat(/(?!else)/, c),
            /\s+/,
            c,
            /\s+/,
            /=(?!=)/
          ],
          className: {
            1: "type",
            3: "variable",
            5: "operator"
          }
        },
        {
          begin: [
            /record/,
            /\s+/,
            c
          ],
          className: {
            1: "keyword",
            3: "title.class"
          },
          contains: [
            R,
            s.C_LINE_COMMENT_MODE,
            s.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new throw return else",
          relevance: 0
        },
        {
          begin: [
            "(?:" + d + "\\s+)",
            s.UNDERSCORE_IDENT_RE,
            /\s*(?=\()/
          ],
          className: { 2: "title.function" },
          keywords: E,
          contains: [
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: E,
              relevance: 0,
              contains: [
                T,
                s.APOS_STRING_MODE,
                s.QUOTE_STRING_MODE,
                r,
                s.C_BLOCK_COMMENT_MODE
              ]
            },
            s.C_LINE_COMMENT_MODE,
            s.C_BLOCK_COMMENT_MODE
          ]
        },
        r,
        T
      ]
    };
  }
  return rf = i, rf;
}
var af, AA;
function wee() {
  if (AA) return af;
  AA = 1;
  const t = "[A-Za-z$_][0-9A-Za-z$_]*", e = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], n = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], r = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], a = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], i = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], s = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ], l = [].concat(
    i,
    r,
    a
  );
  function c(d) {
    const p = d.regex, _ = (Ne, { after: ye }) => {
      const Ue = "</" + Ne[0].slice(1);
      return Ne.input.indexOf(Ue, ye) !== -1;
    }, f = t, g = {
      begin: "<>",
      end: "</>"
    }, E = /<[A-Za-z0-9\\._:-]+\s*\/>/, T = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (Ne, ye) => {
        const Ue = Ne[0].length + Ne.index, Me = Ne.input[Ue];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          Me === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          Me === ","
        ) {
          ye.ignoreMatch();
          return;
        }
        Me === ">" && (_(Ne, { after: Ue }) || ye.ignoreMatch());
        let Qe;
        const _e = Ne.input.substring(Ue);
        if (Qe = _e.match(/^\s*=/)) {
          ye.ignoreMatch();
          return;
        }
        if ((Qe = _e.match(/^\s+extends\s+/)) && Qe.index === 0) {
          ye.ignoreMatch();
          return;
        }
      }
    }, R = {
      $pattern: t,
      keyword: e,
      literal: n,
      built_in: l,
      "variable.language": s
    }, A = "[0-9](_?[0-9])*", I = `\\.(${A})`, x = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", P = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${x})((${I})|\\.)?|(${I}))[eE][+-]?(${A})\\b` },
        { begin: `\\b(${x})\\b((${I})\\b|\\.)?|(${I})\\b` },
        // DecimalBigIntegerLiteral
        { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    }, D = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: R,
      contains: []
      // defined later
    }, L = {
      begin: "html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          d.BACKSLASH_ESCAPE,
          D
        ],
        subLanguage: "xml"
      }
    }, K = {
      begin: "css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          d.BACKSLASH_ESCAPE,
          D
        ],
        subLanguage: "css"
      }
    }, J = {
      begin: "gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          d.BACKSLASH_ESCAPE,
          D
        ],
        subLanguage: "graphql"
      }
    }, X = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        d.BACKSLASH_ESCAPE,
        D
      ]
    }, ae = {
      className: "comment",
      variants: [
        d.COMMENT(
          /\/\*\*(?!\/)/,
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                begin: "(?=@[A-Za-z]+)",
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  },
                  {
                    className: "type",
                    begin: "\\{",
                    end: "\\}",
                    excludeEnd: !0,
                    excludeBegin: !0,
                    relevance: 0
                  },
                  {
                    className: "variable",
                    begin: f + "(?=\\s*(-)|$)",
                    endsParent: !0,
                    relevance: 0
                  },
                  // eat spaces (not newlines) so we can find
                  // types or variables
                  {
                    begin: /(?=[^\n])\s/,
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ),
        d.C_BLOCK_COMMENT_MODE,
        d.C_LINE_COMMENT_MODE
      ]
    }, ce = [
      d.APOS_STRING_MODE,
      d.QUOTE_STRING_MODE,
      L,
      K,
      J,
      X,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      P
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    D.contains = ce.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: R,
      contains: [
        "self"
      ].concat(ce)
    });
    const ve = [].concat(ae, D.contains), ge = ve.concat([
      // eat recursive parens in sub expressions
      {
        begin: /\(/,
        end: /\)/,
        keywords: R,
        contains: ["self"].concat(ve)
      }
    ]), fe = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      keywords: R,
      contains: ge
    }, Fe = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            f,
            /\s+/,
            /extends/,
            /\s+/,
            p.concat(f, "(", p.concat(/\./, f), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            f
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    }, ne = {
      relevance: 0,
      match: p.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...r,
          ...a
        ]
      }
    }, se = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, z = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            f,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [fe],
      illegal: /%/
    }, v = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function H(Ne) {
      return p.concat("(?!", Ne.join("|"), ")");
    }
    const oe = {
      match: p.concat(
        /\b/,
        H([
          ...i,
          "super",
          "import"
        ]),
        f,
        p.lookahead(/\(/)
      ),
      className: "title.function",
      relevance: 0
    }, k = {
      begin: p.concat(/\./, p.lookahead(
        p.concat(f, /(?![0-9A-Za-z$_(])/)
      )),
      end: f,
      excludeBegin: !0,
      keywords: "prototype",
      className: "property",
      relevance: 0
    }, me = {
      match: [
        /get|set/,
        /\s+/,
        f,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        fe
      ]
    }, Ce = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + d.UNDERSCORE_IDENT_RE + ")\\s*=>", he = {
      match: [
        /const|var|let/,
        /\s+/,
        f,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        p.lookahead(Ce)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        fe
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: R,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS: ge, CLASS_REFERENCE: ne },
      illegal: /#(?![$_A-z])/,
      contains: [
        d.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        se,
        d.APOS_STRING_MODE,
        d.QUOTE_STRING_MODE,
        L,
        K,
        J,
        X,
        ae,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        P,
        ne,
        {
          className: "attr",
          begin: f + p.lookahead(":"),
          relevance: 0
        },
        he,
        {
          // "value" container
          begin: "(" + d.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            ae,
            d.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: Ce,
              returnBegin: !0,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: d.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: !0
                    },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: !0,
                      excludeEnd: !0,
                      keywords: R,
                      contains: ge
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: g.begin, end: g.end },
                { match: E },
                {
                  begin: T.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": T.isTrulyOpeningTag,
                  end: T.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: T.begin,
                  end: T.end,
                  skip: !0,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        z,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + d.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: !0,
          label: "func.def",
          contains: [
            fe,
            d.inherit(d.TITLE_MODE, { begin: f, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        k,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + f,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [fe]
        },
        oe,
        v,
        Fe,
        me,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  return af = c, af;
}
var sf, OA;
function Lee() {
  if (OA) return sf;
  OA = 1;
  function t(e) {
    const r = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [{
        begin: /[\w-]+ *=/,
        returnBegin: !0,
        relevance: 0,
        contains: [
          {
            className: "attr",
            begin: /[\w-]+/
          }
        ]
      }],
      relevance: 0
    }, a = {
      className: "function",
      begin: /:[\w\-.]+/,
      relevance: 0
    }, i = {
      className: "string",
      begin: /\B([\/.])[\w\-.\/=]+/
    }, s = {
      className: "params",
      begin: /--[\w\-=\/]+/
    };
    return {
      name: "JBoss CLI",
      aliases: ["wildfly-cli"],
      keywords: {
        $pattern: "[a-z-]+",
        keyword: "alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",
        // module
        literal: "true false"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        s,
        a,
        i,
        r
      ]
    };
  }
  return sf = t, sf;
}
var of, NA;
function Mee() {
  if (NA) return of;
  NA = 1;
  function t(e) {
    const n = {
      className: "attr",
      begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
      relevance: 1.01
    }, r = {
      match: /[{}[\],:]/,
      className: "punctuation",
      relevance: 0
    }, a = [
      "true",
      "false",
      "null"
    ], i = {
      scope: "literal",
      beginKeywords: a.join(" ")
    };
    return {
      name: "JSON",
      keywords: {
        literal: a
      },
      contains: [
        n,
        r,
        e.QUOTE_STRING_MODE,
        i,
        e.C_NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ],
      illegal: "\\S"
    };
  }
  return of = t, of;
}
var lf, IA;
function kee() {
  if (IA) return lf;
  IA = 1;
  function t(e) {
    const n = "[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*", s = {
      $pattern: n,
      keyword: [
        "baremodule",
        "begin",
        "break",
        "catch",
        "ccall",
        "const",
        "continue",
        "do",
        "else",
        "elseif",
        "end",
        "export",
        "false",
        "finally",
        "for",
        "function",
        "global",
        "if",
        "import",
        "in",
        "isa",
        "let",
        "local",
        "macro",
        "module",
        "quote",
        "return",
        "true",
        "try",
        "using",
        "where",
        "while"
      ],
      literal: [
        "ARGS",
        "C_NULL",
        "DEPOT_PATH",
        "ENDIAN_BOM",
        "ENV",
        "Inf",
        "Inf16",
        "Inf32",
        "Inf64",
        "InsertionSort",
        "LOAD_PATH",
        "MergeSort",
        "NaN",
        "NaN16",
        "NaN32",
        "NaN64",
        "PROGRAM_FILE",
        "QuickSort",
        "RoundDown",
        "RoundFromZero",
        "RoundNearest",
        "RoundNearestTiesAway",
        "RoundNearestTiesUp",
        "RoundToZero",
        "RoundUp",
        "VERSION|0",
        "devnull",
        "false",
        "im",
        "missing",
        "nothing",
        "pi",
        "stderr",
        "stdin",
        "stdout",
        "true",
        "undef",
        "π",
        "ℯ"
      ],
      built_in: [
        "AbstractArray",
        "AbstractChannel",
        "AbstractChar",
        "AbstractDict",
        "AbstractDisplay",
        "AbstractFloat",
        "AbstractIrrational",
        "AbstractMatrix",
        "AbstractRange",
        "AbstractSet",
        "AbstractString",
        "AbstractUnitRange",
        "AbstractVecOrMat",
        "AbstractVector",
        "Any",
        "ArgumentError",
        "Array",
        "AssertionError",
        "BigFloat",
        "BigInt",
        "BitArray",
        "BitMatrix",
        "BitSet",
        "BitVector",
        "Bool",
        "BoundsError",
        "CapturedException",
        "CartesianIndex",
        "CartesianIndices",
        "Cchar",
        "Cdouble",
        "Cfloat",
        "Channel",
        "Char",
        "Cint",
        "Cintmax_t",
        "Clong",
        "Clonglong",
        "Cmd",
        "Colon",
        "Complex",
        "ComplexF16",
        "ComplexF32",
        "ComplexF64",
        "CompositeException",
        "Condition",
        "Cptrdiff_t",
        "Cshort",
        "Csize_t",
        "Cssize_t",
        "Cstring",
        "Cuchar",
        "Cuint",
        "Cuintmax_t",
        "Culong",
        "Culonglong",
        "Cushort",
        "Cvoid",
        "Cwchar_t",
        "Cwstring",
        "DataType",
        "DenseArray",
        "DenseMatrix",
        "DenseVecOrMat",
        "DenseVector",
        "Dict",
        "DimensionMismatch",
        "Dims",
        "DivideError",
        "DomainError",
        "EOFError",
        "Enum",
        "ErrorException",
        "Exception",
        "ExponentialBackOff",
        "Expr",
        "Float16",
        "Float32",
        "Float64",
        "Function",
        "GlobalRef",
        "HTML",
        "IO",
        "IOBuffer",
        "IOContext",
        "IOStream",
        "IdDict",
        "IndexCartesian",
        "IndexLinear",
        "IndexStyle",
        "InexactError",
        "InitError",
        "Int",
        "Int128",
        "Int16",
        "Int32",
        "Int64",
        "Int8",
        "Integer",
        "InterruptException",
        "InvalidStateException",
        "Irrational",
        "KeyError",
        "LinRange",
        "LineNumberNode",
        "LinearIndices",
        "LoadError",
        "MIME",
        "Matrix",
        "Method",
        "MethodError",
        "Missing",
        "MissingException",
        "Module",
        "NTuple",
        "NamedTuple",
        "Nothing",
        "Number",
        "OrdinalRange",
        "OutOfMemoryError",
        "OverflowError",
        "Pair",
        "PartialQuickSort",
        "PermutedDimsArray",
        "Pipe",
        "ProcessFailedException",
        "Ptr",
        "QuoteNode",
        "Rational",
        "RawFD",
        "ReadOnlyMemoryError",
        "Real",
        "ReentrantLock",
        "Ref",
        "Regex",
        "RegexMatch",
        "RoundingMode",
        "SegmentationFault",
        "Set",
        "Signed",
        "Some",
        "StackOverflowError",
        "StepRange",
        "StepRangeLen",
        "StridedArray",
        "StridedMatrix",
        "StridedVecOrMat",
        "StridedVector",
        "String",
        "StringIndexError",
        "SubArray",
        "SubString",
        "SubstitutionString",
        "Symbol",
        "SystemError",
        "Task",
        "TaskFailedException",
        "Text",
        "TextDisplay",
        "Timer",
        "Tuple",
        "Type",
        "TypeError",
        "TypeVar",
        "UInt",
        "UInt128",
        "UInt16",
        "UInt32",
        "UInt64",
        "UInt8",
        "UndefInitializer",
        "UndefKeywordError",
        "UndefRefError",
        "UndefVarError",
        "Union",
        "UnionAll",
        "UnitRange",
        "Unsigned",
        "Val",
        "Vararg",
        "VecElement",
        "VecOrMat",
        "Vector",
        "VersionNumber",
        "WeakKeyDict",
        "WeakRef"
      ]
    }, l = {
      keywords: s,
      illegal: /<\//
    }, c = {
      className: "number",
      // supported numeric literals:
      //  * binary literal (e.g. 0x10)
      //  * octal literal (e.g. 0o76543210)
      //  * hexadecimal literal (e.g. 0xfedcba876543210)
      //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
      //  * decimal literal (e.g. 9876543210, 100_000_000)
      //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
      begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
      relevance: 0
    }, d = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    }, p = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      keywords: s
    }, _ = {
      className: "variable",
      begin: "\\$" + n
    }, f = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        p,
        _
      ],
      variants: [
        {
          begin: /\w*"""/,
          end: /"""\w*/,
          relevance: 10
        },
        {
          begin: /\w*"/,
          end: /"\w*/
        }
      ]
    }, g = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        p,
        _
      ],
      begin: "`",
      end: "`"
    }, E = {
      className: "meta",
      begin: "@" + n
    }, T = {
      className: "comment",
      variants: [
        {
          begin: "#=",
          end: "=#",
          relevance: 10
        },
        {
          begin: "#",
          end: "$"
        }
      ]
    };
    return l.name = "Julia", l.contains = [
      c,
      d,
      f,
      g,
      E,
      T,
      e.HASH_COMMENT_MODE,
      {
        className: "keyword",
        begin: "\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"
      },
      { begin: /<:/ }
      // relevance booster
    ], p.contains = l.contains, l;
  }
  return lf = t, lf;
}
var cf, xA;
function Pee() {
  if (xA) return cf;
  xA = 1;
  function t(e) {
    return {
      name: "Julia REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^julia>/,
          relevance: 10,
          starts: {
            // end the highlighting if we are on a new line and the line does not have at
            // least six spaces in the beginning
            end: /^(?![ ]{6})/,
            subLanguage: "julia"
          }
        }
      ],
      // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
      // code snippets that should be verified when the documentation is built. They can be
      // either REPL-like or script-like, but are usually REPL-like and therefore we apply
      // julia-repl highlighting to them. More information can be found in Documenter's
      // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
      aliases: ["jldoctest"]
    };
  }
  return cf = t, cf;
}
var uf, DA;
function Fee() {
  if (DA) return uf;
  DA = 1;
  var t = "[0-9](_*[0-9])*", e = `\\.(${t})`, n = "[0-9a-fA-F](_*[0-9a-fA-F])*", r = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${t})((${e})|\\.)?|(${e}))[eE][+-]?(${t})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${t})((${e})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${e})[fFdD]?\\b` },
      { begin: `\\b(${t})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${n})\\.?|(${n})?\\.(${n}))[pP][+-]?(${t})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${n})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function a(i) {
    const s = {
      keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
      built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
      literal: "true false null"
    }, l = {
      className: "keyword",
      begin: /\b(break|continue|return|this)\b/,
      starts: { contains: [
        {
          className: "symbol",
          begin: /@\w+/
        }
      ] }
    }, c = {
      className: "symbol",
      begin: i.UNDERSCORE_IDENT_RE + "@"
    }, d = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      contains: [i.C_NUMBER_MODE]
    }, p = {
      className: "variable",
      begin: "\\$" + i.UNDERSCORE_IDENT_RE
    }, _ = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""(?=[^"])',
          contains: [
            p,
            d
          ]
        },
        // Can't use built-in modes easily, as we want to use STRING in the meta
        // context as 'meta-string' and there's no syntax to remove explicitly set
        // classNames in built-in modes.
        {
          begin: "'",
          end: "'",
          illegal: /\n/,
          contains: [i.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"',
          illegal: /\n/,
          contains: [
            i.BACKSLASH_ESCAPE,
            p,
            d
          ]
        }
      ]
    };
    d.contains.push(_);
    const f = {
      className: "meta",
      begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + i.UNDERSCORE_IDENT_RE + ")?"
    }, g = {
      className: "meta",
      begin: "@" + i.UNDERSCORE_IDENT_RE,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            i.inherit(_, { className: "string" }),
            "self"
          ]
        }
      ]
    }, E = r, T = i.COMMENT(
      "/\\*",
      "\\*/",
      { contains: [i.C_BLOCK_COMMENT_MODE] }
    ), R = { variants: [
      {
        className: "type",
        begin: i.UNDERSCORE_IDENT_RE
      },
      {
        begin: /\(/,
        end: /\)/,
        contains: []
        // defined later
      }
    ] }, A = R;
    return A.variants[1].contains = [R], R.variants[1].contains = [A], {
      name: "Kotlin",
      aliases: [
        "kt",
        "kts"
      ],
      keywords: s,
      contains: [
        i.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        i.C_LINE_COMMENT_MODE,
        T,
        l,
        c,
        f,
        g,
        {
          className: "function",
          beginKeywords: "fun",
          end: "[(]|$",
          returnBegin: !0,
          excludeEnd: !0,
          keywords: s,
          relevance: 5,
          contains: [
            {
              begin: i.UNDERSCORE_IDENT_RE + "\\s*\\(",
              returnBegin: !0,
              relevance: 0,
              contains: [i.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "type",
              begin: /</,
              end: />/,
              keywords: "reified",
              relevance: 0
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: !0,
              keywords: s,
              relevance: 0,
              contains: [
                {
                  begin: /:/,
                  end: /[=,\/]/,
                  endsWithParent: !0,
                  contains: [
                    R,
                    i.C_LINE_COMMENT_MODE,
                    T
                  ],
                  relevance: 0
                },
                i.C_LINE_COMMENT_MODE,
                T,
                f,
                g,
                _,
                i.C_NUMBER_MODE
              ]
            },
            T
          ]
        },
        {
          begin: [
            /class|interface|trait/,
            /\s+/,
            i.UNDERSCORE_IDENT_RE
          ],
          beginScope: {
            3: "title.class"
          },
          keywords: "class interface trait",
          end: /[:\{(]|$/,
          excludeEnd: !0,
          illegal: "extends implements",
          contains: [
            { beginKeywords: "public protected internal private constructor" },
            i.UNDERSCORE_TITLE_MODE,
            {
              className: "type",
              begin: /</,
              end: />/,
              excludeBegin: !0,
              excludeEnd: !0,
              relevance: 0
            },
            {
              className: "type",
              begin: /[,:]\s*/,
              end: /[<\(,){\s]|$/,
              excludeBegin: !0,
              returnEnd: !0
            },
            f,
            g
          ]
        },
        _,
        {
          className: "meta",
          begin: "^#!/usr/bin/env",
          end: "$",
          illegal: `
`
        },
        E
      ]
    };
  }
  return uf = a, uf;
}
var df, wA;
function Bee() {
  if (wA) return df;
  wA = 1;
  function t(e) {
    const n = "[a-zA-Z_][\\w.]*", r = "<\\?(lasso(script)?|=)", a = "\\]|\\?>", i = {
      $pattern: n + "|&[lg]t;",
      literal: "true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",
      built_in: "array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",
      keyword: "cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"
    }, s = e.COMMENT(
      "<!--",
      "-->",
      { relevance: 0 }
    ), l = {
      className: "meta",
      begin: "\\[noprocess\\]",
      starts: {
        end: "\\[/noprocess\\]",
        returnEnd: !0,
        contains: [s]
      }
    }, c = {
      className: "meta",
      begin: "\\[/noprocess|" + r
    }, d = {
      className: "symbol",
      begin: "'" + n + "'"
    }, p = [
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      e.inherit(e.C_NUMBER_MODE, { begin: e.C_NUMBER_RE + "|(-?infinity|NaN)\\b" }),
      e.inherit(e.APOS_STRING_MODE, { illegal: null }),
      e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "string",
        begin: "`",
        end: "`"
      },
      {
        // variables
        variants: [
          { begin: "[#$]" + n },
          {
            begin: "#",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      },
      {
        className: "type",
        begin: "::\\s*",
        end: n,
        illegal: "\\W"
      },
      {
        className: "params",
        variants: [
          {
            begin: "-(?!infinity)" + n,
            relevance: 0
          },
          { begin: "(\\.\\.\\.)" }
        ]
      },
      {
        begin: /(->|\.)\s*/,
        relevance: 0,
        contains: [d]
      },
      {
        className: "class",
        beginKeywords: "define",
        returnEnd: !0,
        end: "\\(|=>",
        contains: [e.inherit(e.TITLE_MODE, { begin: n + "(=(?!>))?|[-+*/%](?!>)" })]
      }
    ];
    return {
      name: "Lasso",
      aliases: [
        "ls",
        "lassoscript"
      ],
      case_insensitive: !0,
      keywords: i,
      contains: [
        {
          className: "meta",
          begin: a,
          relevance: 0,
          starts: {
            // markup
            end: "\\[|" + r,
            returnEnd: !0,
            relevance: 0,
            contains: [s]
          }
        },
        l,
        c,
        {
          className: "meta",
          begin: "\\[no_square_brackets",
          starts: {
            end: "\\[/no_square_brackets\\]",
            // not implemented in the language
            keywords: i,
            contains: [
              {
                className: "meta",
                begin: a,
                relevance: 0,
                starts: {
                  end: "\\[noprocess\\]|" + r,
                  returnEnd: !0,
                  contains: [s]
                }
              },
              l,
              c
            ].concat(p)
          }
        },
        {
          className: "meta",
          begin: "\\[",
          relevance: 0
        },
        {
          className: "meta",
          begin: "^#!",
          end: "lasso9$",
          relevance: 10
        }
      ].concat(p)
    };
  }
  return df = t, df;
}
var pf, LA;
function Uee() {
  if (LA) return pf;
  LA = 1;
  function t(e) {
    const r = e.regex.either(...[
      "(?:NeedsTeXFormat|RequirePackage|GetIdInfo)",
      "Provides(?:Expl)?(?:Package|Class|File)",
      "(?:DeclareOption|ProcessOptions)",
      "(?:documentclass|usepackage|input|include)",
      "makeat(?:letter|other)",
      "ExplSyntax(?:On|Off)",
      "(?:new|renew|provide)?command",
      "(?:re)newenvironment",
      "(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand",
      "(?:New|Renew|Provide|Declare)DocumentEnvironment",
      "(?:(?:e|g|x)?def|let)",
      "(?:begin|end)",
      "(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)",
      "caption",
      "(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)",
      "(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)",
      "(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)",
      "(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)",
      "(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)",
      "(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)"
    ].map((ae) => ae + "(?![a-zA-Z@:_])")), a = new RegExp([
      // A function \module_function_name:signature or \__module_function_name:signature,
      // where both module and function_name need at least two characters and
      // function_name may contain single underscores.
      "(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*",
      // A variable \scope_module_and_name_type or \scope__module_ane_name_type,
      // where scope is one of l, g or c, type needs at least two characters
      // and module_and_name may contain single underscores.
      "[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}",
      // A quark \q_the_name or \q__the_name or
      // scan mark \s_the_name or \s__vthe_name,
      // where variable_name needs at least two characters and
      // may contain single underscores.
      "[qs]__?[a-zA-Z](?:_?[a-zA-Z])+",
      // Other LaTeX3 macro names that are not covered by the three rules above.
      "use(?:_i)?:[a-zA-Z]*",
      "(?:else|fi|or):",
      "(?:if|cs|exp):w",
      "(?:hbox|vbox):n",
      "::[a-zA-Z]_unbraced",
      "::[a-zA-Z:]"
    ].map((ae) => ae + "(?![a-zA-Z:_])").join("|")), i = [
      { begin: /[a-zA-Z@]+/ },
      // control word
      { begin: /[^a-zA-Z@]?/ }
      // control symbol
    ], s = [
      { begin: /\^{6}[0-9a-f]{6}/ },
      { begin: /\^{5}[0-9a-f]{5}/ },
      { begin: /\^{4}[0-9a-f]{4}/ },
      { begin: /\^{3}[0-9a-f]{3}/ },
      { begin: /\^{2}[0-9a-f]{2}/ },
      { begin: /\^{2}[\u0000-\u007f]/ }
    ], l = {
      className: "keyword",
      begin: /\\/,
      relevance: 0,
      contains: [
        {
          endsParent: !0,
          begin: r
        },
        {
          endsParent: !0,
          begin: a
        },
        {
          endsParent: !0,
          variants: s
        },
        {
          endsParent: !0,
          relevance: 0,
          variants: i
        }
      ]
    }, c = {
      className: "params",
      relevance: 0,
      begin: /#+\d?/
    }, d = {
      // relevance: 1
      variants: s
    }, p = {
      className: "built_in",
      relevance: 0,
      begin: /[$&^_]/
    }, _ = {
      className: "meta",
      begin: /% ?!(T[eE]X|tex|BIB|bib)/,
      end: "$",
      relevance: 10
    }, f = e.COMMENT(
      "%",
      "$",
      { relevance: 0 }
    ), g = [
      l,
      c,
      d,
      p,
      _,
      f
    ], E = {
      begin: /\{/,
      end: /\}/,
      relevance: 0,
      contains: [
        "self",
        ...g
      ]
    }, T = e.inherit(
      E,
      {
        relevance: 0,
        endsParent: !0,
        contains: [
          E,
          ...g
        ]
      }
    ), R = {
      begin: /\[/,
      end: /\]/,
      endsParent: !0,
      relevance: 0,
      contains: [
        E,
        ...g
      ]
    }, A = {
      begin: /\s+/,
      relevance: 0
    }, I = [T], x = [R], P = function(ae, ce) {
      return {
        contains: [A],
        starts: {
          relevance: 0,
          contains: ae,
          starts: ce
        }
      };
    }, D = function(ae, ce) {
      return {
        begin: "\\\\" + ae + "(?![a-zA-Z@:_])",
        keywords: {
          $pattern: /\\[a-zA-Z]+/,
          keyword: "\\" + ae
        },
        relevance: 0,
        contains: [A],
        starts: ce
      };
    }, L = function(ae, ce) {
      return e.inherit(
        {
          begin: "\\\\begin(?=[ 	]*(\\r?\\n[ 	]*)?\\{" + ae + "\\})",
          keywords: {
            $pattern: /\\[a-zA-Z]+/,
            keyword: "\\begin"
          },
          relevance: 0
        },
        P(I, ce)
      );
    }, K = (ae = "string") => e.END_SAME_AS_BEGIN({
      className: ae,
      begin: /(.|\r?\n)/,
      end: /(.|\r?\n)/,
      excludeBegin: !0,
      excludeEnd: !0,
      endsParent: !0
    }), J = function(ae) {
      return {
        className: "string",
        end: "(?=\\\\end\\{" + ae + "\\})"
      };
    }, X = (ae = "string") => ({
      relevance: 0,
      begin: /\{/,
      starts: {
        endsParent: !0,
        contains: [
          {
            className: ae,
            end: /(?=\})/,
            endsParent: !0,
            contains: [
              {
                begin: /\{/,
                end: /\}/,
                relevance: 0,
                contains: ["self"]
              }
            ]
          }
        ]
      }
    }), $ = [
      ...[
        "verb",
        "lstinline"
      ].map((ae) => D(ae, { contains: [K()] })),
      D("mint", P(I, { contains: [K()] })),
      D("mintinline", P(I, { contains: [
        X(),
        K()
      ] })),
      D("url", { contains: [
        X("link"),
        X("link")
      ] }),
      D("hyperref", { contains: [X("link")] }),
      D("href", P(x, { contains: [X("link")] })),
      ...[].concat(...[
        "",
        "\\*"
      ].map((ae) => [
        L("verbatim" + ae, J("verbatim" + ae)),
        L("filecontents" + ae, P(I, J("filecontents" + ae))),
        ...[
          "",
          "B",
          "L"
        ].map(
          (ce) => L(ce + "Verbatim" + ae, P(x, J(ce + "Verbatim" + ae)))
        )
      ])),
      L("minted", P(x, P(I, J("minted"))))
    ];
    return {
      name: "LaTeX",
      aliases: ["tex"],
      contains: [
        ...$,
        ...g
      ]
    };
  }
  return pf = t, pf;
}
var _f, MA;
function Gee() {
  if (MA) return _f;
  MA = 1;
  function t(e) {
    return {
      name: "LDIF",
      contains: [
        {
          className: "attribute",
          match: "^dn(?=:)",
          relevance: 10
        },
        {
          className: "attribute",
          match: "^\\w+(?=:)"
        },
        {
          className: "literal",
          match: "^-"
        },
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return _f = t, _f;
}
var mf, kA;
function Hee() {
  if (kA) return mf;
  kA = 1;
  function t(e) {
    const n = /([A-Za-z_][A-Za-z_0-9]*)?/, a = {
      scope: "params",
      begin: /\(/,
      end: /\)(?=\:?)/,
      endsParent: !0,
      relevance: 7,
      contains: [
        {
          scope: "string",
          begin: '"',
          end: '"'
        },
        {
          scope: "keyword",
          match: [
            "true",
            "false",
            "in"
          ].join("|")
        },
        {
          scope: "variable",
          match: /[A-Za-z_][A-Za-z_0-9]*/
        },
        {
          scope: "operator",
          match: /\+|\-|\*|\/|\%|\=\=|\=|\!|\>|\<|\&\&|\|\|/
        }
      ]
    }, i = {
      match: [
        n,
        /(?=\()/
      ],
      scope: {
        1: "keyword"
      },
      contains: [a]
    };
    return a.contains.unshift(i), {
      name: "Leaf",
      contains: [
        // #ident():
        {
          match: [
            /#+/,
            n,
            /(?=\()/
          ],
          scope: {
            1: "punctuation",
            2: "keyword"
          },
          // will start up after the ending `)` match from line ~44
          // just to grab the trailing `:` if we can match it
          starts: {
            contains: [
              {
                match: /\:/,
                scope: "punctuation"
              }
            ]
          },
          contains: [
            a
          ]
        },
        // #ident or #ident:
        {
          match: [
            /#+/,
            n,
            /:?/
          ],
          scope: {
            1: "punctuation",
            2: "keyword",
            3: "punctuation"
          }
        }
      ]
    };
  }
  return mf = t, mf;
}
var ff, PA;
function Yee() {
  if (PA) return ff;
  PA = 1;
  const t = (c) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: c.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        c.APOS_STRING_MODE,
        c.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: c.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], r = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], a = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], i = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse(), s = r.concat(a);
  function l(c) {
    const d = t(c), p = s, _ = "and or not only", f = "[\\w-]+", g = "(" + f + "|@\\{" + f + "\\})", E = [], T = [], R = function(ae) {
      return {
        // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
        className: "string",
        begin: "~?" + ae + ".*?" + ae
      };
    }, A = function(ae, ce, ve) {
      return {
        className: ae,
        begin: ce,
        relevance: ve
      };
    }, I = {
      $pattern: /[a-z-]+/,
      keyword: _,
      attribute: n.join(" ")
    }, x = {
      // used only to properly balance nested parens inside mixin call, def. arg list
      begin: "\\(",
      end: "\\)",
      contains: T,
      keywords: I,
      relevance: 0
    };
    T.push(
      c.C_LINE_COMMENT_MODE,
      c.C_BLOCK_COMMENT_MODE,
      R("'"),
      R('"'),
      d.CSS_NUMBER_MODE,
      // fixme: it does not include dot for numbers like .5em :(
      {
        begin: "(url|data-uri)\\(",
        starts: {
          className: "string",
          end: "[\\)\\n]",
          excludeEnd: !0
        }
      },
      d.HEXCOLOR,
      x,
      A("variable", "@@?" + f, 10),
      A("variable", "@\\{" + f + "\\}"),
      A("built_in", "~?`[^`]*?`"),
      // inline javascript (or whatever host language) *multiline* string
      {
        // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
        className: "attribute",
        begin: f + "\\s*:",
        end: ":",
        returnBegin: !0,
        excludeEnd: !0
      },
      d.IMPORTANT,
      { beginKeywords: "and not" },
      d.FUNCTION_DISPATCH
    );
    const P = T.concat({
      begin: /\{/,
      end: /\}/,
      contains: E
    }), D = {
      beginKeywords: "when",
      endsWithParent: !0,
      contains: [{ beginKeywords: "and not" }].concat(T)
      // using this form to override VALUE’s 'function' match
    }, L = {
      begin: g + "\\s*:",
      returnBegin: !0,
      end: /[;}]/,
      relevance: 0,
      contains: [
        { begin: /-(webkit|moz|ms|o)-/ },
        d.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + i.join("|") + ")\\b",
          end: /(?=:)/,
          starts: {
            endsWithParent: !0,
            illegal: "[<=$]",
            relevance: 0,
            contains: T
          }
        }
      ]
    }, K = {
      className: "keyword",
      begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
      starts: {
        end: "[;{}]",
        keywords: I,
        returnEnd: !0,
        contains: T,
        relevance: 0
      }
    }, J = {
      className: "variable",
      variants: [
        // using more strict pattern for higher relevance to increase chances of Less detection.
        // this is *the only* Less specific statement used in most of the sources, so...
        // (we’ll still often loose to the css-parser unless there's '//' comment,
        // simply because 1 variable just can't beat 99 properties :)
        {
          begin: "@" + f + "\\s*:",
          relevance: 15
        },
        { begin: "@" + f }
      ],
      starts: {
        end: "[;}]",
        returnEnd: !0,
        contains: P
      }
    }, X = {
      // first parse unambiguous selectors (i.e. those not starting with tag)
      // then fall into the scary lookahead-discriminator variant.
      // this mode also handles mixin definitions and calls
      variants: [
        {
          begin: "[\\.#:&\\[>]",
          end: "[;{}]"
          // mixin calls end with ';'
        },
        {
          begin: g,
          end: /\{/
        }
      ],
      returnBegin: !0,
      returnEnd: !0,
      illegal: `[<='$"]`,
      relevance: 0,
      contains: [
        c.C_LINE_COMMENT_MODE,
        c.C_BLOCK_COMMENT_MODE,
        D,
        A("keyword", "all\\b"),
        A("variable", "@\\{" + f + "\\}"),
        // otherwise it’s identified as tag
        {
          begin: "\\b(" + e.join("|") + ")\\b",
          className: "selector-tag"
        },
        d.CSS_NUMBER_MODE,
        A("selector-tag", g, 0),
        A("selector-id", "#" + g),
        A("selector-class", "\\." + g, 0),
        A("selector-tag", "&", 0),
        d.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          begin: ":(" + r.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + a.join("|") + ")"
        },
        {
          begin: /\(/,
          end: /\)/,
          relevance: 0,
          contains: P
        },
        // argument list of parametric mixins
        { begin: "!important" },
        // eat !important after mixin call or it will be colored as tag
        d.FUNCTION_DISPATCH
      ]
    }, $ = {
      begin: f + `:(:)?(${p.join("|")})`,
      returnBegin: !0,
      contains: [X]
    };
    return E.push(
      c.C_LINE_COMMENT_MODE,
      c.C_BLOCK_COMMENT_MODE,
      K,
      J,
      $,
      L,
      X,
      D,
      d.FUNCTION_DISPATCH
    ), {
      name: "Less",
      case_insensitive: !0,
      illegal: `[=>'/<($"]`,
      contains: E
    };
  }
  return ff = l, ff;
}
var gf, FA;
function zee() {
  if (FA) return gf;
  FA = 1;
  function t(e) {
    const n = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*", r = "\\|[^]*?\\|", a = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?", i = {
      className: "literal",
      begin: "\\b(t{1}|nil)\\b"
    }, s = {
      className: "number",
      variants: [
        {
          begin: a,
          relevance: 0
        },
        { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
        { begin: "#(o|O)[0-7]+(/[0-7]+)?" },
        { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
        {
          begin: "#(c|C)\\(" + a + " +" + a,
          end: "\\)"
        }
      ]
    }, l = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), c = e.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), d = {
      begin: "\\*",
      end: "\\*"
    }, p = {
      className: "symbol",
      begin: "[:&]" + n
    }, _ = {
      begin: n,
      relevance: 0
    }, f = { begin: r }, E = {
      contains: [
        s,
        l,
        d,
        p,
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            i,
            l,
            s,
            _
          ]
        },
        _
      ],
      variants: [
        {
          begin: "['`]\\(",
          end: "\\)"
        },
        {
          begin: "\\(quote ",
          end: "\\)",
          keywords: { name: "quote" }
        },
        { begin: "'" + r }
      ]
    }, T = { variants: [
      { begin: "'" + n },
      { begin: "#'" + n + "(::" + n + ")*" }
    ] }, R = {
      begin: "\\(\\s*",
      end: "\\)"
    }, A = {
      endsWithParent: !0,
      relevance: 0
    };
    return R.contains = [
      {
        className: "name",
        variants: [
          {
            begin: n,
            relevance: 0
          },
          { begin: r }
        ]
      },
      A
    ], A.contains = [
      E,
      T,
      R,
      i,
      s,
      l,
      c,
      d,
      p,
      f,
      _
    ], {
      name: "Lisp",
      illegal: /\S/,
      contains: [
        s,
        e.SHEBANG(),
        i,
        l,
        c,
        E,
        T,
        R,
        _
      ]
    };
  }
  return gf = t, gf;
}
var hf, BA;
function qee() {
  if (BA) return hf;
  BA = 1;
  function t(e) {
    const n = {
      className: "variable",
      variants: [
        { begin: "\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)" },
        { begin: "\\$_[A-Z]+" }
      ],
      relevance: 0
    }, r = [
      e.C_BLOCK_COMMENT_MODE,
      e.HASH_COMMENT_MODE,
      e.COMMENT("--", "$"),
      e.COMMENT("[^:]//", "$")
    ], a = e.inherit(e.TITLE_MODE, { variants: [
      { begin: "\\b_*rig[A-Z][A-Za-z0-9_\\-]*" },
      { begin: "\\b_[a-z0-9\\-]+" }
    ] }), i = e.inherit(e.TITLE_MODE, { begin: "\\b([A-Za-z0-9_\\-]+)\\b" });
    return {
      name: "LiveCode",
      case_insensitive: !1,
      keywords: {
        keyword: "$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",
        literal: "SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",
        built_in: "put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress difference directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract symmetric union unload vectorDotProduct wait write"
      },
      contains: [
        n,
        {
          className: "keyword",
          begin: "\\bend\\sif\\b"
        },
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            n,
            i,
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE,
            e.BINARY_NUMBER_MODE,
            e.C_NUMBER_MODE,
            a
          ]
        },
        {
          className: "function",
          begin: "\\bend\\s+",
          end: "$",
          keywords: "end",
          contains: [
            i,
            a
          ],
          relevance: 0
        },
        {
          beginKeywords: "command on",
          end: "$",
          contains: [
            n,
            i,
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE,
            e.BINARY_NUMBER_MODE,
            e.C_NUMBER_MODE,
            a
          ]
        },
        {
          className: "meta",
          variants: [
            {
              begin: "<\\?(rev|lc|livecode)",
              relevance: 10
            },
            { begin: "<\\?" },
            { begin: "\\?>" }
          ]
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.BINARY_NUMBER_MODE,
        e.C_NUMBER_MODE,
        a
      ].concat(r),
      illegal: ";$|^\\[|^=|&|\\{"
    };
  }
  return hf = t, hf;
}
var Ef, UA;
function Vee() {
  if (UA) return Ef;
  UA = 1;
  const t = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], e = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], n = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], r = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], a = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], i = [].concat(
    a,
    n,
    r
  );
  function s(l) {
    const c = [
      "npm",
      "print"
    ], d = [
      "yes",
      "no",
      "on",
      "off",
      "it",
      "that",
      "void"
    ], p = [
      "then",
      "unless",
      "until",
      "loop",
      "of",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not",
      "it",
      "that",
      "otherwise",
      "from",
      "to",
      "til",
      "fallthrough",
      "case",
      "enum",
      "native",
      "list",
      "map",
      "__hasProp",
      "__extends",
      "__slice",
      "__bind",
      "__indexOf"
    ], _ = {
      keyword: t.concat(p),
      literal: e.concat(d),
      built_in: i.concat(c)
    }, f = "[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*", g = l.inherit(l.TITLE_MODE, { begin: f }), E = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: _
    }, T = {
      className: "subst",
      begin: /#[A-Za-z$_]/,
      end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
      keywords: _
    }, R = [
      l.BINARY_NUMBER_MODE,
      {
        className: "number",
        begin: "(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",
        relevance: 0,
        starts: {
          end: "(\\s*/)?",
          relevance: 0
        }
        // a number tries to eat the following slash to prevent treating it as a regexp
      },
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [l.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [l.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              l.BACKSLASH_ESCAPE,
              E,
              T
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              l.BACKSLASH_ESCAPE,
              E,
              T
            ]
          },
          {
            begin: /\\/,
            end: /(\s|$)/,
            excludeEnd: !0
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "//",
            end: "//[gim]*",
            contains: [
              E,
              l.HASH_COMMENT_MODE
            ]
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/
          }
        ]
      },
      { begin: "@" + f },
      {
        begin: "``",
        end: "``",
        excludeBegin: !0,
        excludeEnd: !0,
        subLanguage: "javascript"
      }
    ];
    E.contains = R;
    const A = {
      className: "params",
      begin: "\\(",
      returnBegin: !0,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: _,
          contains: ["self"].concat(R)
        }
      ]
    }, I = { begin: "(#=>|=>|\\|>>|-?->|!->)" }, x = {
      variants: [
        { match: [
          /class\s+/,
          f,
          /\s+extends\s+/,
          f
        ] },
        { match: [
          /class\s+/,
          f
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: _
    };
    return {
      name: "LiveScript",
      aliases: ["ls"],
      keywords: _,
      illegal: /\/\*/,
      contains: R.concat([
        l.COMMENT("\\/\\*", "\\*\\/"),
        l.HASH_COMMENT_MODE,
        I,
        // relevance booster
        {
          className: "function",
          contains: [
            g,
            A
          ],
          returnBegin: !0,
          variants: [
            {
              begin: "(" + f + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?",
              end: "->\\*?"
            },
            {
              begin: "(" + f + "\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?",
              end: "[-~]{1,2}>\\*?"
            },
            {
              begin: "(" + f + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?",
              end: "!?[-~]{1,2}>\\*?"
            }
          ]
        },
        x,
        {
          begin: f + ":",
          end: ":",
          returnBegin: !0,
          returnEnd: !0,
          relevance: 0
        }
      ])
    };
  }
  return Ef = s, Ef;
}
var Sf, GA;
function $ee() {
  if (GA) return Sf;
  GA = 1;
  function t(e) {
    const n = e.regex, r = /([-a-zA-Z$._][\w$.-]*)/, a = {
      className: "type",
      begin: /\bi\d+(?=\s|\b)/
    }, i = {
      className: "operator",
      relevance: 0,
      begin: /=/
    }, s = {
      className: "punctuation",
      relevance: 0,
      begin: /,/
    }, l = {
      className: "number",
      variants: [
        { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
        { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
      ],
      relevance: 0
    }, c = {
      className: "symbol",
      variants: [
        { begin: /^\s*[a-z]+:/ }
        // labels
      ],
      relevance: 0
    }, d = {
      className: "variable",
      variants: [
        { begin: n.concat(/%/, r) },
        { begin: /%\d+/ },
        { begin: /#\d+/ }
      ]
    }, p = {
      className: "title",
      variants: [
        { begin: n.concat(/@/, r) },
        { begin: /@\d+/ },
        { begin: n.concat(/!/, r) },
        { begin: n.concat(/!\d+/, r) },
        // https://llvm.org/docs/LangRef.html#namedmetadatastructure
        // obviously a single digit can also be used in this fashion
        { begin: /!\d+/ }
      ]
    };
    return {
      name: "LLVM IR",
      // TODO: split into different categories of keywords
      keywords: "begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly double",
      contains: [
        a,
        // this matches "empty comments"...
        // ...because it's far more likely this is a statement terminator in
        // another language than an actual comment
        e.COMMENT(/;\s*$/, null, { relevance: 0 }),
        e.COMMENT(/;/, /$/),
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              className: "char.escape",
              match: /\\\d\d/
            }
          ]
        },
        p,
        s,
        i,
        d,
        c,
        l
      ]
    };
  }
  return Sf = t, Sf;
}
var bf, HA;
function Wee() {
  if (HA) return bf;
  HA = 1;
  function t(e) {
    const r = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [{
        className: "subst",
        begin: /\\[tn"\\]/
      }]
    }, a = {
      className: "number",
      relevance: 0,
      begin: e.C_NUMBER_RE
    }, i = {
      className: "literal",
      variants: [
        { begin: "\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b" },
        { begin: "\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b" },
        { begin: "\\b(FALSE|TRUE)\\b" },
        { begin: "\\b(ZERO_ROTATION)\\b" },
        { begin: "\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b" },
        { begin: "\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b" }
      ]
    }, s = {
      className: "built_in",
      begin: "\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"
    };
    return {
      name: "LSL (Linden Scripting Language)",
      illegal: ":",
      contains: [
        r,
        {
          className: "comment",
          variants: [
            e.COMMENT("//", "$"),
            e.COMMENT("/\\*", "\\*/")
          ],
          relevance: 0
        },
        a,
        {
          className: "section",
          variants: [
            { begin: "\\b(state|default)\\b" },
            { begin: "\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b" }
          ]
        },
        s,
        i,
        {
          className: "type",
          begin: "\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b"
        }
      ]
    };
  }
  return bf = t, bf;
}
var Tf, YA;
function Kee() {
  if (YA) return Tf;
  YA = 1;
  function t(e) {
    const n = "\\[=*\\[", r = "\\]=*\\]", a = {
      begin: n,
      end: r,
      contains: ["self"]
    }, i = [
      e.COMMENT("--(?!" + n + ")", "$"),
      e.COMMENT(
        "--" + n,
        r,
        {
          contains: [a],
          relevance: 10
        }
      )
    ];
    return {
      name: "Lua",
      keywords: {
        $pattern: e.UNDERSCORE_IDENT_RE,
        literal: "true false nil",
        keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
        built_in: (
          // Metatags and globals:
          "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
        )
      },
      contains: i.concat([
        {
          className: "function",
          beginKeywords: "function",
          end: "\\)",
          contains: [
            e.inherit(e.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            {
              className: "params",
              begin: "\\(",
              endsWithParent: !0,
              contains: i
            }
          ].concat(i)
        },
        e.C_NUMBER_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: n,
          end: r,
          contains: [a],
          relevance: 5
        }
      ])
    };
  }
  return Tf = t, Tf;
}
var yf, zA;
function Qee() {
  if (zA) return yf;
  zA = 1;
  function t(e) {
    const n = {
      className: "variable",
      variants: [
        {
          begin: "\\$\\(" + e.UNDERSCORE_IDENT_RE + "\\)",
          contains: [e.BACKSLASH_ESCAPE]
        },
        { begin: /\$[@%<?\^\+\*]/ }
      ]
    }, r = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e.BACKSLASH_ESCAPE,
        n
      ]
    }, a = {
      className: "variable",
      begin: /\$\([\w-]+\s/,
      end: /\)/,
      keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
      contains: [n]
    }, i = { begin: "^" + e.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" }, s = {
      className: "meta",
      begin: /^\.PHONY:/,
      end: /$/,
      keywords: {
        $pattern: /[\.\w]+/,
        keyword: ".PHONY"
      }
    }, l = {
      className: "section",
      begin: /^[^\s]+:/,
      end: /$/,
      contains: [n]
    };
    return {
      name: "Makefile",
      aliases: [
        "mk",
        "mak",
        "make"
      ],
      keywords: {
        $pattern: /[\w-]+/,
        keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        n,
        r,
        a,
        i,
        s,
        l
      ]
    };
  }
  return yf = t, yf;
}
var vf, qA;
function jee() {
  if (qA) return vf;
  qA = 1;
  const t = [
    "AASTriangle",
    "AbelianGroup",
    "Abort",
    "AbortKernels",
    "AbortProtect",
    "AbortScheduledTask",
    "Above",
    "Abs",
    "AbsArg",
    "AbsArgPlot",
    "Absolute",
    "AbsoluteCorrelation",
    "AbsoluteCorrelationFunction",
    "AbsoluteCurrentValue",
    "AbsoluteDashing",
    "AbsoluteFileName",
    "AbsoluteOptions",
    "AbsolutePointSize",
    "AbsoluteThickness",
    "AbsoluteTime",
    "AbsoluteTiming",
    "AcceptanceThreshold",
    "AccountingForm",
    "Accumulate",
    "Accuracy",
    "AccuracyGoal",
    "AcousticAbsorbingValue",
    "AcousticImpedanceValue",
    "AcousticNormalVelocityValue",
    "AcousticPDEComponent",
    "AcousticPressureCondition",
    "AcousticRadiationValue",
    "AcousticSoundHardValue",
    "AcousticSoundSoftCondition",
    "ActionDelay",
    "ActionMenu",
    "ActionMenuBox",
    "ActionMenuBoxOptions",
    "Activate",
    "Active",
    "ActiveClassification",
    "ActiveClassificationObject",
    "ActiveItem",
    "ActivePrediction",
    "ActivePredictionObject",
    "ActiveStyle",
    "AcyclicGraphQ",
    "AddOnHelpPath",
    "AddSides",
    "AddTo",
    "AddToSearchIndex",
    "AddUsers",
    "AdjacencyGraph",
    "AdjacencyList",
    "AdjacencyMatrix",
    "AdjacentMeshCells",
    "Adjugate",
    "AdjustmentBox",
    "AdjustmentBoxOptions",
    "AdjustTimeSeriesForecast",
    "AdministrativeDivisionData",
    "AffineHalfSpace",
    "AffineSpace",
    "AffineStateSpaceModel",
    "AffineTransform",
    "After",
    "AggregatedEntityClass",
    "AggregationLayer",
    "AircraftData",
    "AirportData",
    "AirPressureData",
    "AirSoundAttenuation",
    "AirTemperatureData",
    "AiryAi",
    "AiryAiPrime",
    "AiryAiZero",
    "AiryBi",
    "AiryBiPrime",
    "AiryBiZero",
    "AlgebraicIntegerQ",
    "AlgebraicNumber",
    "AlgebraicNumberDenominator",
    "AlgebraicNumberNorm",
    "AlgebraicNumberPolynomial",
    "AlgebraicNumberTrace",
    "AlgebraicRules",
    "AlgebraicRulesData",
    "Algebraics",
    "AlgebraicUnitQ",
    "Alignment",
    "AlignmentMarker",
    "AlignmentPoint",
    "All",
    "AllowAdultContent",
    "AllowChatServices",
    "AllowedCloudExtraParameters",
    "AllowedCloudParameterExtensions",
    "AllowedDimensions",
    "AllowedFrequencyRange",
    "AllowedHeads",
    "AllowGroupClose",
    "AllowIncomplete",
    "AllowInlineCells",
    "AllowKernelInitialization",
    "AllowLooseGrammar",
    "AllowReverseGroupClose",
    "AllowScriptLevelChange",
    "AllowVersionUpdate",
    "AllTrue",
    "Alphabet",
    "AlphabeticOrder",
    "AlphabeticSort",
    "AlphaChannel",
    "AlternateImage",
    "AlternatingFactorial",
    "AlternatingGroup",
    "AlternativeHypothesis",
    "Alternatives",
    "AltitudeMethod",
    "AmbientLight",
    "AmbiguityFunction",
    "AmbiguityList",
    "Analytic",
    "AnatomyData",
    "AnatomyForm",
    "AnatomyPlot3D",
    "AnatomySkinStyle",
    "AnatomyStyling",
    "AnchoredSearch",
    "And",
    "AndersonDarlingTest",
    "AngerJ",
    "AngleBisector",
    "AngleBracket",
    "AnglePath",
    "AnglePath3D",
    "AngleVector",
    "AngularGauge",
    "Animate",
    "AnimatedImage",
    "AnimationCycleOffset",
    "AnimationCycleRepetitions",
    "AnimationDirection",
    "AnimationDisplayTime",
    "AnimationRate",
    "AnimationRepetitions",
    "AnimationRunning",
    "AnimationRunTime",
    "AnimationTimeIndex",
    "AnimationVideo",
    "Animator",
    "AnimatorBox",
    "AnimatorBoxOptions",
    "AnimatorElements",
    "Annotate",
    "Annotation",
    "AnnotationDelete",
    "AnnotationKeys",
    "AnnotationRules",
    "AnnotationValue",
    "Annuity",
    "AnnuityDue",
    "Annulus",
    "AnomalyDetection",
    "AnomalyDetector",
    "AnomalyDetectorFunction",
    "Anonymous",
    "Antialiasing",
    "Antihermitian",
    "AntihermitianMatrixQ",
    "Antisymmetric",
    "AntisymmetricMatrixQ",
    "Antonyms",
    "AnyOrder",
    "AnySubset",
    "AnyTrue",
    "Apart",
    "ApartSquareFree",
    "APIFunction",
    "Appearance",
    "AppearanceElements",
    "AppearanceRules",
    "AppellF1",
    "Append",
    "AppendCheck",
    "AppendLayer",
    "AppendTo",
    "Application",
    "Apply",
    "ApplyReaction",
    "ApplySides",
    "ApplyTo",
    "ArcCos",
    "ArcCosh",
    "ArcCot",
    "ArcCoth",
    "ArcCsc",
    "ArcCsch",
    "ArcCurvature",
    "ARCHProcess",
    "ArcLength",
    "ArcSec",
    "ArcSech",
    "ArcSin",
    "ArcSinDistribution",
    "ArcSinh",
    "ArcTan",
    "ArcTanh",
    "Area",
    "Arg",
    "ArgMax",
    "ArgMin",
    "ArgumentCountQ",
    "ArgumentsOptions",
    "ARIMAProcess",
    "ArithmeticGeometricMean",
    "ARMAProcess",
    "Around",
    "AroundReplace",
    "ARProcess",
    "Array",
    "ArrayComponents",
    "ArrayDepth",
    "ArrayFilter",
    "ArrayFlatten",
    "ArrayMesh",
    "ArrayPad",
    "ArrayPlot",
    "ArrayPlot3D",
    "ArrayQ",
    "ArrayReduce",
    "ArrayResample",
    "ArrayReshape",
    "ArrayRules",
    "Arrays",
    "Arrow",
    "Arrow3DBox",
    "ArrowBox",
    "Arrowheads",
    "ASATriangle",
    "Ask",
    "AskAppend",
    "AskConfirm",
    "AskDisplay",
    "AskedQ",
    "AskedValue",
    "AskFunction",
    "AskState",
    "AskTemplateDisplay",
    "AspectRatio",
    "AspectRatioFixed",
    "Assert",
    "AssessmentFunction",
    "AssessmentResultObject",
    "AssociateTo",
    "Association",
    "AssociationFormat",
    "AssociationMap",
    "AssociationQ",
    "AssociationThread",
    "AssumeDeterministic",
    "Assuming",
    "Assumptions",
    "AstroAngularSeparation",
    "AstroBackground",
    "AstroCenter",
    "AstroDistance",
    "AstroGraphics",
    "AstroGridLines",
    "AstroGridLinesStyle",
    "AstronomicalData",
    "AstroPosition",
    "AstroProjection",
    "AstroRange",
    "AstroRangePadding",
    "AstroReferenceFrame",
    "AstroStyling",
    "AstroZoomLevel",
    "Asymptotic",
    "AsymptoticDSolveValue",
    "AsymptoticEqual",
    "AsymptoticEquivalent",
    "AsymptoticExpectation",
    "AsymptoticGreater",
    "AsymptoticGreaterEqual",
    "AsymptoticIntegrate",
    "AsymptoticLess",
    "AsymptoticLessEqual",
    "AsymptoticOutputTracker",
    "AsymptoticProbability",
    "AsymptoticProduct",
    "AsymptoticRSolveValue",
    "AsymptoticSolve",
    "AsymptoticSum",
    "Asynchronous",
    "AsynchronousTaskObject",
    "AsynchronousTasks",
    "Atom",
    "AtomCoordinates",
    "AtomCount",
    "AtomDiagramCoordinates",
    "AtomLabels",
    "AtomLabelStyle",
    "AtomList",
    "AtomQ",
    "AttachCell",
    "AttachedCell",
    "AttentionLayer",
    "Attributes",
    "Audio",
    "AudioAmplify",
    "AudioAnnotate",
    "AudioAnnotationLookup",
    "AudioBlockMap",
    "AudioCapture",
    "AudioChannelAssignment",
    "AudioChannelCombine",
    "AudioChannelMix",
    "AudioChannels",
    "AudioChannelSeparate",
    "AudioData",
    "AudioDelay",
    "AudioDelete",
    "AudioDevice",
    "AudioDistance",
    "AudioEncoding",
    "AudioFade",
    "AudioFrequencyShift",
    "AudioGenerator",
    "AudioIdentify",
    "AudioInputDevice",
    "AudioInsert",
    "AudioInstanceQ",
    "AudioIntervals",
    "AudioJoin",
    "AudioLabel",
    "AudioLength",
    "AudioLocalMeasurements",
    "AudioLooping",
    "AudioLoudness",
    "AudioMeasurements",
    "AudioNormalize",
    "AudioOutputDevice",
    "AudioOverlay",
    "AudioPad",
    "AudioPan",
    "AudioPartition",
    "AudioPause",
    "AudioPitchShift",
    "AudioPlay",
    "AudioPlot",
    "AudioQ",
    "AudioRecord",
    "AudioReplace",
    "AudioResample",
    "AudioReverb",
    "AudioReverse",
    "AudioSampleRate",
    "AudioSpectralMap",
    "AudioSpectralTransformation",
    "AudioSplit",
    "AudioStop",
    "AudioStream",
    "AudioStreams",
    "AudioTimeStretch",
    "AudioTrackApply",
    "AudioTrackSelection",
    "AudioTrim",
    "AudioType",
    "AugmentedPolyhedron",
    "AugmentedSymmetricPolynomial",
    "Authenticate",
    "Authentication",
    "AuthenticationDialog",
    "AutoAction",
    "Autocomplete",
    "AutocompletionFunction",
    "AutoCopy",
    "AutocorrelationTest",
    "AutoDelete",
    "AutoEvaluateEvents",
    "AutoGeneratedPackage",
    "AutoIndent",
    "AutoIndentSpacings",
    "AutoItalicWords",
    "AutoloadPath",
    "AutoMatch",
    "Automatic",
    "AutomaticImageSize",
    "AutoMultiplicationSymbol",
    "AutoNumberFormatting",
    "AutoOpenNotebooks",
    "AutoOpenPalettes",
    "AutoOperatorRenderings",
    "AutoQuoteCharacters",
    "AutoRefreshed",
    "AutoRemove",
    "AutorunSequencing",
    "AutoScaling",
    "AutoScroll",
    "AutoSpacing",
    "AutoStyleOptions",
    "AutoStyleWords",
    "AutoSubmitting",
    "Axes",
    "AxesEdge",
    "AxesLabel",
    "AxesOrigin",
    "AxesStyle",
    "AxiomaticTheory",
    "Axis",
    "Axis3DBox",
    "Axis3DBoxOptions",
    "AxisBox",
    "AxisBoxOptions",
    "AxisLabel",
    "AxisObject",
    "AxisStyle",
    "BabyMonsterGroupB",
    "Back",
    "BackFaceColor",
    "BackFaceGlowColor",
    "BackFaceOpacity",
    "BackFaceSpecularColor",
    "BackFaceSpecularExponent",
    "BackFaceSurfaceAppearance",
    "BackFaceTexture",
    "Background",
    "BackgroundAppearance",
    "BackgroundTasksSettings",
    "Backslash",
    "Backsubstitution",
    "Backward",
    "Ball",
    "Band",
    "BandpassFilter",
    "BandstopFilter",
    "BarabasiAlbertGraphDistribution",
    "BarChart",
    "BarChart3D",
    "BarcodeImage",
    "BarcodeRecognize",
    "BaringhausHenzeTest",
    "BarLegend",
    "BarlowProschanImportance",
    "BarnesG",
    "BarOrigin",
    "BarSpacing",
    "BartlettHannWindow",
    "BartlettWindow",
    "BaseDecode",
    "BaseEncode",
    "BaseForm",
    "Baseline",
    "BaselinePosition",
    "BaseStyle",
    "BasicRecurrentLayer",
    "BatchNormalizationLayer",
    "BatchSize",
    "BatesDistribution",
    "BattleLemarieWavelet",
    "BayesianMaximization",
    "BayesianMaximizationObject",
    "BayesianMinimization",
    "BayesianMinimizationObject",
    "Because",
    "BeckmannDistribution",
    "Beep",
    "Before",
    "Begin",
    "BeginDialogPacket",
    "BeginPackage",
    "BellB",
    "BellY",
    "Below",
    "BenfordDistribution",
    "BeniniDistribution",
    "BenktanderGibratDistribution",
    "BenktanderWeibullDistribution",
    "BernoulliB",
    "BernoulliDistribution",
    "BernoulliGraphDistribution",
    "BernoulliProcess",
    "BernsteinBasis",
    "BesagL",
    "BesselFilterModel",
    "BesselI",
    "BesselJ",
    "BesselJZero",
    "BesselK",
    "BesselY",
    "BesselYZero",
    "Beta",
    "BetaBinomialDistribution",
    "BetaDistribution",
    "BetaNegativeBinomialDistribution",
    "BetaPrimeDistribution",
    "BetaRegularized",
    "Between",
    "BetweennessCentrality",
    "Beveled",
    "BeveledPolyhedron",
    "BezierCurve",
    "BezierCurve3DBox",
    "BezierCurve3DBoxOptions",
    "BezierCurveBox",
    "BezierCurveBoxOptions",
    "BezierFunction",
    "BilateralFilter",
    "BilateralLaplaceTransform",
    "BilateralZTransform",
    "Binarize",
    "BinaryDeserialize",
    "BinaryDistance",
    "BinaryFormat",
    "BinaryImageQ",
    "BinaryRead",
    "BinaryReadList",
    "BinarySerialize",
    "BinaryWrite",
    "BinCounts",
    "BinLists",
    "BinnedVariogramList",
    "Binomial",
    "BinomialDistribution",
    "BinomialPointProcess",
    "BinomialProcess",
    "BinormalDistribution",
    "BiorthogonalSplineWavelet",
    "BioSequence",
    "BioSequenceBackTranslateList",
    "BioSequenceComplement",
    "BioSequenceInstances",
    "BioSequenceModify",
    "BioSequencePlot",
    "BioSequenceQ",
    "BioSequenceReverseComplement",
    "BioSequenceTranscribe",
    "BioSequenceTranslate",
    "BipartiteGraphQ",
    "BiquadraticFilterModel",
    "BirnbaumImportance",
    "BirnbaumSaundersDistribution",
    "BitAnd",
    "BitClear",
    "BitGet",
    "BitLength",
    "BitNot",
    "BitOr",
    "BitRate",
    "BitSet",
    "BitShiftLeft",
    "BitShiftRight",
    "BitXor",
    "BiweightLocation",
    "BiweightMidvariance",
    "Black",
    "BlackmanHarrisWindow",
    "BlackmanNuttallWindow",
    "BlackmanWindow",
    "Blank",
    "BlankForm",
    "BlankNullSequence",
    "BlankSequence",
    "Blend",
    "Block",
    "BlockchainAddressData",
    "BlockchainBase",
    "BlockchainBlockData",
    "BlockchainContractValue",
    "BlockchainData",
    "BlockchainGet",
    "BlockchainKeyEncode",
    "BlockchainPut",
    "BlockchainTokenData",
    "BlockchainTransaction",
    "BlockchainTransactionData",
    "BlockchainTransactionSign",
    "BlockchainTransactionSubmit",
    "BlockDiagonalMatrix",
    "BlockLowerTriangularMatrix",
    "BlockMap",
    "BlockRandom",
    "BlockUpperTriangularMatrix",
    "BlomqvistBeta",
    "BlomqvistBetaTest",
    "Blue",
    "Blur",
    "Blurring",
    "BodePlot",
    "BohmanWindow",
    "Bold",
    "Bond",
    "BondCount",
    "BondLabels",
    "BondLabelStyle",
    "BondList",
    "BondQ",
    "Bookmarks",
    "Boole",
    "BooleanConsecutiveFunction",
    "BooleanConvert",
    "BooleanCountingFunction",
    "BooleanFunction",
    "BooleanGraph",
    "BooleanMaxterms",
    "BooleanMinimize",
    "BooleanMinterms",
    "BooleanQ",
    "BooleanRegion",
    "Booleans",
    "BooleanStrings",
    "BooleanTable",
    "BooleanVariables",
    "BorderDimensions",
    "BorelTannerDistribution",
    "Bottom",
    "BottomHatTransform",
    "BoundaryDiscretizeGraphics",
    "BoundaryDiscretizeRegion",
    "BoundaryMesh",
    "BoundaryMeshRegion",
    "BoundaryMeshRegionQ",
    "BoundaryStyle",
    "BoundedRegionQ",
    "BoundingRegion",
    "Bounds",
    "Box",
    "BoxBaselineShift",
    "BoxData",
    "BoxDimensions",
    "Boxed",
    "Boxes",
    "BoxForm",
    "BoxFormFormatTypes",
    "BoxFrame",
    "BoxID",
    "BoxMargins",
    "BoxMatrix",
    "BoxObject",
    "BoxRatios",
    "BoxRotation",
    "BoxRotationPoint",
    "BoxStyle",
    "BoxWhiskerChart",
    "Bra",
    "BracketingBar",
    "BraKet",
    "BrayCurtisDistance",
    "BreadthFirstScan",
    "Break",
    "BridgeData",
    "BrightnessEqualize",
    "BroadcastStationData",
    "Brown",
    "BrownForsytheTest",
    "BrownianBridgeProcess",
    "BrowserCategory",
    "BSplineBasis",
    "BSplineCurve",
    "BSplineCurve3DBox",
    "BSplineCurve3DBoxOptions",
    "BSplineCurveBox",
    "BSplineCurveBoxOptions",
    "BSplineFunction",
    "BSplineSurface",
    "BSplineSurface3DBox",
    "BSplineSurface3DBoxOptions",
    "BubbleChart",
    "BubbleChart3D",
    "BubbleScale",
    "BubbleSizes",
    "BuckyballGraph",
    "BuildCompiledComponent",
    "BuildingData",
    "BulletGauge",
    "BusinessDayQ",
    "ButterflyGraph",
    "ButterworthFilterModel",
    "Button",
    "ButtonBar",
    "ButtonBox",
    "ButtonBoxOptions",
    "ButtonCell",
    "ButtonContents",
    "ButtonData",
    "ButtonEvaluator",
    "ButtonExpandable",
    "ButtonFrame",
    "ButtonFunction",
    "ButtonMargins",
    "ButtonMinHeight",
    "ButtonNote",
    "ButtonNotebook",
    "ButtonSource",
    "ButtonStyle",
    "ButtonStyleMenuListing",
    "Byte",
    "ByteArray",
    "ByteArrayFormat",
    "ByteArrayFormatQ",
    "ByteArrayQ",
    "ByteArrayToString",
    "ByteCount",
    "ByteOrdering",
    "C",
    "CachedValue",
    "CacheGraphics",
    "CachePersistence",
    "CalendarConvert",
    "CalendarData",
    "CalendarType",
    "Callout",
    "CalloutMarker",
    "CalloutStyle",
    "CallPacket",
    "CanberraDistance",
    "Cancel",
    "CancelButton",
    "CandlestickChart",
    "CanonicalGraph",
    "CanonicalizePolygon",
    "CanonicalizePolyhedron",
    "CanonicalizeRegion",
    "CanonicalName",
    "CanonicalWarpingCorrespondence",
    "CanonicalWarpingDistance",
    "CantorMesh",
    "CantorStaircase",
    "Canvas",
    "Cap",
    "CapForm",
    "CapitalDifferentialD",
    "Capitalize",
    "CapsuleShape",
    "CaptureRunning",
    "CaputoD",
    "CardinalBSplineBasis",
    "CarlemanLinearize",
    "CarlsonRC",
    "CarlsonRD",
    "CarlsonRE",
    "CarlsonRF",
    "CarlsonRG",
    "CarlsonRJ",
    "CarlsonRK",
    "CarlsonRM",
    "CarmichaelLambda",
    "CaseOrdering",
    "Cases",
    "CaseSensitive",
    "Cashflow",
    "Casoratian",
    "Cast",
    "Catalan",
    "CatalanNumber",
    "Catch",
    "CategoricalDistribution",
    "Catenate",
    "CatenateLayer",
    "CauchyDistribution",
    "CauchyMatrix",
    "CauchyPointProcess",
    "CauchyWindow",
    "CayleyGraph",
    "CDF",
    "CDFDeploy",
    "CDFInformation",
    "CDFWavelet",
    "Ceiling",
    "CelestialSystem",
    "Cell",
    "CellAutoOverwrite",
    "CellBaseline",
    "CellBoundingBox",
    "CellBracketOptions",
    "CellChangeTimes",
    "CellContents",
    "CellContext",
    "CellDingbat",
    "CellDingbatMargin",
    "CellDynamicExpression",
    "CellEditDuplicate",
    "CellElementsBoundingBox",
    "CellElementSpacings",
    "CellEpilog",
    "CellEvaluationDuplicate",
    "CellEvaluationFunction",
    "CellEvaluationLanguage",
    "CellEventActions",
    "CellFrame",
    "CellFrameColor",
    "CellFrameLabelMargins",
    "CellFrameLabels",
    "CellFrameMargins",
    "CellFrameStyle",
    "CellGroup",
    "CellGroupData",
    "CellGrouping",
    "CellGroupingRules",
    "CellHorizontalScrolling",
    "CellID",
    "CellInsertionPointCell",
    "CellLabel",
    "CellLabelAutoDelete",
    "CellLabelMargins",
    "CellLabelPositioning",
    "CellLabelStyle",
    "CellLabelTemplate",
    "CellMargins",
    "CellObject",
    "CellOpen",
    "CellPrint",
    "CellProlog",
    "Cells",
    "CellSize",
    "CellStyle",
    "CellTags",
    "CellTrayPosition",
    "CellTrayWidgets",
    "CellularAutomaton",
    "CensoredDistribution",
    "Censoring",
    "Center",
    "CenterArray",
    "CenterDot",
    "CenteredInterval",
    "CentralFeature",
    "CentralMoment",
    "CentralMomentGeneratingFunction",
    "Cepstrogram",
    "CepstrogramArray",
    "CepstrumArray",
    "CForm",
    "ChampernowneNumber",
    "ChangeOptions",
    "ChannelBase",
    "ChannelBrokerAction",
    "ChannelDatabin",
    "ChannelHistoryLength",
    "ChannelListen",
    "ChannelListener",
    "ChannelListeners",
    "ChannelListenerWait",
    "ChannelObject",
    "ChannelPreSendFunction",
    "ChannelReceiverFunction",
    "ChannelSend",
    "ChannelSubscribers",
    "ChanVeseBinarize",
    "Character",
    "CharacterCounts",
    "CharacterEncoding",
    "CharacterEncodingsPath",
    "CharacteristicFunction",
    "CharacteristicPolynomial",
    "CharacterName",
    "CharacterNormalize",
    "CharacterRange",
    "Characters",
    "ChartBaseStyle",
    "ChartElementData",
    "ChartElementDataFunction",
    "ChartElementFunction",
    "ChartElements",
    "ChartLabels",
    "ChartLayout",
    "ChartLegends",
    "ChartStyle",
    "Chebyshev1FilterModel",
    "Chebyshev2FilterModel",
    "ChebyshevDistance",
    "ChebyshevT",
    "ChebyshevU",
    "Check",
    "CheckAbort",
    "CheckAll",
    "CheckArguments",
    "Checkbox",
    "CheckboxBar",
    "CheckboxBox",
    "CheckboxBoxOptions",
    "ChemicalConvert",
    "ChemicalData",
    "ChemicalFormula",
    "ChemicalInstance",
    "ChemicalReaction",
    "ChessboardDistance",
    "ChiDistribution",
    "ChineseRemainder",
    "ChiSquareDistribution",
    "ChoiceButtons",
    "ChoiceDialog",
    "CholeskyDecomposition",
    "Chop",
    "ChromaticityPlot",
    "ChromaticityPlot3D",
    "ChromaticPolynomial",
    "Circle",
    "CircleBox",
    "CircleDot",
    "CircleMinus",
    "CirclePlus",
    "CirclePoints",
    "CircleThrough",
    "CircleTimes",
    "CirculantGraph",
    "CircularArcThrough",
    "CircularOrthogonalMatrixDistribution",
    "CircularQuaternionMatrixDistribution",
    "CircularRealMatrixDistribution",
    "CircularSymplecticMatrixDistribution",
    "CircularUnitaryMatrixDistribution",
    "Circumsphere",
    "CityData",
    "ClassifierFunction",
    "ClassifierInformation",
    "ClassifierMeasurements",
    "ClassifierMeasurementsObject",
    "Classify",
    "ClassPriors",
    "Clear",
    "ClearAll",
    "ClearAttributes",
    "ClearCookies",
    "ClearPermissions",
    "ClearSystemCache",
    "ClebschGordan",
    "ClickPane",
    "ClickToCopy",
    "ClickToCopyEnabled",
    "Clip",
    "ClipboardNotebook",
    "ClipFill",
    "ClippingStyle",
    "ClipPlanes",
    "ClipPlanesStyle",
    "ClipRange",
    "Clock",
    "ClockGauge",
    "ClockwiseContourIntegral",
    "Close",
    "Closed",
    "CloseKernels",
    "ClosenessCentrality",
    "Closing",
    "ClosingAutoSave",
    "ClosingEvent",
    "CloudAccountData",
    "CloudBase",
    "CloudConnect",
    "CloudConnections",
    "CloudDeploy",
    "CloudDirectory",
    "CloudDisconnect",
    "CloudEvaluate",
    "CloudExport",
    "CloudExpression",
    "CloudExpressions",
    "CloudFunction",
    "CloudGet",
    "CloudImport",
    "CloudLoggingData",
    "CloudObject",
    "CloudObjectInformation",
    "CloudObjectInformationData",
    "CloudObjectNameFormat",
    "CloudObjects",
    "CloudObjectURLType",
    "CloudPublish",
    "CloudPut",
    "CloudRenderingMethod",
    "CloudSave",
    "CloudShare",
    "CloudSubmit",
    "CloudSymbol",
    "CloudUnshare",
    "CloudUserID",
    "ClusterClassify",
    "ClusterDissimilarityFunction",
    "ClusteringComponents",
    "ClusteringMeasurements",
    "ClusteringTree",
    "CMYKColor",
    "Coarse",
    "CodeAssistOptions",
    "Coefficient",
    "CoefficientArrays",
    "CoefficientDomain",
    "CoefficientList",
    "CoefficientRules",
    "CoifletWavelet",
    "Collect",
    "CollinearPoints",
    "Colon",
    "ColonForm",
    "ColorBalance",
    "ColorCombine",
    "ColorConvert",
    "ColorCoverage",
    "ColorData",
    "ColorDataFunction",
    "ColorDetect",
    "ColorDistance",
    "ColorFunction",
    "ColorFunctionBinning",
    "ColorFunctionScaling",
    "Colorize",
    "ColorNegate",
    "ColorOutput",
    "ColorProfileData",
    "ColorQ",
    "ColorQuantize",
    "ColorReplace",
    "ColorRules",
    "ColorSelectorSettings",
    "ColorSeparate",
    "ColorSetter",
    "ColorSetterBox",
    "ColorSetterBoxOptions",
    "ColorSlider",
    "ColorsNear",
    "ColorSpace",
    "ColorToneMapping",
    "Column",
    "ColumnAlignments",
    "ColumnBackgrounds",
    "ColumnForm",
    "ColumnLines",
    "ColumnsEqual",
    "ColumnSpacings",
    "ColumnWidths",
    "CombinatorB",
    "CombinatorC",
    "CombinatorI",
    "CombinatorK",
    "CombinatorS",
    "CombinatorW",
    "CombinatorY",
    "CombinedEntityClass",
    "CombinerFunction",
    "CometData",
    "CommonDefaultFormatTypes",
    "Commonest",
    "CommonestFilter",
    "CommonName",
    "CommonUnits",
    "CommunityBoundaryStyle",
    "CommunityGraphPlot",
    "CommunityLabels",
    "CommunityRegionStyle",
    "CompanyData",
    "CompatibleUnitQ",
    "CompilationOptions",
    "CompilationTarget",
    "Compile",
    "Compiled",
    "CompiledCodeFunction",
    "CompiledComponent",
    "CompiledExpressionDeclaration",
    "CompiledFunction",
    "CompiledLayer",
    "CompilerCallback",
    "CompilerEnvironment",
    "CompilerEnvironmentAppend",
    "CompilerEnvironmentAppendTo",
    "CompilerEnvironmentObject",
    "CompilerOptions",
    "Complement",
    "ComplementedEntityClass",
    "CompleteGraph",
    "CompleteGraphQ",
    "CompleteIntegral",
    "CompleteKaryTree",
    "CompletionsListPacket",
    "Complex",
    "ComplexArrayPlot",
    "ComplexContourPlot",
    "Complexes",
    "ComplexExpand",
    "ComplexInfinity",
    "ComplexityFunction",
    "ComplexListPlot",
    "ComplexPlot",
    "ComplexPlot3D",
    "ComplexRegionPlot",
    "ComplexStreamPlot",
    "ComplexVectorPlot",
    "ComponentMeasurements",
    "ComponentwiseContextMenu",
    "Compose",
    "ComposeList",
    "ComposeSeries",
    "CompositeQ",
    "Composition",
    "CompoundElement",
    "CompoundExpression",
    "CompoundPoissonDistribution",
    "CompoundPoissonProcess",
    "CompoundRenewalProcess",
    "Compress",
    "CompressedData",
    "CompressionLevel",
    "ComputeUncertainty",
    "ConcaveHullMesh",
    "Condition",
    "ConditionalExpression",
    "Conditioned",
    "Cone",
    "ConeBox",
    "ConfidenceLevel",
    "ConfidenceRange",
    "ConfidenceTransform",
    "ConfigurationPath",
    "Confirm",
    "ConfirmAssert",
    "ConfirmBy",
    "ConfirmMatch",
    "ConfirmQuiet",
    "ConformationMethod",
    "ConformAudio",
    "ConformImages",
    "Congruent",
    "ConicGradientFilling",
    "ConicHullRegion",
    "ConicHullRegion3DBox",
    "ConicHullRegion3DBoxOptions",
    "ConicHullRegionBox",
    "ConicHullRegionBoxOptions",
    "ConicOptimization",
    "Conjugate",
    "ConjugateTranspose",
    "Conjunction",
    "Connect",
    "ConnectedComponents",
    "ConnectedGraphComponents",
    "ConnectedGraphQ",
    "ConnectedMeshComponents",
    "ConnectedMoleculeComponents",
    "ConnectedMoleculeQ",
    "ConnectionSettings",
    "ConnectLibraryCallbackFunction",
    "ConnectSystemModelComponents",
    "ConnectSystemModelController",
    "ConnesWindow",
    "ConoverTest",
    "ConservativeConvectionPDETerm",
    "ConsoleMessage",
    "Constant",
    "ConstantArray",
    "ConstantArrayLayer",
    "ConstantImage",
    "ConstantPlusLayer",
    "ConstantRegionQ",
    "Constants",
    "ConstantTimesLayer",
    "ConstellationData",
    "ConstrainedMax",
    "ConstrainedMin",
    "Construct",
    "Containing",
    "ContainsAll",
    "ContainsAny",
    "ContainsExactly",
    "ContainsNone",
    "ContainsOnly",
    "ContentDetectorFunction",
    "ContentFieldOptions",
    "ContentLocationFunction",
    "ContentObject",
    "ContentPadding",
    "ContentsBoundingBox",
    "ContentSelectable",
    "ContentSize",
    "Context",
    "ContextMenu",
    "Contexts",
    "ContextToFileName",
    "Continuation",
    "Continue",
    "ContinuedFraction",
    "ContinuedFractionK",
    "ContinuousAction",
    "ContinuousMarkovProcess",
    "ContinuousTask",
    "ContinuousTimeModelQ",
    "ContinuousWaveletData",
    "ContinuousWaveletTransform",
    "ContourDetect",
    "ContourGraphics",
    "ContourIntegral",
    "ContourLabels",
    "ContourLines",
    "ContourPlot",
    "ContourPlot3D",
    "Contours",
    "ContourShading",
    "ContourSmoothing",
    "ContourStyle",
    "ContraharmonicMean",
    "ContrastiveLossLayer",
    "Control",
    "ControlActive",
    "ControlAlignment",
    "ControlGroupContentsBox",
    "ControllabilityGramian",
    "ControllabilityMatrix",
    "ControllableDecomposition",
    "ControllableModelQ",
    "ControllerDuration",
    "ControllerInformation",
    "ControllerInformationData",
    "ControllerLinking",
    "ControllerManipulate",
    "ControllerMethod",
    "ControllerPath",
    "ControllerState",
    "ControlPlacement",
    "ControlsRendering",
    "ControlType",
    "ConvectionPDETerm",
    "Convergents",
    "ConversionOptions",
    "ConversionRules",
    "ConvertToPostScript",
    "ConvertToPostScriptPacket",
    "ConvexHullMesh",
    "ConvexHullRegion",
    "ConvexOptimization",
    "ConvexPolygonQ",
    "ConvexPolyhedronQ",
    "ConvexRegionQ",
    "ConvolutionLayer",
    "Convolve",
    "ConwayGroupCo1",
    "ConwayGroupCo2",
    "ConwayGroupCo3",
    "CookieFunction",
    "Cookies",
    "CoordinateBoundingBox",
    "CoordinateBoundingBoxArray",
    "CoordinateBounds",
    "CoordinateBoundsArray",
    "CoordinateChartData",
    "CoordinatesToolOptions",
    "CoordinateTransform",
    "CoordinateTransformData",
    "CoplanarPoints",
    "CoprimeQ",
    "Coproduct",
    "CopulaDistribution",
    "Copyable",
    "CopyDatabin",
    "CopyDirectory",
    "CopyFile",
    "CopyFunction",
    "CopyTag",
    "CopyToClipboard",
    "CoreNilpotentDecomposition",
    "CornerFilter",
    "CornerNeighbors",
    "Correlation",
    "CorrelationDistance",
    "CorrelationFunction",
    "CorrelationTest",
    "Cos",
    "Cosh",
    "CoshIntegral",
    "CosineDistance",
    "CosineWindow",
    "CosIntegral",
    "Cot",
    "Coth",
    "CoulombF",
    "CoulombG",
    "CoulombH1",
    "CoulombH2",
    "Count",
    "CountDistinct",
    "CountDistinctBy",
    "CounterAssignments",
    "CounterBox",
    "CounterBoxOptions",
    "CounterClockwiseContourIntegral",
    "CounterEvaluator",
    "CounterFunction",
    "CounterIncrements",
    "CounterStyle",
    "CounterStyleMenuListing",
    "CountRoots",
    "CountryData",
    "Counts",
    "CountsBy",
    "Covariance",
    "CovarianceEstimatorFunction",
    "CovarianceFunction",
    "CoxianDistribution",
    "CoxIngersollRossProcess",
    "CoxModel",
    "CoxModelFit",
    "CramerVonMisesTest",
    "CreateArchive",
    "CreateCellID",
    "CreateChannel",
    "CreateCloudExpression",
    "CreateCompilerEnvironment",
    "CreateDatabin",
    "CreateDataStructure",
    "CreateDataSystemModel",
    "CreateDialog",
    "CreateDirectory",
    "CreateDocument",
    "CreateFile",
    "CreateIntermediateDirectories",
    "CreateLicenseEntitlement",
    "CreateManagedLibraryExpression",
    "CreateNotebook",
    "CreatePacletArchive",
    "CreatePalette",
    "CreatePermissionsGroup",
    "CreateScheduledTask",
    "CreateSearchIndex",
    "CreateSystemModel",
    "CreateTemporary",
    "CreateTypeInstance",
    "CreateUUID",
    "CreateWindow",
    "CriterionFunction",
    "CriticalityFailureImportance",
    "CriticalitySuccessImportance",
    "CriticalSection",
    "Cross",
    "CrossEntropyLossLayer",
    "CrossingCount",
    "CrossingDetect",
    "CrossingPolygon",
    "CrossMatrix",
    "Csc",
    "Csch",
    "CSGRegion",
    "CSGRegionQ",
    "CSGRegionTree",
    "CTCLossLayer",
    "Cube",
    "CubeRoot",
    "Cubics",
    "Cuboid",
    "CuboidBox",
    "CuboidBoxOptions",
    "Cumulant",
    "CumulantGeneratingFunction",
    "CumulativeFeatureImpactPlot",
    "Cup",
    "CupCap",
    "Curl",
    "CurlyDoubleQuote",
    "CurlyQuote",
    "CurrencyConvert",
    "CurrentDate",
    "CurrentImage",
    "CurrentNotebookImage",
    "CurrentScreenImage",
    "CurrentValue",
    "Curry",
    "CurryApplied",
    "CurvatureFlowFilter",
    "CurveClosed",
    "Cyan",
    "CycleGraph",
    "CycleIndexPolynomial",
    "Cycles",
    "CyclicGroup",
    "Cyclotomic",
    "Cylinder",
    "CylinderBox",
    "CylinderBoxOptions",
    "CylindricalDecomposition",
    "CylindricalDecompositionFunction",
    "D",
    "DagumDistribution",
    "DamData",
    "DamerauLevenshteinDistance",
    "DampingFactor",
    "Darker",
    "Dashed",
    "Dashing",
    "DatabaseConnect",
    "DatabaseDisconnect",
    "DatabaseReference",
    "Databin",
    "DatabinAdd",
    "DatabinRemove",
    "Databins",
    "DatabinSubmit",
    "DatabinUpload",
    "DataCompression",
    "DataDistribution",
    "DataRange",
    "DataReversed",
    "Dataset",
    "DatasetDisplayPanel",
    "DatasetTheme",
    "DataStructure",
    "DataStructureQ",
    "Date",
    "DateBounds",
    "Dated",
    "DateDelimiters",
    "DateDifference",
    "DatedUnit",
    "DateFormat",
    "DateFunction",
    "DateGranularity",
    "DateHistogram",
    "DateInterval",
    "DateList",
    "DateListLogPlot",
    "DateListPlot",
    "DateListStepPlot",
    "DateObject",
    "DateObjectQ",
    "DateOverlapsQ",
    "DatePattern",
    "DatePlus",
    "DateRange",
    "DateReduction",
    "DateScale",
    "DateSelect",
    "DateString",
    "DateTicksFormat",
    "DateValue",
    "DateWithinQ",
    "DaubechiesWavelet",
    "DavisDistribution",
    "DawsonF",
    "DayCount",
    "DayCountConvention",
    "DayHemisphere",
    "DaylightQ",
    "DayMatchQ",
    "DayName",
    "DayNightTerminator",
    "DayPlus",
    "DayRange",
    "DayRound",
    "DeBruijnGraph",
    "DeBruijnSequence",
    "Debug",
    "DebugTag",
    "Decapitalize",
    "Decimal",
    "DecimalForm",
    "DeclareCompiledComponent",
    "DeclareKnownSymbols",
    "DeclarePackage",
    "Decompose",
    "DeconvolutionLayer",
    "Decrement",
    "Decrypt",
    "DecryptFile",
    "DedekindEta",
    "DeepSpaceProbeData",
    "Default",
    "Default2DTool",
    "Default3DTool",
    "DefaultAttachedCellStyle",
    "DefaultAxesStyle",
    "DefaultBaseStyle",
    "DefaultBoxStyle",
    "DefaultButton",
    "DefaultColor",
    "DefaultControlPlacement",
    "DefaultDockedCellStyle",
    "DefaultDuplicateCellStyle",
    "DefaultDuration",
    "DefaultElement",
    "DefaultFaceGridsStyle",
    "DefaultFieldHintStyle",
    "DefaultFont",
    "DefaultFontProperties",
    "DefaultFormatType",
    "DefaultFrameStyle",
    "DefaultFrameTicksStyle",
    "DefaultGridLinesStyle",
    "DefaultInlineFormatType",
    "DefaultInputFormatType",
    "DefaultLabelStyle",
    "DefaultMenuStyle",
    "DefaultNaturalLanguage",
    "DefaultNewCellStyle",
    "DefaultNewInlineCellStyle",
    "DefaultNotebook",
    "DefaultOptions",
    "DefaultOutputFormatType",
    "DefaultPrintPrecision",
    "DefaultStyle",
    "DefaultStyleDefinitions",
    "DefaultTextFormatType",
    "DefaultTextInlineFormatType",
    "DefaultTicksStyle",
    "DefaultTooltipStyle",
    "DefaultValue",
    "DefaultValues",
    "Defer",
    "DefineExternal",
    "DefineInputStreamMethod",
    "DefineOutputStreamMethod",
    "DefineResourceFunction",
    "Definition",
    "Degree",
    "DegreeCentrality",
    "DegreeGraphDistribution",
    "DegreeLexicographic",
    "DegreeReverseLexicographic",
    "DEigensystem",
    "DEigenvalues",
    "Deinitialization",
    "Del",
    "DelaunayMesh",
    "Delayed",
    "Deletable",
    "Delete",
    "DeleteAdjacentDuplicates",
    "DeleteAnomalies",
    "DeleteBorderComponents",
    "DeleteCases",
    "DeleteChannel",
    "DeleteCloudExpression",
    "DeleteContents",
    "DeleteDirectory",
    "DeleteDuplicates",
    "DeleteDuplicatesBy",
    "DeleteElements",
    "DeleteFile",
    "DeleteMissing",
    "DeleteObject",
    "DeletePermissionsKey",
    "DeleteSearchIndex",
    "DeleteSmallComponents",
    "DeleteStopwords",
    "DeleteWithContents",
    "DeletionWarning",
    "DelimitedArray",
    "DelimitedSequence",
    "Delimiter",
    "DelimiterAutoMatching",
    "DelimiterFlashTime",
    "DelimiterMatching",
    "Delimiters",
    "DeliveryFunction",
    "Dendrogram",
    "Denominator",
    "DensityGraphics",
    "DensityHistogram",
    "DensityPlot",
    "DensityPlot3D",
    "DependentVariables",
    "Deploy",
    "Deployed",
    "Depth",
    "DepthFirstScan",
    "Derivative",
    "DerivativeFilter",
    "DerivativePDETerm",
    "DerivedKey",
    "DescriptorStateSpace",
    "DesignMatrix",
    "DestroyAfterEvaluation",
    "Det",
    "DeviceClose",
    "DeviceConfigure",
    "DeviceExecute",
    "DeviceExecuteAsynchronous",
    "DeviceObject",
    "DeviceOpen",
    "DeviceOpenQ",
    "DeviceRead",
    "DeviceReadBuffer",
    "DeviceReadLatest",
    "DeviceReadList",
    "DeviceReadTimeSeries",
    "Devices",
    "DeviceStreams",
    "DeviceWrite",
    "DeviceWriteBuffer",
    "DGaussianWavelet",
    "DiacriticalPositioning",
    "Diagonal",
    "DiagonalizableMatrixQ",
    "DiagonalMatrix",
    "DiagonalMatrixQ",
    "Dialog",
    "DialogIndent",
    "DialogInput",
    "DialogLevel",
    "DialogNotebook",
    "DialogProlog",
    "DialogReturn",
    "DialogSymbols",
    "Diamond",
    "DiamondMatrix",
    "DiceDissimilarity",
    "DictionaryLookup",
    "DictionaryWordQ",
    "DifferenceDelta",
    "DifferenceOrder",
    "DifferenceQuotient",
    "DifferenceRoot",
    "DifferenceRootReduce",
    "Differences",
    "DifferentialD",
    "DifferentialRoot",
    "DifferentialRootReduce",
    "DifferentiatorFilter",
    "DiffusionPDETerm",
    "DiggleGatesPointProcess",
    "DiggleGrattonPointProcess",
    "DigitalSignature",
    "DigitBlock",
    "DigitBlockMinimum",
    "DigitCharacter",
    "DigitCount",
    "DigitQ",
    "DihedralAngle",
    "DihedralGroup",
    "Dilation",
    "DimensionalCombinations",
    "DimensionalMeshComponents",
    "DimensionReduce",
    "DimensionReducerFunction",
    "DimensionReduction",
    "Dimensions",
    "DiracComb",
    "DiracDelta",
    "DirectedEdge",
    "DirectedEdges",
    "DirectedGraph",
    "DirectedGraphQ",
    "DirectedInfinity",
    "Direction",
    "DirectionalLight",
    "Directive",
    "Directory",
    "DirectoryName",
    "DirectoryQ",
    "DirectoryStack",
    "DirichletBeta",
    "DirichletCharacter",
    "DirichletCondition",
    "DirichletConvolve",
    "DirichletDistribution",
    "DirichletEta",
    "DirichletL",
    "DirichletLambda",
    "DirichletTransform",
    "DirichletWindow",
    "DisableConsolePrintPacket",
    "DisableFormatting",
    "DiscreteAsymptotic",
    "DiscreteChirpZTransform",
    "DiscreteConvolve",
    "DiscreteDelta",
    "DiscreteHadamardTransform",
    "DiscreteIndicator",
    "DiscreteInputOutputModel",
    "DiscreteLimit",
    "DiscreteLQEstimatorGains",
    "DiscreteLQRegulatorGains",
    "DiscreteLyapunovSolve",
    "DiscreteMarkovProcess",
    "DiscreteMaxLimit",
    "DiscreteMinLimit",
    "DiscretePlot",
    "DiscretePlot3D",
    "DiscreteRatio",
    "DiscreteRiccatiSolve",
    "DiscreteShift",
    "DiscreteTimeModelQ",
    "DiscreteUniformDistribution",
    "DiscreteVariables",
    "DiscreteWaveletData",
    "DiscreteWaveletPacketTransform",
    "DiscreteWaveletTransform",
    "DiscretizeGraphics",
    "DiscretizeRegion",
    "Discriminant",
    "DisjointQ",
    "Disjunction",
    "Disk",
    "DiskBox",
    "DiskBoxOptions",
    "DiskMatrix",
    "DiskSegment",
    "Dispatch",
    "DispatchQ",
    "DispersionEstimatorFunction",
    "Display",
    "DisplayAllSteps",
    "DisplayEndPacket",
    "DisplayForm",
    "DisplayFunction",
    "DisplayPacket",
    "DisplayRules",
    "DisplayString",
    "DisplayTemporary",
    "DisplayWith",
    "DisplayWithRef",
    "DisplayWithVariable",
    "DistanceFunction",
    "DistanceMatrix",
    "DistanceTransform",
    "Distribute",
    "Distributed",
    "DistributedContexts",
    "DistributeDefinitions",
    "DistributionChart",
    "DistributionDomain",
    "DistributionFitTest",
    "DistributionParameterAssumptions",
    "DistributionParameterQ",
    "Dithering",
    "Div",
    "Divergence",
    "Divide",
    "DivideBy",
    "Dividers",
    "DivideSides",
    "Divisible",
    "Divisors",
    "DivisorSigma",
    "DivisorSum",
    "DMSList",
    "DMSString",
    "Do",
    "DockedCell",
    "DockedCells",
    "DocumentGenerator",
    "DocumentGeneratorInformation",
    "DocumentGeneratorInformationData",
    "DocumentGenerators",
    "DocumentNotebook",
    "DocumentWeightingRules",
    "Dodecahedron",
    "DomainRegistrationInformation",
    "DominantColors",
    "DominatorTreeGraph",
    "DominatorVertexList",
    "DOSTextFormat",
    "Dot",
    "DotDashed",
    "DotEqual",
    "DotLayer",
    "DotPlusLayer",
    "Dotted",
    "DoubleBracketingBar",
    "DoubleContourIntegral",
    "DoubleDownArrow",
    "DoubleLeftArrow",
    "DoubleLeftRightArrow",
    "DoubleLeftTee",
    "DoubleLongLeftArrow",
    "DoubleLongLeftRightArrow",
    "DoubleLongRightArrow",
    "DoubleRightArrow",
    "DoubleRightTee",
    "DoubleUpArrow",
    "DoubleUpDownArrow",
    "DoubleVerticalBar",
    "DoublyInfinite",
    "Down",
    "DownArrow",
    "DownArrowBar",
    "DownArrowUpArrow",
    "DownLeftRightVector",
    "DownLeftTeeVector",
    "DownLeftVector",
    "DownLeftVectorBar",
    "DownRightTeeVector",
    "DownRightVector",
    "DownRightVectorBar",
    "Downsample",
    "DownTee",
    "DownTeeArrow",
    "DownValues",
    "DownValuesFunction",
    "DragAndDrop",
    "DrawBackFaces",
    "DrawEdges",
    "DrawFrontFaces",
    "DrawHighlighted",
    "DrazinInverse",
    "Drop",
    "DropoutLayer",
    "DropShadowing",
    "DSolve",
    "DSolveChangeVariables",
    "DSolveValue",
    "Dt",
    "DualLinearProgramming",
    "DualPlanarGraph",
    "DualPolyhedron",
    "DualSystemsModel",
    "DumpGet",
    "DumpSave",
    "DuplicateFreeQ",
    "Duration",
    "Dynamic",
    "DynamicBox",
    "DynamicBoxOptions",
    "DynamicEvaluationTimeout",
    "DynamicGeoGraphics",
    "DynamicImage",
    "DynamicLocation",
    "DynamicModule",
    "DynamicModuleBox",
    "DynamicModuleBoxOptions",
    "DynamicModuleParent",
    "DynamicModuleValues",
    "DynamicName",
    "DynamicNamespace",
    "DynamicReference",
    "DynamicSetting",
    "DynamicUpdating",
    "DynamicWrapper",
    "DynamicWrapperBox",
    "DynamicWrapperBoxOptions",
    "E",
    "EarthImpactData",
    "EarthquakeData",
    "EccentricityCentrality",
    "Echo",
    "EchoEvaluation",
    "EchoFunction",
    "EchoLabel",
    "EchoTiming",
    "EclipseType",
    "EdgeAdd",
    "EdgeBetweennessCentrality",
    "EdgeCapacity",
    "EdgeCapForm",
    "EdgeChromaticNumber",
    "EdgeColor",
    "EdgeConnectivity",
    "EdgeContract",
    "EdgeCost",
    "EdgeCount",
    "EdgeCoverQ",
    "EdgeCycleMatrix",
    "EdgeDashing",
    "EdgeDelete",
    "EdgeDetect",
    "EdgeForm",
    "EdgeIndex",
    "EdgeJoinForm",
    "EdgeLabeling",
    "EdgeLabels",
    "EdgeLabelStyle",
    "EdgeList",
    "EdgeOpacity",
    "EdgeQ",
    "EdgeRenderingFunction",
    "EdgeRules",
    "EdgeShapeFunction",
    "EdgeStyle",
    "EdgeTaggedGraph",
    "EdgeTaggedGraphQ",
    "EdgeTags",
    "EdgeThickness",
    "EdgeTransitiveGraphQ",
    "EdgeValueRange",
    "EdgeValueSizes",
    "EdgeWeight",
    "EdgeWeightedGraphQ",
    "Editable",
    "EditButtonSettings",
    "EditCellTagsSettings",
    "EditDistance",
    "EffectiveInterest",
    "Eigensystem",
    "Eigenvalues",
    "EigenvectorCentrality",
    "Eigenvectors",
    "Element",
    "ElementData",
    "ElementwiseLayer",
    "ElidedForms",
    "Eliminate",
    "EliminationOrder",
    "Ellipsoid",
    "EllipticE",
    "EllipticExp",
    "EllipticExpPrime",
    "EllipticF",
    "EllipticFilterModel",
    "EllipticK",
    "EllipticLog",
    "EllipticNomeQ",
    "EllipticPi",
    "EllipticReducedHalfPeriods",
    "EllipticTheta",
    "EllipticThetaPrime",
    "EmbedCode",
    "EmbeddedHTML",
    "EmbeddedService",
    "EmbeddedSQLEntityClass",
    "EmbeddedSQLExpression",
    "EmbeddingLayer",
    "EmbeddingObject",
    "EmitSound",
    "EmphasizeSyntaxErrors",
    "EmpiricalDistribution",
    "Empty",
    "EmptyGraphQ",
    "EmptyRegion",
    "EmptySpaceF",
    "EnableConsolePrintPacket",
    "Enabled",
    "Enclose",
    "Encode",
    "Encrypt",
    "EncryptedObject",
    "EncryptFile",
    "End",
    "EndAdd",
    "EndDialogPacket",
    "EndOfBuffer",
    "EndOfFile",
    "EndOfLine",
    "EndOfString",
    "EndPackage",
    "EngineEnvironment",
    "EngineeringForm",
    "Enter",
    "EnterExpressionPacket",
    "EnterTextPacket",
    "Entity",
    "EntityClass",
    "EntityClassList",
    "EntityCopies",
    "EntityFunction",
    "EntityGroup",
    "EntityInstance",
    "EntityList",
    "EntityPrefetch",
    "EntityProperties",
    "EntityProperty",
    "EntityPropertyClass",
    "EntityRegister",
    "EntityStore",
    "EntityStores",
    "EntityTypeName",
    "EntityUnregister",
    "EntityValue",
    "Entropy",
    "EntropyFilter",
    "Environment",
    "Epilog",
    "EpilogFunction",
    "Equal",
    "EqualColumns",
    "EqualRows",
    "EqualTilde",
    "EqualTo",
    "EquatedTo",
    "Equilibrium",
    "EquirippleFilterKernel",
    "Equivalent",
    "Erf",
    "Erfc",
    "Erfi",
    "ErlangB",
    "ErlangC",
    "ErlangDistribution",
    "Erosion",
    "ErrorBox",
    "ErrorBoxOptions",
    "ErrorNorm",
    "ErrorPacket",
    "ErrorsDialogSettings",
    "EscapeRadius",
    "EstimatedBackground",
    "EstimatedDistribution",
    "EstimatedPointNormals",
    "EstimatedPointProcess",
    "EstimatedProcess",
    "EstimatedVariogramModel",
    "EstimatorGains",
    "EstimatorRegulator",
    "EuclideanDistance",
    "EulerAngles",
    "EulerCharacteristic",
    "EulerE",
    "EulerGamma",
    "EulerianGraphQ",
    "EulerMatrix",
    "EulerPhi",
    "Evaluatable",
    "Evaluate",
    "Evaluated",
    "EvaluatePacket",
    "EvaluateScheduledTask",
    "EvaluationBox",
    "EvaluationCell",
    "EvaluationCompletionAction",
    "EvaluationData",
    "EvaluationElements",
    "EvaluationEnvironment",
    "EvaluationMode",
    "EvaluationMonitor",
    "EvaluationNotebook",
    "EvaluationObject",
    "EvaluationOrder",
    "EvaluationPrivileges",
    "EvaluationRateLimit",
    "Evaluator",
    "EvaluatorNames",
    "EvenQ",
    "EventData",
    "EventEvaluator",
    "EventHandler",
    "EventHandlerTag",
    "EventLabels",
    "EventSeries",
    "ExactBlackmanWindow",
    "ExactNumberQ",
    "ExactRootIsolation",
    "ExampleData",
    "Except",
    "ExcludedContexts",
    "ExcludedForms",
    "ExcludedLines",
    "ExcludedPhysicalQuantities",
    "ExcludePods",
    "Exclusions",
    "ExclusionsStyle",
    "Exists",
    "Exit",
    "ExitDialog",
    "ExoplanetData",
    "Exp",
    "Expand",
    "ExpandAll",
    "ExpandDenominator",
    "ExpandFileName",
    "ExpandNumerator",
    "Expectation",
    "ExpectationE",
    "ExpectedValue",
    "ExpGammaDistribution",
    "ExpIntegralE",
    "ExpIntegralEi",
    "ExpirationDate",
    "Exponent",
    "ExponentFunction",
    "ExponentialDistribution",
    "ExponentialFamily",
    "ExponentialGeneratingFunction",
    "ExponentialMovingAverage",
    "ExponentialPowerDistribution",
    "ExponentPosition",
    "ExponentStep",
    "Export",
    "ExportAutoReplacements",
    "ExportByteArray",
    "ExportForm",
    "ExportPacket",
    "ExportString",
    "Expression",
    "ExpressionCell",
    "ExpressionGraph",
    "ExpressionPacket",
    "ExpressionTree",
    "ExpressionUUID",
    "ExpToTrig",
    "ExtendedEntityClass",
    "ExtendedGCD",
    "Extension",
    "ExtentElementFunction",
    "ExtentMarkers",
    "ExtentSize",
    "ExternalBundle",
    "ExternalCall",
    "ExternalDataCharacterEncoding",
    "ExternalEvaluate",
    "ExternalFunction",
    "ExternalFunctionName",
    "ExternalIdentifier",
    "ExternalObject",
    "ExternalOptions",
    "ExternalSessionObject",
    "ExternalSessions",
    "ExternalStorageBase",
    "ExternalStorageDownload",
    "ExternalStorageGet",
    "ExternalStorageObject",
    "ExternalStoragePut",
    "ExternalStorageUpload",
    "ExternalTypeSignature",
    "ExternalValue",
    "Extract",
    "ExtractArchive",
    "ExtractLayer",
    "ExtractPacletArchive",
    "ExtremeValueDistribution",
    "FaceAlign",
    "FaceForm",
    "FaceGrids",
    "FaceGridsStyle",
    "FaceRecognize",
    "FacialFeatures",
    "Factor",
    "FactorComplete",
    "Factorial",
    "Factorial2",
    "FactorialMoment",
    "FactorialMomentGeneratingFunction",
    "FactorialPower",
    "FactorInteger",
    "FactorList",
    "FactorSquareFree",
    "FactorSquareFreeList",
    "FactorTerms",
    "FactorTermsList",
    "Fail",
    "Failure",
    "FailureAction",
    "FailureDistribution",
    "FailureQ",
    "False",
    "FareySequence",
    "FARIMAProcess",
    "FeatureDistance",
    "FeatureExtract",
    "FeatureExtraction",
    "FeatureExtractor",
    "FeatureExtractorFunction",
    "FeatureImpactPlot",
    "FeatureNames",
    "FeatureNearest",
    "FeatureSpacePlot",
    "FeatureSpacePlot3D",
    "FeatureTypes",
    "FeatureValueDependencyPlot",
    "FeatureValueImpactPlot",
    "FEDisableConsolePrintPacket",
    "FeedbackLinearize",
    "FeedbackSector",
    "FeedbackSectorStyle",
    "FeedbackType",
    "FEEnableConsolePrintPacket",
    "FetalGrowthData",
    "Fibonacci",
    "Fibonorial",
    "FieldCompletionFunction",
    "FieldHint",
    "FieldHintStyle",
    "FieldMasked",
    "FieldSize",
    "File",
    "FileBaseName",
    "FileByteCount",
    "FileConvert",
    "FileDate",
    "FileExistsQ",
    "FileExtension",
    "FileFormat",
    "FileFormatProperties",
    "FileFormatQ",
    "FileHandler",
    "FileHash",
    "FileInformation",
    "FileName",
    "FileNameDepth",
    "FileNameDialogSettings",
    "FileNameDrop",
    "FileNameForms",
    "FileNameJoin",
    "FileNames",
    "FileNameSetter",
    "FileNameSplit",
    "FileNameTake",
    "FileNameToFormatList",
    "FilePrint",
    "FileSize",
    "FileSystemMap",
    "FileSystemScan",
    "FileSystemTree",
    "FileTemplate",
    "FileTemplateApply",
    "FileType",
    "FilledCurve",
    "FilledCurveBox",
    "FilledCurveBoxOptions",
    "FilledTorus",
    "FillForm",
    "Filling",
    "FillingStyle",
    "FillingTransform",
    "FilteredEntityClass",
    "FilterRules",
    "FinancialBond",
    "FinancialData",
    "FinancialDerivative",
    "FinancialIndicator",
    "Find",
    "FindAnomalies",
    "FindArgMax",
    "FindArgMin",
    "FindChannels",
    "FindClique",
    "FindClusters",
    "FindCookies",
    "FindCurvePath",
    "FindCycle",
    "FindDevices",
    "FindDistribution",
    "FindDistributionParameters",
    "FindDivisions",
    "FindEdgeColoring",
    "FindEdgeCover",
    "FindEdgeCut",
    "FindEdgeIndependentPaths",
    "FindEquationalProof",
    "FindEulerianCycle",
    "FindExternalEvaluators",
    "FindFaces",
    "FindFile",
    "FindFit",
    "FindFormula",
    "FindFundamentalCycles",
    "FindGeneratingFunction",
    "FindGeoLocation",
    "FindGeometricConjectures",
    "FindGeometricTransform",
    "FindGraphCommunities",
    "FindGraphIsomorphism",
    "FindGraphPartition",
    "FindHamiltonianCycle",
    "FindHamiltonianPath",
    "FindHiddenMarkovStates",
    "FindImageText",
    "FindIndependentEdgeSet",
    "FindIndependentVertexSet",
    "FindInstance",
    "FindIntegerNullVector",
    "FindIsomers",
    "FindIsomorphicSubgraph",
    "FindKClan",
    "FindKClique",
    "FindKClub",
    "FindKPlex",
    "FindLibrary",
    "FindLinearRecurrence",
    "FindList",
    "FindMatchingColor",
    "FindMaximum",
    "FindMaximumCut",
    "FindMaximumFlow",
    "FindMaxValue",
    "FindMeshDefects",
    "FindMinimum",
    "FindMinimumCostFlow",
    "FindMinimumCut",
    "FindMinValue",
    "FindMoleculeSubstructure",
    "FindPath",
    "FindPeaks",
    "FindPermutation",
    "FindPlanarColoring",
    "FindPointProcessParameters",
    "FindPostmanTour",
    "FindProcessParameters",
    "FindRegionTransform",
    "FindRepeat",
    "FindRoot",
    "FindSequenceFunction",
    "FindSettings",
    "FindShortestPath",
    "FindShortestTour",
    "FindSpanningTree",
    "FindSubgraphIsomorphism",
    "FindSystemModelEquilibrium",
    "FindTextualAnswer",
    "FindThreshold",
    "FindTransientRepeat",
    "FindVertexColoring",
    "FindVertexCover",
    "FindVertexCut",
    "FindVertexIndependentPaths",
    "Fine",
    "FinishDynamic",
    "FiniteAbelianGroupCount",
    "FiniteGroupCount",
    "FiniteGroupData",
    "First",
    "FirstCase",
    "FirstPassageTimeDistribution",
    "FirstPosition",
    "FischerGroupFi22",
    "FischerGroupFi23",
    "FischerGroupFi24Prime",
    "FisherHypergeometricDistribution",
    "FisherRatioTest",
    "FisherZDistribution",
    "Fit",
    "FitAll",
    "FitRegularization",
    "FittedModel",
    "FixedOrder",
    "FixedPoint",
    "FixedPointList",
    "FlashSelection",
    "Flat",
    "FlatShading",
    "Flatten",
    "FlattenAt",
    "FlattenLayer",
    "FlatTopWindow",
    "FlightData",
    "FlipView",
    "Floor",
    "FlowPolynomial",
    "Fold",
    "FoldList",
    "FoldPair",
    "FoldPairList",
    "FoldWhile",
    "FoldWhileList",
    "FollowRedirects",
    "Font",
    "FontColor",
    "FontFamily",
    "FontForm",
    "FontName",
    "FontOpacity",
    "FontPostScriptName",
    "FontProperties",
    "FontReencoding",
    "FontSize",
    "FontSlant",
    "FontSubstitutions",
    "FontTracking",
    "FontVariations",
    "FontWeight",
    "For",
    "ForAll",
    "ForAllType",
    "ForceVersionInstall",
    "Format",
    "FormatRules",
    "FormatType",
    "FormatTypeAutoConvert",
    "FormatValues",
    "FormBox",
    "FormBoxOptions",
    "FormControl",
    "FormFunction",
    "FormLayoutFunction",
    "FormObject",
    "FormPage",
    "FormProtectionMethod",
    "FormTheme",
    "FormulaData",
    "FormulaLookup",
    "FortranForm",
    "Forward",
    "ForwardBackward",
    "ForwardCloudCredentials",
    "Fourier",
    "FourierCoefficient",
    "FourierCosCoefficient",
    "FourierCosSeries",
    "FourierCosTransform",
    "FourierDCT",
    "FourierDCTFilter",
    "FourierDCTMatrix",
    "FourierDST",
    "FourierDSTMatrix",
    "FourierMatrix",
    "FourierParameters",
    "FourierSequenceTransform",
    "FourierSeries",
    "FourierSinCoefficient",
    "FourierSinSeries",
    "FourierSinTransform",
    "FourierTransform",
    "FourierTrigSeries",
    "FoxH",
    "FoxHReduce",
    "FractionalBrownianMotionProcess",
    "FractionalD",
    "FractionalGaussianNoiseProcess",
    "FractionalPart",
    "FractionBox",
    "FractionBoxOptions",
    "FractionLine",
    "Frame",
    "FrameBox",
    "FrameBoxOptions",
    "Framed",
    "FrameInset",
    "FrameLabel",
    "Frameless",
    "FrameListVideo",
    "FrameMargins",
    "FrameRate",
    "FrameStyle",
    "FrameTicks",
    "FrameTicksStyle",
    "FRatioDistribution",
    "FrechetDistribution",
    "FreeQ",
    "FrenetSerretSystem",
    "FrequencySamplingFilterKernel",
    "FresnelC",
    "FresnelF",
    "FresnelG",
    "FresnelS",
    "Friday",
    "FrobeniusNumber",
    "FrobeniusSolve",
    "FromAbsoluteTime",
    "FromCharacterCode",
    "FromCoefficientRules",
    "FromContinuedFraction",
    "FromDate",
    "FromDateString",
    "FromDigits",
    "FromDMS",
    "FromEntity",
    "FromJulianDate",
    "FromLetterNumber",
    "FromPolarCoordinates",
    "FromRawPointer",
    "FromRomanNumeral",
    "FromSphericalCoordinates",
    "FromUnixTime",
    "Front",
    "FrontEndDynamicExpression",
    "FrontEndEventActions",
    "FrontEndExecute",
    "FrontEndObject",
    "FrontEndResource",
    "FrontEndResourceString",
    "FrontEndStackSize",
    "FrontEndToken",
    "FrontEndTokenExecute",
    "FrontEndValueCache",
    "FrontEndVersion",
    "FrontFaceColor",
    "FrontFaceGlowColor",
    "FrontFaceOpacity",
    "FrontFaceSpecularColor",
    "FrontFaceSpecularExponent",
    "FrontFaceSurfaceAppearance",
    "FrontFaceTexture",
    "Full",
    "FullAxes",
    "FullDefinition",
    "FullForm",
    "FullGraphics",
    "FullInformationOutputRegulator",
    "FullOptions",
    "FullRegion",
    "FullSimplify",
    "Function",
    "FunctionAnalytic",
    "FunctionBijective",
    "FunctionCompile",
    "FunctionCompileExport",
    "FunctionCompileExportByteArray",
    "FunctionCompileExportLibrary",
    "FunctionCompileExportString",
    "FunctionContinuous",
    "FunctionConvexity",
    "FunctionDeclaration",
    "FunctionDiscontinuities",
    "FunctionDomain",
    "FunctionExpand",
    "FunctionInjective",
    "FunctionInterpolation",
    "FunctionLayer",
    "FunctionMeromorphic",
    "FunctionMonotonicity",
    "FunctionPeriod",
    "FunctionPoles",
    "FunctionRange",
    "FunctionSign",
    "FunctionSingularities",
    "FunctionSpace",
    "FunctionSurjective",
    "FussellVeselyImportance",
    "GaborFilter",
    "GaborMatrix",
    "GaborWavelet",
    "GainMargins",
    "GainPhaseMargins",
    "GalaxyData",
    "GalleryView",
    "Gamma",
    "GammaDistribution",
    "GammaRegularized",
    "GapPenalty",
    "GARCHProcess",
    "GatedRecurrentLayer",
    "Gather",
    "GatherBy",
    "GaugeFaceElementFunction",
    "GaugeFaceStyle",
    "GaugeFrameElementFunction",
    "GaugeFrameSize",
    "GaugeFrameStyle",
    "GaugeLabels",
    "GaugeMarkers",
    "GaugeStyle",
    "GaussianFilter",
    "GaussianIntegers",
    "GaussianMatrix",
    "GaussianOrthogonalMatrixDistribution",
    "GaussianSymplecticMatrixDistribution",
    "GaussianUnitaryMatrixDistribution",
    "GaussianWindow",
    "GCD",
    "GegenbauerC",
    "General",
    "GeneralizedLinearModelFit",
    "GenerateAsymmetricKeyPair",
    "GenerateConditions",
    "GeneratedAssetFormat",
    "GeneratedAssetLocation",
    "GeneratedCell",
    "GeneratedCellStyles",
    "GeneratedDocumentBinding",
    "GenerateDerivedKey",
    "GenerateDigitalSignature",
    "GenerateDocument",
    "GeneratedParameters",
    "GeneratedQuantityMagnitudes",
    "GenerateFileSignature",
    "GenerateHTTPResponse",
    "GenerateSecuredAuthenticationKey",
    "GenerateSymmetricKey",
    "GeneratingFunction",
    "GeneratorDescription",
    "GeneratorHistoryLength",
    "GeneratorOutputType",
    "Generic",
    "GenericCylindricalDecomposition",
    "GenomeData",
    "GenomeLookup",
    "GeoAntipode",
    "GeoArea",
    "GeoArraySize",
    "GeoBackground",
    "GeoBoundary",
    "GeoBoundingBox",
    "GeoBounds",
    "GeoBoundsRegion",
    "GeoBoundsRegionBoundary",
    "GeoBubbleChart",
    "GeoCenter",
    "GeoCircle",
    "GeoContourPlot",
    "GeoDensityPlot",
    "GeodesicClosing",
    "GeodesicDilation",
    "GeodesicErosion",
    "GeodesicOpening",
    "GeodesicPolyhedron",
    "GeoDestination",
    "GeodesyData",
    "GeoDirection",
    "GeoDisk",
    "GeoDisplacement",
    "GeoDistance",
    "GeoDistanceList",
    "GeoElevationData",
    "GeoEntities",
    "GeoGraphics",
    "GeoGraphPlot",
    "GeoGraphValuePlot",
    "GeogravityModelData",
    "GeoGridDirectionDifference",
    "GeoGridLines",
    "GeoGridLinesStyle",
    "GeoGridPosition",
    "GeoGridRange",
    "GeoGridRangePadding",
    "GeoGridUnitArea",
    "GeoGridUnitDistance",
    "GeoGridVector",
    "GeoGroup",
    "GeoHemisphere",
    "GeoHemisphereBoundary",
    "GeoHistogram",
    "GeoIdentify",
    "GeoImage",
    "GeoLabels",
    "GeoLength",
    "GeoListPlot",
    "GeoLocation",
    "GeologicalPeriodData",
    "GeomagneticModelData",
    "GeoMarker",
    "GeometricAssertion",
    "GeometricBrownianMotionProcess",
    "GeometricDistribution",
    "GeometricMean",
    "GeometricMeanFilter",
    "GeometricOptimization",
    "GeometricScene",
    "GeometricStep",
    "GeometricStylingRules",
    "GeometricTest",
    "GeometricTransformation",
    "GeometricTransformation3DBox",
    "GeometricTransformation3DBoxOptions",
    "GeometricTransformationBox",
    "GeometricTransformationBoxOptions",
    "GeoModel",
    "GeoNearest",
    "GeoOrientationData",
    "GeoPath",
    "GeoPolygon",
    "GeoPosition",
    "GeoPositionENU",
    "GeoPositionXYZ",
    "GeoProjection",
    "GeoProjectionData",
    "GeoRange",
    "GeoRangePadding",
    "GeoRegionValuePlot",
    "GeoResolution",
    "GeoScaleBar",
    "GeoServer",
    "GeoSmoothHistogram",
    "GeoStreamPlot",
    "GeoStyling",
    "GeoStylingImageFunction",
    "GeoVariant",
    "GeoVector",
    "GeoVectorENU",
    "GeoVectorPlot",
    "GeoVectorXYZ",
    "GeoVisibleRegion",
    "GeoVisibleRegionBoundary",
    "GeoWithinQ",
    "GeoZoomLevel",
    "GestureHandler",
    "GestureHandlerTag",
    "Get",
    "GetContext",
    "GetEnvironment",
    "GetFileName",
    "GetLinebreakInformationPacket",
    "GibbsPointProcess",
    "Glaisher",
    "GlobalClusteringCoefficient",
    "GlobalPreferences",
    "GlobalSession",
    "Glow",
    "GoldenAngle",
    "GoldenRatio",
    "GompertzMakehamDistribution",
    "GoochShading",
    "GoodmanKruskalGamma",
    "GoodmanKruskalGammaTest",
    "Goto",
    "GouraudShading",
    "Grad",
    "Gradient",
    "GradientFilter",
    "GradientFittedMesh",
    "GradientOrientationFilter",
    "GrammarApply",
    "GrammarRules",
    "GrammarToken",
    "Graph",
    "Graph3D",
    "GraphAssortativity",
    "GraphAutomorphismGroup",
    "GraphCenter",
    "GraphComplement",
    "GraphData",
    "GraphDensity",
    "GraphDiameter",
    "GraphDifference",
    "GraphDisjointUnion",
    "GraphDistance",
    "GraphDistanceMatrix",
    "GraphEmbedding",
    "GraphHighlight",
    "GraphHighlightStyle",
    "GraphHub",
    "Graphics",
    "Graphics3D",
    "Graphics3DBox",
    "Graphics3DBoxOptions",
    "GraphicsArray",
    "GraphicsBaseline",
    "GraphicsBox",
    "GraphicsBoxOptions",
    "GraphicsColor",
    "GraphicsColumn",
    "GraphicsComplex",
    "GraphicsComplex3DBox",
    "GraphicsComplex3DBoxOptions",
    "GraphicsComplexBox",
    "GraphicsComplexBoxOptions",
    "GraphicsContents",
    "GraphicsData",
    "GraphicsGrid",
    "GraphicsGridBox",
    "GraphicsGroup",
    "GraphicsGroup3DBox",
    "GraphicsGroup3DBoxOptions",
    "GraphicsGroupBox",
    "GraphicsGroupBoxOptions",
    "GraphicsGrouping",
    "GraphicsHighlightColor",
    "GraphicsRow",
    "GraphicsSpacing",
    "GraphicsStyle",
    "GraphIntersection",
    "GraphJoin",
    "GraphLayerLabels",
    "GraphLayers",
    "GraphLayerStyle",
    "GraphLayout",
    "GraphLinkEfficiency",
    "GraphPeriphery",
    "GraphPlot",
    "GraphPlot3D",
    "GraphPower",
    "GraphProduct",
    "GraphPropertyDistribution",
    "GraphQ",
    "GraphRadius",
    "GraphReciprocity",
    "GraphRoot",
    "GraphStyle",
    "GraphSum",
    "GraphTree",
    "GraphUnion",
    "Gray",
    "GrayLevel",
    "Greater",
    "GreaterEqual",
    "GreaterEqualLess",
    "GreaterEqualThan",
    "GreaterFullEqual",
    "GreaterGreater",
    "GreaterLess",
    "GreaterSlantEqual",
    "GreaterThan",
    "GreaterTilde",
    "GreekStyle",
    "Green",
    "GreenFunction",
    "Grid",
    "GridBaseline",
    "GridBox",
    "GridBoxAlignment",
    "GridBoxBackground",
    "GridBoxDividers",
    "GridBoxFrame",
    "GridBoxItemSize",
    "GridBoxItemStyle",
    "GridBoxOptions",
    "GridBoxSpacings",
    "GridCreationSettings",
    "GridDefaultElement",
    "GridElementStyleOptions",
    "GridFrame",
    "GridFrameMargins",
    "GridGraph",
    "GridLines",
    "GridLinesStyle",
    "GridVideo",
    "GroebnerBasis",
    "GroupActionBase",
    "GroupBy",
    "GroupCentralizer",
    "GroupElementFromWord",
    "GroupElementPosition",
    "GroupElementQ",
    "GroupElements",
    "GroupElementToWord",
    "GroupGenerators",
    "Groupings",
    "GroupMultiplicationTable",
    "GroupOpenerColor",
    "GroupOpenerInsideFrame",
    "GroupOrbits",
    "GroupOrder",
    "GroupPageBreakWithin",
    "GroupSetwiseStabilizer",
    "GroupStabilizer",
    "GroupStabilizerChain",
    "GroupTogetherGrouping",
    "GroupTogetherNestedGrouping",
    "GrowCutComponents",
    "Gudermannian",
    "GuidedFilter",
    "GumbelDistribution",
    "HaarWavelet",
    "HadamardMatrix",
    "HalfLine",
    "HalfNormalDistribution",
    "HalfPlane",
    "HalfSpace",
    "HalftoneShading",
    "HamiltonianGraphQ",
    "HammingDistance",
    "HammingWindow",
    "HandlerFunctions",
    "HandlerFunctionsKeys",
    "HankelH1",
    "HankelH2",
    "HankelMatrix",
    "HankelTransform",
    "HannPoissonWindow",
    "HannWindow",
    "HaradaNortonGroupHN",
    "HararyGraph",
    "HardcorePointProcess",
    "HarmonicMean",
    "HarmonicMeanFilter",
    "HarmonicNumber",
    "Hash",
    "HatchFilling",
    "HatchShading",
    "Haversine",
    "HazardFunction",
    "Head",
    "HeadCompose",
    "HeaderAlignment",
    "HeaderBackground",
    "HeaderDisplayFunction",
    "HeaderLines",
    "Headers",
    "HeaderSize",
    "HeaderStyle",
    "Heads",
    "HeatFluxValue",
    "HeatInsulationValue",
    "HeatOutflowValue",
    "HeatRadiationValue",
    "HeatSymmetryValue",
    "HeatTemperatureCondition",
    "HeatTransferPDEComponent",
    "HeatTransferValue",
    "HeavisideLambda",
    "HeavisidePi",
    "HeavisideTheta",
    "HeldGroupHe",
    "HeldPart",
    "HelmholtzPDEComponent",
    "HelpBrowserLookup",
    "HelpBrowserNotebook",
    "HelpBrowserSettings",
    "HelpViewerSettings",
    "Here",
    "HermiteDecomposition",
    "HermiteH",
    "Hermitian",
    "HermitianMatrixQ",
    "HessenbergDecomposition",
    "Hessian",
    "HeunB",
    "HeunBPrime",
    "HeunC",
    "HeunCPrime",
    "HeunD",
    "HeunDPrime",
    "HeunG",
    "HeunGPrime",
    "HeunT",
    "HeunTPrime",
    "HexadecimalCharacter",
    "Hexahedron",
    "HexahedronBox",
    "HexahedronBoxOptions",
    "HiddenItems",
    "HiddenMarkovProcess",
    "HiddenSurface",
    "Highlighted",
    "HighlightGraph",
    "HighlightImage",
    "HighlightMesh",
    "HighlightString",
    "HighpassFilter",
    "HigmanSimsGroupHS",
    "HilbertCurve",
    "HilbertFilter",
    "HilbertMatrix",
    "Histogram",
    "Histogram3D",
    "HistogramDistribution",
    "HistogramList",
    "HistogramPointDensity",
    "HistogramTransform",
    "HistogramTransformInterpolation",
    "HistoricalPeriodData",
    "HitMissTransform",
    "HITSCentrality",
    "HjorthDistribution",
    "HodgeDual",
    "HoeffdingD",
    "HoeffdingDTest",
    "Hold",
    "HoldAll",
    "HoldAllComplete",
    "HoldComplete",
    "HoldFirst",
    "HoldForm",
    "HoldPattern",
    "HoldRest",
    "HolidayCalendar",
    "HomeDirectory",
    "HomePage",
    "Horizontal",
    "HorizontalForm",
    "HorizontalGauge",
    "HorizontalScrollPosition",
    "HornerForm",
    "HostLookup",
    "HotellingTSquareDistribution",
    "HoytDistribution",
    "HTMLSave",
    "HTTPErrorResponse",
    "HTTPRedirect",
    "HTTPRequest",
    "HTTPRequestData",
    "HTTPResponse",
    "Hue",
    "HumanGrowthData",
    "HumpDownHump",
    "HumpEqual",
    "HurwitzLerchPhi",
    "HurwitzZeta",
    "HyperbolicDistribution",
    "HypercubeGraph",
    "HyperexponentialDistribution",
    "Hyperfactorial",
    "Hypergeometric0F1",
    "Hypergeometric0F1Regularized",
    "Hypergeometric1F1",
    "Hypergeometric1F1Regularized",
    "Hypergeometric2F1",
    "Hypergeometric2F1Regularized",
    "HypergeometricDistribution",
    "HypergeometricPFQ",
    "HypergeometricPFQRegularized",
    "HypergeometricU",
    "Hyperlink",
    "HyperlinkAction",
    "HyperlinkCreationSettings",
    "Hyperplane",
    "Hyphenation",
    "HyphenationOptions",
    "HypoexponentialDistribution",
    "HypothesisTestData",
    "I",
    "IconData",
    "Iconize",
    "IconizedObject",
    "IconRules",
    "Icosahedron",
    "Identity",
    "IdentityMatrix",
    "If",
    "IfCompiled",
    "IgnoreCase",
    "IgnoreDiacritics",
    "IgnoreIsotopes",
    "IgnorePunctuation",
    "IgnoreSpellCheck",
    "IgnoreStereochemistry",
    "IgnoringInactive",
    "Im",
    "Image",
    "Image3D",
    "Image3DProjection",
    "Image3DSlices",
    "ImageAccumulate",
    "ImageAdd",
    "ImageAdjust",
    "ImageAlign",
    "ImageApply",
    "ImageApplyIndexed",
    "ImageAspectRatio",
    "ImageAssemble",
    "ImageAugmentationLayer",
    "ImageBoundingBoxes",
    "ImageCache",
    "ImageCacheValid",
    "ImageCapture",
    "ImageCaptureFunction",
    "ImageCases",
    "ImageChannels",
    "ImageClip",
    "ImageCollage",
    "ImageColorSpace",
    "ImageCompose",
    "ImageContainsQ",
    "ImageContents",
    "ImageConvolve",
    "ImageCooccurrence",
    "ImageCorners",
    "ImageCorrelate",
    "ImageCorrespondingPoints",
    "ImageCrop",
    "ImageData",
    "ImageDeconvolve",
    "ImageDemosaic",
    "ImageDifference",
    "ImageDimensions",
    "ImageDisplacements",
    "ImageDistance",
    "ImageEditMode",
    "ImageEffect",
    "ImageExposureCombine",
    "ImageFeatureTrack",
    "ImageFileApply",
    "ImageFileFilter",
    "ImageFileScan",
    "ImageFilter",
    "ImageFocusCombine",
    "ImageForestingComponents",
    "ImageFormattingWidth",
    "ImageForwardTransformation",
    "ImageGraphics",
    "ImageHistogram",
    "ImageIdentify",
    "ImageInstanceQ",
    "ImageKeypoints",
    "ImageLabels",
    "ImageLegends",
    "ImageLevels",
    "ImageLines",
    "ImageMargins",
    "ImageMarker",
    "ImageMarkers",
    "ImageMeasurements",
    "ImageMesh",
    "ImageMultiply",
    "ImageOffset",
    "ImagePad",
    "ImagePadding",
    "ImagePartition",
    "ImagePeriodogram",
    "ImagePerspectiveTransformation",
    "ImagePosition",
    "ImagePreviewFunction",
    "ImagePyramid",
    "ImagePyramidApply",
    "ImageQ",
    "ImageRangeCache",
    "ImageRecolor",
    "ImageReflect",
    "ImageRegion",
    "ImageResize",
    "ImageResolution",
    "ImageRestyle",
    "ImageRotate",
    "ImageRotated",
    "ImageSaliencyFilter",
    "ImageScaled",
    "ImageScan",
    "ImageSize",
    "ImageSizeAction",
    "ImageSizeCache",
    "ImageSizeMultipliers",
    "ImageSizeRaw",
    "ImageStitch",
    "ImageSubtract",
    "ImageTake",
    "ImageTransformation",
    "ImageTrim",
    "ImageType",
    "ImageValue",
    "ImageValuePositions",
    "ImageVectorscopePlot",
    "ImageWaveformPlot",
    "ImagingDevice",
    "ImplicitD",
    "ImplicitRegion",
    "Implies",
    "Import",
    "ImportAutoReplacements",
    "ImportByteArray",
    "ImportedObject",
    "ImportOptions",
    "ImportString",
    "ImprovementImportance",
    "In",
    "Inactivate",
    "Inactive",
    "InactiveStyle",
    "IncidenceGraph",
    "IncidenceList",
    "IncidenceMatrix",
    "IncludeAromaticBonds",
    "IncludeConstantBasis",
    "IncludedContexts",
    "IncludeDefinitions",
    "IncludeDirectories",
    "IncludeFileExtension",
    "IncludeGeneratorTasks",
    "IncludeHydrogens",
    "IncludeInflections",
    "IncludeMetaInformation",
    "IncludePods",
    "IncludeQuantities",
    "IncludeRelatedTables",
    "IncludeSingularSolutions",
    "IncludeSingularTerm",
    "IncludeWindowTimes",
    "Increment",
    "IndefiniteMatrixQ",
    "Indent",
    "IndentingNewlineSpacings",
    "IndentMaxFraction",
    "IndependenceTest",
    "IndependentEdgeSetQ",
    "IndependentPhysicalQuantity",
    "IndependentUnit",
    "IndependentUnitDimension",
    "IndependentVertexSetQ",
    "Indeterminate",
    "IndeterminateThreshold",
    "IndexCreationOptions",
    "Indexed",
    "IndexEdgeTaggedGraph",
    "IndexGraph",
    "IndexTag",
    "Inequality",
    "InertEvaluate",
    "InertExpression",
    "InexactNumberQ",
    "InexactNumbers",
    "InfiniteFuture",
    "InfiniteLine",
    "InfiniteLineThrough",
    "InfinitePast",
    "InfinitePlane",
    "Infinity",
    "Infix",
    "InflationAdjust",
    "InflationMethod",
    "Information",
    "InformationData",
    "InformationDataGrid",
    "Inherited",
    "InheritScope",
    "InhomogeneousPoissonPointProcess",
    "InhomogeneousPoissonProcess",
    "InitialEvaluationHistory",
    "Initialization",
    "InitializationCell",
    "InitializationCellEvaluation",
    "InitializationCellWarning",
    "InitializationObject",
    "InitializationObjects",
    "InitializationValue",
    "Initialize",
    "InitialSeeding",
    "InlineCounterAssignments",
    "InlineCounterIncrements",
    "InlineRules",
    "Inner",
    "InnerPolygon",
    "InnerPolyhedron",
    "Inpaint",
    "Input",
    "InputAliases",
    "InputAssumptions",
    "InputAutoReplacements",
    "InputField",
    "InputFieldBox",
    "InputFieldBoxOptions",
    "InputForm",
    "InputGrouping",
    "InputNamePacket",
    "InputNotebook",
    "InputPacket",
    "InputPorts",
    "InputSettings",
    "InputStream",
    "InputString",
    "InputStringPacket",
    "InputToBoxFormPacket",
    "Insert",
    "InsertionFunction",
    "InsertionPointObject",
    "InsertLinebreaks",
    "InsertResults",
    "Inset",
    "Inset3DBox",
    "Inset3DBoxOptions",
    "InsetBox",
    "InsetBoxOptions",
    "Insphere",
    "Install",
    "InstallService",
    "InstanceNormalizationLayer",
    "InString",
    "Integer",
    "IntegerDigits",
    "IntegerExponent",
    "IntegerLength",
    "IntegerName",
    "IntegerPart",
    "IntegerPartitions",
    "IntegerQ",
    "IntegerReverse",
    "Integers",
    "IntegerString",
    "Integral",
    "Integrate",
    "IntegrateChangeVariables",
    "Interactive",
    "InteractiveTradingChart",
    "InterfaceSwitched",
    "Interlaced",
    "Interleaving",
    "InternallyBalancedDecomposition",
    "InterpolatingFunction",
    "InterpolatingPolynomial",
    "Interpolation",
    "InterpolationOrder",
    "InterpolationPoints",
    "InterpolationPrecision",
    "Interpretation",
    "InterpretationBox",
    "InterpretationBoxOptions",
    "InterpretationFunction",
    "Interpreter",
    "InterpretTemplate",
    "InterquartileRange",
    "Interrupt",
    "InterruptSettings",
    "IntersectedEntityClass",
    "IntersectingQ",
    "Intersection",
    "Interval",
    "IntervalIntersection",
    "IntervalMarkers",
    "IntervalMarkersStyle",
    "IntervalMemberQ",
    "IntervalSlider",
    "IntervalUnion",
    "Into",
    "Inverse",
    "InverseBetaRegularized",
    "InverseBilateralLaplaceTransform",
    "InverseBilateralZTransform",
    "InverseCDF",
    "InverseChiSquareDistribution",
    "InverseContinuousWaveletTransform",
    "InverseDistanceTransform",
    "InverseEllipticNomeQ",
    "InverseErf",
    "InverseErfc",
    "InverseFourier",
    "InverseFourierCosTransform",
    "InverseFourierSequenceTransform",
    "InverseFourierSinTransform",
    "InverseFourierTransform",
    "InverseFunction",
    "InverseFunctions",
    "InverseGammaDistribution",
    "InverseGammaRegularized",
    "InverseGaussianDistribution",
    "InverseGudermannian",
    "InverseHankelTransform",
    "InverseHaversine",
    "InverseImagePyramid",
    "InverseJacobiCD",
    "InverseJacobiCN",
    "InverseJacobiCS",
    "InverseJacobiDC",
    "InverseJacobiDN",
    "InverseJacobiDS",
    "InverseJacobiNC",
    "InverseJacobiND",
    "InverseJacobiNS",
    "InverseJacobiSC",
    "InverseJacobiSD",
    "InverseJacobiSN",
    "InverseLaplaceTransform",
    "InverseMellinTransform",
    "InversePermutation",
    "InverseRadon",
    "InverseRadonTransform",
    "InverseSeries",
    "InverseShortTimeFourier",
    "InverseSpectrogram",
    "InverseSurvivalFunction",
    "InverseTransformedRegion",
    "InverseWaveletTransform",
    "InverseWeierstrassP",
    "InverseWishartMatrixDistribution",
    "InverseZTransform",
    "Invisible",
    "InvisibleApplication",
    "InvisibleTimes",
    "IPAddress",
    "IrreduciblePolynomialQ",
    "IslandData",
    "IsolatingInterval",
    "IsomorphicGraphQ",
    "IsomorphicSubgraphQ",
    "IsotopeData",
    "Italic",
    "Item",
    "ItemAspectRatio",
    "ItemBox",
    "ItemBoxOptions",
    "ItemDisplayFunction",
    "ItemSize",
    "ItemStyle",
    "ItoProcess",
    "JaccardDissimilarity",
    "JacobiAmplitude",
    "Jacobian",
    "JacobiCD",
    "JacobiCN",
    "JacobiCS",
    "JacobiDC",
    "JacobiDN",
    "JacobiDS",
    "JacobiEpsilon",
    "JacobiNC",
    "JacobiND",
    "JacobiNS",
    "JacobiP",
    "JacobiSC",
    "JacobiSD",
    "JacobiSN",
    "JacobiSymbol",
    "JacobiZeta",
    "JacobiZN",
    "JankoGroupJ1",
    "JankoGroupJ2",
    "JankoGroupJ3",
    "JankoGroupJ4",
    "JarqueBeraALMTest",
    "JohnsonDistribution",
    "Join",
    "JoinAcross",
    "Joined",
    "JoinedCurve",
    "JoinedCurveBox",
    "JoinedCurveBoxOptions",
    "JoinForm",
    "JordanDecomposition",
    "JordanModelDecomposition",
    "JulianDate",
    "JuliaSetBoettcher",
    "JuliaSetIterationCount",
    "JuliaSetPlot",
    "JuliaSetPoints",
    "K",
    "KagiChart",
    "KaiserBesselWindow",
    "KaiserWindow",
    "KalmanEstimator",
    "KalmanFilter",
    "KarhunenLoeveDecomposition",
    "KaryTree",
    "KatzCentrality",
    "KCoreComponents",
    "KDistribution",
    "KEdgeConnectedComponents",
    "KEdgeConnectedGraphQ",
    "KeepExistingVersion",
    "KelvinBei",
    "KelvinBer",
    "KelvinKei",
    "KelvinKer",
    "KendallTau",
    "KendallTauTest",
    "KernelConfiguration",
    "KernelExecute",
    "KernelFunction",
    "KernelMixtureDistribution",
    "KernelObject",
    "Kernels",
    "Ket",
    "Key",
    "KeyCollisionFunction",
    "KeyComplement",
    "KeyDrop",
    "KeyDropFrom",
    "KeyExistsQ",
    "KeyFreeQ",
    "KeyIntersection",
    "KeyMap",
    "KeyMemberQ",
    "KeypointStrength",
    "Keys",
    "KeySelect",
    "KeySort",
    "KeySortBy",
    "KeyTake",
    "KeyUnion",
    "KeyValueMap",
    "KeyValuePattern",
    "Khinchin",
    "KillProcess",
    "KirchhoffGraph",
    "KirchhoffMatrix",
    "KleinInvariantJ",
    "KnapsackSolve",
    "KnightTourGraph",
    "KnotData",
    "KnownUnitQ",
    "KochCurve",
    "KolmogorovSmirnovTest",
    "KroneckerDelta",
    "KroneckerModelDecomposition",
    "KroneckerProduct",
    "KroneckerSymbol",
    "KuiperTest",
    "KumaraswamyDistribution",
    "Kurtosis",
    "KuwaharaFilter",
    "KVertexConnectedComponents",
    "KVertexConnectedGraphQ",
    "LABColor",
    "Label",
    "Labeled",
    "LabeledSlider",
    "LabelingFunction",
    "LabelingSize",
    "LabelStyle",
    "LabelVisibility",
    "LaguerreL",
    "LakeData",
    "LambdaComponents",
    "LambertW",
    "LameC",
    "LameCPrime",
    "LameEigenvalueA",
    "LameEigenvalueB",
    "LameS",
    "LameSPrime",
    "LaminaData",
    "LanczosWindow",
    "LandauDistribution",
    "Language",
    "LanguageCategory",
    "LanguageData",
    "LanguageIdentify",
    "LanguageOptions",
    "LaplaceDistribution",
    "LaplaceTransform",
    "Laplacian",
    "LaplacianFilter",
    "LaplacianGaussianFilter",
    "LaplacianPDETerm",
    "Large",
    "Larger",
    "Last",
    "Latitude",
    "LatitudeLongitude",
    "LatticeData",
    "LatticeReduce",
    "Launch",
    "LaunchKernels",
    "LayeredGraphPlot",
    "LayeredGraphPlot3D",
    "LayerSizeFunction",
    "LayoutInformation",
    "LCHColor",
    "LCM",
    "LeaderSize",
    "LeafCount",
    "LeapVariant",
    "LeapYearQ",
    "LearnDistribution",
    "LearnedDistribution",
    "LearningRate",
    "LearningRateMultipliers",
    "LeastSquares",
    "LeastSquaresFilterKernel",
    "Left",
    "LeftArrow",
    "LeftArrowBar",
    "LeftArrowRightArrow",
    "LeftDownTeeVector",
    "LeftDownVector",
    "LeftDownVectorBar",
    "LeftRightArrow",
    "LeftRightVector",
    "LeftTee",
    "LeftTeeArrow",
    "LeftTeeVector",
    "LeftTriangle",
    "LeftTriangleBar",
    "LeftTriangleEqual",
    "LeftUpDownVector",
    "LeftUpTeeVector",
    "LeftUpVector",
    "LeftUpVectorBar",
    "LeftVector",
    "LeftVectorBar",
    "LegendAppearance",
    "Legended",
    "LegendFunction",
    "LegendLabel",
    "LegendLayout",
    "LegendMargins",
    "LegendMarkers",
    "LegendMarkerSize",
    "LegendreP",
    "LegendreQ",
    "LegendreType",
    "Length",
    "LengthWhile",
    "LerchPhi",
    "Less",
    "LessEqual",
    "LessEqualGreater",
    "LessEqualThan",
    "LessFullEqual",
    "LessGreater",
    "LessLess",
    "LessSlantEqual",
    "LessThan",
    "LessTilde",
    "LetterCharacter",
    "LetterCounts",
    "LetterNumber",
    "LetterQ",
    "Level",
    "LeveneTest",
    "LeviCivitaTensor",
    "LevyDistribution",
    "Lexicographic",
    "LexicographicOrder",
    "LexicographicSort",
    "LibraryDataType",
    "LibraryFunction",
    "LibraryFunctionDeclaration",
    "LibraryFunctionError",
    "LibraryFunctionInformation",
    "LibraryFunctionLoad",
    "LibraryFunctionUnload",
    "LibraryLoad",
    "LibraryUnload",
    "LicenseEntitlementObject",
    "LicenseEntitlements",
    "LicenseID",
    "LicensingSettings",
    "LiftingFilterData",
    "LiftingWaveletTransform",
    "LightBlue",
    "LightBrown",
    "LightCyan",
    "Lighter",
    "LightGray",
    "LightGreen",
    "Lighting",
    "LightingAngle",
    "LightMagenta",
    "LightOrange",
    "LightPink",
    "LightPurple",
    "LightRed",
    "LightSources",
    "LightYellow",
    "Likelihood",
    "Limit",
    "LimitsPositioning",
    "LimitsPositioningTokens",
    "LindleyDistribution",
    "Line",
    "Line3DBox",
    "Line3DBoxOptions",
    "LinearFilter",
    "LinearFractionalOptimization",
    "LinearFractionalTransform",
    "LinearGradientFilling",
    "LinearGradientImage",
    "LinearizingTransformationData",
    "LinearLayer",
    "LinearModelFit",
    "LinearOffsetFunction",
    "LinearOptimization",
    "LinearProgramming",
    "LinearRecurrence",
    "LinearSolve",
    "LinearSolveFunction",
    "LineBox",
    "LineBoxOptions",
    "LineBreak",
    "LinebreakAdjustments",
    "LineBreakChart",
    "LinebreakSemicolonWeighting",
    "LineBreakWithin",
    "LineColor",
    "LineGraph",
    "LineIndent",
    "LineIndentMaxFraction",
    "LineIntegralConvolutionPlot",
    "LineIntegralConvolutionScale",
    "LineLegend",
    "LineOpacity",
    "LineSpacing",
    "LineWrapParts",
    "LinkActivate",
    "LinkClose",
    "LinkConnect",
    "LinkConnectedQ",
    "LinkCreate",
    "LinkError",
    "LinkFlush",
    "LinkFunction",
    "LinkHost",
    "LinkInterrupt",
    "LinkLaunch",
    "LinkMode",
    "LinkObject",
    "LinkOpen",
    "LinkOptions",
    "LinkPatterns",
    "LinkProtocol",
    "LinkRankCentrality",
    "LinkRead",
    "LinkReadHeld",
    "LinkReadyQ",
    "Links",
    "LinkService",
    "LinkWrite",
    "LinkWriteHeld",
    "LiouvilleLambda",
    "List",
    "Listable",
    "ListAnimate",
    "ListContourPlot",
    "ListContourPlot3D",
    "ListConvolve",
    "ListCorrelate",
    "ListCurvePathPlot",
    "ListDeconvolve",
    "ListDensityPlot",
    "ListDensityPlot3D",
    "Listen",
    "ListFormat",
    "ListFourierSequenceTransform",
    "ListInterpolation",
    "ListLineIntegralConvolutionPlot",
    "ListLinePlot",
    "ListLinePlot3D",
    "ListLogLinearPlot",
    "ListLogLogPlot",
    "ListLogPlot",
    "ListPicker",
    "ListPickerBox",
    "ListPickerBoxBackground",
    "ListPickerBoxOptions",
    "ListPlay",
    "ListPlot",
    "ListPlot3D",
    "ListPointPlot3D",
    "ListPolarPlot",
    "ListQ",
    "ListSliceContourPlot3D",
    "ListSliceDensityPlot3D",
    "ListSliceVectorPlot3D",
    "ListStepPlot",
    "ListStreamDensityPlot",
    "ListStreamPlot",
    "ListStreamPlot3D",
    "ListSurfacePlot3D",
    "ListVectorDensityPlot",
    "ListVectorDisplacementPlot",
    "ListVectorDisplacementPlot3D",
    "ListVectorPlot",
    "ListVectorPlot3D",
    "ListZTransform",
    "Literal",
    "LiteralSearch",
    "LiteralType",
    "LoadCompiledComponent",
    "LocalAdaptiveBinarize",
    "LocalCache",
    "LocalClusteringCoefficient",
    "LocalEvaluate",
    "LocalizeDefinitions",
    "LocalizeVariables",
    "LocalObject",
    "LocalObjects",
    "LocalResponseNormalizationLayer",
    "LocalSubmit",
    "LocalSymbol",
    "LocalTime",
    "LocalTimeZone",
    "LocationEquivalenceTest",
    "LocationTest",
    "Locator",
    "LocatorAutoCreate",
    "LocatorBox",
    "LocatorBoxOptions",
    "LocatorCentering",
    "LocatorPane",
    "LocatorPaneBox",
    "LocatorPaneBoxOptions",
    "LocatorRegion",
    "Locked",
    "Log",
    "Log10",
    "Log2",
    "LogBarnesG",
    "LogGamma",
    "LogGammaDistribution",
    "LogicalExpand",
    "LogIntegral",
    "LogisticDistribution",
    "LogisticSigmoid",
    "LogitModelFit",
    "LogLikelihood",
    "LogLinearPlot",
    "LogLogisticDistribution",
    "LogLogPlot",
    "LogMultinormalDistribution",
    "LogNormalDistribution",
    "LogPlot",
    "LogRankTest",
    "LogSeriesDistribution",
    "LongEqual",
    "Longest",
    "LongestCommonSequence",
    "LongestCommonSequencePositions",
    "LongestCommonSubsequence",
    "LongestCommonSubsequencePositions",
    "LongestMatch",
    "LongestOrderedSequence",
    "LongForm",
    "Longitude",
    "LongLeftArrow",
    "LongLeftRightArrow",
    "LongRightArrow",
    "LongShortTermMemoryLayer",
    "Lookup",
    "Loopback",
    "LoopFreeGraphQ",
    "Looping",
    "LossFunction",
    "LowerCaseQ",
    "LowerLeftArrow",
    "LowerRightArrow",
    "LowerTriangularize",
    "LowerTriangularMatrix",
    "LowerTriangularMatrixQ",
    "LowpassFilter",
    "LQEstimatorGains",
    "LQGRegulator",
    "LQOutputRegulatorGains",
    "LQRegulatorGains",
    "LUBackSubstitution",
    "LucasL",
    "LuccioSamiComponents",
    "LUDecomposition",
    "LunarEclipse",
    "LUVColor",
    "LyapunovSolve",
    "LyonsGroupLy",
    "MachineID",
    "MachineName",
    "MachineNumberQ",
    "MachinePrecision",
    "MacintoshSystemPageSetup",
    "Magenta",
    "Magnification",
    "Magnify",
    "MailAddressValidation",
    "MailExecute",
    "MailFolder",
    "MailItem",
    "MailReceiverFunction",
    "MailResponseFunction",
    "MailSearch",
    "MailServerConnect",
    "MailServerConnection",
    "MailSettings",
    "MainSolve",
    "MaintainDynamicCaches",
    "Majority",
    "MakeBoxes",
    "MakeExpression",
    "MakeRules",
    "ManagedLibraryExpressionID",
    "ManagedLibraryExpressionQ",
    "MandelbrotSetBoettcher",
    "MandelbrotSetDistance",
    "MandelbrotSetIterationCount",
    "MandelbrotSetMemberQ",
    "MandelbrotSetPlot",
    "MangoldtLambda",
    "ManhattanDistance",
    "Manipulate",
    "Manipulator",
    "MannedSpaceMissionData",
    "MannWhitneyTest",
    "MantissaExponent",
    "Manual",
    "Map",
    "MapAll",
    "MapApply",
    "MapAt",
    "MapIndexed",
    "MAProcess",
    "MapThread",
    "MarchenkoPasturDistribution",
    "MarcumQ",
    "MardiaCombinedTest",
    "MardiaKurtosisTest",
    "MardiaSkewnessTest",
    "MarginalDistribution",
    "MarkovProcessProperties",
    "Masking",
    "MassConcentrationCondition",
    "MassFluxValue",
    "MassImpermeableBoundaryValue",
    "MassOutflowValue",
    "MassSymmetryValue",
    "MassTransferValue",
    "MassTransportPDEComponent",
    "MatchingDissimilarity",
    "MatchLocalNameQ",
    "MatchLocalNames",
    "MatchQ",
    "Material",
    "MaterialShading",
    "MaternPointProcess",
    "MathematicalFunctionData",
    "MathematicaNotation",
    "MathieuC",
    "MathieuCharacteristicA",
    "MathieuCharacteristicB",
    "MathieuCharacteristicExponent",
    "MathieuCPrime",
    "MathieuGroupM11",
    "MathieuGroupM12",
    "MathieuGroupM22",
    "MathieuGroupM23",
    "MathieuGroupM24",
    "MathieuS",
    "MathieuSPrime",
    "MathMLForm",
    "MathMLText",
    "Matrices",
    "MatrixExp",
    "MatrixForm",
    "MatrixFunction",
    "MatrixLog",
    "MatrixNormalDistribution",
    "MatrixPlot",
    "MatrixPower",
    "MatrixPropertyDistribution",
    "MatrixQ",
    "MatrixRank",
    "MatrixTDistribution",
    "Max",
    "MaxBend",
    "MaxCellMeasure",
    "MaxColorDistance",
    "MaxDate",
    "MaxDetect",
    "MaxDisplayedChildren",
    "MaxDuration",
    "MaxExtraBandwidths",
    "MaxExtraConditions",
    "MaxFeatureDisplacement",
    "MaxFeatures",
    "MaxFilter",
    "MaximalBy",
    "Maximize",
    "MaxItems",
    "MaxIterations",
    "MaxLimit",
    "MaxMemoryUsed",
    "MaxMixtureKernels",
    "MaxOverlapFraction",
    "MaxPlotPoints",
    "MaxPoints",
    "MaxRecursion",
    "MaxStableDistribution",
    "MaxStepFraction",
    "MaxSteps",
    "MaxStepSize",
    "MaxTrainingRounds",
    "MaxValue",
    "MaxwellDistribution",
    "MaxWordGap",
    "McLaughlinGroupMcL",
    "Mean",
    "MeanAbsoluteLossLayer",
    "MeanAround",
    "MeanClusteringCoefficient",
    "MeanDegreeConnectivity",
    "MeanDeviation",
    "MeanFilter",
    "MeanGraphDistance",
    "MeanNeighborDegree",
    "MeanPointDensity",
    "MeanShift",
    "MeanShiftFilter",
    "MeanSquaredLossLayer",
    "Median",
    "MedianDeviation",
    "MedianFilter",
    "MedicalTestData",
    "Medium",
    "MeijerG",
    "MeijerGReduce",
    "MeixnerDistribution",
    "MellinConvolve",
    "MellinTransform",
    "MemberQ",
    "MemoryAvailable",
    "MemoryConstrained",
    "MemoryConstraint",
    "MemoryInUse",
    "MengerMesh",
    "Menu",
    "MenuAppearance",
    "MenuCommandKey",
    "MenuEvaluator",
    "MenuItem",
    "MenuList",
    "MenuPacket",
    "MenuSortingValue",
    "MenuStyle",
    "MenuView",
    "Merge",
    "MergeDifferences",
    "MergingFunction",
    "MersennePrimeExponent",
    "MersennePrimeExponentQ",
    "Mesh",
    "MeshCellCentroid",
    "MeshCellCount",
    "MeshCellHighlight",
    "MeshCellIndex",
    "MeshCellLabel",
    "MeshCellMarker",
    "MeshCellMeasure",
    "MeshCellQuality",
    "MeshCells",
    "MeshCellShapeFunction",
    "MeshCellStyle",
    "MeshConnectivityGraph",
    "MeshCoordinates",
    "MeshFunctions",
    "MeshPrimitives",
    "MeshQualityGoal",
    "MeshRange",
    "MeshRefinementFunction",
    "MeshRegion",
    "MeshRegionQ",
    "MeshShading",
    "MeshStyle",
    "Message",
    "MessageDialog",
    "MessageList",
    "MessageName",
    "MessageObject",
    "MessageOptions",
    "MessagePacket",
    "Messages",
    "MessagesNotebook",
    "MetaCharacters",
    "MetaInformation",
    "MeteorShowerData",
    "Method",
    "MethodOptions",
    "MexicanHatWavelet",
    "MeyerWavelet",
    "Midpoint",
    "MIMETypeToFormatList",
    "Min",
    "MinColorDistance",
    "MinDate",
    "MinDetect",
    "MineralData",
    "MinFilter",
    "MinimalBy",
    "MinimalPolynomial",
    "MinimalStateSpaceModel",
    "Minimize",
    "MinimumTimeIncrement",
    "MinIntervalSize",
    "MinkowskiQuestionMark",
    "MinLimit",
    "MinMax",
    "MinorPlanetData",
    "Minors",
    "MinPointSeparation",
    "MinRecursion",
    "MinSize",
    "MinStableDistribution",
    "Minus",
    "MinusPlus",
    "MinValue",
    "Missing",
    "MissingBehavior",
    "MissingDataMethod",
    "MissingDataRules",
    "MissingQ",
    "MissingString",
    "MissingStyle",
    "MissingValuePattern",
    "MissingValueSynthesis",
    "MittagLefflerE",
    "MixedFractionParts",
    "MixedGraphQ",
    "MixedMagnitude",
    "MixedRadix",
    "MixedRadixQuantity",
    "MixedUnit",
    "MixtureDistribution",
    "Mod",
    "Modal",
    "Mode",
    "ModelPredictiveController",
    "Modular",
    "ModularInverse",
    "ModularLambda",
    "Module",
    "Modulus",
    "MoebiusMu",
    "Molecule",
    "MoleculeAlign",
    "MoleculeContainsQ",
    "MoleculeDraw",
    "MoleculeEquivalentQ",
    "MoleculeFreeQ",
    "MoleculeGraph",
    "MoleculeMatchQ",
    "MoleculeMaximumCommonSubstructure",
    "MoleculeModify",
    "MoleculeName",
    "MoleculePattern",
    "MoleculePlot",
    "MoleculePlot3D",
    "MoleculeProperty",
    "MoleculeQ",
    "MoleculeRecognize",
    "MoleculeSubstructureCount",
    "MoleculeValue",
    "Moment",
    "MomentConvert",
    "MomentEvaluate",
    "MomentGeneratingFunction",
    "MomentOfInertia",
    "Monday",
    "Monitor",
    "MonomialList",
    "MonomialOrder",
    "MonsterGroupM",
    "MoonPhase",
    "MoonPosition",
    "MorletWavelet",
    "MorphologicalBinarize",
    "MorphologicalBranchPoints",
    "MorphologicalComponents",
    "MorphologicalEulerNumber",
    "MorphologicalGraph",
    "MorphologicalPerimeter",
    "MorphologicalTransform",
    "MortalityData",
    "Most",
    "MountainData",
    "MouseAnnotation",
    "MouseAppearance",
    "MouseAppearanceTag",
    "MouseButtons",
    "Mouseover",
    "MousePointerNote",
    "MousePosition",
    "MovieData",
    "MovingAverage",
    "MovingMap",
    "MovingMedian",
    "MoyalDistribution",
    "MultiaxisArrangement",
    "Multicolumn",
    "MultiedgeStyle",
    "MultigraphQ",
    "MultilaunchWarning",
    "MultiLetterItalics",
    "MultiLetterStyle",
    "MultilineFunction",
    "Multinomial",
    "MultinomialDistribution",
    "MultinormalDistribution",
    "MultiplicativeOrder",
    "Multiplicity",
    "MultiplySides",
    "MultiscriptBoxOptions",
    "Multiselection",
    "MultivariateHypergeometricDistribution",
    "MultivariatePoissonDistribution",
    "MultivariateTDistribution",
    "N",
    "NakagamiDistribution",
    "NameQ",
    "Names",
    "NamespaceBox",
    "NamespaceBoxOptions",
    "Nand",
    "NArgMax",
    "NArgMin",
    "NBernoulliB",
    "NBodySimulation",
    "NBodySimulationData",
    "NCache",
    "NCaputoD",
    "NDEigensystem",
    "NDEigenvalues",
    "NDSolve",
    "NDSolveValue",
    "Nearest",
    "NearestFunction",
    "NearestMeshCells",
    "NearestNeighborG",
    "NearestNeighborGraph",
    "NearestTo",
    "NebulaData",
    "NeedlemanWunschSimilarity",
    "Needs",
    "Negative",
    "NegativeBinomialDistribution",
    "NegativeDefiniteMatrixQ",
    "NegativeIntegers",
    "NegativelyOrientedPoints",
    "NegativeMultinomialDistribution",
    "NegativeRationals",
    "NegativeReals",
    "NegativeSemidefiniteMatrixQ",
    "NeighborhoodData",
    "NeighborhoodGraph",
    "Nest",
    "NestedGreaterGreater",
    "NestedLessLess",
    "NestedScriptRules",
    "NestGraph",
    "NestList",
    "NestTree",
    "NestWhile",
    "NestWhileList",
    "NetAppend",
    "NetArray",
    "NetArrayLayer",
    "NetBidirectionalOperator",
    "NetChain",
    "NetDecoder",
    "NetDelete",
    "NetDrop",
    "NetEncoder",
    "NetEvaluationMode",
    "NetExternalObject",
    "NetExtract",
    "NetFlatten",
    "NetFoldOperator",
    "NetGANOperator",
    "NetGraph",
    "NetInformation",
    "NetInitialize",
    "NetInsert",
    "NetInsertSharedArrays",
    "NetJoin",
    "NetMapOperator",
    "NetMapThreadOperator",
    "NetMeasurements",
    "NetModel",
    "NetNestOperator",
    "NetPairEmbeddingOperator",
    "NetPort",
    "NetPortGradient",
    "NetPrepend",
    "NetRename",
    "NetReplace",
    "NetReplacePart",
    "NetSharedArray",
    "NetStateObject",
    "NetTake",
    "NetTrain",
    "NetTrainResultsObject",
    "NetUnfold",
    "NetworkPacketCapture",
    "NetworkPacketRecording",
    "NetworkPacketRecordingDuring",
    "NetworkPacketTrace",
    "NeumannValue",
    "NevilleThetaC",
    "NevilleThetaD",
    "NevilleThetaN",
    "NevilleThetaS",
    "NewPrimitiveStyle",
    "NExpectation",
    "Next",
    "NextCell",
    "NextDate",
    "NextPrime",
    "NextScheduledTaskTime",
    "NeymanScottPointProcess",
    "NFractionalD",
    "NHoldAll",
    "NHoldFirst",
    "NHoldRest",
    "NicholsGridLines",
    "NicholsPlot",
    "NightHemisphere",
    "NIntegrate",
    "NMaximize",
    "NMaxValue",
    "NMinimize",
    "NMinValue",
    "NominalScale",
    "NominalVariables",
    "NonAssociative",
    "NoncentralBetaDistribution",
    "NoncentralChiSquareDistribution",
    "NoncentralFRatioDistribution",
    "NoncentralStudentTDistribution",
    "NonCommutativeMultiply",
    "NonConstants",
    "NondimensionalizationTransform",
    "None",
    "NoneTrue",
    "NonlinearModelFit",
    "NonlinearStateSpaceModel",
    "NonlocalMeansFilter",
    "NonNegative",
    "NonNegativeIntegers",
    "NonNegativeRationals",
    "NonNegativeReals",
    "NonPositive",
    "NonPositiveIntegers",
    "NonPositiveRationals",
    "NonPositiveReals",
    "Nor",
    "NorlundB",
    "Norm",
    "Normal",
    "NormalDistribution",
    "NormalGrouping",
    "NormalizationLayer",
    "Normalize",
    "Normalized",
    "NormalizedSquaredEuclideanDistance",
    "NormalMatrixQ",
    "NormalsFunction",
    "NormFunction",
    "Not",
    "NotCongruent",
    "NotCupCap",
    "NotDoubleVerticalBar",
    "Notebook",
    "NotebookApply",
    "NotebookAutoSave",
    "NotebookBrowseDirectory",
    "NotebookClose",
    "NotebookConvertSettings",
    "NotebookCreate",
    "NotebookDefault",
    "NotebookDelete",
    "NotebookDirectory",
    "NotebookDynamicExpression",
    "NotebookEvaluate",
    "NotebookEventActions",
    "NotebookFileName",
    "NotebookFind",
    "NotebookGet",
    "NotebookImport",
    "NotebookInformation",
    "NotebookInterfaceObject",
    "NotebookLocate",
    "NotebookObject",
    "NotebookOpen",
    "NotebookPath",
    "NotebookPrint",
    "NotebookPut",
    "NotebookRead",
    "Notebooks",
    "NotebookSave",
    "NotebookSelection",
    "NotebooksMenu",
    "NotebookTemplate",
    "NotebookWrite",
    "NotElement",
    "NotEqualTilde",
    "NotExists",
    "NotGreater",
    "NotGreaterEqual",
    "NotGreaterFullEqual",
    "NotGreaterGreater",
    "NotGreaterLess",
    "NotGreaterSlantEqual",
    "NotGreaterTilde",
    "Nothing",
    "NotHumpDownHump",
    "NotHumpEqual",
    "NotificationFunction",
    "NotLeftTriangle",
    "NotLeftTriangleBar",
    "NotLeftTriangleEqual",
    "NotLess",
    "NotLessEqual",
    "NotLessFullEqual",
    "NotLessGreater",
    "NotLessLess",
    "NotLessSlantEqual",
    "NotLessTilde",
    "NotNestedGreaterGreater",
    "NotNestedLessLess",
    "NotPrecedes",
    "NotPrecedesEqual",
    "NotPrecedesSlantEqual",
    "NotPrecedesTilde",
    "NotReverseElement",
    "NotRightTriangle",
    "NotRightTriangleBar",
    "NotRightTriangleEqual",
    "NotSquareSubset",
    "NotSquareSubsetEqual",
    "NotSquareSuperset",
    "NotSquareSupersetEqual",
    "NotSubset",
    "NotSubsetEqual",
    "NotSucceeds",
    "NotSucceedsEqual",
    "NotSucceedsSlantEqual",
    "NotSucceedsTilde",
    "NotSuperset",
    "NotSupersetEqual",
    "NotTilde",
    "NotTildeEqual",
    "NotTildeFullEqual",
    "NotTildeTilde",
    "NotVerticalBar",
    "Now",
    "NoWhitespace",
    "NProbability",
    "NProduct",
    "NProductFactors",
    "NRoots",
    "NSolve",
    "NSolveValues",
    "NSum",
    "NSumTerms",
    "NuclearExplosionData",
    "NuclearReactorData",
    "Null",
    "NullRecords",
    "NullSpace",
    "NullWords",
    "Number",
    "NumberCompose",
    "NumberDecompose",
    "NumberDigit",
    "NumberExpand",
    "NumberFieldClassNumber",
    "NumberFieldDiscriminant",
    "NumberFieldFundamentalUnits",
    "NumberFieldIntegralBasis",
    "NumberFieldNormRepresentatives",
    "NumberFieldRegulator",
    "NumberFieldRootsOfUnity",
    "NumberFieldSignature",
    "NumberForm",
    "NumberFormat",
    "NumberLinePlot",
    "NumberMarks",
    "NumberMultiplier",
    "NumberPadding",
    "NumberPoint",
    "NumberQ",
    "NumberSeparator",
    "NumberSigns",
    "NumberString",
    "Numerator",
    "NumeratorDenominator",
    "NumericalOrder",
    "NumericalSort",
    "NumericArray",
    "NumericArrayQ",
    "NumericArrayType",
    "NumericFunction",
    "NumericQ",
    "NuttallWindow",
    "NValues",
    "NyquistGridLines",
    "NyquistPlot",
    "O",
    "ObjectExistsQ",
    "ObservabilityGramian",
    "ObservabilityMatrix",
    "ObservableDecomposition",
    "ObservableModelQ",
    "OceanData",
    "Octahedron",
    "OddQ",
    "Off",
    "Offset",
    "OLEData",
    "On",
    "ONanGroupON",
    "Once",
    "OneIdentity",
    "Opacity",
    "OpacityFunction",
    "OpacityFunctionScaling",
    "Open",
    "OpenAppend",
    "Opener",
    "OpenerBox",
    "OpenerBoxOptions",
    "OpenerView",
    "OpenFunctionInspectorPacket",
    "Opening",
    "OpenRead",
    "OpenSpecialOptions",
    "OpenTemporary",
    "OpenWrite",
    "Operate",
    "OperatingSystem",
    "OperatorApplied",
    "OptimumFlowData",
    "Optional",
    "OptionalElement",
    "OptionInspectorSettings",
    "OptionQ",
    "Options",
    "OptionsPacket",
    "OptionsPattern",
    "OptionValue",
    "OptionValueBox",
    "OptionValueBoxOptions",
    "Or",
    "Orange",
    "Order",
    "OrderDistribution",
    "OrderedQ",
    "Ordering",
    "OrderingBy",
    "OrderingLayer",
    "Orderless",
    "OrderlessPatternSequence",
    "OrdinalScale",
    "OrnsteinUhlenbeckProcess",
    "Orthogonalize",
    "OrthogonalMatrixQ",
    "Out",
    "Outer",
    "OuterPolygon",
    "OuterPolyhedron",
    "OutputAutoOverwrite",
    "OutputControllabilityMatrix",
    "OutputControllableModelQ",
    "OutputForm",
    "OutputFormData",
    "OutputGrouping",
    "OutputMathEditExpression",
    "OutputNamePacket",
    "OutputPorts",
    "OutputResponse",
    "OutputSizeLimit",
    "OutputStream",
    "Over",
    "OverBar",
    "OverDot",
    "Overflow",
    "OverHat",
    "Overlaps",
    "Overlay",
    "OverlayBox",
    "OverlayBoxOptions",
    "OverlayVideo",
    "Overscript",
    "OverscriptBox",
    "OverscriptBoxOptions",
    "OverTilde",
    "OverVector",
    "OverwriteTarget",
    "OwenT",
    "OwnValues",
    "Package",
    "PackingMethod",
    "PackPaclet",
    "PacletDataRebuild",
    "PacletDirectoryAdd",
    "PacletDirectoryLoad",
    "PacletDirectoryRemove",
    "PacletDirectoryUnload",
    "PacletDisable",
    "PacletEnable",
    "PacletFind",
    "PacletFindRemote",
    "PacletInformation",
    "PacletInstall",
    "PacletInstallSubmit",
    "PacletNewerQ",
    "PacletObject",
    "PacletObjectQ",
    "PacletSite",
    "PacletSiteObject",
    "PacletSiteRegister",
    "PacletSites",
    "PacletSiteUnregister",
    "PacletSiteUpdate",
    "PacletSymbol",
    "PacletUninstall",
    "PacletUpdate",
    "PaddedForm",
    "Padding",
    "PaddingLayer",
    "PaddingSize",
    "PadeApproximant",
    "PadLeft",
    "PadRight",
    "PageBreakAbove",
    "PageBreakBelow",
    "PageBreakWithin",
    "PageFooterLines",
    "PageFooters",
    "PageHeaderLines",
    "PageHeaders",
    "PageHeight",
    "PageRankCentrality",
    "PageTheme",
    "PageWidth",
    "Pagination",
    "PairCorrelationG",
    "PairedBarChart",
    "PairedHistogram",
    "PairedSmoothHistogram",
    "PairedTTest",
    "PairedZTest",
    "PaletteNotebook",
    "PalettePath",
    "PalettesMenuSettings",
    "PalindromeQ",
    "Pane",
    "PaneBox",
    "PaneBoxOptions",
    "Panel",
    "PanelBox",
    "PanelBoxOptions",
    "Paneled",
    "PaneSelector",
    "PaneSelectorBox",
    "PaneSelectorBoxOptions",
    "PaperWidth",
    "ParabolicCylinderD",
    "ParagraphIndent",
    "ParagraphSpacing",
    "ParallelArray",
    "ParallelAxisPlot",
    "ParallelCombine",
    "ParallelDo",
    "Parallelepiped",
    "ParallelEvaluate",
    "Parallelization",
    "Parallelize",
    "ParallelKernels",
    "ParallelMap",
    "ParallelNeeds",
    "Parallelogram",
    "ParallelProduct",
    "ParallelSubmit",
    "ParallelSum",
    "ParallelTable",
    "ParallelTry",
    "Parameter",
    "ParameterEstimator",
    "ParameterMixtureDistribution",
    "ParameterVariables",
    "ParametricConvexOptimization",
    "ParametricFunction",
    "ParametricNDSolve",
    "ParametricNDSolveValue",
    "ParametricPlot",
    "ParametricPlot3D",
    "ParametricRampLayer",
    "ParametricRegion",
    "ParentBox",
    "ParentCell",
    "ParentConnect",
    "ParentDirectory",
    "ParentEdgeLabel",
    "ParentEdgeLabelFunction",
    "ParentEdgeLabelStyle",
    "ParentEdgeShapeFunction",
    "ParentEdgeStyle",
    "ParentEdgeStyleFunction",
    "ParentForm",
    "Parenthesize",
    "ParentList",
    "ParentNotebook",
    "ParetoDistribution",
    "ParetoPickandsDistribution",
    "ParkData",
    "Part",
    "PartBehavior",
    "PartialCorrelationFunction",
    "PartialD",
    "ParticleAcceleratorData",
    "ParticleData",
    "Partition",
    "PartitionGranularity",
    "PartitionsP",
    "PartitionsQ",
    "PartLayer",
    "PartOfSpeech",
    "PartProtection",
    "ParzenWindow",
    "PascalDistribution",
    "PassEventsDown",
    "PassEventsUp",
    "Paste",
    "PasteAutoQuoteCharacters",
    "PasteBoxFormInlineCells",
    "PasteButton",
    "Path",
    "PathGraph",
    "PathGraphQ",
    "Pattern",
    "PatternFilling",
    "PatternReaction",
    "PatternSequence",
    "PatternTest",
    "PauliMatrix",
    "PaulWavelet",
    "Pause",
    "PausedTime",
    "PDF",
    "PeakDetect",
    "PeanoCurve",
    "PearsonChiSquareTest",
    "PearsonCorrelationTest",
    "PearsonDistribution",
    "PenttinenPointProcess",
    "PercentForm",
    "PerfectNumber",
    "PerfectNumberQ",
    "PerformanceGoal",
    "Perimeter",
    "PeriodicBoundaryCondition",
    "PeriodicInterpolation",
    "Periodogram",
    "PeriodogramArray",
    "Permanent",
    "Permissions",
    "PermissionsGroup",
    "PermissionsGroupMemberQ",
    "PermissionsGroups",
    "PermissionsKey",
    "PermissionsKeys",
    "PermutationCycles",
    "PermutationCyclesQ",
    "PermutationGroup",
    "PermutationLength",
    "PermutationList",
    "PermutationListQ",
    "PermutationMatrix",
    "PermutationMax",
    "PermutationMin",
    "PermutationOrder",
    "PermutationPower",
    "PermutationProduct",
    "PermutationReplace",
    "Permutations",
    "PermutationSupport",
    "Permute",
    "PeronaMalikFilter",
    "Perpendicular",
    "PerpendicularBisector",
    "PersistenceLocation",
    "PersistenceTime",
    "PersistentObject",
    "PersistentObjects",
    "PersistentSymbol",
    "PersistentValue",
    "PersonData",
    "PERTDistribution",
    "PetersenGraph",
    "PhaseMargins",
    "PhaseRange",
    "PhongShading",
    "PhysicalSystemData",
    "Pi",
    "Pick",
    "PickedElements",
    "PickMode",
    "PIDData",
    "PIDDerivativeFilter",
    "PIDFeedforward",
    "PIDTune",
    "Piecewise",
    "PiecewiseExpand",
    "PieChart",
    "PieChart3D",
    "PillaiTrace",
    "PillaiTraceTest",
    "PingTime",
    "Pink",
    "PitchRecognize",
    "Pivoting",
    "PixelConstrained",
    "PixelValue",
    "PixelValuePositions",
    "Placed",
    "Placeholder",
    "PlaceholderLayer",
    "PlaceholderReplace",
    "Plain",
    "PlanarAngle",
    "PlanarFaceList",
    "PlanarGraph",
    "PlanarGraphQ",
    "PlanckRadiationLaw",
    "PlaneCurveData",
    "PlanetaryMoonData",
    "PlanetData",
    "PlantData",
    "Play",
    "PlaybackSettings",
    "PlayRange",
    "Plot",
    "Plot3D",
    "Plot3Matrix",
    "PlotDivision",
    "PlotJoined",
    "PlotLabel",
    "PlotLabels",
    "PlotLayout",
    "PlotLegends",
    "PlotMarkers",
    "PlotPoints",
    "PlotRange",
    "PlotRangeClipping",
    "PlotRangeClipPlanesStyle",
    "PlotRangePadding",
    "PlotRegion",
    "PlotStyle",
    "PlotTheme",
    "Pluralize",
    "Plus",
    "PlusMinus",
    "Pochhammer",
    "PodStates",
    "PodWidth",
    "Point",
    "Point3DBox",
    "Point3DBoxOptions",
    "PointBox",
    "PointBoxOptions",
    "PointCountDistribution",
    "PointDensity",
    "PointDensityFunction",
    "PointFigureChart",
    "PointLegend",
    "PointLight",
    "PointProcessEstimator",
    "PointProcessFitTest",
    "PointProcessParameterAssumptions",
    "PointProcessParameterQ",
    "PointSize",
    "PointStatisticFunction",
    "PointValuePlot",
    "PoissonConsulDistribution",
    "PoissonDistribution",
    "PoissonPDEComponent",
    "PoissonPointProcess",
    "PoissonProcess",
    "PoissonWindow",
    "PolarAxes",
    "PolarAxesOrigin",
    "PolarGridLines",
    "PolarPlot",
    "PolarTicks",
    "PoleZeroMarkers",
    "PolyaAeppliDistribution",
    "PolyGamma",
    "Polygon",
    "Polygon3DBox",
    "Polygon3DBoxOptions",
    "PolygonalNumber",
    "PolygonAngle",
    "PolygonBox",
    "PolygonBoxOptions",
    "PolygonCoordinates",
    "PolygonDecomposition",
    "PolygonHoleScale",
    "PolygonIntersections",
    "PolygonScale",
    "Polyhedron",
    "PolyhedronAngle",
    "PolyhedronBox",
    "PolyhedronBoxOptions",
    "PolyhedronCoordinates",
    "PolyhedronData",
    "PolyhedronDecomposition",
    "PolyhedronGenus",
    "PolyLog",
    "PolynomialExpressionQ",
    "PolynomialExtendedGCD",
    "PolynomialForm",
    "PolynomialGCD",
    "PolynomialLCM",
    "PolynomialMod",
    "PolynomialQ",
    "PolynomialQuotient",
    "PolynomialQuotientRemainder",
    "PolynomialReduce",
    "PolynomialRemainder",
    "Polynomials",
    "PolynomialSumOfSquaresList",
    "PoolingLayer",
    "PopupMenu",
    "PopupMenuBox",
    "PopupMenuBoxOptions",
    "PopupView",
    "PopupWindow",
    "Position",
    "PositionIndex",
    "PositionLargest",
    "PositionSmallest",
    "Positive",
    "PositiveDefiniteMatrixQ",
    "PositiveIntegers",
    "PositivelyOrientedPoints",
    "PositiveRationals",
    "PositiveReals",
    "PositiveSemidefiniteMatrixQ",
    "PossibleZeroQ",
    "Postfix",
    "PostScript",
    "Power",
    "PowerDistribution",
    "PowerExpand",
    "PowerMod",
    "PowerModList",
    "PowerRange",
    "PowerSpectralDensity",
    "PowersRepresentations",
    "PowerSymmetricPolynomial",
    "Precedence",
    "PrecedenceForm",
    "Precedes",
    "PrecedesEqual",
    "PrecedesSlantEqual",
    "PrecedesTilde",
    "Precision",
    "PrecisionGoal",
    "PreDecrement",
    "Predict",
    "PredictionRoot",
    "PredictorFunction",
    "PredictorInformation",
    "PredictorMeasurements",
    "PredictorMeasurementsObject",
    "PreemptProtect",
    "PreferencesPath",
    "PreferencesSettings",
    "Prefix",
    "PreIncrement",
    "Prepend",
    "PrependLayer",
    "PrependTo",
    "PreprocessingRules",
    "PreserveColor",
    "PreserveImageOptions",
    "Previous",
    "PreviousCell",
    "PreviousDate",
    "PriceGraphDistribution",
    "PrimaryPlaceholder",
    "Prime",
    "PrimeNu",
    "PrimeOmega",
    "PrimePi",
    "PrimePowerQ",
    "PrimeQ",
    "Primes",
    "PrimeZetaP",
    "PrimitivePolynomialQ",
    "PrimitiveRoot",
    "PrimitiveRootList",
    "PrincipalComponents",
    "PrincipalValue",
    "Print",
    "PrintableASCIIQ",
    "PrintAction",
    "PrintForm",
    "PrintingCopies",
    "PrintingOptions",
    "PrintingPageRange",
    "PrintingStartingPageNumber",
    "PrintingStyleEnvironment",
    "Printout3D",
    "Printout3DPreviewer",
    "PrintPrecision",
    "PrintTemporary",
    "Prism",
    "PrismBox",
    "PrismBoxOptions",
    "PrivateCellOptions",
    "PrivateEvaluationOptions",
    "PrivateFontOptions",
    "PrivateFrontEndOptions",
    "PrivateKey",
    "PrivateNotebookOptions",
    "PrivatePaths",
    "Probability",
    "ProbabilityDistribution",
    "ProbabilityPlot",
    "ProbabilityPr",
    "ProbabilityScalePlot",
    "ProbitModelFit",
    "ProcessConnection",
    "ProcessDirectory",
    "ProcessEnvironment",
    "Processes",
    "ProcessEstimator",
    "ProcessInformation",
    "ProcessObject",
    "ProcessParameterAssumptions",
    "ProcessParameterQ",
    "ProcessStateDomain",
    "ProcessStatus",
    "ProcessTimeDomain",
    "Product",
    "ProductDistribution",
    "ProductLog",
    "ProgressIndicator",
    "ProgressIndicatorBox",
    "ProgressIndicatorBoxOptions",
    "ProgressReporting",
    "Projection",
    "Prolog",
    "PromptForm",
    "ProofObject",
    "PropagateAborts",
    "Properties",
    "Property",
    "PropertyList",
    "PropertyValue",
    "Proportion",
    "Proportional",
    "Protect",
    "Protected",
    "ProteinData",
    "Pruning",
    "PseudoInverse",
    "PsychrometricPropertyData",
    "PublicKey",
    "PublisherID",
    "PulsarData",
    "PunctuationCharacter",
    "Purple",
    "Put",
    "PutAppend",
    "Pyramid",
    "PyramidBox",
    "PyramidBoxOptions",
    "QBinomial",
    "QFactorial",
    "QGamma",
    "QHypergeometricPFQ",
    "QnDispersion",
    "QPochhammer",
    "QPolyGamma",
    "QRDecomposition",
    "QuadraticIrrationalQ",
    "QuadraticOptimization",
    "Quantile",
    "QuantilePlot",
    "Quantity",
    "QuantityArray",
    "QuantityDistribution",
    "QuantityForm",
    "QuantityMagnitude",
    "QuantityQ",
    "QuantityUnit",
    "QuantityVariable",
    "QuantityVariableCanonicalUnit",
    "QuantityVariableDimensions",
    "QuantityVariableIdentifier",
    "QuantityVariablePhysicalQuantity",
    "Quartics",
    "QuartileDeviation",
    "Quartiles",
    "QuartileSkewness",
    "Query",
    "QuestionGenerator",
    "QuestionInterface",
    "QuestionObject",
    "QuestionSelector",
    "QueueingNetworkProcess",
    "QueueingProcess",
    "QueueProperties",
    "Quiet",
    "QuietEcho",
    "Quit",
    "Quotient",
    "QuotientRemainder",
    "RadialAxisPlot",
    "RadialGradientFilling",
    "RadialGradientImage",
    "RadialityCentrality",
    "RadicalBox",
    "RadicalBoxOptions",
    "RadioButton",
    "RadioButtonBar",
    "RadioButtonBox",
    "RadioButtonBoxOptions",
    "Radon",
    "RadonTransform",
    "RamanujanTau",
    "RamanujanTauL",
    "RamanujanTauTheta",
    "RamanujanTauZ",
    "Ramp",
    "Random",
    "RandomArrayLayer",
    "RandomChoice",
    "RandomColor",
    "RandomComplex",
    "RandomDate",
    "RandomEntity",
    "RandomFunction",
    "RandomGeneratorState",
    "RandomGeoPosition",
    "RandomGraph",
    "RandomImage",
    "RandomInstance",
    "RandomInteger",
    "RandomPermutation",
    "RandomPoint",
    "RandomPointConfiguration",
    "RandomPolygon",
    "RandomPolyhedron",
    "RandomPrime",
    "RandomReal",
    "RandomSample",
    "RandomSeed",
    "RandomSeeding",
    "RandomTime",
    "RandomTree",
    "RandomVariate",
    "RandomWalkProcess",
    "RandomWord",
    "Range",
    "RangeFilter",
    "RangeSpecification",
    "RankedMax",
    "RankedMin",
    "RarerProbability",
    "Raster",
    "Raster3D",
    "Raster3DBox",
    "Raster3DBoxOptions",
    "RasterArray",
    "RasterBox",
    "RasterBoxOptions",
    "Rasterize",
    "RasterSize",
    "Rational",
    "RationalExpressionQ",
    "RationalFunctions",
    "Rationalize",
    "Rationals",
    "Ratios",
    "RawArray",
    "RawBoxes",
    "RawData",
    "RawMedium",
    "RayleighDistribution",
    "Re",
    "ReactionBalance",
    "ReactionBalancedQ",
    "ReactionPDETerm",
    "Read",
    "ReadByteArray",
    "ReadLine",
    "ReadList",
    "ReadProtected",
    "ReadString",
    "Real",
    "RealAbs",
    "RealBlockDiagonalForm",
    "RealDigits",
    "RealExponent",
    "Reals",
    "RealSign",
    "Reap",
    "RebuildPacletData",
    "RecalibrationFunction",
    "RecognitionPrior",
    "RecognitionThreshold",
    "ReconstructionMesh",
    "Record",
    "RecordLists",
    "RecordSeparators",
    "Rectangle",
    "RectangleBox",
    "RectangleBoxOptions",
    "RectangleChart",
    "RectangleChart3D",
    "RectangularRepeatingElement",
    "RecurrenceFilter",
    "RecurrenceTable",
    "RecurringDigitsForm",
    "Red",
    "Reduce",
    "RefBox",
    "ReferenceLineStyle",
    "ReferenceMarkers",
    "ReferenceMarkerStyle",
    "Refine",
    "ReflectionMatrix",
    "ReflectionTransform",
    "Refresh",
    "RefreshRate",
    "Region",
    "RegionBinarize",
    "RegionBoundary",
    "RegionBoundaryStyle",
    "RegionBounds",
    "RegionCentroid",
    "RegionCongruent",
    "RegionConvert",
    "RegionDifference",
    "RegionDilation",
    "RegionDimension",
    "RegionDisjoint",
    "RegionDistance",
    "RegionDistanceFunction",
    "RegionEmbeddingDimension",
    "RegionEqual",
    "RegionErosion",
    "RegionFillingStyle",
    "RegionFit",
    "RegionFunction",
    "RegionImage",
    "RegionIntersection",
    "RegionMeasure",
    "RegionMember",
    "RegionMemberFunction",
    "RegionMoment",
    "RegionNearest",
    "RegionNearestFunction",
    "RegionPlot",
    "RegionPlot3D",
    "RegionProduct",
    "RegionQ",
    "RegionResize",
    "RegionSimilar",
    "RegionSize",
    "RegionSymmetricDifference",
    "RegionUnion",
    "RegionWithin",
    "RegisterExternalEvaluator",
    "RegularExpression",
    "Regularization",
    "RegularlySampledQ",
    "RegularPolygon",
    "ReIm",
    "ReImLabels",
    "ReImPlot",
    "ReImStyle",
    "Reinstall",
    "RelationalDatabase",
    "RelationGraph",
    "Release",
    "ReleaseHold",
    "ReliabilityDistribution",
    "ReliefImage",
    "ReliefPlot",
    "RemoteAuthorizationCaching",
    "RemoteBatchJobAbort",
    "RemoteBatchJobObject",
    "RemoteBatchJobs",
    "RemoteBatchMapSubmit",
    "RemoteBatchSubmissionEnvironment",
    "RemoteBatchSubmit",
    "RemoteConnect",
    "RemoteConnectionObject",
    "RemoteEvaluate",
    "RemoteFile",
    "RemoteInputFiles",
    "RemoteKernelObject",
    "RemoteProviderSettings",
    "RemoteRun",
    "RemoteRunProcess",
    "RemovalConditions",
    "Remove",
    "RemoveAlphaChannel",
    "RemoveAsynchronousTask",
    "RemoveAudioStream",
    "RemoveBackground",
    "RemoveChannelListener",
    "RemoveChannelSubscribers",
    "Removed",
    "RemoveDiacritics",
    "RemoveInputStreamMethod",
    "RemoveOutputStreamMethod",
    "RemoveProperty",
    "RemoveScheduledTask",
    "RemoveUsers",
    "RemoveVideoStream",
    "RenameDirectory",
    "RenameFile",
    "RenderAll",
    "RenderingOptions",
    "RenewalProcess",
    "RenkoChart",
    "RepairMesh",
    "Repeated",
    "RepeatedNull",
    "RepeatedString",
    "RepeatedTiming",
    "RepeatingElement",
    "Replace",
    "ReplaceAll",
    "ReplaceAt",
    "ReplaceHeldPart",
    "ReplaceImageValue",
    "ReplaceList",
    "ReplacePart",
    "ReplacePixelValue",
    "ReplaceRepeated",
    "ReplicateLayer",
    "RequiredPhysicalQuantities",
    "Resampling",
    "ResamplingAlgorithmData",
    "ResamplingMethod",
    "Rescale",
    "RescalingTransform",
    "ResetDirectory",
    "ResetScheduledTask",
    "ReshapeLayer",
    "Residue",
    "ResidueSum",
    "ResizeLayer",
    "Resolve",
    "ResolveContextAliases",
    "ResourceAcquire",
    "ResourceData",
    "ResourceFunction",
    "ResourceObject",
    "ResourceRegister",
    "ResourceRemove",
    "ResourceSearch",
    "ResourceSubmissionObject",
    "ResourceSubmit",
    "ResourceSystemBase",
    "ResourceSystemPath",
    "ResourceUpdate",
    "ResourceVersion",
    "ResponseForm",
    "Rest",
    "RestartInterval",
    "Restricted",
    "Resultant",
    "ResumePacket",
    "Return",
    "ReturnCreatesNewCell",
    "ReturnEntersInput",
    "ReturnExpressionPacket",
    "ReturnInputFormPacket",
    "ReturnPacket",
    "ReturnReceiptFunction",
    "ReturnTextPacket",
    "Reverse",
    "ReverseApplied",
    "ReverseBiorthogonalSplineWavelet",
    "ReverseElement",
    "ReverseEquilibrium",
    "ReverseGraph",
    "ReverseSort",
    "ReverseSortBy",
    "ReverseUpEquilibrium",
    "RevolutionAxis",
    "RevolutionPlot3D",
    "RGBColor",
    "RiccatiSolve",
    "RiceDistribution",
    "RidgeFilter",
    "RiemannR",
    "RiemannSiegelTheta",
    "RiemannSiegelZ",
    "RiemannXi",
    "Riffle",
    "Right",
    "RightArrow",
    "RightArrowBar",
    "RightArrowLeftArrow",
    "RightComposition",
    "RightCosetRepresentative",
    "RightDownTeeVector",
    "RightDownVector",
    "RightDownVectorBar",
    "RightTee",
    "RightTeeArrow",
    "RightTeeVector",
    "RightTriangle",
    "RightTriangleBar",
    "RightTriangleEqual",
    "RightUpDownVector",
    "RightUpTeeVector",
    "RightUpVector",
    "RightUpVectorBar",
    "RightVector",
    "RightVectorBar",
    "RipleyK",
    "RipleyRassonRegion",
    "RiskAchievementImportance",
    "RiskReductionImportance",
    "RobustConvexOptimization",
    "RogersTanimotoDissimilarity",
    "RollPitchYawAngles",
    "RollPitchYawMatrix",
    "RomanNumeral",
    "Root",
    "RootApproximant",
    "RootIntervals",
    "RootLocusPlot",
    "RootMeanSquare",
    "RootOfUnityQ",
    "RootReduce",
    "Roots",
    "RootSum",
    "RootTree",
    "Rotate",
    "RotateLabel",
    "RotateLeft",
    "RotateRight",
    "RotationAction",
    "RotationBox",
    "RotationBoxOptions",
    "RotationMatrix",
    "RotationTransform",
    "Round",
    "RoundImplies",
    "RoundingRadius",
    "Row",
    "RowAlignments",
    "RowBackgrounds",
    "RowBox",
    "RowHeights",
    "RowLines",
    "RowMinHeight",
    "RowReduce",
    "RowsEqual",
    "RowSpacings",
    "RSolve",
    "RSolveValue",
    "RudinShapiro",
    "RudvalisGroupRu",
    "Rule",
    "RuleCondition",
    "RuleDelayed",
    "RuleForm",
    "RulePlot",
    "RulerUnits",
    "RulesTree",
    "Run",
    "RunProcess",
    "RunScheduledTask",
    "RunThrough",
    "RuntimeAttributes",
    "RuntimeOptions",
    "RussellRaoDissimilarity",
    "SameAs",
    "SameQ",
    "SameTest",
    "SameTestProperties",
    "SampledEntityClass",
    "SampleDepth",
    "SampledSoundFunction",
    "SampledSoundList",
    "SampleRate",
    "SamplingPeriod",
    "SARIMAProcess",
    "SARMAProcess",
    "SASTriangle",
    "SatelliteData",
    "SatisfiabilityCount",
    "SatisfiabilityInstances",
    "SatisfiableQ",
    "Saturday",
    "Save",
    "Saveable",
    "SaveAutoDelete",
    "SaveConnection",
    "SaveDefinitions",
    "SavitzkyGolayMatrix",
    "SawtoothWave",
    "Scale",
    "Scaled",
    "ScaleDivisions",
    "ScaledMousePosition",
    "ScaleOrigin",
    "ScalePadding",
    "ScaleRanges",
    "ScaleRangeStyle",
    "ScalingFunctions",
    "ScalingMatrix",
    "ScalingTransform",
    "Scan",
    "ScheduledTask",
    "ScheduledTaskActiveQ",
    "ScheduledTaskInformation",
    "ScheduledTaskInformationData",
    "ScheduledTaskObject",
    "ScheduledTasks",
    "SchurDecomposition",
    "ScientificForm",
    "ScientificNotationThreshold",
    "ScorerGi",
    "ScorerGiPrime",
    "ScorerHi",
    "ScorerHiPrime",
    "ScreenRectangle",
    "ScreenStyleEnvironment",
    "ScriptBaselineShifts",
    "ScriptForm",
    "ScriptLevel",
    "ScriptMinSize",
    "ScriptRules",
    "ScriptSizeMultipliers",
    "Scrollbars",
    "ScrollingOptions",
    "ScrollPosition",
    "SearchAdjustment",
    "SearchIndexObject",
    "SearchIndices",
    "SearchQueryString",
    "SearchResultObject",
    "Sec",
    "Sech",
    "SechDistribution",
    "SecondOrderConeOptimization",
    "SectionGrouping",
    "SectorChart",
    "SectorChart3D",
    "SectorOrigin",
    "SectorSpacing",
    "SecuredAuthenticationKey",
    "SecuredAuthenticationKeys",
    "SecurityCertificate",
    "SeedRandom",
    "Select",
    "Selectable",
    "SelectComponents",
    "SelectedCells",
    "SelectedNotebook",
    "SelectFirst",
    "Selection",
    "SelectionAnimate",
    "SelectionCell",
    "SelectionCellCreateCell",
    "SelectionCellDefaultStyle",
    "SelectionCellParentStyle",
    "SelectionCreateCell",
    "SelectionDebuggerTag",
    "SelectionEvaluate",
    "SelectionEvaluateCreateCell",
    "SelectionMove",
    "SelectionPlaceholder",
    "SelectWithContents",
    "SelfLoops",
    "SelfLoopStyle",
    "SemanticImport",
    "SemanticImportString",
    "SemanticInterpretation",
    "SemialgebraicComponentInstances",
    "SemidefiniteOptimization",
    "SendMail",
    "SendMessage",
    "Sequence",
    "SequenceAlignment",
    "SequenceAttentionLayer",
    "SequenceCases",
    "SequenceCount",
    "SequenceFold",
    "SequenceFoldList",
    "SequenceForm",
    "SequenceHold",
    "SequenceIndicesLayer",
    "SequenceLastLayer",
    "SequenceMostLayer",
    "SequencePosition",
    "SequencePredict",
    "SequencePredictorFunction",
    "SequenceReplace",
    "SequenceRestLayer",
    "SequenceReverseLayer",
    "SequenceSplit",
    "Series",
    "SeriesCoefficient",
    "SeriesData",
    "SeriesTermGoal",
    "ServiceConnect",
    "ServiceDisconnect",
    "ServiceExecute",
    "ServiceObject",
    "ServiceRequest",
    "ServiceResponse",
    "ServiceSubmit",
    "SessionSubmit",
    "SessionTime",
    "Set",
    "SetAccuracy",
    "SetAlphaChannel",
    "SetAttributes",
    "Setbacks",
    "SetCloudDirectory",
    "SetCookies",
    "SetDelayed",
    "SetDirectory",
    "SetEnvironment",
    "SetFileDate",
    "SetFileFormatProperties",
    "SetOptions",
    "SetOptionsPacket",
    "SetPermissions",
    "SetPrecision",
    "SetProperty",
    "SetSecuredAuthenticationKey",
    "SetSelectedNotebook",
    "SetSharedFunction",
    "SetSharedVariable",
    "SetStreamPosition",
    "SetSystemModel",
    "SetSystemOptions",
    "Setter",
    "SetterBar",
    "SetterBox",
    "SetterBoxOptions",
    "Setting",
    "SetUsers",
    "Shading",
    "Shallow",
    "ShannonWavelet",
    "ShapiroWilkTest",
    "Share",
    "SharingList",
    "Sharpen",
    "ShearingMatrix",
    "ShearingTransform",
    "ShellRegion",
    "ShenCastanMatrix",
    "ShiftedGompertzDistribution",
    "ShiftRegisterSequence",
    "Short",
    "ShortDownArrow",
    "Shortest",
    "ShortestMatch",
    "ShortestPathFunction",
    "ShortLeftArrow",
    "ShortRightArrow",
    "ShortTimeFourier",
    "ShortTimeFourierData",
    "ShortUpArrow",
    "Show",
    "ShowAutoConvert",
    "ShowAutoSpellCheck",
    "ShowAutoStyles",
    "ShowCellBracket",
    "ShowCellLabel",
    "ShowCellTags",
    "ShowClosedCellArea",
    "ShowCodeAssist",
    "ShowContents",
    "ShowControls",
    "ShowCursorTracker",
    "ShowGroupOpenCloseIcon",
    "ShowGroupOpener",
    "ShowInvisibleCharacters",
    "ShowPageBreaks",
    "ShowPredictiveInterface",
    "ShowSelection",
    "ShowShortBoxForm",
    "ShowSpecialCharacters",
    "ShowStringCharacters",
    "ShowSyntaxStyles",
    "ShrinkingDelay",
    "ShrinkWrapBoundingBox",
    "SiderealTime",
    "SiegelTheta",
    "SiegelTukeyTest",
    "SierpinskiCurve",
    "SierpinskiMesh",
    "Sign",
    "Signature",
    "SignedRankTest",
    "SignedRegionDistance",
    "SignificanceLevel",
    "SignPadding",
    "SignTest",
    "SimilarityRules",
    "SimpleGraph",
    "SimpleGraphQ",
    "SimplePolygonQ",
    "SimplePolyhedronQ",
    "Simplex",
    "Simplify",
    "Sin",
    "Sinc",
    "SinghMaddalaDistribution",
    "SingleEvaluation",
    "SingleLetterItalics",
    "SingleLetterStyle",
    "SingularValueDecomposition",
    "SingularValueList",
    "SingularValuePlot",
    "SingularValues",
    "Sinh",
    "SinhIntegral",
    "SinIntegral",
    "SixJSymbol",
    "Skeleton",
    "SkeletonTransform",
    "SkellamDistribution",
    "Skewness",
    "SkewNormalDistribution",
    "SkinStyle",
    "Skip",
    "SliceContourPlot3D",
    "SliceDensityPlot3D",
    "SliceDistribution",
    "SliceVectorPlot3D",
    "Slider",
    "Slider2D",
    "Slider2DBox",
    "Slider2DBoxOptions",
    "SliderBox",
    "SliderBoxOptions",
    "SlideShowVideo",
    "SlideView",
    "Slot",
    "SlotSequence",
    "Small",
    "SmallCircle",
    "Smaller",
    "SmithDecomposition",
    "SmithDelayCompensator",
    "SmithWatermanSimilarity",
    "SmoothDensityHistogram",
    "SmoothHistogram",
    "SmoothHistogram3D",
    "SmoothKernelDistribution",
    "SmoothPointDensity",
    "SnDispersion",
    "Snippet",
    "SnippetsVideo",
    "SnubPolyhedron",
    "SocialMediaData",
    "Socket",
    "SocketConnect",
    "SocketListen",
    "SocketListener",
    "SocketObject",
    "SocketOpen",
    "SocketReadMessage",
    "SocketReadyQ",
    "Sockets",
    "SocketWaitAll",
    "SocketWaitNext",
    "SoftmaxLayer",
    "SokalSneathDissimilarity",
    "SolarEclipse",
    "SolarSystemFeatureData",
    "SolarTime",
    "SolidAngle",
    "SolidBoundaryLoadValue",
    "SolidData",
    "SolidDisplacementCondition",
    "SolidFixedCondition",
    "SolidMechanicsPDEComponent",
    "SolidMechanicsStrain",
    "SolidMechanicsStress",
    "SolidRegionQ",
    "Solve",
    "SolveAlways",
    "SolveDelayed",
    "SolveValues",
    "Sort",
    "SortBy",
    "SortedBy",
    "SortedEntityClass",
    "Sound",
    "SoundAndGraphics",
    "SoundNote",
    "SoundVolume",
    "SourceLink",
    "SourcePDETerm",
    "Sow",
    "Space",
    "SpaceCurveData",
    "SpaceForm",
    "Spacer",
    "Spacings",
    "Span",
    "SpanAdjustments",
    "SpanCharacterRounding",
    "SpanFromAbove",
    "SpanFromBoth",
    "SpanFromLeft",
    "SpanLineThickness",
    "SpanMaxSize",
    "SpanMinSize",
    "SpanningCharacters",
    "SpanSymmetric",
    "SparseArray",
    "SparseArrayQ",
    "SpatialBinnedPointData",
    "SpatialBoundaryCorrection",
    "SpatialEstimate",
    "SpatialEstimatorFunction",
    "SpatialGraphDistribution",
    "SpatialJ",
    "SpatialMedian",
    "SpatialNoiseLevel",
    "SpatialObservationRegionQ",
    "SpatialPointData",
    "SpatialPointSelect",
    "SpatialRandomnessTest",
    "SpatialTransformationLayer",
    "SpatialTrendFunction",
    "Speak",
    "SpeakerMatchQ",
    "SpearmanRankTest",
    "SpearmanRho",
    "SpeciesData",
    "SpecificityGoal",
    "SpectralLineData",
    "Spectrogram",
    "SpectrogramArray",
    "Specularity",
    "SpeechCases",
    "SpeechInterpreter",
    "SpeechRecognize",
    "SpeechSynthesize",
    "SpellingCorrection",
    "SpellingCorrectionList",
    "SpellingDictionaries",
    "SpellingDictionariesPath",
    "SpellingOptions",
    "Sphere",
    "SphereBox",
    "SphereBoxOptions",
    "SpherePoints",
    "SphericalBesselJ",
    "SphericalBesselY",
    "SphericalHankelH1",
    "SphericalHankelH2",
    "SphericalHarmonicY",
    "SphericalPlot3D",
    "SphericalRegion",
    "SphericalShell",
    "SpheroidalEigenvalue",
    "SpheroidalJoiningFactor",
    "SpheroidalPS",
    "SpheroidalPSPrime",
    "SpheroidalQS",
    "SpheroidalQSPrime",
    "SpheroidalRadialFactor",
    "SpheroidalS1",
    "SpheroidalS1Prime",
    "SpheroidalS2",
    "SpheroidalS2Prime",
    "Splice",
    "SplicedDistribution",
    "SplineClosed",
    "SplineDegree",
    "SplineKnots",
    "SplineWeights",
    "Split",
    "SplitBy",
    "SpokenString",
    "SpotLight",
    "Sqrt",
    "SqrtBox",
    "SqrtBoxOptions",
    "Square",
    "SquaredEuclideanDistance",
    "SquareFreeQ",
    "SquareIntersection",
    "SquareMatrixQ",
    "SquareRepeatingElement",
    "SquaresR",
    "SquareSubset",
    "SquareSubsetEqual",
    "SquareSuperset",
    "SquareSupersetEqual",
    "SquareUnion",
    "SquareWave",
    "SSSTriangle",
    "StabilityMargins",
    "StabilityMarginsStyle",
    "StableDistribution",
    "Stack",
    "StackBegin",
    "StackComplete",
    "StackedDateListPlot",
    "StackedListPlot",
    "StackInhibit",
    "StadiumShape",
    "StandardAtmosphereData",
    "StandardDeviation",
    "StandardDeviationFilter",
    "StandardForm",
    "Standardize",
    "Standardized",
    "StandardOceanData",
    "StandbyDistribution",
    "Star",
    "StarClusterData",
    "StarData",
    "StarGraph",
    "StartAsynchronousTask",
    "StartExternalSession",
    "StartingStepSize",
    "StartOfLine",
    "StartOfString",
    "StartProcess",
    "StartScheduledTask",
    "StartupSound",
    "StartWebSession",
    "StateDimensions",
    "StateFeedbackGains",
    "StateOutputEstimator",
    "StateResponse",
    "StateSpaceModel",
    "StateSpaceRealization",
    "StateSpaceTransform",
    "StateTransformationLinearize",
    "StationaryDistribution",
    "StationaryWaveletPacketTransform",
    "StationaryWaveletTransform",
    "StatusArea",
    "StatusCentrality",
    "StepMonitor",
    "StereochemistryElements",
    "StieltjesGamma",
    "StippleShading",
    "StirlingS1",
    "StirlingS2",
    "StopAsynchronousTask",
    "StoppingPowerData",
    "StopScheduledTask",
    "StrataVariables",
    "StratonovichProcess",
    "StraussHardcorePointProcess",
    "StraussPointProcess",
    "StreamColorFunction",
    "StreamColorFunctionScaling",
    "StreamDensityPlot",
    "StreamMarkers",
    "StreamPlot",
    "StreamPlot3D",
    "StreamPoints",
    "StreamPosition",
    "Streams",
    "StreamScale",
    "StreamStyle",
    "StrictInequalities",
    "String",
    "StringBreak",
    "StringByteCount",
    "StringCases",
    "StringContainsQ",
    "StringCount",
    "StringDelete",
    "StringDrop",
    "StringEndsQ",
    "StringExpression",
    "StringExtract",
    "StringForm",
    "StringFormat",
    "StringFormatQ",
    "StringFreeQ",
    "StringInsert",
    "StringJoin",
    "StringLength",
    "StringMatchQ",
    "StringPadLeft",
    "StringPadRight",
    "StringPart",
    "StringPartition",
    "StringPosition",
    "StringQ",
    "StringRepeat",
    "StringReplace",
    "StringReplaceList",
    "StringReplacePart",
    "StringReverse",
    "StringRiffle",
    "StringRotateLeft",
    "StringRotateRight",
    "StringSkeleton",
    "StringSplit",
    "StringStartsQ",
    "StringTake",
    "StringTakeDrop",
    "StringTemplate",
    "StringToByteArray",
    "StringToStream",
    "StringTrim",
    "StripBoxes",
    "StripOnInput",
    "StripStyleOnPaste",
    "StripWrapperBoxes",
    "StrokeForm",
    "Struckthrough",
    "StructuralImportance",
    "StructuredArray",
    "StructuredArrayHeadQ",
    "StructuredSelection",
    "StruveH",
    "StruveL",
    "Stub",
    "StudentTDistribution",
    "Style",
    "StyleBox",
    "StyleBoxAutoDelete",
    "StyleData",
    "StyleDefinitions",
    "StyleForm",
    "StyleHints",
    "StyleKeyMapping",
    "StyleMenuListing",
    "StyleNameDialogSettings",
    "StyleNames",
    "StylePrint",
    "StyleSheetPath",
    "Subdivide",
    "Subfactorial",
    "Subgraph",
    "SubMinus",
    "SubPlus",
    "SubresultantPolynomialRemainders",
    "SubresultantPolynomials",
    "Subresultants",
    "Subscript",
    "SubscriptBox",
    "SubscriptBoxOptions",
    "Subscripted",
    "Subsequences",
    "Subset",
    "SubsetCases",
    "SubsetCount",
    "SubsetEqual",
    "SubsetMap",
    "SubsetPosition",
    "SubsetQ",
    "SubsetReplace",
    "Subsets",
    "SubStar",
    "SubstitutionSystem",
    "Subsuperscript",
    "SubsuperscriptBox",
    "SubsuperscriptBoxOptions",
    "SubtitleEncoding",
    "SubtitleTrackSelection",
    "Subtract",
    "SubtractFrom",
    "SubtractSides",
    "SubValues",
    "Succeeds",
    "SucceedsEqual",
    "SucceedsSlantEqual",
    "SucceedsTilde",
    "Success",
    "SuchThat",
    "Sum",
    "SumConvergence",
    "SummationLayer",
    "Sunday",
    "SunPosition",
    "Sunrise",
    "Sunset",
    "SuperDagger",
    "SuperMinus",
    "SupernovaData",
    "SuperPlus",
    "Superscript",
    "SuperscriptBox",
    "SuperscriptBoxOptions",
    "Superset",
    "SupersetEqual",
    "SuperStar",
    "Surd",
    "SurdForm",
    "SurfaceAppearance",
    "SurfaceArea",
    "SurfaceColor",
    "SurfaceData",
    "SurfaceGraphics",
    "SurvivalDistribution",
    "SurvivalFunction",
    "SurvivalModel",
    "SurvivalModelFit",
    "SuspendPacket",
    "SuzukiDistribution",
    "SuzukiGroupSuz",
    "SwatchLegend",
    "Switch",
    "Symbol",
    "SymbolName",
    "SymletWavelet",
    "Symmetric",
    "SymmetricDifference",
    "SymmetricGroup",
    "SymmetricKey",
    "SymmetricMatrixQ",
    "SymmetricPolynomial",
    "SymmetricReduction",
    "Symmetrize",
    "SymmetrizedArray",
    "SymmetrizedArrayRules",
    "SymmetrizedDependentComponents",
    "SymmetrizedIndependentComponents",
    "SymmetrizedReplacePart",
    "SynchronousInitialization",
    "SynchronousUpdating",
    "Synonyms",
    "Syntax",
    "SyntaxForm",
    "SyntaxInformation",
    "SyntaxLength",
    "SyntaxPacket",
    "SyntaxQ",
    "SynthesizeMissingValues",
    "SystemCredential",
    "SystemCredentialData",
    "SystemCredentialKey",
    "SystemCredentialKeys",
    "SystemCredentialStoreObject",
    "SystemDialogInput",
    "SystemException",
    "SystemGet",
    "SystemHelpPath",
    "SystemInformation",
    "SystemInformationData",
    "SystemInstall",
    "SystemModel",
    "SystemModeler",
    "SystemModelExamples",
    "SystemModelLinearize",
    "SystemModelMeasurements",
    "SystemModelParametricSimulate",
    "SystemModelPlot",
    "SystemModelProgressReporting",
    "SystemModelReliability",
    "SystemModels",
    "SystemModelSimulate",
    "SystemModelSimulateSensitivity",
    "SystemModelSimulationData",
    "SystemOpen",
    "SystemOptions",
    "SystemProcessData",
    "SystemProcesses",
    "SystemsConnectionsModel",
    "SystemsModelControllerData",
    "SystemsModelDelay",
    "SystemsModelDelayApproximate",
    "SystemsModelDelete",
    "SystemsModelDimensions",
    "SystemsModelExtract",
    "SystemsModelFeedbackConnect",
    "SystemsModelLabels",
    "SystemsModelLinearity",
    "SystemsModelMerge",
    "SystemsModelOrder",
    "SystemsModelParallelConnect",
    "SystemsModelSeriesConnect",
    "SystemsModelStateFeedbackConnect",
    "SystemsModelVectorRelativeOrders",
    "SystemStub",
    "SystemTest",
    "Tab",
    "TabFilling",
    "Table",
    "TableAlignments",
    "TableDepth",
    "TableDirections",
    "TableForm",
    "TableHeadings",
    "TableSpacing",
    "TableView",
    "TableViewBox",
    "TableViewBoxAlignment",
    "TableViewBoxBackground",
    "TableViewBoxHeaders",
    "TableViewBoxItemSize",
    "TableViewBoxItemStyle",
    "TableViewBoxOptions",
    "TabSpacings",
    "TabView",
    "TabViewBox",
    "TabViewBoxOptions",
    "TagBox",
    "TagBoxNote",
    "TagBoxOptions",
    "TaggingRules",
    "TagSet",
    "TagSetDelayed",
    "TagStyle",
    "TagUnset",
    "Take",
    "TakeDrop",
    "TakeLargest",
    "TakeLargestBy",
    "TakeList",
    "TakeSmallest",
    "TakeSmallestBy",
    "TakeWhile",
    "Tally",
    "Tan",
    "Tanh",
    "TargetDevice",
    "TargetFunctions",
    "TargetSystem",
    "TargetUnits",
    "TaskAbort",
    "TaskExecute",
    "TaskObject",
    "TaskRemove",
    "TaskResume",
    "Tasks",
    "TaskSuspend",
    "TaskWait",
    "TautologyQ",
    "TelegraphProcess",
    "TemplateApply",
    "TemplateArgBox",
    "TemplateBox",
    "TemplateBoxOptions",
    "TemplateEvaluate",
    "TemplateExpression",
    "TemplateIf",
    "TemplateObject",
    "TemplateSequence",
    "TemplateSlot",
    "TemplateSlotSequence",
    "TemplateUnevaluated",
    "TemplateVerbatim",
    "TemplateWith",
    "TemporalData",
    "TemporalRegularity",
    "Temporary",
    "TemporaryVariable",
    "TensorContract",
    "TensorDimensions",
    "TensorExpand",
    "TensorProduct",
    "TensorQ",
    "TensorRank",
    "TensorReduce",
    "TensorSymmetry",
    "TensorTranspose",
    "TensorWedge",
    "TerminatedEvaluation",
    "TernaryListPlot",
    "TernaryPlotCorners",
    "TestID",
    "TestReport",
    "TestReportObject",
    "TestResultObject",
    "Tetrahedron",
    "TetrahedronBox",
    "TetrahedronBoxOptions",
    "TeXForm",
    "TeXSave",
    "Text",
    "Text3DBox",
    "Text3DBoxOptions",
    "TextAlignment",
    "TextBand",
    "TextBoundingBox",
    "TextBox",
    "TextCases",
    "TextCell",
    "TextClipboardType",
    "TextContents",
    "TextData",
    "TextElement",
    "TextForm",
    "TextGrid",
    "TextJustification",
    "TextLine",
    "TextPacket",
    "TextParagraph",
    "TextPosition",
    "TextRecognize",
    "TextSearch",
    "TextSearchReport",
    "TextSentences",
    "TextString",
    "TextStructure",
    "TextStyle",
    "TextTranslation",
    "Texture",
    "TextureCoordinateFunction",
    "TextureCoordinateScaling",
    "TextWords",
    "Therefore",
    "ThermodynamicData",
    "ThermometerGauge",
    "Thick",
    "Thickness",
    "Thin",
    "Thinning",
    "ThisLink",
    "ThomasPointProcess",
    "ThompsonGroupTh",
    "Thread",
    "Threaded",
    "ThreadingLayer",
    "ThreeJSymbol",
    "Threshold",
    "Through",
    "Throw",
    "ThueMorse",
    "Thumbnail",
    "Thursday",
    "TickDirection",
    "TickLabelOrientation",
    "TickLabelPositioning",
    "TickLabels",
    "TickLengths",
    "TickPositions",
    "Ticks",
    "TicksStyle",
    "TideData",
    "Tilde",
    "TildeEqual",
    "TildeFullEqual",
    "TildeTilde",
    "TimeConstrained",
    "TimeConstraint",
    "TimeDirection",
    "TimeFormat",
    "TimeGoal",
    "TimelinePlot",
    "TimeObject",
    "TimeObjectQ",
    "TimeRemaining",
    "Times",
    "TimesBy",
    "TimeSeries",
    "TimeSeriesAggregate",
    "TimeSeriesForecast",
    "TimeSeriesInsert",
    "TimeSeriesInvertibility",
    "TimeSeriesMap",
    "TimeSeriesMapThread",
    "TimeSeriesModel",
    "TimeSeriesModelFit",
    "TimeSeriesResample",
    "TimeSeriesRescale",
    "TimeSeriesShift",
    "TimeSeriesThread",
    "TimeSeriesWindow",
    "TimeSystem",
    "TimeSystemConvert",
    "TimeUsed",
    "TimeValue",
    "TimeWarpingCorrespondence",
    "TimeWarpingDistance",
    "TimeZone",
    "TimeZoneConvert",
    "TimeZoneOffset",
    "Timing",
    "Tiny",
    "TitleGrouping",
    "TitsGroupT",
    "ToBoxes",
    "ToCharacterCode",
    "ToColor",
    "ToContinuousTimeModel",
    "ToDate",
    "Today",
    "ToDiscreteTimeModel",
    "ToEntity",
    "ToeplitzMatrix",
    "ToExpression",
    "ToFileName",
    "Together",
    "Toggle",
    "ToggleFalse",
    "Toggler",
    "TogglerBar",
    "TogglerBox",
    "TogglerBoxOptions",
    "ToHeldExpression",
    "ToInvertibleTimeSeries",
    "TokenWords",
    "Tolerance",
    "ToLowerCase",
    "Tomorrow",
    "ToNumberField",
    "TooBig",
    "Tooltip",
    "TooltipBox",
    "TooltipBoxOptions",
    "TooltipDelay",
    "TooltipStyle",
    "ToonShading",
    "Top",
    "TopHatTransform",
    "ToPolarCoordinates",
    "TopologicalSort",
    "ToRadicals",
    "ToRawPointer",
    "ToRules",
    "Torus",
    "TorusGraph",
    "ToSphericalCoordinates",
    "ToString",
    "Total",
    "TotalHeight",
    "TotalLayer",
    "TotalVariationFilter",
    "TotalWidth",
    "TouchPosition",
    "TouchscreenAutoZoom",
    "TouchscreenControlPlacement",
    "ToUpperCase",
    "TourVideo",
    "Tr",
    "Trace",
    "TraceAbove",
    "TraceAction",
    "TraceBackward",
    "TraceDepth",
    "TraceDialog",
    "TraceForward",
    "TraceInternal",
    "TraceLevel",
    "TraceOff",
    "TraceOn",
    "TraceOriginal",
    "TracePrint",
    "TraceScan",
    "TrackCellChangeTimes",
    "TrackedSymbols",
    "TrackingFunction",
    "TracyWidomDistribution",
    "TradingChart",
    "TraditionalForm",
    "TraditionalFunctionNotation",
    "TraditionalNotation",
    "TraditionalOrder",
    "TrainImageContentDetector",
    "TrainingProgressCheckpointing",
    "TrainingProgressFunction",
    "TrainingProgressMeasurements",
    "TrainingProgressReporting",
    "TrainingStoppingCriterion",
    "TrainingUpdateSchedule",
    "TrainTextContentDetector",
    "TransferFunctionCancel",
    "TransferFunctionExpand",
    "TransferFunctionFactor",
    "TransferFunctionModel",
    "TransferFunctionPoles",
    "TransferFunctionTransform",
    "TransferFunctionZeros",
    "TransformationClass",
    "TransformationFunction",
    "TransformationFunctions",
    "TransformationMatrix",
    "TransformedDistribution",
    "TransformedField",
    "TransformedProcess",
    "TransformedRegion",
    "TransitionDirection",
    "TransitionDuration",
    "TransitionEffect",
    "TransitiveClosureGraph",
    "TransitiveReductionGraph",
    "Translate",
    "TranslationOptions",
    "TranslationTransform",
    "Transliterate",
    "Transparent",
    "TransparentColor",
    "Transpose",
    "TransposeLayer",
    "TrapEnterKey",
    "TrapSelection",
    "TravelDirections",
    "TravelDirectionsData",
    "TravelDistance",
    "TravelDistanceList",
    "TravelMethod",
    "TravelTime",
    "Tree",
    "TreeCases",
    "TreeChildren",
    "TreeCount",
    "TreeData",
    "TreeDelete",
    "TreeDepth",
    "TreeElementCoordinates",
    "TreeElementLabel",
    "TreeElementLabelFunction",
    "TreeElementLabelStyle",
    "TreeElementShape",
    "TreeElementShapeFunction",
    "TreeElementSize",
    "TreeElementSizeFunction",
    "TreeElementStyle",
    "TreeElementStyleFunction",
    "TreeExpression",
    "TreeExtract",
    "TreeFold",
    "TreeForm",
    "TreeGraph",
    "TreeGraphQ",
    "TreeInsert",
    "TreeLayout",
    "TreeLeafCount",
    "TreeLeafQ",
    "TreeLeaves",
    "TreeLevel",
    "TreeMap",
    "TreeMapAt",
    "TreeOutline",
    "TreePlot",
    "TreePosition",
    "TreeQ",
    "TreeReplacePart",
    "TreeRules",
    "TreeScan",
    "TreeSelect",
    "TreeSize",
    "TreeTraversalOrder",
    "TrendStyle",
    "Triangle",
    "TriangleCenter",
    "TriangleConstruct",
    "TriangleMeasurement",
    "TriangleWave",
    "TriangularDistribution",
    "TriangulateMesh",
    "Trig",
    "TrigExpand",
    "TrigFactor",
    "TrigFactorList",
    "Trigger",
    "TrigReduce",
    "TrigToExp",
    "TrimmedMean",
    "TrimmedVariance",
    "TropicalStormData",
    "True",
    "TrueQ",
    "TruncatedDistribution",
    "TruncatedPolyhedron",
    "TsallisQExponentialDistribution",
    "TsallisQGaussianDistribution",
    "TTest",
    "Tube",
    "TubeBezierCurveBox",
    "TubeBezierCurveBoxOptions",
    "TubeBox",
    "TubeBoxOptions",
    "TubeBSplineCurveBox",
    "TubeBSplineCurveBoxOptions",
    "Tuesday",
    "TukeyLambdaDistribution",
    "TukeyWindow",
    "TunnelData",
    "Tuples",
    "TuranGraph",
    "TuringMachine",
    "TuttePolynomial",
    "TwoWayRule",
    "Typed",
    "TypeDeclaration",
    "TypeEvaluate",
    "TypeHint",
    "TypeOf",
    "TypeSpecifier",
    "UnateQ",
    "Uncompress",
    "UnconstrainedParameters",
    "Undefined",
    "UnderBar",
    "Underflow",
    "Underlined",
    "Underoverscript",
    "UnderoverscriptBox",
    "UnderoverscriptBoxOptions",
    "Underscript",
    "UnderscriptBox",
    "UnderscriptBoxOptions",
    "UnderseaFeatureData",
    "UndirectedEdge",
    "UndirectedGraph",
    "UndirectedGraphQ",
    "UndoOptions",
    "UndoTrackedVariables",
    "Unequal",
    "UnequalTo",
    "Unevaluated",
    "UniformDistribution",
    "UniformGraphDistribution",
    "UniformPolyhedron",
    "UniformSumDistribution",
    "Uninstall",
    "Union",
    "UnionedEntityClass",
    "UnionPlus",
    "Unique",
    "UniqueElements",
    "UnitaryMatrixQ",
    "UnitBox",
    "UnitConvert",
    "UnitDimensions",
    "Unitize",
    "UnitRootTest",
    "UnitSimplify",
    "UnitStep",
    "UnitSystem",
    "UnitTriangle",
    "UnitVector",
    "UnitVectorLayer",
    "UnityDimensions",
    "UniverseModelData",
    "UniversityData",
    "UnixTime",
    "UnlabeledTree",
    "UnmanageObject",
    "Unprotect",
    "UnregisterExternalEvaluator",
    "UnsameQ",
    "UnsavedVariables",
    "Unset",
    "UnsetShared",
    "Until",
    "UntrackedVariables",
    "Up",
    "UpArrow",
    "UpArrowBar",
    "UpArrowDownArrow",
    "Update",
    "UpdateDynamicObjects",
    "UpdateDynamicObjectsSynchronous",
    "UpdateInterval",
    "UpdatePacletSites",
    "UpdateSearchIndex",
    "UpDownArrow",
    "UpEquilibrium",
    "UpperCaseQ",
    "UpperLeftArrow",
    "UpperRightArrow",
    "UpperTriangularize",
    "UpperTriangularMatrix",
    "UpperTriangularMatrixQ",
    "Upsample",
    "UpSet",
    "UpSetDelayed",
    "UpTee",
    "UpTeeArrow",
    "UpTo",
    "UpValues",
    "URL",
    "URLBuild",
    "URLDecode",
    "URLDispatcher",
    "URLDownload",
    "URLDownloadSubmit",
    "URLEncode",
    "URLExecute",
    "URLExpand",
    "URLFetch",
    "URLFetchAsynchronous",
    "URLParse",
    "URLQueryDecode",
    "URLQueryEncode",
    "URLRead",
    "URLResponseTime",
    "URLSave",
    "URLSaveAsynchronous",
    "URLShorten",
    "URLSubmit",
    "UseEmbeddedLibrary",
    "UseGraphicsRange",
    "UserDefinedWavelet",
    "Using",
    "UsingFrontEnd",
    "UtilityFunction",
    "V2Get",
    "ValenceErrorHandling",
    "ValenceFilling",
    "ValidationLength",
    "ValidationSet",
    "ValueBox",
    "ValueBoxOptions",
    "ValueDimensions",
    "ValueForm",
    "ValuePreprocessingFunction",
    "ValueQ",
    "Values",
    "ValuesData",
    "VandermondeMatrix",
    "Variables",
    "Variance",
    "VarianceEquivalenceTest",
    "VarianceEstimatorFunction",
    "VarianceGammaDistribution",
    "VarianceGammaPointProcess",
    "VarianceTest",
    "VariogramFunction",
    "VariogramModel",
    "VectorAngle",
    "VectorAround",
    "VectorAspectRatio",
    "VectorColorFunction",
    "VectorColorFunctionScaling",
    "VectorDensityPlot",
    "VectorDisplacementPlot",
    "VectorDisplacementPlot3D",
    "VectorGlyphData",
    "VectorGreater",
    "VectorGreaterEqual",
    "VectorLess",
    "VectorLessEqual",
    "VectorMarkers",
    "VectorPlot",
    "VectorPlot3D",
    "VectorPoints",
    "VectorQ",
    "VectorRange",
    "Vectors",
    "VectorScale",
    "VectorScaling",
    "VectorSizes",
    "VectorStyle",
    "Vee",
    "Verbatim",
    "Verbose",
    "VerificationTest",
    "VerifyConvergence",
    "VerifyDerivedKey",
    "VerifyDigitalSignature",
    "VerifyFileSignature",
    "VerifyInterpretation",
    "VerifySecurityCertificates",
    "VerifySolutions",
    "VerifyTestAssumptions",
    "VersionedPreferences",
    "VertexAdd",
    "VertexCapacity",
    "VertexChromaticNumber",
    "VertexColors",
    "VertexComponent",
    "VertexConnectivity",
    "VertexContract",
    "VertexCoordinateRules",
    "VertexCoordinates",
    "VertexCorrelationSimilarity",
    "VertexCosineSimilarity",
    "VertexCount",
    "VertexCoverQ",
    "VertexDataCoordinates",
    "VertexDegree",
    "VertexDelete",
    "VertexDiceSimilarity",
    "VertexEccentricity",
    "VertexInComponent",
    "VertexInComponentGraph",
    "VertexInDegree",
    "VertexIndex",
    "VertexJaccardSimilarity",
    "VertexLabeling",
    "VertexLabels",
    "VertexLabelStyle",
    "VertexList",
    "VertexNormals",
    "VertexOutComponent",
    "VertexOutComponentGraph",
    "VertexOutDegree",
    "VertexQ",
    "VertexRenderingFunction",
    "VertexReplace",
    "VertexShape",
    "VertexShapeFunction",
    "VertexSize",
    "VertexStyle",
    "VertexTextureCoordinates",
    "VertexTransitiveGraphQ",
    "VertexWeight",
    "VertexWeightedGraphQ",
    "Vertical",
    "VerticalBar",
    "VerticalForm",
    "VerticalGauge",
    "VerticalSeparator",
    "VerticalSlider",
    "VerticalTilde",
    "Video",
    "VideoCapture",
    "VideoCombine",
    "VideoDelete",
    "VideoEncoding",
    "VideoExtractFrames",
    "VideoFrameList",
    "VideoFrameMap",
    "VideoGenerator",
    "VideoInsert",
    "VideoIntervals",
    "VideoJoin",
    "VideoMap",
    "VideoMapList",
    "VideoMapTimeSeries",
    "VideoPadding",
    "VideoPause",
    "VideoPlay",
    "VideoQ",
    "VideoRecord",
    "VideoReplace",
    "VideoScreenCapture",
    "VideoSplit",
    "VideoStop",
    "VideoStream",
    "VideoStreams",
    "VideoTimeStretch",
    "VideoTrackSelection",
    "VideoTranscode",
    "VideoTransparency",
    "VideoTrim",
    "ViewAngle",
    "ViewCenter",
    "ViewMatrix",
    "ViewPoint",
    "ViewPointSelectorSettings",
    "ViewPort",
    "ViewProjection",
    "ViewRange",
    "ViewVector",
    "ViewVertical",
    "VirtualGroupData",
    "Visible",
    "VisibleCell",
    "VoiceStyleData",
    "VoigtDistribution",
    "VolcanoData",
    "Volume",
    "VonMisesDistribution",
    "VoronoiMesh",
    "WaitAll",
    "WaitAsynchronousTask",
    "WaitNext",
    "WaitUntil",
    "WakebyDistribution",
    "WalleniusHypergeometricDistribution",
    "WaringYuleDistribution",
    "WarpingCorrespondence",
    "WarpingDistance",
    "WatershedComponents",
    "WatsonUSquareTest",
    "WattsStrogatzGraphDistribution",
    "WaveletBestBasis",
    "WaveletFilterCoefficients",
    "WaveletImagePlot",
    "WaveletListPlot",
    "WaveletMapIndexed",
    "WaveletMatrixPlot",
    "WaveletPhi",
    "WaveletPsi",
    "WaveletScale",
    "WaveletScalogram",
    "WaveletThreshold",
    "WavePDEComponent",
    "WeaklyConnectedComponents",
    "WeaklyConnectedGraphComponents",
    "WeaklyConnectedGraphQ",
    "WeakStationarity",
    "WeatherData",
    "WeatherForecastData",
    "WebAudioSearch",
    "WebColumn",
    "WebElementObject",
    "WeberE",
    "WebExecute",
    "WebImage",
    "WebImageSearch",
    "WebItem",
    "WebPageMetaInformation",
    "WebRow",
    "WebSearch",
    "WebSessionObject",
    "WebSessions",
    "WebWindowObject",
    "Wedge",
    "Wednesday",
    "WeibullDistribution",
    "WeierstrassE1",
    "WeierstrassE2",
    "WeierstrassE3",
    "WeierstrassEta1",
    "WeierstrassEta2",
    "WeierstrassEta3",
    "WeierstrassHalfPeriods",
    "WeierstrassHalfPeriodW1",
    "WeierstrassHalfPeriodW2",
    "WeierstrassHalfPeriodW3",
    "WeierstrassInvariantG2",
    "WeierstrassInvariantG3",
    "WeierstrassInvariants",
    "WeierstrassP",
    "WeierstrassPPrime",
    "WeierstrassSigma",
    "WeierstrassZeta",
    "WeightedAdjacencyGraph",
    "WeightedAdjacencyMatrix",
    "WeightedData",
    "WeightedGraphQ",
    "Weights",
    "WelchWindow",
    "WheelGraph",
    "WhenEvent",
    "Which",
    "While",
    "White",
    "WhiteNoiseProcess",
    "WhitePoint",
    "Whitespace",
    "WhitespaceCharacter",
    "WhittakerM",
    "WhittakerW",
    "WholeCellGroupOpener",
    "WienerFilter",
    "WienerProcess",
    "WignerD",
    "WignerSemicircleDistribution",
    "WikidataData",
    "WikidataSearch",
    "WikipediaData",
    "WikipediaSearch",
    "WilksW",
    "WilksWTest",
    "WindDirectionData",
    "WindingCount",
    "WindingPolygon",
    "WindowClickSelect",
    "WindowElements",
    "WindowFloating",
    "WindowFrame",
    "WindowFrameElements",
    "WindowMargins",
    "WindowMovable",
    "WindowOpacity",
    "WindowPersistentStyles",
    "WindowSelected",
    "WindowSize",
    "WindowStatusArea",
    "WindowTitle",
    "WindowToolbars",
    "WindowWidth",
    "WindSpeedData",
    "WindVectorData",
    "WinsorizedMean",
    "WinsorizedVariance",
    "WishartMatrixDistribution",
    "With",
    "WithCleanup",
    "WithLock",
    "WolframAlpha",
    "WolframAlphaDate",
    "WolframAlphaQuantity",
    "WolframAlphaResult",
    "WolframCloudSettings",
    "WolframLanguageData",
    "Word",
    "WordBoundary",
    "WordCharacter",
    "WordCloud",
    "WordCount",
    "WordCounts",
    "WordData",
    "WordDefinition",
    "WordFrequency",
    "WordFrequencyData",
    "WordList",
    "WordOrientation",
    "WordSearch",
    "WordSelectionFunction",
    "WordSeparators",
    "WordSpacings",
    "WordStem",
    "WordTranslation",
    "WorkingPrecision",
    "WrapAround",
    "Write",
    "WriteLine",
    "WriteString",
    "Wronskian",
    "XMLElement",
    "XMLObject",
    "XMLTemplate",
    "Xnor",
    "Xor",
    "XYZColor",
    "Yellow",
    "Yesterday",
    "YuleDissimilarity",
    "ZernikeR",
    "ZeroSymmetric",
    "ZeroTest",
    "ZeroWidthTimes",
    "Zeta",
    "ZetaZero",
    "ZIPCodeData",
    "ZipfDistribution",
    "ZoomCenter",
    "ZoomFactor",
    "ZTest",
    "ZTransform",
    "$Aborted",
    "$ActivationGroupID",
    "$ActivationKey",
    "$ActivationUserRegistered",
    "$AddOnsDirectory",
    "$AllowDataUpdates",
    "$AllowExternalChannelFunctions",
    "$AllowInternet",
    "$AssertFunction",
    "$Assumptions",
    "$AsynchronousTask",
    "$AudioDecoders",
    "$AudioEncoders",
    "$AudioInputDevices",
    "$AudioOutputDevices",
    "$BaseDirectory",
    "$BasePacletsDirectory",
    "$BatchInput",
    "$BatchOutput",
    "$BlockchainBase",
    "$BoxForms",
    "$ByteOrdering",
    "$CacheBaseDirectory",
    "$Canceled",
    "$ChannelBase",
    "$CharacterEncoding",
    "$CharacterEncodings",
    "$CloudAccountName",
    "$CloudBase",
    "$CloudConnected",
    "$CloudConnection",
    "$CloudCreditsAvailable",
    "$CloudEvaluation",
    "$CloudExpressionBase",
    "$CloudObjectNameFormat",
    "$CloudObjectURLType",
    "$CloudRootDirectory",
    "$CloudSymbolBase",
    "$CloudUserID",
    "$CloudUserUUID",
    "$CloudVersion",
    "$CloudVersionNumber",
    "$CloudWolframEngineVersionNumber",
    "$CommandLine",
    "$CompilationTarget",
    "$CompilerEnvironment",
    "$ConditionHold",
    "$ConfiguredKernels",
    "$Context",
    "$ContextAliases",
    "$ContextPath",
    "$ControlActiveSetting",
    "$Cookies",
    "$CookieStore",
    "$CreationDate",
    "$CryptographicEllipticCurveNames",
    "$CurrentLink",
    "$CurrentTask",
    "$CurrentWebSession",
    "$DataStructures",
    "$DateStringFormat",
    "$DefaultAudioInputDevice",
    "$DefaultAudioOutputDevice",
    "$DefaultFont",
    "$DefaultFrontEnd",
    "$DefaultImagingDevice",
    "$DefaultKernels",
    "$DefaultLocalBase",
    "$DefaultLocalKernel",
    "$DefaultMailbox",
    "$DefaultNetworkInterface",
    "$DefaultPath",
    "$DefaultProxyRules",
    "$DefaultRemoteBatchSubmissionEnvironment",
    "$DefaultRemoteKernel",
    "$DefaultSystemCredentialStore",
    "$Display",
    "$DisplayFunction",
    "$DistributedContexts",
    "$DynamicEvaluation",
    "$Echo",
    "$EmbedCodeEnvironments",
    "$EmbeddableServices",
    "$EntityStores",
    "$Epilog",
    "$EvaluationCloudBase",
    "$EvaluationCloudObject",
    "$EvaluationEnvironment",
    "$ExportFormats",
    "$ExternalIdentifierTypes",
    "$ExternalStorageBase",
    "$Failed",
    "$FinancialDataSource",
    "$FontFamilies",
    "$FormatType",
    "$FrontEnd",
    "$FrontEndSession",
    "$GeneratedAssetLocation",
    "$GeoEntityTypes",
    "$GeoLocation",
    "$GeoLocationCity",
    "$GeoLocationCountry",
    "$GeoLocationPrecision",
    "$GeoLocationSource",
    "$HistoryLength",
    "$HomeDirectory",
    "$HTMLExportRules",
    "$HTTPCookies",
    "$HTTPRequest",
    "$IgnoreEOF",
    "$ImageFormattingWidth",
    "$ImageResolution",
    "$ImagingDevice",
    "$ImagingDevices",
    "$ImportFormats",
    "$IncomingMailSettings",
    "$InitialDirectory",
    "$Initialization",
    "$InitializationContexts",
    "$Input",
    "$InputFileName",
    "$InputStreamMethods",
    "$Inspector",
    "$InstallationDate",
    "$InstallationDirectory",
    "$InterfaceEnvironment",
    "$InterpreterTypes",
    "$IterationLimit",
    "$KernelCount",
    "$KernelID",
    "$Language",
    "$LaunchDirectory",
    "$LibraryPath",
    "$LicenseExpirationDate",
    "$LicenseID",
    "$LicenseProcesses",
    "$LicenseServer",
    "$LicenseSubprocesses",
    "$LicenseType",
    "$Line",
    "$Linked",
    "$LinkSupported",
    "$LoadedFiles",
    "$LocalBase",
    "$LocalSymbolBase",
    "$MachineAddresses",
    "$MachineDomain",
    "$MachineDomains",
    "$MachineEpsilon",
    "$MachineID",
    "$MachineName",
    "$MachinePrecision",
    "$MachineType",
    "$MaxDisplayedChildren",
    "$MaxExtraPrecision",
    "$MaxLicenseProcesses",
    "$MaxLicenseSubprocesses",
    "$MaxMachineNumber",
    "$MaxNumber",
    "$MaxPiecewiseCases",
    "$MaxPrecision",
    "$MaxRootDegree",
    "$MessageGroups",
    "$MessageList",
    "$MessagePrePrint",
    "$Messages",
    "$MinMachineNumber",
    "$MinNumber",
    "$MinorReleaseNumber",
    "$MinPrecision",
    "$MobilePhone",
    "$ModuleNumber",
    "$NetworkConnected",
    "$NetworkInterfaces",
    "$NetworkLicense",
    "$NewMessage",
    "$NewSymbol",
    "$NotebookInlineStorageLimit",
    "$Notebooks",
    "$NoValue",
    "$NumberMarks",
    "$Off",
    "$OperatingSystem",
    "$Output",
    "$OutputForms",
    "$OutputSizeLimit",
    "$OutputStreamMethods",
    "$Packages",
    "$ParentLink",
    "$ParentProcessID",
    "$PasswordFile",
    "$PatchLevelID",
    "$Path",
    "$PathnameSeparator",
    "$PerformanceGoal",
    "$Permissions",
    "$PermissionsGroupBase",
    "$PersistenceBase",
    "$PersistencePath",
    "$PipeSupported",
    "$PlotTheme",
    "$Post",
    "$Pre",
    "$PreferencesDirectory",
    "$PreInitialization",
    "$PrePrint",
    "$PreRead",
    "$PrintForms",
    "$PrintLiteral",
    "$Printout3DPreviewer",
    "$ProcessID",
    "$ProcessorCount",
    "$ProcessorType",
    "$ProductInformation",
    "$ProgramName",
    "$ProgressReporting",
    "$PublisherID",
    "$RandomGeneratorState",
    "$RandomState",
    "$RecursionLimit",
    "$RegisteredDeviceClasses",
    "$RegisteredUserName",
    "$ReleaseNumber",
    "$RequesterAddress",
    "$RequesterCloudUserID",
    "$RequesterCloudUserUUID",
    "$RequesterWolframID",
    "$RequesterWolframUUID",
    "$ResourceSystemBase",
    "$ResourceSystemPath",
    "$RootDirectory",
    "$ScheduledTask",
    "$ScriptCommandLine",
    "$ScriptInputString",
    "$SecuredAuthenticationKeyTokens",
    "$ServiceCreditsAvailable",
    "$Services",
    "$SessionID",
    "$SetParentLink",
    "$SharedFunctions",
    "$SharedVariables",
    "$SoundDisplay",
    "$SoundDisplayFunction",
    "$SourceLink",
    "$SSHAuthentication",
    "$SubtitleDecoders",
    "$SubtitleEncoders",
    "$SummaryBoxDataSizeLimit",
    "$SuppressInputFormHeads",
    "$SynchronousEvaluation",
    "$SyntaxHandler",
    "$System",
    "$SystemCharacterEncoding",
    "$SystemCredentialStore",
    "$SystemID",
    "$SystemMemory",
    "$SystemShell",
    "$SystemTimeZone",
    "$SystemWordLength",
    "$TargetSystems",
    "$TemplatePath",
    "$TemporaryDirectory",
    "$TemporaryPrefix",
    "$TestFileName",
    "$TextStyle",
    "$TimedOut",
    "$TimeUnit",
    "$TimeZone",
    "$TimeZoneEntity",
    "$TopDirectory",
    "$TraceOff",
    "$TraceOn",
    "$TracePattern",
    "$TracePostAction",
    "$TracePreAction",
    "$UnitSystem",
    "$Urgent",
    "$UserAddOnsDirectory",
    "$UserAgentLanguages",
    "$UserAgentMachine",
    "$UserAgentName",
    "$UserAgentOperatingSystem",
    "$UserAgentString",
    "$UserAgentVersion",
    "$UserBaseDirectory",
    "$UserBasePacletsDirectory",
    "$UserDocumentsDirectory",
    "$Username",
    "$UserName",
    "$UserURLBase",
    "$Version",
    "$VersionNumber",
    "$VideoDecoders",
    "$VideoEncoders",
    "$VoiceStyles",
    "$WolframDocumentsDirectory",
    "$WolframID",
    "$WolframUUID"
  ];
  function e(n) {
    const r = n.regex, a = /([2-9]|[1-2]\d|[3][0-5])\^\^/, i = /(\w*\.\w+|\w+\.\w*|\w+)/, s = /(\d*\.\d+|\d+\.\d*|\d+)/, l = r.either(r.concat(a, i), s), c = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/, d = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/, p = r.either(c, d), _ = /\*\^[+-]?\d+/, g = {
      className: "number",
      relevance: 0,
      begin: r.concat(
        l,
        r.optional(p),
        r.optional(_)
      )
    }, E = /[a-zA-Z$][a-zA-Z0-9$]*/, T = new Set(t), R = { variants: [
      {
        className: "builtin-symbol",
        begin: E,
        // for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)
        "on:begin": (K, J) => {
          T.has(K[0]) || J.ignoreMatch();
        }
      },
      {
        className: "symbol",
        relevance: 0,
        begin: E
      }
    ] }, A = {
      className: "named-character",
      begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
    }, I = {
      className: "operator",
      relevance: 0,
      begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
    }, x = {
      className: "pattern",
      relevance: 0,
      begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
    }, P = {
      className: "slot",
      relevance: 0,
      begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
    }, D = {
      className: "brace",
      relevance: 0,
      begin: /[[\](){}]/
    }, L = {
      className: "message-name",
      relevance: 0,
      begin: r.concat("::", E)
    };
    return {
      name: "Mathematica",
      aliases: [
        "mma",
        "wl"
      ],
      classNameAliases: {
        brace: "punctuation",
        pattern: "type",
        slot: "type",
        symbol: "variable",
        "named-character": "variable",
        "builtin-symbol": "built_in",
        "message-name": "string"
      },
      contains: [
        n.COMMENT(/\(\*/, /\*\)/, { contains: ["self"] }),
        x,
        P,
        L,
        R,
        A,
        n.QUOTE_STRING_MODE,
        g,
        I,
        D
      ]
    };
  }
  return vf = e, vf;
}
var Cf, VA;
function Xee() {
  if (VA) return Cf;
  VA = 1;
  function t(e) {
    const n = "('|\\.')+", r = {
      relevance: 0,
      contains: [{ begin: n }]
    };
    return {
      name: "Matlab",
      keywords: {
        keyword: "arguments break case catch classdef continue else elseif end enumeration events for function global if methods otherwise parfor persistent properties return spmd switch try while",
        built_in: "sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "
      },
      illegal: '(//|"|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              variants: [
                {
                  begin: "\\(",
                  end: "\\)"
                },
                {
                  begin: "\\[",
                  end: "\\]"
                }
              ]
            }
          ]
        },
        {
          className: "built_in",
          begin: /true|false/,
          relevance: 0,
          starts: r
        },
        {
          begin: "[a-zA-Z][a-zA-Z_0-9]*" + n,
          relevance: 0
        },
        {
          className: "number",
          begin: e.C_NUMBER_RE,
          relevance: 0,
          starts: r
        },
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          begin: /\]|\}|\)/,
          relevance: 0,
          starts: r
        },
        {
          className: "string",
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }],
          starts: r
        },
        e.COMMENT("^\\s*%\\{\\s*$", "^\\s*%\\}\\s*$"),
        e.COMMENT("%", "$")
      ]
    };
  }
  return Cf = t, Cf;
}
var Rf, $A;
function Zee() {
  if ($A) return Rf;
  $A = 1;
  function t(e) {
    return {
      name: "Maxima",
      keywords: {
        $pattern: "[A-Za-z_%][0-9A-Za-z_%]*",
        keyword: "if then else elseif for thru do while unless step in and or not",
        literal: "true false unknown inf minf ind und %e %i %pi %phi %gamma",
        built_in: " abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest",
        symbol: "_ __ %|0 %%|0"
      },
      contains: [
        {
          className: "comment",
          begin: "/\\*",
          end: "\\*/",
          contains: ["self"]
        },
        e.QUOTE_STRING_MODE,
        {
          className: "number",
          relevance: 0,
          variants: [
            {
              // float number w/ exponent
              // hmm, I wonder if we ought to include other exponent markers?
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"
            },
            {
              // bigfloat number
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",
              relevance: 10
            },
            {
              // float number w/out exponent
              // Doesn't seem to recognize floats which start with '.'
              begin: "\\b(\\.\\d+|\\d+\\.\\d+)\\b"
            },
            {
              // integer in base up to 36
              // Doesn't seem to recognize integers which end with '.'
              begin: "\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"
            }
          ]
        }
      ],
      illegal: /@/
    };
  }
  return Rf = t, Rf;
}
var Af, WA;
function Jee() {
  if (WA) return Af;
  WA = 1;
  function t(e) {
    return {
      name: "MEL",
      keywords: "int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",
      illegal: "</",
      contains: [
        e.C_NUMBER_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "`",
          end: "`",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          // eats variables
          begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Af = t, Af;
}
var Of, KA;
function ete() {
  if (KA) return Of;
  KA = 1;
  function t(e) {
    const n = {
      keyword: "module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",
      meta: (
        // pragma
        "inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing"
      ),
      built_in: "some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"
    }, r = e.COMMENT("%", "$"), a = {
      className: "number",
      begin: "0'.\\|0[box][0-9a-fA-F]*"
    }, i = e.inherit(e.APOS_STRING_MODE, { relevance: 0 }), s = e.inherit(e.QUOTE_STRING_MODE, { relevance: 0 }), l = {
      className: "subst",
      begin: "\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",
      relevance: 0
    };
    return s.contains = s.contains.slice(), s.contains.push(l), {
      name: "Mercury",
      aliases: [
        "m",
        "moo"
      ],
      keywords: n,
      contains: [
        {
          className: "built_in",
          variants: [
            { begin: "<=>" },
            {
              begin: "<=",
              relevance: 0
            },
            {
              begin: "=>",
              relevance: 0
            },
            { begin: "/\\\\" },
            { begin: "\\\\/" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: ":-\\|-->" },
            {
              begin: "=",
              relevance: 0
            }
          ]
        },
        r,
        e.C_BLOCK_COMMENT_MODE,
        a,
        e.NUMBER_MODE,
        i,
        s,
        {
          // relevance booster
          begin: /:-/
        },
        {
          // relevance booster
          begin: /\.$/
        }
      ]
    };
  }
  return Of = t, Of;
}
var Nf, QA;
function tte() {
  if (QA) return Nf;
  QA = 1;
  function t(e) {
    return {
      name: "MIPS Assembly",
      case_insensitive: !0,
      aliases: ["mips"],
      keywords: {
        $pattern: "\\.?" + e.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg "
        ),
        built_in: "$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "
        // Coprocessor 0 registers
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",
          end: "\\s"
        },
        // lines ending with ; or # aren't really comments, probably auto-detect fail
        e.COMMENT("[;#](?!\\s*$)", "$"),
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "0x[0-9a-f]+"
            },
            {
              // bare number
              begin: "\\b-?\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU MIPS syntax
              begin: "^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // numbered local labels
              begin: "^\\s*[0-9]+:"
            },
            {
              // number local label reference (backwards, forwards)
              begin: "[0-9]+[bf]"
            }
          ],
          relevance: 0
        }
      ],
      // forward slashes are not allowed
      illegal: /\//
    };
  }
  return Nf = t, Nf;
}
var If, jA;
function nte() {
  if (jA) return If;
  jA = 1;
  function t(e) {
    return {
      name: "Mizar",
      keywords: "environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",
      contains: [e.COMMENT("::", "$")]
    };
  }
  return If = t, If;
}
var xf, XA;
function rte() {
  if (XA) return xf;
  XA = 1;
  function t(e) {
    const n = e.regex, r = [
      "abs",
      "accept",
      "alarm",
      "and",
      "atan2",
      "bind",
      "binmode",
      "bless",
      "break",
      "caller",
      "chdir",
      "chmod",
      "chomp",
      "chop",
      "chown",
      "chr",
      "chroot",
      "close",
      "closedir",
      "connect",
      "continue",
      "cos",
      "crypt",
      "dbmclose",
      "dbmopen",
      "defined",
      "delete",
      "die",
      "do",
      "dump",
      "each",
      "else",
      "elsif",
      "endgrent",
      "endhostent",
      "endnetent",
      "endprotoent",
      "endpwent",
      "endservent",
      "eof",
      "eval",
      "exec",
      "exists",
      "exit",
      "exp",
      "fcntl",
      "fileno",
      "flock",
      "for",
      "foreach",
      "fork",
      "format",
      "formline",
      "getc",
      "getgrent",
      "getgrgid",
      "getgrnam",
      "gethostbyaddr",
      "gethostbyname",
      "gethostent",
      "getlogin",
      "getnetbyaddr",
      "getnetbyname",
      "getnetent",
      "getpeername",
      "getpgrp",
      "getpriority",
      "getprotobyname",
      "getprotobynumber",
      "getprotoent",
      "getpwent",
      "getpwnam",
      "getpwuid",
      "getservbyname",
      "getservbyport",
      "getservent",
      "getsockname",
      "getsockopt",
      "given",
      "glob",
      "gmtime",
      "goto",
      "grep",
      "gt",
      "hex",
      "if",
      "index",
      "int",
      "ioctl",
      "join",
      "keys",
      "kill",
      "last",
      "lc",
      "lcfirst",
      "length",
      "link",
      "listen",
      "local",
      "localtime",
      "log",
      "lstat",
      "lt",
      "ma",
      "map",
      "mkdir",
      "msgctl",
      "msgget",
      "msgrcv",
      "msgsnd",
      "my",
      "ne",
      "next",
      "no",
      "not",
      "oct",
      "open",
      "opendir",
      "or",
      "ord",
      "our",
      "pack",
      "package",
      "pipe",
      "pop",
      "pos",
      "print",
      "printf",
      "prototype",
      "push",
      "q|0",
      "qq",
      "quotemeta",
      "qw",
      "qx",
      "rand",
      "read",
      "readdir",
      "readline",
      "readlink",
      "readpipe",
      "recv",
      "redo",
      "ref",
      "rename",
      "require",
      "reset",
      "return",
      "reverse",
      "rewinddir",
      "rindex",
      "rmdir",
      "say",
      "scalar",
      "seek",
      "seekdir",
      "select",
      "semctl",
      "semget",
      "semop",
      "send",
      "setgrent",
      "sethostent",
      "setnetent",
      "setpgrp",
      "setpriority",
      "setprotoent",
      "setpwent",
      "setservent",
      "setsockopt",
      "shift",
      "shmctl",
      "shmget",
      "shmread",
      "shmwrite",
      "shutdown",
      "sin",
      "sleep",
      "socket",
      "socketpair",
      "sort",
      "splice",
      "split",
      "sprintf",
      "sqrt",
      "srand",
      "stat",
      "state",
      "study",
      "sub",
      "substr",
      "symlink",
      "syscall",
      "sysopen",
      "sysread",
      "sysseek",
      "system",
      "syswrite",
      "tell",
      "telldir",
      "tie",
      "tied",
      "time",
      "times",
      "tr",
      "truncate",
      "uc",
      "ucfirst",
      "umask",
      "undef",
      "unless",
      "unlink",
      "unpack",
      "unshift",
      "untie",
      "until",
      "use",
      "utime",
      "values",
      "vec",
      "wait",
      "waitpid",
      "wantarray",
      "warn",
      "when",
      "while",
      "write",
      "x|0",
      "xor",
      "y|0"
    ], a = /[dualxmsipngr]{0,12}/, i = {
      $pattern: /[\w.]+/,
      keyword: r.join(" ")
    }, s = {
      className: "subst",
      begin: "[$@]\\{",
      end: "\\}",
      keywords: i
    }, l = {
      begin: /->\{/,
      end: /\}/
      // contains defined later
    }, c = { variants: [
      { begin: /\$\d/ },
      { begin: n.concat(
        /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
        // negative look-ahead tries to avoid matching patterns that are not
        // Perl at all like $ident$, @ident@, etc.
        "(?![A-Za-z])(?![@$%])"
      ) },
      {
        begin: /[$%@][^\s\w{]/,
        relevance: 0
      }
    ] }, d = [
      e.BACKSLASH_ESCAPE,
      s,
      c
    ], p = [
      /!/,
      /\//,
      /\|/,
      /\?/,
      /'/,
      /"/,
      // valid but infrequent and weird
      /#/
      // valid but infrequent and weird
    ], _ = (E, T, R = "\\1") => {
      const A = R === "\\1" ? R : n.concat(R, T);
      return n.concat(
        n.concat("(?:", E, ")"),
        T,
        /(?:\\.|[^\\\/])*?/,
        A,
        /(?:\\.|[^\\\/])*?/,
        R,
        a
      );
    }, f = (E, T, R) => n.concat(
      n.concat("(?:", E, ")"),
      T,
      /(?:\\.|[^\\\/])*?/,
      R,
      a
    ), g = [
      c,
      e.HASH_COMMENT_MODE,
      e.COMMENT(
        /^=\w/,
        /=cut/,
        { endsWithParent: !0 }
      ),
      l,
      {
        className: "string",
        contains: d,
        variants: [
          {
            begin: "q[qwxr]?\\s*\\(",
            end: "\\)",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\[",
            end: "\\]",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\{",
            end: "\\}",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\|",
            end: "\\|",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*<",
            end: ">",
            relevance: 5
          },
          {
            begin: "qw\\s+q",
            end: "q",
            relevance: 5
          },
          {
            begin: "'",
            end: "'",
            contains: [e.BACKSLASH_ESCAPE]
          },
          {
            begin: '"',
            end: '"'
          },
          {
            begin: "`",
            end: "`",
            contains: [e.BACKSLASH_ESCAPE]
          },
          {
            begin: /\{\w+\}/,
            relevance: 0
          },
          {
            begin: "-?\\w+\\s*=>",
            relevance: 0
          }
        ]
      },
      {
        className: "number",
        begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
        relevance: 0
      },
      {
        // regexp container
        begin: "(\\/\\/|" + e.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
        keywords: "split return print reverse grep",
        relevance: 0,
        contains: [
          e.HASH_COMMENT_MODE,
          {
            className: "regexp",
            variants: [
              // allow matching common delimiters
              { begin: _("s|tr|y", n.either(...p, { capture: !0 })) },
              // and then paired delmis
              { begin: _("s|tr|y", "\\(", "\\)") },
              { begin: _("s|tr|y", "\\[", "\\]") },
              { begin: _("s|tr|y", "\\{", "\\}") }
            ],
            relevance: 2
          },
          {
            className: "regexp",
            variants: [
              {
                // could be a comment in many languages so do not count
                // as relevant
                begin: /(m|qr)\/\//,
                relevance: 0
              },
              // prefix is optional with /regex/
              { begin: f("(?:m|qr)?", /\//, /\//) },
              // allow matching common delimiters
              { begin: f("m|qr", n.either(...p, { capture: !0 }), /\1/) },
              // allow common paired delmins
              { begin: f("m|qr", /\(/, /\)/) },
              { begin: f("m|qr", /\[/, /\]/) },
              { begin: f("m|qr", /\{/, /\}/) }
            ]
          }
        ]
      },
      {
        className: "function",
        beginKeywords: "sub",
        end: "(\\s*\\(.*?\\))?[;{]",
        excludeEnd: !0,
        relevance: 5,
        contains: [e.TITLE_MODE]
      },
      {
        begin: "-\\w\\b",
        relevance: 0
      },
      {
        begin: "^__DATA__$",
        end: "^__END__$",
        subLanguage: "mojolicious",
        contains: [
          {
            begin: "^@@.*",
            end: "$",
            className: "comment"
          }
        ]
      }
    ];
    return s.contains = g, l.contains = g, {
      name: "Perl",
      aliases: [
        "pl",
        "pm"
      ],
      keywords: i,
      contains: g
    };
  }
  return xf = t, xf;
}
var Df, ZA;
function ate() {
  if (ZA) return Df;
  ZA = 1;
  function t(e) {
    return {
      name: "Mojolicious",
      subLanguage: "xml",
      contains: [
        {
          className: "meta",
          begin: "^__(END|DATA)__$"
        },
        // mojolicious line
        {
          begin: "^\\s*%{1,2}={0,2}",
          end: "$",
          subLanguage: "perl"
        },
        // mojolicious block
        {
          begin: "<%{1,2}={0,2}",
          end: "={0,1}%>",
          subLanguage: "perl",
          excludeBegin: !0,
          excludeEnd: !0
        }
      ]
    };
  }
  return Df = t, Df;
}
var wf, JA;
function ite() {
  if (JA) return wf;
  JA = 1;
  function t(e) {
    const n = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: "[$][a-fA-F0-9]+" },
        e.NUMBER_MODE
      ]
    }, r = {
      variants: [
        { match: [
          /(function|method)/,
          /\s+/,
          e.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    }, a = {
      variants: [
        { match: [
          /(class|interface|extends|implements)/,
          /\s+/,
          e.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Monkey",
      case_insensitive: !0,
      keywords: {
        keyword: [
          "public",
          "private",
          "property",
          "continue",
          "exit",
          "extern",
          "new",
          "try",
          "catch",
          "eachin",
          "not",
          "abstract",
          "final",
          "select",
          "case",
          "default",
          "const",
          "local",
          "global",
          "field",
          "end",
          "if",
          "then",
          "else",
          "elseif",
          "endif",
          "while",
          "wend",
          "repeat",
          "until",
          "forever",
          "for",
          "to",
          "step",
          "next",
          "return",
          "module",
          "inline",
          "throw",
          "import",
          // not positive, but these are not literals
          "and",
          "or",
          "shl",
          "shr",
          "mod"
        ],
        built_in: [
          "DebugLog",
          "DebugStop",
          "Error",
          "Print",
          "ACos",
          "ACosr",
          "ASin",
          "ASinr",
          "ATan",
          "ATan2",
          "ATan2r",
          "ATanr",
          "Abs",
          "Abs",
          "Ceil",
          "Clamp",
          "Clamp",
          "Cos",
          "Cosr",
          "Exp",
          "Floor",
          "Log",
          "Max",
          "Max",
          "Min",
          "Min",
          "Pow",
          "Sgn",
          "Sgn",
          "Sin",
          "Sinr",
          "Sqrt",
          "Tan",
          "Tanr",
          "Seed",
          "PI",
          "HALFPI",
          "TWOPI"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      illegal: /\/\*/,
      contains: [
        e.COMMENT("#rem", "#end"),
        e.COMMENT(
          "'",
          "$",
          { relevance: 0 }
        ),
        r,
        a,
        {
          className: "variable.language",
          begin: /\b(self|super)\b/
        },
        {
          className: "meta",
          begin: /\s*#/,
          end: "$",
          keywords: { keyword: "if else elseif endif end then" }
        },
        {
          match: [
            /^\s*/,
            /strict\b/
          ],
          scope: { 2: "meta" }
        },
        {
          beginKeywords: "alias",
          end: "=",
          contains: [e.UNDERSCORE_TITLE_MODE]
        },
        e.QUOTE_STRING_MODE,
        n
      ]
    };
  }
  return wf = t, wf;
}
var Lf, eO;
function ste() {
  if (eO) return Lf;
  eO = 1;
  function t(e) {
    const n = {
      keyword: (
        // Moonscript keywords
        "if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using"
      ),
      literal: "true false nil",
      built_in: "_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"
    }, r = "[A-Za-z$_][0-9A-Za-z$_]*", a = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: n
    }, i = [
      e.inherit(
        e.C_NUMBER_MODE,
        { starts: {
          end: "(\\s*/)?",
          relevance: 0
        } }
      ),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'/,
            end: /'/,
            contains: [e.BACKSLASH_ESCAPE]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              e.BACKSLASH_ESCAPE,
              a
            ]
          }
        ]
      },
      {
        className: "built_in",
        begin: "@__" + e.IDENT_RE
      },
      {
        begin: "@" + e.IDENT_RE
        // relevance booster on par with CoffeeScript
      },
      {
        begin: e.IDENT_RE + "\\\\" + e.IDENT_RE
        // inst\method
      }
    ];
    a.contains = i;
    const s = e.inherit(e.TITLE_MODE, { begin: r }), l = "(\\(.*\\)\\s*)?\\B[-=]>", c = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: !0,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: n,
          contains: ["self"].concat(i)
        }
      ]
    };
    return {
      name: "MoonScript",
      aliases: ["moon"],
      keywords: n,
      illegal: /\/\*/,
      contains: i.concat([
        e.COMMENT("--", "$"),
        {
          className: "function",
          // function: -> =>
          begin: "^\\s*" + r + "\\s*=\\s*" + l,
          end: "[-=]>",
          returnBegin: !0,
          contains: [
            s,
            c
          ]
        },
        {
          begin: /[\(,:=]\s*/,
          // anonymous function start
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: l,
              end: "[-=]>",
              returnBegin: !0,
              contains: [c]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class",
          end: "$",
          illegal: /[:="\[\]]/,
          contains: [
            {
              beginKeywords: "extends",
              endsWithParent: !0,
              illegal: /[:="\[\]]/,
              contains: [s]
            },
            s
          ]
        },
        {
          className: "name",
          // table
          begin: r + ":",
          end: ":",
          returnBegin: !0,
          returnEnd: !0,
          relevance: 0
        }
      ])
    };
  }
  return Lf = t, Lf;
}
var Mf, tO;
function ote() {
  if (tO) return Mf;
  tO = 1;
  function t(e) {
    return {
      name: "N1QL",
      case_insensitive: !0,
      contains: [
        {
          beginKeywords: "build create index delete drop explain infer|10 insert merge prepare select update upsert|10",
          end: /;/,
          keywords: {
            keyword: [
              "all",
              "alter",
              "analyze",
              "and",
              "any",
              "array",
              "as",
              "asc",
              "begin",
              "between",
              "binary",
              "boolean",
              "break",
              "bucket",
              "build",
              "by",
              "call",
              "case",
              "cast",
              "cluster",
              "collate",
              "collection",
              "commit",
              "connect",
              "continue",
              "correlate",
              "cover",
              "create",
              "database",
              "dataset",
              "datastore",
              "declare",
              "decrement",
              "delete",
              "derived",
              "desc",
              "describe",
              "distinct",
              "do",
              "drop",
              "each",
              "element",
              "else",
              "end",
              "every",
              "except",
              "exclude",
              "execute",
              "exists",
              "explain",
              "fetch",
              "first",
              "flatten",
              "for",
              "force",
              "from",
              "function",
              "grant",
              "group",
              "gsi",
              "having",
              "if",
              "ignore",
              "ilike",
              "in",
              "include",
              "increment",
              "index",
              "infer",
              "inline",
              "inner",
              "insert",
              "intersect",
              "into",
              "is",
              "join",
              "key",
              "keys",
              "keyspace",
              "known",
              "last",
              "left",
              "let",
              "letting",
              "like",
              "limit",
              "lsm",
              "map",
              "mapping",
              "matched",
              "materialized",
              "merge",
              "minus",
              "namespace",
              "nest",
              "not",
              "number",
              "object",
              "offset",
              "on",
              "option",
              "or",
              "order",
              "outer",
              "over",
              "parse",
              "partition",
              "password",
              "path",
              "pool",
              "prepare",
              "primary",
              "private",
              "privilege",
              "procedure",
              "public",
              "raw",
              "realm",
              "reduce",
              "rename",
              "return",
              "returning",
              "revoke",
              "right",
              "role",
              "rollback",
              "satisfies",
              "schema",
              "select",
              "self",
              "semi",
              "set",
              "show",
              "some",
              "start",
              "statistics",
              "string",
              "system",
              "then",
              "to",
              "transaction",
              "trigger",
              "truncate",
              "under",
              "union",
              "unique",
              "unknown",
              "unnest",
              "unset",
              "update",
              "upsert",
              "use",
              "user",
              "using",
              "validate",
              "value",
              "valued",
              "values",
              "via",
              "view",
              "when",
              "where",
              "while",
              "with",
              "within",
              "work",
              "xor"
            ],
            literal: [
              "true",
              "false",
              "null",
              "missing|5"
            ],
            built_in: [
              "array_agg",
              "array_append",
              "array_concat",
              "array_contains",
              "array_count",
              "array_distinct",
              "array_ifnull",
              "array_length",
              "array_max",
              "array_min",
              "array_position",
              "array_prepend",
              "array_put",
              "array_range",
              "array_remove",
              "array_repeat",
              "array_replace",
              "array_reverse",
              "array_sort",
              "array_sum",
              "avg",
              "count",
              "max",
              "min",
              "sum",
              "greatest",
              "least",
              "ifmissing",
              "ifmissingornull",
              "ifnull",
              "missingif",
              "nullif",
              "ifinf",
              "ifnan",
              "ifnanorinf",
              "naninf",
              "neginfif",
              "posinfif",
              "clock_millis",
              "clock_str",
              "date_add_millis",
              "date_add_str",
              "date_diff_millis",
              "date_diff_str",
              "date_part_millis",
              "date_part_str",
              "date_trunc_millis",
              "date_trunc_str",
              "duration_to_str",
              "millis",
              "str_to_millis",
              "millis_to_str",
              "millis_to_utc",
              "millis_to_zone_name",
              "now_millis",
              "now_str",
              "str_to_duration",
              "str_to_utc",
              "str_to_zone_name",
              "decode_json",
              "encode_json",
              "encoded_size",
              "poly_length",
              "base64",
              "base64_encode",
              "base64_decode",
              "meta",
              "uuid",
              "abs",
              "acos",
              "asin",
              "atan",
              "atan2",
              "ceil",
              "cos",
              "degrees",
              "e",
              "exp",
              "ln",
              "log",
              "floor",
              "pi",
              "power",
              "radians",
              "random",
              "round",
              "sign",
              "sin",
              "sqrt",
              "tan",
              "trunc",
              "object_length",
              "object_names",
              "object_pairs",
              "object_inner_pairs",
              "object_values",
              "object_inner_values",
              "object_add",
              "object_put",
              "object_remove",
              "object_unwrap",
              "regexp_contains",
              "regexp_like",
              "regexp_position",
              "regexp_replace",
              "contains",
              "initcap",
              "length",
              "lower",
              "ltrim",
              "position",
              "repeat",
              "replace",
              "rtrim",
              "split",
              "substr",
              "title",
              "trim",
              "upper",
              "isarray",
              "isatom",
              "isboolean",
              "isnumber",
              "isobject",
              "isstring",
              "type",
              "toarray",
              "toatom",
              "toboolean",
              "tonumber",
              "toobject",
              "tostring"
            ]
          },
          contains: [
            {
              className: "string",
              begin: "'",
              end: "'",
              contains: [e.BACKSLASH_ESCAPE]
            },
            {
              className: "string",
              begin: '"',
              end: '"',
              contains: [e.BACKSLASH_ESCAPE]
            },
            {
              className: "symbol",
              begin: "`",
              end: "`",
              contains: [e.BACKSLASH_ESCAPE]
            },
            e.C_NUMBER_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Mf = t, Mf;
}
var kf, nO;
function lte() {
  if (nO) return kf;
  nO = 1;
  function t(e) {
    const n = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]+/,
        /:\s*/,
        /$/
      ],
      className: {
        2: "attribute",
        3: "punctuation"
      }
    }, r = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]*[^: ]/,
        /[ ]*:/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "attribute",
        3: "punctuation",
        5: "string"
      }
    }, a = {
      match: [
        /^\s*/,
        />/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "punctuation",
        4: "string"
      }
    }, i = {
      variants: [
        { match: [
          /^\s*/,
          /-/,
          /[ ]/,
          /.*$/
        ] },
        { match: [
          /^\s*/,
          /-$/
        ] }
      ],
      className: {
        2: "bullet",
        4: "string"
      }
    };
    return {
      name: "Nested Text",
      aliases: ["nt"],
      contains: [
        e.inherit(e.HASH_COMMENT_MODE, {
          begin: /^\s*(?=#)/,
          excludeBegin: !0
        }),
        i,
        a,
        n,
        r
      ]
    };
  }
  return kf = t, kf;
}
var Pf, rO;
function cte() {
  if (rO) return Pf;
  rO = 1;
  function t(e) {
    const n = e.regex, r = {
      className: "variable",
      variants: [
        { begin: /\$\d+/ },
        { begin: /\$\{\w+\}/ },
        { begin: n.concat(/[$@]/, e.UNDERSCORE_IDENT_RE) }
      ]
    }, i = {
      endsWithParent: !0,
      keywords: {
        $pattern: /[a-z_]{2,}|\/dev\/poll/,
        literal: [
          "on",
          "off",
          "yes",
          "no",
          "true",
          "false",
          "none",
          "blocked",
          "debug",
          "info",
          "notice",
          "warn",
          "error",
          "crit",
          "select",
          "break",
          "last",
          "permanent",
          "redirect",
          "kqueue",
          "rtsig",
          "epoll",
          "poll",
          "/dev/poll"
        ]
      },
      relevance: 0,
      illegal: "=>",
      contains: [
        e.HASH_COMMENT_MODE,
        {
          className: "string",
          contains: [
            e.BACKSLASH_ESCAPE,
            r
          ],
          variants: [
            {
              begin: /"/,
              end: /"/
            },
            {
              begin: /'/,
              end: /'/
            }
          ]
        },
        // this swallows entire URLs to avoid detecting numbers within
        {
          begin: "([a-z]+):/",
          end: "\\s",
          endsWithParent: !0,
          excludeEnd: !0,
          contains: [r]
        },
        {
          className: "regexp",
          contains: [
            e.BACKSLASH_ESCAPE,
            r
          ],
          variants: [
            {
              begin: "\\s\\^",
              end: "\\s|\\{|;",
              returnEnd: !0
            },
            // regexp locations (~, ~*)
            {
              begin: "~\\*?\\s+",
              end: "\\s|\\{|;",
              returnEnd: !0
            },
            // *.example.com
            { begin: "\\*(\\.[a-z\\-]+)+" },
            // sub.example.*
            { begin: "([a-z\\-]+\\.)+\\*" }
          ]
        },
        // IP
        {
          className: "number",
          begin: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"
        },
        // units
        {
          className: "number",
          begin: "\\b\\d+[kKmMgGdshdwy]?\\b",
          relevance: 0
        },
        r
      ]
    };
    return {
      name: "Nginx config",
      aliases: ["nginxconf"],
      contains: [
        e.HASH_COMMENT_MODE,
        {
          beginKeywords: "upstream location",
          end: /;|\{/,
          contains: i.contains,
          keywords: { section: "upstream location" }
        },
        {
          className: "section",
          begin: n.concat(e.UNDERSCORE_IDENT_RE + n.lookahead(/\s+\{/)),
          relevance: 0
        },
        {
          begin: n.lookahead(e.UNDERSCORE_IDENT_RE + "\\s"),
          end: ";|\\{",
          contains: [
            {
              className: "attribute",
              begin: e.UNDERSCORE_IDENT_RE,
              starts: i
            }
          ],
          relevance: 0
        }
      ],
      illegal: "[^\\s\\}\\{]"
    };
  }
  return Pf = t, Pf;
}
var Ff, aO;
function ute() {
  if (aO) return Ff;
  aO = 1;
  function t(e) {
    return {
      name: "Nim",
      keywords: {
        keyword: [
          "addr",
          "and",
          "as",
          "asm",
          "bind",
          "block",
          "break",
          "case",
          "cast",
          "const",
          "continue",
          "converter",
          "discard",
          "distinct",
          "div",
          "do",
          "elif",
          "else",
          "end",
          "enum",
          "except",
          "export",
          "finally",
          "for",
          "from",
          "func",
          "generic",
          "guarded",
          "if",
          "import",
          "in",
          "include",
          "interface",
          "is",
          "isnot",
          "iterator",
          "let",
          "macro",
          "method",
          "mixin",
          "mod",
          "nil",
          "not",
          "notin",
          "object",
          "of",
          "or",
          "out",
          "proc",
          "ptr",
          "raise",
          "ref",
          "return",
          "shared",
          "shl",
          "shr",
          "static",
          "template",
          "try",
          "tuple",
          "type",
          "using",
          "var",
          "when",
          "while",
          "with",
          "without",
          "xor",
          "yield"
        ],
        literal: [
          "true",
          "false"
        ],
        type: [
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float",
          "float32",
          "float64",
          "bool",
          "char",
          "string",
          "cstring",
          "pointer",
          "expr",
          "stmt",
          "void",
          "auto",
          "any",
          "range",
          "array",
          "openarray",
          "varargs",
          "seq",
          "set",
          "clong",
          "culong",
          "cchar",
          "cschar",
          "cshort",
          "cint",
          "csize",
          "clonglong",
          "cfloat",
          "cdouble",
          "clongdouble",
          "cuchar",
          "cushort",
          "cuint",
          "culonglong",
          "cstringarray",
          "semistatic"
        ],
        built_in: [
          "stdin",
          "stdout",
          "stderr",
          "result"
        ]
      },
      contains: [
        {
          className: "meta",
          // Actually pragma
          begin: /\{\./,
          end: /\.\}/,
          relevance: 10
        },
        {
          className: "string",
          begin: /[a-zA-Z]\w*"/,
          end: /"/,
          contains: [{ begin: /""/ }]
        },
        {
          className: "string",
          begin: /([a-zA-Z]\w*)?"""/,
          end: /"""/
        },
        e.QUOTE_STRING_MODE,
        {
          className: "type",
          begin: /\b[A-Z]\w+\b/,
          relevance: 0
        },
        {
          className: "number",
          relevance: 0,
          variants: [
            { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
            { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
          ]
        },
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return Ff = t, Ff;
}
var Bf, iO;
function dte() {
  if (iO) return Bf;
  iO = 1;
  function t(e) {
    const n = {
      keyword: [
        "rec",
        "with",
        "let",
        "in",
        "inherit",
        "assert",
        "if",
        "else",
        "then"
      ],
      literal: [
        "true",
        "false",
        "or",
        "and",
        "null"
      ],
      built_in: [
        "import",
        "abort",
        "baseNameOf",
        "dirOf",
        "isNull",
        "builtins",
        "map",
        "removeAttrs",
        "throw",
        "toString",
        "derivation"
      ]
    }, r = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      keywords: n
    }, a = {
      className: "char.escape",
      begin: /''\$/
    }, i = {
      begin: /[a-zA-Z0-9-_]+(\s*=)/,
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: /\S+/,
          relevance: 0.2
        }
      ]
    }, s = {
      className: "string",
      contains: [a, r],
      variants: [
        {
          begin: "''",
          end: "''"
        },
        {
          begin: '"',
          end: '"'
        }
      ]
    }, l = [
      e.NUMBER_MODE,
      e.HASH_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      s,
      i
    ];
    return r.contains = l, {
      name: "Nix",
      aliases: ["nixos"],
      keywords: n,
      contains: l
    };
  }
  return Bf = t, Bf;
}
var Uf, sO;
function pte() {
  if (sO) return Uf;
  sO = 1;
  function t(e) {
    return {
      name: "Node REPL",
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "javascript"
            }
          },
          variants: [
            { begin: /^>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  return Uf = t, Uf;
}
var Gf, oO;
function _te() {
  if (oO) return Gf;
  oO = 1;
  function t(e) {
    const n = e.regex, r = [
      "ADMINTOOLS",
      "APPDATA",
      "CDBURN_AREA",
      "CMDLINE",
      "COMMONFILES32",
      "COMMONFILES64",
      "COMMONFILES",
      "COOKIES",
      "DESKTOP",
      "DOCUMENTS",
      "EXEDIR",
      "EXEFILE",
      "EXEPATH",
      "FAVORITES",
      "FONTS",
      "HISTORY",
      "HWNDPARENT",
      "INSTDIR",
      "INTERNET_CACHE",
      "LANGUAGE",
      "LOCALAPPDATA",
      "MUSIC",
      "NETHOOD",
      "OUTDIR",
      "PICTURES",
      "PLUGINSDIR",
      "PRINTHOOD",
      "PROFILE",
      "PROGRAMFILES32",
      "PROGRAMFILES64",
      "PROGRAMFILES",
      "QUICKLAUNCH",
      "RECENT",
      "RESOURCES_LOCALIZED",
      "RESOURCES",
      "SENDTO",
      "SMPROGRAMS",
      "SMSTARTUP",
      "STARTMENU",
      "SYSDIR",
      "TEMP",
      "TEMPLATES",
      "VIDEOS",
      "WINDIR"
    ], a = [
      "ARCHIVE",
      "FILE_ATTRIBUTE_ARCHIVE",
      "FILE_ATTRIBUTE_NORMAL",
      "FILE_ATTRIBUTE_OFFLINE",
      "FILE_ATTRIBUTE_READONLY",
      "FILE_ATTRIBUTE_SYSTEM",
      "FILE_ATTRIBUTE_TEMPORARY",
      "HKCR",
      "HKCU",
      "HKDD",
      "HKEY_CLASSES_ROOT",
      "HKEY_CURRENT_CONFIG",
      "HKEY_CURRENT_USER",
      "HKEY_DYN_DATA",
      "HKEY_LOCAL_MACHINE",
      "HKEY_PERFORMANCE_DATA",
      "HKEY_USERS",
      "HKLM",
      "HKPD",
      "HKU",
      "IDABORT",
      "IDCANCEL",
      "IDIGNORE",
      "IDNO",
      "IDOK",
      "IDRETRY",
      "IDYES",
      "MB_ABORTRETRYIGNORE",
      "MB_DEFBUTTON1",
      "MB_DEFBUTTON2",
      "MB_DEFBUTTON3",
      "MB_DEFBUTTON4",
      "MB_ICONEXCLAMATION",
      "MB_ICONINFORMATION",
      "MB_ICONQUESTION",
      "MB_ICONSTOP",
      "MB_OK",
      "MB_OKCANCEL",
      "MB_RETRYCANCEL",
      "MB_RIGHT",
      "MB_RTLREADING",
      "MB_SETFOREGROUND",
      "MB_TOPMOST",
      "MB_USERICON",
      "MB_YESNO",
      "NORMAL",
      "OFFLINE",
      "READONLY",
      "SHCTX",
      "SHELL_CONTEXT",
      "SYSTEM|TEMPORARY"
    ], i = [
      "addincludedir",
      "addplugindir",
      "appendfile",
      "assert",
      "cd",
      "define",
      "delfile",
      "echo",
      "else",
      "endif",
      "error",
      "execute",
      "finalize",
      "getdllversion",
      "gettlbversion",
      "if",
      "ifdef",
      "ifmacrodef",
      "ifmacrondef",
      "ifndef",
      "include",
      "insertmacro",
      "macro",
      "macroend",
      "makensis",
      "packhdr",
      "searchparse",
      "searchreplace",
      "system",
      "tempfile",
      "undef",
      "uninstfinalize",
      "verbose",
      "warning"
    ], s = {
      className: "variable.constant",
      begin: n.concat(/\$/, n.either(...r))
    }, l = {
      // ${defines}
      className: "variable",
      begin: /\$+\{[\!\w.:-]+\}/
    }, c = {
      // $variables
      className: "variable",
      begin: /\$+\w[\w\.]*/,
      illegal: /\(\)\{\}/
    }, d = {
      // $(language_strings)
      className: "variable",
      begin: /\$+\([\w^.:!-]+\)/
    }, p = {
      // command parameters
      className: "params",
      begin: n.either(...a)
    }, _ = {
      // !compiler_flags
      className: "keyword",
      begin: n.concat(
        /!/,
        n.either(...i)
      )
    }, f = {
      // $\n, $\r, $\t, $$
      className: "char.escape",
      begin: /\$(\\[nrt]|\$)/
    }, g = {
      // plug::ins
      className: "title.function",
      begin: /\w+::\w+/
    }, E = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        },
        {
          begin: "`",
          end: "`"
        }
      ],
      illegal: /\n/,
      contains: [
        f,
        s,
        l,
        c,
        d
      ]
    }, T = [
      "Abort",
      "AddBrandingImage",
      "AddSize",
      "AllowRootDirInstall",
      "AllowSkipFiles",
      "AutoCloseWindow",
      "BGFont",
      "BGGradient",
      "BrandingText",
      "BringToFront",
      "Call",
      "CallInstDLL",
      "Caption",
      "ChangeUI",
      "CheckBitmap",
      "ClearErrors",
      "CompletedText",
      "ComponentText",
      "CopyFiles",
      "CRCCheck",
      "CreateDirectory",
      "CreateFont",
      "CreateShortCut",
      "Delete",
      "DeleteINISec",
      "DeleteINIStr",
      "DeleteRegKey",
      "DeleteRegValue",
      "DetailPrint",
      "DetailsButtonText",
      "DirText",
      "DirVar",
      "DirVerify",
      "EnableWindow",
      "EnumRegKey",
      "EnumRegValue",
      "Exch",
      "Exec",
      "ExecShell",
      "ExecShellWait",
      "ExecWait",
      "ExpandEnvStrings",
      "File",
      "FileBufSize",
      "FileClose",
      "FileErrorText",
      "FileOpen",
      "FileRead",
      "FileReadByte",
      "FileReadUTF16LE",
      "FileReadWord",
      "FileWriteUTF16LE",
      "FileSeek",
      "FileWrite",
      "FileWriteByte",
      "FileWriteWord",
      "FindClose",
      "FindFirst",
      "FindNext",
      "FindWindow",
      "FlushINI",
      "GetCurInstType",
      "GetCurrentAddress",
      "GetDlgItem",
      "GetDLLVersion",
      "GetDLLVersionLocal",
      "GetErrorLevel",
      "GetFileTime",
      "GetFileTimeLocal",
      "GetFullPathName",
      "GetFunctionAddress",
      "GetInstDirError",
      "GetKnownFolderPath",
      "GetLabelAddress",
      "GetTempFileName",
      "GetWinVer",
      "Goto",
      "HideWindow",
      "Icon",
      "IfAbort",
      "IfErrors",
      "IfFileExists",
      "IfRebootFlag",
      "IfRtlLanguage",
      "IfShellVarContextAll",
      "IfSilent",
      "InitPluginsDir",
      "InstallButtonText",
      "InstallColors",
      "InstallDir",
      "InstallDirRegKey",
      "InstProgressFlags",
      "InstType",
      "InstTypeGetText",
      "InstTypeSetText",
      "Int64Cmp",
      "Int64CmpU",
      "Int64Fmt",
      "IntCmp",
      "IntCmpU",
      "IntFmt",
      "IntOp",
      "IntPtrCmp",
      "IntPtrCmpU",
      "IntPtrOp",
      "IsWindow",
      "LangString",
      "LicenseBkColor",
      "LicenseData",
      "LicenseForceSelection",
      "LicenseLangString",
      "LicenseText",
      "LoadAndSetImage",
      "LoadLanguageFile",
      "LockWindow",
      "LogSet",
      "LogText",
      "ManifestDPIAware",
      "ManifestLongPathAware",
      "ManifestMaxVersionTested",
      "ManifestSupportedOS",
      "MessageBox",
      "MiscButtonText",
      "Name|0",
      "Nop",
      "OutFile",
      "Page",
      "PageCallbacks",
      "PEAddResource",
      "PEDllCharacteristics",
      "PERemoveResource",
      "PESubsysVer",
      "Pop",
      "Push",
      "Quit",
      "ReadEnvStr",
      "ReadINIStr",
      "ReadRegDWORD",
      "ReadRegStr",
      "Reboot",
      "RegDLL",
      "Rename",
      "RequestExecutionLevel",
      "ReserveFile",
      "Return",
      "RMDir",
      "SearchPath",
      "SectionGetFlags",
      "SectionGetInstTypes",
      "SectionGetSize",
      "SectionGetText",
      "SectionIn",
      "SectionSetFlags",
      "SectionSetInstTypes",
      "SectionSetSize",
      "SectionSetText",
      "SendMessage",
      "SetAutoClose",
      "SetBrandingImage",
      "SetCompress",
      "SetCompressor",
      "SetCompressorDictSize",
      "SetCtlColors",
      "SetCurInstType",
      "SetDatablockOptimize",
      "SetDateSave",
      "SetDetailsPrint",
      "SetDetailsView",
      "SetErrorLevel",
      "SetErrors",
      "SetFileAttributes",
      "SetFont",
      "SetOutPath",
      "SetOverwrite",
      "SetRebootFlag",
      "SetRegView",
      "SetShellVarContext",
      "SetSilent",
      "ShowInstDetails",
      "ShowUninstDetails",
      "ShowWindow",
      "SilentInstall",
      "SilentUnInstall",
      "Sleep",
      "SpaceTexts",
      "StrCmp",
      "StrCmpS",
      "StrCpy",
      "StrLen",
      "SubCaption",
      "Unicode",
      "UninstallButtonText",
      "UninstallCaption",
      "UninstallIcon",
      "UninstallSubCaption",
      "UninstallText",
      "UninstPage",
      "UnRegDLL",
      "Var",
      "VIAddVersionKey",
      "VIFileVersion",
      "VIProductVersion",
      "WindowIcon",
      "WriteINIStr",
      "WriteRegBin",
      "WriteRegDWORD",
      "WriteRegExpandStr",
      "WriteRegMultiStr",
      "WriteRegNone",
      "WriteRegStr",
      "WriteUninstaller",
      "XPStyle"
    ], R = [
      "admin",
      "all",
      "auto",
      "both",
      "bottom",
      "bzip2",
      "colored",
      "components",
      "current",
      "custom",
      "directory",
      "false",
      "force",
      "hide",
      "highest",
      "ifdiff",
      "ifnewer",
      "instfiles",
      "lastused",
      "leave",
      "left",
      "license",
      "listonly",
      "lzma",
      "nevershow",
      "none",
      "normal",
      "notset",
      "off",
      "on",
      "open",
      "print",
      "right",
      "show",
      "silent",
      "silentlog",
      "smooth",
      "textonly",
      "top",
      "true",
      "try",
      "un.components",
      "un.custom",
      "un.directory",
      "un.instfiles",
      "un.license",
      "uninstConfirm",
      "user",
      "Win10",
      "Win7",
      "Win8",
      "WinVista",
      "zlib"
    ], A = {
      match: [
        /Function/,
        /\s+/,
        n.concat(/(\.)?/, e.IDENT_RE)
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    }, x = {
      match: [
        /Var/,
        /\s+/,
        /(?:\/GLOBAL\s+)?/,
        /[A-Za-z][\w.]*/
      ],
      scope: {
        1: "keyword",
        3: "params",
        4: "variable"
      }
    };
    return {
      name: "NSIS",
      case_insensitive: !0,
      keywords: {
        keyword: T,
        literal: R
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        x,
        A,
        { beginKeywords: "Function PageEx Section SectionGroup FunctionEnd SectionEnd" },
        E,
        _,
        l,
        c,
        d,
        p,
        g,
        e.NUMBER_MODE
      ]
    };
  }
  return Gf = t, Gf;
}
var Hf, lO;
function mte() {
  if (lO) return Hf;
  lO = 1;
  function t(e) {
    const n = {
      className: "built_in",
      begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
    }, r = /[a-zA-Z@][a-zA-Z0-9_]*/, c = {
      "variable.language": [
        "this",
        "super"
      ],
      $pattern: r,
      keyword: [
        "while",
        "export",
        "sizeof",
        "typedef",
        "const",
        "struct",
        "for",
        "union",
        "volatile",
        "static",
        "mutable",
        "if",
        "do",
        "return",
        "goto",
        "enum",
        "else",
        "break",
        "extern",
        "asm",
        "case",
        "default",
        "register",
        "explicit",
        "typename",
        "switch",
        "continue",
        "inline",
        "readonly",
        "assign",
        "readwrite",
        "self",
        "@synchronized",
        "id",
        "typeof",
        "nonatomic",
        "IBOutlet",
        "IBAction",
        "strong",
        "weak",
        "copy",
        "in",
        "out",
        "inout",
        "bycopy",
        "byref",
        "oneway",
        "__strong",
        "__weak",
        "__block",
        "__autoreleasing",
        "@private",
        "@protected",
        "@public",
        "@try",
        "@property",
        "@end",
        "@throw",
        "@catch",
        "@finally",
        "@autoreleasepool",
        "@synthesize",
        "@dynamic",
        "@selector",
        "@optional",
        "@required",
        "@encode",
        "@package",
        "@import",
        "@defs",
        "@compatibility_alias",
        "__bridge",
        "__bridge_transfer",
        "__bridge_retained",
        "__bridge_retain",
        "__covariant",
        "__contravariant",
        "__kindof",
        "_Nonnull",
        "_Nullable",
        "_Null_unspecified",
        "__FUNCTION__",
        "__PRETTY_FUNCTION__",
        "__attribute__",
        "getter",
        "setter",
        "retain",
        "unsafe_unretained",
        "nonnull",
        "nullable",
        "null_unspecified",
        "null_resettable",
        "class",
        "instancetype",
        "NS_DESIGNATED_INITIALIZER",
        "NS_UNAVAILABLE",
        "NS_REQUIRES_SUPER",
        "NS_RETURNS_INNER_POINTER",
        "NS_INLINE",
        "NS_AVAILABLE",
        "NS_DEPRECATED",
        "NS_ENUM",
        "NS_OPTIONS",
        "NS_SWIFT_UNAVAILABLE",
        "NS_ASSUME_NONNULL_BEGIN",
        "NS_ASSUME_NONNULL_END",
        "NS_REFINED_FOR_SWIFT",
        "NS_SWIFT_NAME",
        "NS_SWIFT_NOTHROW",
        "NS_DURING",
        "NS_HANDLER",
        "NS_ENDHANDLER",
        "NS_VALUERETURN",
        "NS_VOIDRETURN"
      ],
      literal: [
        "false",
        "true",
        "FALSE",
        "TRUE",
        "nil",
        "YES",
        "NO",
        "NULL"
      ],
      built_in: [
        "dispatch_once_t",
        "dispatch_queue_t",
        "dispatch_sync",
        "dispatch_async",
        "dispatch_once"
      ],
      type: [
        "int",
        "float",
        "char",
        "unsigned",
        "signed",
        "short",
        "long",
        "double",
        "wchar_t",
        "unichar",
        "void",
        "bool",
        "BOOL",
        "id|0",
        "_Bool"
      ]
    }, d = {
      $pattern: r,
      keyword: [
        "@interface",
        "@class",
        "@protocol",
        "@implementation"
      ]
    };
    return {
      name: "Objective-C",
      aliases: [
        "mm",
        "objc",
        "obj-c",
        "obj-c++",
        "objective-c++"
      ],
      keywords: c,
      illegal: "</",
      contains: [
        n,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.C_NUMBER_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        {
          className: "string",
          variants: [
            {
              begin: '@"',
              end: '"',
              illegal: "\\n",
              contains: [e.BACKSLASH_ESCAPE]
            }
          ]
        },
        {
          className: "meta",
          begin: /#\s*[a-z]+\b/,
          end: /$/,
          keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
          contains: [
            {
              begin: /\\\n/,
              relevance: 0
            },
            e.inherit(e.QUOTE_STRING_MODE, { className: "string" }),
            {
              className: "string",
              begin: /<.*?>/,
              end: /$/,
              illegal: "\\n"
            },
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "class",
          begin: "(" + d.keyword.join("|") + ")\\b",
          end: /(\{|$)/,
          excludeEnd: !0,
          keywords: d,
          contains: [e.UNDERSCORE_TITLE_MODE]
        },
        {
          begin: "\\." + e.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
  }
  return Hf = t, Hf;
}
var Yf, cO;
function fte() {
  if (cO) return Yf;
  cO = 1;
  function t(e) {
    return {
      name: "OCaml",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: "and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",
        built_in: (
          /* built-in types */
          "array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref"
        ),
        literal: "true false"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: "\\[(\\|\\|)?\\]|\\(\\)",
          relevance: 0
        },
        e.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*",
          relevance: 0
        },
        e.inherit(e.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /->/
          // relevance booster
        }
      ]
    };
  }
  return Yf = t, Yf;
}
var zf, uO;
function gte() {
  if (uO) return zf;
  uO = 1;
  function t(e) {
    const n = {
      className: "keyword",
      begin: "\\$(f[asn]|t|vp[rtd]|children)"
    }, r = {
      className: "literal",
      begin: "false|true|PI|undef"
    }, a = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(e-?\\d+)?",
      // adds 1e5, 1e-10
      relevance: 0
    }, i = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), s = {
      className: "meta",
      keywords: { keyword: "include use" },
      begin: "include|use <",
      end: ">"
    }, l = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: [
        "self",
        a,
        i,
        n,
        r
      ]
    }, c = {
      begin: "[*!#%]",
      relevance: 0
    }, d = {
      className: "function",
      beginKeywords: "module function",
      end: /=|\{/,
      contains: [
        l,
        e.UNDERSCORE_TITLE_MODE
      ]
    };
    return {
      name: "OpenSCAD",
      aliases: ["scad"],
      keywords: {
        keyword: "function module include use for intersection_for if else \\%",
        literal: "false true PI undef",
        built_in: "circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        a,
        s,
        i,
        n,
        c,
        d
      ]
    };
  }
  return zf = t, zf;
}
var qf, dO;
function hte() {
  if (dO) return qf;
  dO = 1;
  function t(e) {
    const n = {
      $pattern: /\.?\w+/,
      keyword: "abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained"
    }, r = e.COMMENT(
      /\{/,
      /\}/,
      { relevance: 0 }
    ), a = e.COMMENT(
      "\\(\\*",
      "\\*\\)",
      { relevance: 10 }
    ), i = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [{ begin: "''" }]
    }, s = {
      className: "string",
      begin: "(#\\d+)+"
    }, l = {
      beginKeywords: "function constructor destructor procedure method",
      end: "[:;]",
      keywords: "function constructor|10 destructor|10 procedure|10 method|10",
      contains: [
        e.inherit(e.TITLE_MODE, { scope: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          keywords: n,
          contains: [
            i,
            s
          ]
        },
        r,
        a
      ]
    }, c = {
      scope: "punctuation",
      match: /;/,
      relevance: 0
    };
    return {
      name: "Oxygene",
      case_insensitive: !0,
      keywords: n,
      illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
      contains: [
        r,
        a,
        e.C_LINE_COMMENT_MODE,
        i,
        s,
        e.NUMBER_MODE,
        l,
        c
      ]
    };
  }
  return qf = t, qf;
}
var Vf, pO;
function Ete() {
  if (pO) return Vf;
  pO = 1;
  function t(e) {
    const n = e.COMMENT(
      /\{/,
      /\}/,
      { contains: ["self"] }
    );
    return {
      name: "Parser3",
      subLanguage: "xml",
      relevance: 0,
      contains: [
        e.COMMENT("^#", "$"),
        e.COMMENT(
          /\^rem\{/,
          /\}/,
          {
            relevance: 10,
            contains: [n]
          }
        ),
        {
          className: "meta",
          begin: "^@(?:BASE|USE|CLASS|OPTIONS)$",
          relevance: 10
        },
        {
          className: "title",
          begin: "@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"
        },
        {
          className: "variable",
          begin: /\$\{?[\w\-.:]+\}?/
        },
        {
          className: "keyword",
          begin: /\^[\w\-.:]+/
        },
        {
          className: "number",
          begin: "\\^#[0-9a-fA-F]+"
        },
        e.C_NUMBER_MODE
      ]
    };
  }
  return Vf = t, Vf;
}
var $f, _O;
function Ste() {
  if (_O) return $f;
  _O = 1;
  function t(e) {
    const n = {
      className: "variable",
      begin: /\$[\w\d#@][\w\d_]*/,
      relevance: 0
    }, r = {
      className: "variable",
      begin: /<(?!\/)/,
      end: />/
    };
    return {
      name: "Packet Filter config",
      aliases: ["pf.conf"],
      keywords: {
        $pattern: /[a-z0-9_<>-]+/,
        built_in: (
          /* block match pass are "actions" in pf.conf(5), the rest are
           * lexically similar top-level commands.
           */
          "block match pass load anchor|5 antispoof|10 set table"
        ),
        keyword: "in out log quick on rdomain inet inet6 proto from port os to route allow-opts divert-packet divert-reply divert-to flags group icmp-type icmp6-type label once probability recieved-on rtable prio queue tos tag tagged user keep fragment for os drop af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin source-hash static-port dup-to reply-to route-to parent bandwidth default min max qlimit block-policy debug fingerprints hostid limit loginterface optimization reassemble ruleset-optimization basic none profile skip state-defaults state-policy timeout const counters persist no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy source-track global rule max-src-nodes max-src-states max-src-conn max-src-conn-rate overload flush scrub|5 max-mss min-ttl no-df|10 random-id",
        literal: "all any no-route self urpf-failed egress|5 unknown"
      },
      contains: [
        e.HASH_COMMENT_MODE,
        e.NUMBER_MODE,
        e.QUOTE_STRING_MODE,
        n,
        r
      ]
    };
  }
  return $f = t, $f;
}
var Wf, mO;
function bte() {
  if (mO) return Wf;
  mO = 1;
  function t(e) {
    const n = e.COMMENT("--", "$"), r = "[a-zA-Z_][a-zA-Z_0-9$]*", a = "\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$", i = "<<\\s*" + r + "\\s*>>", s = (
      // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
      // https://www.postgresql.org/docs/11/static/sql-commands.html
      // SQL commands (starting words)
      "ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY "
    ), l = (
      // only those not in keywrods already
      "SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS "
    ), c = "ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ", d = (
      // https://www.postgresql.org/docs/11/static/datatype.html
      "BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 "
    ), p = d.trim().split(" ").map(function(R) {
      return R.split("|")[0];
    }).join("|"), _ = "CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ", f = "FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ", g = (
      // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
      "SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED "
    ), T = /* https://www.postgresql.org/docs/11/static/functions-aggregate.html */ "ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST ".trim().split(" ").map(function(R) {
      return R.split("|")[0];
    }).join("|");
    return {
      name: "PostgreSQL",
      aliases: [
        "postgres",
        "postgresql"
      ],
      supersetOf: "sql",
      case_insensitive: !0,
      keywords: {
        keyword: s + c + l,
        built_in: _ + f + g
      },
      // Forbid some cunstructs from other languages to improve autodetect. In fact
      // "[a-z]:" is legal (as part of array slice), but improbabal.
      illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
      contains: [
        // special handling of some words, which are reserved only in some contexts
        {
          className: "keyword",
          variants: [
            { begin: /\bTEXT\s*SEARCH\b/ },
            { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
            { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
            { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
            { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
            { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
            { begin: /\bEVENT\s+TRIGGER\b/ },
            { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
            { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
            { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
            { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
            { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
            { begin: /\bPRESERVE\s+ROWS\b/ },
            { begin: /\bDISCARD\s+PLANS\b/ },
            { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
            { begin: /\bSKIP\s+LOCKED\b/ },
            { begin: /\bGROUPING\s+SETS\b/ },
            { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
            { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
            { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
            { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
            { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
            { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
            { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
            { begin: /\bSECURITY\s+LABEL\b/ },
            { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
            { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
            { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
            { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
            { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
            { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
            { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
            { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
            { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
            { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
            { begin: /\bAT\s+TIME\s+ZONE\b/ },
            { begin: /\bGRANTED\s+BY\b/ },
            { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
            { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
            { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
            { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
            { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
          ]
        },
        // functions named as keywords, followed by '('
        {
          begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
          // keywords: { built_in: 'FORMAT FAMILY VERSION' }
        },
        // INCLUDE ( ... ) in index_parameters in CREATE TABLE
        {
          begin: /\bINCLUDE\s*\(/,
          keywords: "INCLUDE"
        },
        // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
        { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
        // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
        // and in PL/pgSQL RAISE ... USING
        { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
        // PG_smth; HAS_some_PRIVILEGE
        {
          // className: 'built_in',
          begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
          relevance: 10
        },
        // extract
        {
          begin: /\bEXTRACT\s*\(/,
          end: /\bFROM\b/,
          returnEnd: !0,
          keywords: {
            // built_in: 'EXTRACT',
            type: "CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"
          }
        },
        // xmlelement, xmlpi - special NAME
        {
          begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
          keywords: {
            // built_in: 'XMLELEMENT XMLPI',
            keyword: "NAME"
          }
        },
        // xmlparse, xmlserialize
        {
          begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
          keywords: {
            // built_in: 'XMLPARSE XMLSERIALIZE',
            keyword: "DOCUMENT CONTENT"
          }
        },
        // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
        // nearest following numeric constant. Without with trick we find a lot of "keywords"
        // in 'avrasm' autodetection test...
        {
          beginKeywords: "CACHE INCREMENT MAXVALUE MINVALUE",
          end: e.C_NUMBER_RE,
          returnEnd: !0,
          keywords: "BY CACHE INCREMENT MAXVALUE MINVALUE"
        },
        // WITH|WITHOUT TIME ZONE as part of datatype
        {
          className: "type",
          begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
        },
        // INTERVAL optional fields
        {
          className: "type",
          begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
        },
        // Pseudo-types which allowed only as return type
        {
          begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
          keywords: {
            keyword: "RETURNS",
            type: "LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"
          }
        },
        // Known functions - only when followed by '('
        {
          begin: "\\b(" + T + ")\\s*\\("
          // keywords: { built_in: FUNCTIONS }
        },
        // Types
        {
          begin: "\\.(" + p + ")\\b"
          // prevent highlight as type, say, 'oid' in 'pgclass.oid'
        },
        {
          begin: "\\b(" + p + ")\\s+PATH\\b",
          // in XMLTABLE
          keywords: {
            keyword: "PATH",
            // hopefully no one would use PATH type in XMLTABLE...
            type: d.replace("PATH ", "")
          }
        },
        {
          className: "type",
          begin: "\\b(" + p + ")\\b"
        },
        // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          className: "string",
          begin: "(e|E|u&|U&)'",
          end: "'",
          contains: [{ begin: "\\\\." }],
          relevance: 10
        },
        e.END_SAME_AS_BEGIN({
          begin: a,
          end: a,
          contains: [
            {
              // actually we want them all except SQL; listed are those with known implementations
              // and XML + JSON just in case
              subLanguage: [
                "pgsql",
                "perl",
                "python",
                "tcl",
                "r",
                "lua",
                "java",
                "php",
                "ruby",
                "bash",
                "scheme",
                "xml",
                "json"
              ],
              endsWithParent: !0
            }
          ]
        }),
        // identifiers in quotes
        {
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }]
        },
        // numbers
        e.C_NUMBER_MODE,
        // comments
        e.C_BLOCK_COMMENT_MODE,
        n,
        // PL/pgSQL staff
        // %ROWTYPE, %TYPE, $n
        {
          className: "meta",
          variants: [
            {
              // %TYPE, %ROWTYPE
              begin: "%(ROW)?TYPE",
              relevance: 10
            },
            {
              // $n
              begin: "\\$\\d+"
            },
            {
              // #compiler option
              begin: "^#\\w",
              end: "$"
            }
          ]
        },
        // <<labeles>>
        {
          className: "symbol",
          begin: i,
          relevance: 10
        }
      ]
    };
  }
  return Wf = t, Wf;
}
var Kf, fO;
function Tte() {
  if (fO) return Kf;
  fO = 1;
  function t(e) {
    const n = e.regex, r = /(?![A-Za-z0-9])(?![$])/, a = n.concat(
      /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
      r
    ), i = n.concat(
      /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
      r
    ), s = {
      scope: "variable",
      match: "\\$+" + a
    }, l = {
      scope: "meta",
      variants: [
        { begin: /<\?php/, relevance: 10 },
        // boost for obvious PHP
        { begin: /<\?=/ },
        // less relevant per PSR-1 which says not to use short-tags
        { begin: /<\?/, relevance: 0.1 },
        { begin: /\?>/ }
        // end php tag
      ]
    }, c = {
      scope: "subst",
      variants: [
        { begin: /\$\w+/ },
        {
          begin: /\{\$/,
          end: /\}/
        }
      ]
    }, d = e.inherit(e.APOS_STRING_MODE, { illegal: null }), p = e.inherit(e.QUOTE_STRING_MODE, {
      illegal: null,
      contains: e.QUOTE_STRING_MODE.contains.concat(c)
    }), _ = {
      begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
      end: /[ \t]*(\w+)\b/,
      contains: e.QUOTE_STRING_MODE.contains.concat(c),
      "on:begin": (ge, fe) => {
        fe.data._beginMatch = ge[1] || ge[2];
      },
      "on:end": (ge, fe) => {
        fe.data._beginMatch !== ge[1] && fe.ignoreMatch();
      }
    }, f = e.END_SAME_AS_BEGIN({
      begin: /<<<[ \t]*'(\w+)'\n/,
      end: /[ \t]*(\w+)\b/
    }), g = `[ 	
]`, E = {
      scope: "string",
      variants: [
        p,
        d,
        _,
        f
      ]
    }, T = {
      scope: "number",
      variants: [
        { begin: "\\b0[bB][01]+(?:_[01]+)*\\b" },
        // Binary w/ underscore support
        { begin: "\\b0[oO][0-7]+(?:_[0-7]+)*\\b" },
        // Octals w/ underscore support
        { begin: "\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b" },
        // Hex w/ underscore support
        // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
        { begin: "(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?" }
      ],
      relevance: 0
    }, R = [
      "false",
      "null",
      "true"
    ], A = [
      // Magic constants:
      // <https://www.php.net/manual/en/language.constants.predefined.php>
      "__CLASS__",
      "__DIR__",
      "__FILE__",
      "__FUNCTION__",
      "__COMPILER_HALT_OFFSET__",
      "__LINE__",
      "__METHOD__",
      "__NAMESPACE__",
      "__TRAIT__",
      // Function that look like language construct or language construct that look like function:
      // List of keywords that may not require parenthesis
      "die",
      "echo",
      "exit",
      "include",
      "include_once",
      "print",
      "require",
      "require_once",
      // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
      // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
      // Other keywords:
      // <https://www.php.net/manual/en/reserved.php>
      // <https://www.php.net/manual/en/language.types.type-juggling.php>
      "array",
      "abstract",
      "and",
      "as",
      "binary",
      "bool",
      "boolean",
      "break",
      "callable",
      "case",
      "catch",
      "class",
      "clone",
      "const",
      "continue",
      "declare",
      "default",
      "do",
      "double",
      "else",
      "elseif",
      "empty",
      "enddeclare",
      "endfor",
      "endforeach",
      "endif",
      "endswitch",
      "endwhile",
      "enum",
      "eval",
      "extends",
      "final",
      "finally",
      "float",
      "for",
      "foreach",
      "from",
      "global",
      "goto",
      "if",
      "implements",
      "instanceof",
      "insteadof",
      "int",
      "integer",
      "interface",
      "isset",
      "iterable",
      "list",
      "match|0",
      "mixed",
      "new",
      "never",
      "object",
      "or",
      "private",
      "protected",
      "public",
      "readonly",
      "real",
      "return",
      "string",
      "switch",
      "throw",
      "trait",
      "try",
      "unset",
      "use",
      "var",
      "void",
      "while",
      "xor",
      "yield"
    ], I = [
      // Standard PHP library:
      // <https://www.php.net/manual/en/book.spl.php>
      "Error|0",
      "AppendIterator",
      "ArgumentCountError",
      "ArithmeticError",
      "ArrayIterator",
      "ArrayObject",
      "AssertionError",
      "BadFunctionCallException",
      "BadMethodCallException",
      "CachingIterator",
      "CallbackFilterIterator",
      "CompileError",
      "Countable",
      "DirectoryIterator",
      "DivisionByZeroError",
      "DomainException",
      "EmptyIterator",
      "ErrorException",
      "Exception",
      "FilesystemIterator",
      "FilterIterator",
      "GlobIterator",
      "InfiniteIterator",
      "InvalidArgumentException",
      "IteratorIterator",
      "LengthException",
      "LimitIterator",
      "LogicException",
      "MultipleIterator",
      "NoRewindIterator",
      "OutOfBoundsException",
      "OutOfRangeException",
      "OuterIterator",
      "OverflowException",
      "ParentIterator",
      "ParseError",
      "RangeException",
      "RecursiveArrayIterator",
      "RecursiveCachingIterator",
      "RecursiveCallbackFilterIterator",
      "RecursiveDirectoryIterator",
      "RecursiveFilterIterator",
      "RecursiveIterator",
      "RecursiveIteratorIterator",
      "RecursiveRegexIterator",
      "RecursiveTreeIterator",
      "RegexIterator",
      "RuntimeException",
      "SeekableIterator",
      "SplDoublyLinkedList",
      "SplFileInfo",
      "SplFileObject",
      "SplFixedArray",
      "SplHeap",
      "SplMaxHeap",
      "SplMinHeap",
      "SplObjectStorage",
      "SplObserver",
      "SplPriorityQueue",
      "SplQueue",
      "SplStack",
      "SplSubject",
      "SplTempFileObject",
      "TypeError",
      "UnderflowException",
      "UnexpectedValueException",
      "UnhandledMatchError",
      // Reserved interfaces:
      // <https://www.php.net/manual/en/reserved.interfaces.php>
      "ArrayAccess",
      "BackedEnum",
      "Closure",
      "Fiber",
      "Generator",
      "Iterator",
      "IteratorAggregate",
      "Serializable",
      "Stringable",
      "Throwable",
      "Traversable",
      "UnitEnum",
      "WeakReference",
      "WeakMap",
      // Reserved classes:
      // <https://www.php.net/manual/en/reserved.classes.php>
      "Directory",
      "__PHP_Incomplete_Class",
      "parent",
      "php_user_filter",
      "self",
      "static",
      "stdClass"
    ], P = {
      keyword: A,
      literal: ((ge) => {
        const fe = [];
        return ge.forEach((Fe) => {
          fe.push(Fe), Fe.toLowerCase() === Fe ? fe.push(Fe.toUpperCase()) : fe.push(Fe.toLowerCase());
        }), fe;
      })(R),
      built_in: I
    }, D = (ge) => ge.map((fe) => fe.replace(/\|\d+$/, "")), L = { variants: [
      {
        match: [
          /new/,
          n.concat(g, "+"),
          // to prevent built ins from being confused as the class constructor call
          n.concat("(?!", D(I).join("\\b|"), "\\b)"),
          i
        ],
        scope: {
          1: "keyword",
          4: "title.class"
        }
      }
    ] }, K = n.concat(a, "\\b(?!\\()"), J = { variants: [
      {
        match: [
          n.concat(
            /::/,
            n.lookahead(/(?!class\b)/)
          ),
          K
        ],
        scope: { 2: "variable.constant" }
      },
      {
        match: [
          /::/,
          /class/
        ],
        scope: { 2: "variable.language" }
      },
      {
        match: [
          i,
          n.concat(
            /::/,
            n.lookahead(/(?!class\b)/)
          ),
          K
        ],
        scope: {
          1: "title.class",
          3: "variable.constant"
        }
      },
      {
        match: [
          i,
          n.concat(
            "::",
            n.lookahead(/(?!class\b)/)
          )
        ],
        scope: { 1: "title.class" }
      },
      {
        match: [
          i,
          /::/,
          /class/
        ],
        scope: {
          1: "title.class",
          3: "variable.language"
        }
      }
    ] }, X = {
      scope: "attr",
      match: n.concat(a, n.lookahead(":"), n.lookahead(/(?!::)/))
    }, $ = {
      relevance: 0,
      begin: /\(/,
      end: /\)/,
      keywords: P,
      contains: [
        X,
        s,
        J,
        e.C_BLOCK_COMMENT_MODE,
        E,
        T,
        L
      ]
    }, ae = {
      relevance: 0,
      match: [
        /\b/,
        // to prevent keywords from being confused as the function title
        n.concat("(?!fn\\b|function\\b|", D(A).join("\\b|"), "|", D(I).join("\\b|"), "\\b)"),
        a,
        n.concat(g, "*"),
        n.lookahead(/(?=\()/)
      ],
      scope: { 3: "title.function.invoke" },
      contains: [$]
    };
    $.contains.push(ae);
    const ce = [
      X,
      J,
      e.C_BLOCK_COMMENT_MODE,
      E,
      T,
      L
    ], ve = {
      begin: n.concat(/#\[\s*/, i),
      beginScope: "meta",
      end: /]/,
      endScope: "meta",
      keywords: {
        literal: R,
        keyword: [
          "new",
          "array"
        ]
      },
      contains: [
        {
          begin: /\[/,
          end: /]/,
          keywords: {
            literal: R,
            keyword: [
              "new",
              "array"
            ]
          },
          contains: [
            "self",
            ...ce
          ]
        },
        ...ce,
        {
          scope: "meta",
          match: i
        }
      ]
    };
    return {
      case_insensitive: !1,
      keywords: P,
      contains: [
        ve,
        e.HASH_COMMENT_MODE,
        e.COMMENT("//", "$"),
        e.COMMENT(
          "/\\*",
          "\\*/",
          { contains: [
            {
              scope: "doctag",
              match: "@[A-Za-z]+"
            }
          ] }
        ),
        {
          match: /__halt_compiler\(\);/,
          keywords: "__halt_compiler",
          starts: {
            scope: "comment",
            end: e.MATCH_NOTHING_RE,
            contains: [
              {
                match: /\?>/,
                scope: "meta",
                endsParent: !0
              }
            ]
          }
        },
        l,
        {
          scope: "variable.language",
          match: /\$this\b/
        },
        s,
        ae,
        J,
        {
          match: [
            /const/,
            /\s/,
            a
          ],
          scope: {
            1: "keyword",
            3: "variable.constant"
          }
        },
        L,
        {
          scope: "function",
          relevance: 0,
          beginKeywords: "fn function",
          end: /[;{]/,
          excludeEnd: !0,
          illegal: "[$%\\[]",
          contains: [
            { beginKeywords: "use" },
            e.UNDERSCORE_TITLE_MODE,
            {
              begin: "=>",
              // No markup, just a relevance booster
              endsParent: !0
            },
            {
              scope: "params",
              begin: "\\(",
              end: "\\)",
              excludeBegin: !0,
              excludeEnd: !0,
              keywords: P,
              contains: [
                "self",
                s,
                J,
                e.C_BLOCK_COMMENT_MODE,
                E,
                T
              ]
            }
          ]
        },
        {
          scope: "class",
          variants: [
            {
              beginKeywords: "enum",
              illegal: /[($"]/
            },
            {
              beginKeywords: "class interface trait",
              illegal: /[:($"]/
            }
          ],
          relevance: 0,
          end: /\{/,
          excludeEnd: !0,
          contains: [
            { beginKeywords: "extends implements" },
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        // both use and namespace still use "old style" rules (vs multi-match)
        // because the namespace name can include `\` and we still want each
        // element to be treated as its own *individual* title
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: ";",
          illegal: /[.']/,
          contains: [e.inherit(e.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
        },
        {
          beginKeywords: "use",
          relevance: 0,
          end: ";",
          contains: [
            // TODO: title.function vs title.class
            {
              match: /\b(as|const|function)\b/,
              scope: "keyword"
            },
            // TODO: could be title.class or title.function
            e.UNDERSCORE_TITLE_MODE
          ]
        },
        E,
        T
      ]
    };
  }
  return Kf = t, Kf;
}
var Qf, gO;
function yte() {
  if (gO) return Qf;
  gO = 1;
  function t(e) {
    return {
      name: "PHP template",
      subLanguage: "xml",
      contains: [
        {
          begin: /<\?(php|=)?/,
          end: /\?>/,
          subLanguage: "php",
          contains: [
            // We don't want the php closing tag ?> to close the PHP block when
            // inside any of the following blocks:
            {
              begin: "/\\*",
              end: "\\*/",
              skip: !0
            },
            {
              begin: 'b"',
              end: '"',
              skip: !0
            },
            {
              begin: "b'",
              end: "'",
              skip: !0
            },
            e.inherit(e.APOS_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: !0
            }),
            e.inherit(e.QUOTE_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: !0
            })
          ]
        }
      ]
    };
  }
  return Qf = t, Qf;
}
var jf, hO;
function vte() {
  if (hO) return jf;
  hO = 1;
  function t(e) {
    return {
      name: "Plain text",
      aliases: [
        "text",
        "txt"
      ],
      disableAutodetect: !0
    };
  }
  return jf = t, jf;
}
var Xf, EO;
function Cte() {
  if (EO) return Xf;
  EO = 1;
  function t(e) {
    const n = {
      keyword: "actor addressof and as be break class compile_error compile_intrinsic consume continue delegate digestof do else elseif embed end error for fun if ifdef in interface is isnt lambda let match new not object or primitive recover repeat return struct then trait try type until use var where while with xor",
      meta: "iso val tag trn box ref",
      literal: "this false true"
    }, r = {
      className: "string",
      begin: '"""',
      end: '"""',
      relevance: 10
    }, a = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [e.BACKSLASH_ESCAPE]
    }, i = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [e.BACKSLASH_ESCAPE],
      relevance: 0
    }, s = {
      className: "type",
      begin: "\\b_?[A-Z][\\w]*",
      relevance: 0
    }, l = {
      begin: e.IDENT_RE + "'",
      relevance: 0
    };
    return {
      name: "Pony",
      keywords: n,
      contains: [
        s,
        r,
        a,
        i,
        l,
        {
          className: "number",
          begin: "(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",
          relevance: 0
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Xf = t, Xf;
}
var Zf, SO;
function Rte() {
  if (SO) return Zf;
  SO = 1;
  function t(e) {
    const n = [
      "string",
      "char",
      "byte",
      "int",
      "long",
      "bool",
      "decimal",
      "single",
      "double",
      "DateTime",
      "xml",
      "array",
      "hashtable",
      "void"
    ], r = "Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|Unprotect|Use|ForEach|Sort|Tee|Where", a = "-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|-split|-wildcard|-xor", i = {
      $pattern: /-?[A-z\.\-]+\b/,
      keyword: "if else foreach return do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch hidden static parameter",
      // "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts
      built_in: "ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write"
      // TODO: 'validate[A-Z]+' can't work in keywords
    }, s = /\w[\w\d]*((-)[\w\d]+)*/, l = {
      begin: "`[\\s\\S]",
      relevance: 0
    }, c = {
      className: "variable",
      variants: [
        { begin: /\$\B/ },
        {
          className: "keyword",
          begin: /\$this/
        },
        { begin: /\$[\w\d][\w\d_:]*/ }
      ]
    }, d = {
      className: "literal",
      begin: /\$(null|true|false)\b/
    }, p = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /@"/,
          end: /^"@/
        }
      ],
      contains: [
        l,
        c,
        {
          className: "variable",
          begin: /\$[A-z]/,
          end: /[^A-z]/
        }
      ]
    }, _ = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /@'/,
          end: /^'@/
        }
      ]
    }, f = {
      className: "doctag",
      variants: [
        /* no paramater help tags */
        { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
        /* one parameter help tags */
        { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
      ]
    }, g = e.inherit(
      e.COMMENT(null, null),
      {
        variants: [
          /* single-line comment */
          {
            begin: /#/,
            end: /$/
          },
          /* multi-line comment */
          {
            begin: /<#/,
            end: /#>/
          }
        ],
        contains: [f]
      }
    ), E = {
      className: "built_in",
      variants: [{ begin: "(".concat(r, ")+(-)[\\w\\d]+") }]
    }, T = {
      className: "class",
      beginKeywords: "class enum",
      end: /\s*[{]/,
      excludeEnd: !0,
      relevance: 0,
      contains: [e.TITLE_MODE]
    }, R = {
      className: "function",
      begin: /function\s+/,
      end: /\s*\{|$/,
      excludeEnd: !0,
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          begin: "function",
          relevance: 0,
          className: "keyword"
        },
        {
          className: "title",
          begin: s,
          relevance: 0
        },
        {
          begin: /\(/,
          end: /\)/,
          className: "params",
          relevance: 0,
          contains: [c]
        }
        // CMDLETS
      ]
    }, A = {
      begin: /using\s/,
      end: /$/,
      returnBegin: !0,
      contains: [
        p,
        _,
        {
          className: "keyword",
          begin: /(using|assembly|command|module|namespace|type)/
        }
      ]
    }, I = { variants: [
      // PS literals are pretty verbose so it's a good idea to accent them a bit.
      {
        className: "operator",
        begin: "(".concat(a, ")\\b")
      },
      {
        className: "literal",
        begin: /(-){1,2}[\w\d-]+/,
        relevance: 0
      }
    ] }, x = {
      className: "selector-tag",
      begin: /@\B/,
      relevance: 0
    }, P = {
      className: "function",
      begin: /\[.*\]\s*[\w]+[ ]??\(/,
      end: /$/,
      returnBegin: !0,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          begin: "(".concat(
            i.keyword.toString().replace(
              /\s/g,
              "|"
            ),
            ")\\b"
          ),
          endsParent: !0,
          relevance: 0
        },
        e.inherit(e.TITLE_MODE, { endsParent: !0 })
      ]
    }, D = [
      // STATIC_MEMBER,
      P,
      g,
      l,
      e.NUMBER_MODE,
      p,
      _,
      // PS_NEW_OBJECT_TYPE,
      E,
      c,
      d,
      x
    ], L = {
      begin: /\[/,
      end: /\]/,
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0,
      contains: [].concat(
        "self",
        D,
        {
          begin: "(" + n.join("|") + ")",
          className: "built_in",
          relevance: 0
        },
        {
          className: "type",
          begin: /[\.\w\d]+/,
          relevance: 0
        }
      )
    };
    return P.contains.unshift(L), {
      name: "PowerShell",
      aliases: [
        "pwsh",
        "ps",
        "ps1"
      ],
      case_insensitive: !0,
      keywords: i,
      contains: D.concat(
        T,
        R,
        A,
        I,
        L
      )
    };
  }
  return Zf = t, Zf;
}
var Jf, bO;
function Ate() {
  if (bO) return Jf;
  bO = 1;
  function t(e) {
    const n = e.regex, r = [
      "displayHeight",
      "displayWidth",
      "mouseY",
      "mouseX",
      "mousePressed",
      "pmouseX",
      "pmouseY",
      "key",
      "keyCode",
      "pixels",
      "focused",
      "frameCount",
      "frameRate",
      "height",
      "width",
      "size",
      "createGraphics",
      "beginDraw",
      "createShape",
      "loadShape",
      "PShape",
      "arc",
      "ellipse",
      "line",
      "point",
      "quad",
      "rect",
      "triangle",
      "bezier",
      "bezierDetail",
      "bezierPoint",
      "bezierTangent",
      "curve",
      "curveDetail",
      "curvePoint",
      "curveTangent",
      "curveTightness",
      "shape",
      "shapeMode",
      "beginContour",
      "beginShape",
      "bezierVertex",
      "curveVertex",
      "endContour",
      "endShape",
      "quadraticVertex",
      "vertex",
      "ellipseMode",
      "noSmooth",
      "rectMode",
      "smooth",
      "strokeCap",
      "strokeJoin",
      "strokeWeight",
      "mouseClicked",
      "mouseDragged",
      "mouseMoved",
      "mousePressed",
      "mouseReleased",
      "mouseWheel",
      "keyPressed",
      "keyPressedkeyReleased",
      "keyTyped",
      "print",
      "println",
      "save",
      "saveFrame",
      "day",
      "hour",
      "millis",
      "minute",
      "month",
      "second",
      "year",
      "background",
      "clear",
      "colorMode",
      "fill",
      "noFill",
      "noStroke",
      "stroke",
      "alpha",
      "blue",
      "brightness",
      "color",
      "green",
      "hue",
      "lerpColor",
      "red",
      "saturation",
      "modelX",
      "modelY",
      "modelZ",
      "screenX",
      "screenY",
      "screenZ",
      "ambient",
      "emissive",
      "shininess",
      "specular",
      "add",
      "createImage",
      "beginCamera",
      "camera",
      "endCamera",
      "frustum",
      "ortho",
      "perspective",
      "printCamera",
      "printProjection",
      "cursor",
      "frameRate",
      "noCursor",
      "exit",
      "loop",
      "noLoop",
      "popStyle",
      "pushStyle",
      "redraw",
      "binary",
      "boolean",
      "byte",
      "char",
      "float",
      "hex",
      "int",
      "str",
      "unbinary",
      "unhex",
      "join",
      "match",
      "matchAll",
      "nf",
      "nfc",
      "nfp",
      "nfs",
      "split",
      "splitTokens",
      "trim",
      "append",
      "arrayCopy",
      "concat",
      "expand",
      "reverse",
      "shorten",
      "sort",
      "splice",
      "subset",
      "box",
      "sphere",
      "sphereDetail",
      "createInput",
      "createReader",
      "loadBytes",
      "loadJSONArray",
      "loadJSONObject",
      "loadStrings",
      "loadTable",
      "loadXML",
      "open",
      "parseXML",
      "saveTable",
      "selectFolder",
      "selectInput",
      "beginRaw",
      "beginRecord",
      "createOutput",
      "createWriter",
      "endRaw",
      "endRecord",
      "PrintWritersaveBytes",
      "saveJSONArray",
      "saveJSONObject",
      "saveStream",
      "saveStrings",
      "saveXML",
      "selectOutput",
      "popMatrix",
      "printMatrix",
      "pushMatrix",
      "resetMatrix",
      "rotate",
      "rotateX",
      "rotateY",
      "rotateZ",
      "scale",
      "shearX",
      "shearY",
      "translate",
      "ambientLight",
      "directionalLight",
      "lightFalloff",
      "lights",
      "lightSpecular",
      "noLights",
      "normal",
      "pointLight",
      "spotLight",
      "image",
      "imageMode",
      "loadImage",
      "noTint",
      "requestImage",
      "tint",
      "texture",
      "textureMode",
      "textureWrap",
      "blend",
      "copy",
      "filter",
      "get",
      "loadPixels",
      "set",
      "updatePixels",
      "blendMode",
      "loadShader",
      "PShaderresetShader",
      "shader",
      "createFont",
      "loadFont",
      "text",
      "textFont",
      "textAlign",
      "textLeading",
      "textMode",
      "textSize",
      "textWidth",
      "textAscent",
      "textDescent",
      "abs",
      "ceil",
      "constrain",
      "dist",
      "exp",
      "floor",
      "lerp",
      "log",
      "mag",
      "map",
      "max",
      "min",
      "norm",
      "pow",
      "round",
      "sq",
      "sqrt",
      "acos",
      "asin",
      "atan",
      "atan2",
      "cos",
      "degrees",
      "radians",
      "sin",
      "tan",
      "noise",
      "noiseDetail",
      "noiseSeed",
      "random",
      "randomGaussian",
      "randomSeed"
    ], a = e.IDENT_RE, i = { variants: [
      {
        match: n.concat(n.either(...r), n.lookahead(/\s*\(/)),
        className: "built_in"
      },
      {
        relevance: 0,
        match: n.concat(
          /\b(?!for|if|while)/,
          a,
          n.lookahead(/\s*\(/)
        ),
        className: "title.function"
      }
    ] }, s = {
      match: [
        /new\s+/,
        a
      ],
      className: {
        1: "keyword",
        2: "class.title"
      }
    }, l = {
      relevance: 0,
      match: [
        /\./,
        a
      ],
      className: { 2: "property" }
    }, c = {
      variants: [
        { match: [
          /class/,
          /\s+/,
          a,
          /\s+/,
          /extends/,
          /\s+/,
          a
        ] },
        { match: [
          /class/,
          /\s+/,
          a
        ] }
      ],
      className: {
        1: "keyword",
        3: "title.class",
        5: "keyword",
        7: "title.class.inherited"
      }
    }, d = [
      "boolean",
      "byte",
      "char",
      "color",
      "double",
      "float",
      "int",
      "long",
      "short"
    ], p = [
      "BufferedReader",
      "PVector",
      "PFont",
      "PImage",
      "PGraphics",
      "HashMap",
      "String",
      "Array",
      "FloatDict",
      "ArrayList",
      "FloatList",
      "IntDict",
      "IntList",
      "JSONArray",
      "JSONObject",
      "Object",
      "StringDict",
      "StringList",
      "Table",
      "TableRow",
      "XML"
    ];
    return {
      name: "Processing",
      aliases: ["pde"],
      keywords: {
        keyword: [...[
          "abstract",
          "assert",
          "break",
          "case",
          "catch",
          "const",
          "continue",
          "default",
          "else",
          "enum",
          "final",
          "finally",
          "for",
          "if",
          "import",
          "instanceof",
          "long",
          "native",
          "new",
          "package",
          "private",
          "private",
          "protected",
          "protected",
          "public",
          "public",
          "return",
          "static",
          "strictfp",
          "switch",
          "synchronized",
          "throw",
          "throws",
          "transient",
          "try",
          "void",
          "volatile",
          "while"
        ]],
        literal: "P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false",
        title: "setup draw",
        variable: "super this",
        built_in: [
          ...r,
          ...p
        ],
        type: d
      },
      contains: [
        c,
        s,
        i,
        l,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return Jf = t, Jf;
}
var eg, TO;
function Ote() {
  if (TO) return eg;
  TO = 1;
  function t(e) {
    return {
      name: "Python profiler",
      contains: [
        e.C_NUMBER_MODE,
        {
          begin: "[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",
          end: ":",
          excludeEnd: !0
        },
        {
          begin: "(ncalls|tottime|cumtime)",
          end: "$",
          keywords: "ncalls tottime|10 cumtime|10 filename",
          relevance: 10
        },
        {
          begin: "function calls",
          end: "$",
          contains: [e.C_NUMBER_MODE],
          relevance: 10
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\\(",
          end: "\\)$",
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0
        }
      ]
    };
  }
  return eg = t, eg;
}
var tg, yO;
function Nte() {
  if (yO) return tg;
  yO = 1;
  function t(e) {
    const n = {
      begin: /[a-z][A-Za-z0-9_]*/,
      relevance: 0
    }, r = {
      className: "symbol",
      variants: [
        { begin: /[A-Z][a-zA-Z0-9_]*/ },
        { begin: /_[A-Za-z0-9_]*/ }
      ],
      relevance: 0
    }, a = {
      begin: /\(/,
      end: /\)/,
      relevance: 0
    }, i = {
      begin: /\[/,
      end: /\]/
    }, s = {
      className: "comment",
      begin: /%/,
      end: /$/,
      contains: [e.PHRASAL_WORDS_MODE]
    }, l = {
      className: "string",
      begin: /`/,
      end: /`/,
      contains: [e.BACKSLASH_ESCAPE]
    }, c = {
      className: "string",
      // 0'a etc.
      begin: /0'(\\'|.)/
    }, d = {
      className: "string",
      begin: /0'\\s/
      // 0'\s
    }, _ = [
      n,
      r,
      a,
      {
        // relevance booster
        begin: /:-/
      },
      i,
      s,
      e.C_BLOCK_COMMENT_MODE,
      e.QUOTE_STRING_MODE,
      e.APOS_STRING_MODE,
      l,
      c,
      d,
      e.C_NUMBER_MODE
    ];
    return a.contains = _, i.contains = _, {
      name: "Prolog",
      contains: _.concat([
        {
          // relevance booster
          begin: /\.$/
        }
      ])
    };
  }
  return tg = t, tg;
}
var ng, vO;
function Ite() {
  if (vO) return ng;
  vO = 1;
  function t(e) {
    const n = "[ \\t\\f]*", r = "[ \\t\\f]+", a = n + "[:=]" + n, i = r, s = "(" + a + "|" + i + ")", l = "([^\\\\:= \\t\\f\\n]|\\\\.)+", c = {
      // skip DELIM
      end: s,
      relevance: 0,
      starts: {
        // value: everything until end of line (again, taking into account backslashes)
        className: "string",
        end: /$/,
        relevance: 0,
        contains: [
          { begin: "\\\\\\\\" },
          { begin: "\\\\\\n" }
        ]
      }
    };
    return {
      name: ".properties",
      disableAutodetect: !0,
      case_insensitive: !0,
      illegal: /\S/,
      contains: [
        e.COMMENT("^\\s*[!#]", "$"),
        // key: everything until whitespace or = or : (taking into account backslashes)
        // case of a key-value pair
        {
          returnBegin: !0,
          variants: [
            { begin: l + a },
            { begin: l + i }
          ],
          contains: [
            {
              className: "attr",
              begin: l,
              endsParent: !0
            }
          ],
          starts: c
        },
        // case of an empty key
        {
          className: "attr",
          begin: l + n + "$"
        }
      ]
    };
  }
  return ng = t, ng;
}
var rg, CO;
function xte() {
  if (CO) return rg;
  CO = 1;
  function t(e) {
    const n = [
      "package",
      "import",
      "option",
      "optional",
      "required",
      "repeated",
      "group",
      "oneof"
    ], r = [
      "double",
      "float",
      "int32",
      "int64",
      "uint32",
      "uint64",
      "sint32",
      "sint64",
      "fixed32",
      "fixed64",
      "sfixed32",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ], a = {
      match: [
        /(message|enum|service)\s+/,
        e.IDENT_RE
      ],
      scope: {
        1: "keyword",
        2: "title.class"
      }
    };
    return {
      name: "Protocol Buffers",
      aliases: ["proto"],
      keywords: {
        keyword: n,
        type: r,
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        a,
        {
          className: "function",
          beginKeywords: "rpc",
          end: /[{;]/,
          excludeEnd: !0,
          keywords: "rpc returns"
        },
        {
          // match enum items (relevance)
          // BLAH = ...;
          begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/
        }
      ]
    };
  }
  return rg = t, rg;
}
var ag, RO;
function Dte() {
  if (RO) return ag;
  RO = 1;
  function t(e) {
    const n = {
      keyword: (
        /* language keywords */
        "and case default else elsif false if in import enherits node or true undef unless main settings $string "
      ),
      literal: (
        /* metaparameters */
        "alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted"
      ),
      built_in: (
        /* core facts */
        "architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"
      )
    }, r = e.COMMENT("#", "$"), a = "([A-Za-z_]|::)(\\w|::)*", i = e.inherit(e.TITLE_MODE, { begin: a }), s = {
      className: "variable",
      begin: "\\$" + a
    }, l = {
      className: "string",
      contains: [
        e.BACKSLASH_ESCAPE,
        s
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    return {
      name: "Puppet",
      aliases: ["pp"],
      contains: [
        r,
        s,
        l,
        {
          beginKeywords: "class",
          end: "\\{|;",
          illegal: /=/,
          contains: [
            i,
            r
          ]
        },
        {
          beginKeywords: "define",
          end: /\{/,
          contains: [
            {
              className: "section",
              begin: e.IDENT_RE,
              endsParent: !0
            }
          ]
        },
        {
          begin: e.IDENT_RE + "\\s+\\{",
          returnBegin: !0,
          end: /\S/,
          contains: [
            {
              className: "keyword",
              begin: e.IDENT_RE,
              relevance: 0.2
            },
            {
              begin: /\{/,
              end: /\}/,
              keywords: n,
              relevance: 0,
              contains: [
                l,
                r,
                {
                  begin: "[a-zA-Z_]+\\s*=>",
                  returnBegin: !0,
                  end: "=>",
                  contains: [
                    {
                      className: "attr",
                      begin: e.IDENT_RE
                    }
                  ]
                },
                {
                  className: "number",
                  begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
                  relevance: 0
                },
                s
              ]
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  return ag = t, ag;
}
var ig, AO;
function wte() {
  if (AO) return ig;
  AO = 1;
  function t(e) {
    const n = {
      // PB IDE color: #0080FF (Azure Radiance)
      className: "string",
      begin: '(~)?"',
      end: '"',
      illegal: "\\n"
    }, r = {
      // PB IDE color: #924B72 (Cannon Pink)
      //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
      className: "symbol",
      begin: "#[a-zA-Z_]\\w*\\$?"
    };
    return {
      name: "PureBASIC",
      aliases: [
        "pb",
        "pbi"
      ],
      keywords: (
        // PB IDE color: #006666 (Blue Stone) + Bold
        // Keywords from all version of PureBASIC 5.00 upward ...
        "Align And Array As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount Map Module NewList NewMap Next Not Or Procedure ProcedureC ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim Read Repeat Restore Return Runtime Select Shared Static Step Structure StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule UseModule Wend While With XIncludeFile XOr"
      ),
      contains: [
        // COMMENTS | PB IDE color: #00AAAA (Persian Green)
        e.COMMENT(";", "$", { relevance: 0 }),
        {
          // PROCEDURES DEFINITIONS
          className: "function",
          begin: "\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",
          end: "\\(",
          excludeEnd: !0,
          returnBegin: !0,
          contains: [
            {
              // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
              className: "keyword",
              begin: "(Procedure|Declare)(C|CDLL|DLL)?",
              excludeEnd: !0
            },
            {
              // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
              className: "type",
              begin: "\\.\\w*"
              // end: ' ',
            },
            e.UNDERSCORE_TITLE_MODE
            // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
          ]
        },
        n,
        r
      ]
    };
  }
  return ig = t, ig;
}
var sg, OO;
function Lte() {
  if (OO) return sg;
  OO = 1;
  function t(e) {
    const n = e.regex, r = /[\p{XID_Start}_]\p{XID_Continue}*/u, a = [
      "and",
      "as",
      "assert",
      "async",
      "await",
      "break",
      "case",
      "class",
      "continue",
      "def",
      "del",
      "elif",
      "else",
      "except",
      "finally",
      "for",
      "from",
      "global",
      "if",
      "import",
      "in",
      "is",
      "lambda",
      "match",
      "nonlocal|10",
      "not",
      "or",
      "pass",
      "raise",
      "return",
      "try",
      "while",
      "with",
      "yield"
    ], c = {
      $pattern: /[A-Za-z]\w+|__\w+__/,
      keyword: a,
      built_in: [
        "__import__",
        "abs",
        "all",
        "any",
        "ascii",
        "bin",
        "bool",
        "breakpoint",
        "bytearray",
        "bytes",
        "callable",
        "chr",
        "classmethod",
        "compile",
        "complex",
        "delattr",
        "dict",
        "dir",
        "divmod",
        "enumerate",
        "eval",
        "exec",
        "filter",
        "float",
        "format",
        "frozenset",
        "getattr",
        "globals",
        "hasattr",
        "hash",
        "help",
        "hex",
        "id",
        "input",
        "int",
        "isinstance",
        "issubclass",
        "iter",
        "len",
        "list",
        "locals",
        "map",
        "max",
        "memoryview",
        "min",
        "next",
        "object",
        "oct",
        "open",
        "ord",
        "pow",
        "print",
        "property",
        "range",
        "repr",
        "reversed",
        "round",
        "set",
        "setattr",
        "slice",
        "sorted",
        "staticmethod",
        "str",
        "sum",
        "super",
        "tuple",
        "type",
        "vars",
        "zip"
      ],
      literal: [
        "__debug__",
        "Ellipsis",
        "False",
        "None",
        "NotImplemented",
        "True"
      ],
      type: [
        "Any",
        "Callable",
        "Coroutine",
        "Dict",
        "List",
        "Literal",
        "Generic",
        "Optional",
        "Sequence",
        "Set",
        "Tuple",
        "Type",
        "Union"
      ]
    }, d = {
      className: "meta",
      begin: /^(>>>|\.\.\.) /
    }, p = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: c,
      illegal: /#/
    }, _ = {
      begin: /\{\{/,
      relevance: 0
    }, f = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
          end: /'''/,
          contains: [
            e.BACKSLASH_ESCAPE,
            d
          ],
          relevance: 10
        },
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
          end: /"""/,
          contains: [
            e.BACKSLASH_ESCAPE,
            d
          ],
          relevance: 10
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'''/,
          end: /'''/,
          contains: [
            e.BACKSLASH_ESCAPE,
            d,
            _,
            p
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"""/,
          end: /"""/,
          contains: [
            e.BACKSLASH_ESCAPE,
            d,
            _,
            p
          ]
        },
        {
          begin: /([uU]|[rR])'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /([uU]|[rR])"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])'/,
          end: /'/
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])"/,
          end: /"/
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'/,
          end: /'/,
          contains: [
            e.BACKSLASH_ESCAPE,
            _,
            p
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"/,
          end: /"/,
          contains: [
            e.BACKSLASH_ESCAPE,
            _,
            p
          ]
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    }, g = "[0-9](_?[0-9])*", E = `(\\b(${g}))?\\.(${g})|\\b(${g})\\.`, T = `\\b|${a.join("|")}`, R = {
      className: "number",
      relevance: 0,
      variants: [
        // exponentfloat, pointfloat
        // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
        // optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        // Note: no leading \b because floats can start with a decimal point
        // and we don't want to mishandle e.g. `fn(.5)`,
        // no trailing \b for pointfloat because it can end with a decimal point
        // and we don't want to mishandle e.g. `0..hex()`; this should be safe
        // because both MUST contain a decimal point and so cannot be confused with
        // the interior part of an identifier
        {
          begin: `(\\b(${g})|(${E}))[eE][+-]?(${g})[jJ]?(?=${T})`
        },
        {
          begin: `(${E})[jJ]?`
        },
        // decinteger, bininteger, octinteger, hexinteger
        // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
        // optionally "long" in Python 2
        // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
        // decinteger is optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${T})`
        },
        {
          begin: `\\b0[bB](_?[01])+[lL]?(?=${T})`
        },
        {
          begin: `\\b0[oO](_?[0-7])+[lL]?(?=${T})`
        },
        {
          begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${T})`
        },
        // imagnumber (digitpart-based)
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b(${g})[jJ](?=${T})`
        }
      ]
    }, A = {
      className: "comment",
      begin: n.lookahead(/# type:/),
      end: /$/,
      keywords: c,
      contains: [
        {
          // prevent keywords from coloring `type`
          begin: /# type:/
        },
        // comment within a datatype comment includes no keywords
        {
          begin: /#/,
          end: /\b\B/,
          endsWithParent: !0
        }
      ]
    }, I = {
      className: "params",
      variants: [
        // Exclude params in functions without params
        {
          className: "",
          begin: /\(\s*\)/,
          skip: !0
        },
        {
          begin: /\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          keywords: c,
          contains: [
            "self",
            d,
            R,
            f,
            e.HASH_COMMENT_MODE
          ]
        }
      ]
    };
    return p.contains = [
      f,
      R,
      d
    ], {
      name: "Python",
      aliases: [
        "py",
        "gyp",
        "ipython"
      ],
      unicodeRegex: !0,
      keywords: c,
      illegal: /(<\/|\?)|=>/,
      contains: [
        d,
        R,
        {
          // very common convention
          begin: /\bself\b/
        },
        {
          // eat "if" prior to string so that it won't accidentally be
          // labeled as an f-string
          beginKeywords: "if",
          relevance: 0
        },
        f,
        A,
        e.HASH_COMMENT_MODE,
        {
          match: [
            /\bdef/,
            /\s+/,
            r
          ],
          scope: {
            1: "keyword",
            3: "title.function"
          },
          contains: [I]
        },
        {
          variants: [
            {
              match: [
                /\bclass/,
                /\s+/,
                r,
                /\s*/,
                /\(\s*/,
                r,
                /\s*\)/
              ]
            },
            {
              match: [
                /\bclass/,
                /\s+/,
                r
              ]
            }
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            6: "title.class.inherited"
          }
        },
        {
          className: "meta",
          begin: /^[\t ]*@/,
          end: /(?=#)|$/,
          contains: [
            R,
            I,
            f
          ]
        }
      ]
    };
  }
  return sg = t, sg;
}
var og, NO;
function Mte() {
  if (NO) return og;
  NO = 1;
  function t(e) {
    return {
      aliases: ["pycon"],
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "python"
            }
          },
          variants: [
            { begin: /^>>>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  return og = t, og;
}
var lg, IO;
function kte() {
  if (IO) return lg;
  IO = 1;
  function t(e) {
    return {
      name: "Q",
      aliases: [
        "k",
        "kdb"
      ],
      keywords: {
        $pattern: /(`?)[A-Za-z0-9_]+\b/,
        keyword: "do while select delete by update from",
        literal: "0b 1b",
        built_in: "neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",
        type: "`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE
      ]
    };
  }
  return lg = t, lg;
}
var cg, xO;
function Pte() {
  if (xO) return cg;
  xO = 1;
  function t(e) {
    const n = e.regex, r = {
      keyword: "in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",
      literal: "true false null undefined NaN Infinity",
      built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4d Promise"
    }, a = "[a-zA-Z_][a-zA-Z0-9\\._]*", i = {
      className: "keyword",
      begin: "\\bproperty\\b",
      starts: {
        className: "string",
        end: "(:|=|;|,|//|/\\*|$)",
        returnEnd: !0
      }
    }, s = {
      className: "keyword",
      begin: "\\bsignal\\b",
      starts: {
        className: "string",
        end: "(\\(|:|=|;|,|//|/\\*|$)",
        returnEnd: !0
      }
    }, l = {
      className: "attribute",
      begin: "\\bid\\s*:",
      starts: {
        className: "string",
        end: a,
        returnEnd: !1
      }
    }, c = {
      begin: a + "\\s*:",
      returnBegin: !0,
      contains: [
        {
          className: "attribute",
          begin: a,
          end: "\\s*:",
          excludeEnd: !0,
          relevance: 0
        }
      ],
      relevance: 0
    }, d = {
      begin: n.concat(a, /\s*\{/),
      end: /\{/,
      returnBegin: !0,
      relevance: 0,
      contains: [e.inherit(e.TITLE_MODE, { begin: a })]
    };
    return {
      name: "QML",
      aliases: ["qt"],
      case_insensitive: !1,
      keywords: r,
      contains: [
        {
          className: "meta",
          begin: /^\s*['"]use (strict|asm)['"]/
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        {
          // template string
          className: "string",
          begin: "`",
          end: "`",
          contains: [
            e.BACKSLASH_ESCAPE,
            {
              className: "subst",
              begin: "\\$\\{",
              end: "\\}"
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          variants: [
            { begin: "\\b(0[bB][01]+)" },
            { begin: "\\b(0[oO][0-7]+)" },
            { begin: e.C_NUMBER_RE }
          ],
          relevance: 0
        },
        {
          // "value" container
          begin: "(" + e.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          contains: [
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            e.REGEXP_MODE,
            {
              // E4X / JSX
              begin: /</,
              end: />\s*[);\]]/,
              relevance: 0,
              subLanguage: "xml"
            }
          ],
          relevance: 0
        },
        s,
        i,
        {
          className: "function",
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: !0,
          contains: [
            e.inherit(e.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0,
              contains: [
                e.C_LINE_COMMENT_MODE,
                e.C_BLOCK_COMMENT_MODE
              ]
            }
          ],
          illegal: /\[|%/
        },
        {
          // hack: prevents detection of keywords after dots
          begin: "\\." + e.IDENT_RE,
          relevance: 0
        },
        l,
        c,
        d
      ],
      illegal: /#/
    };
  }
  return cg = t, cg;
}
var ug, DO;
function Fte() {
  if (DO) return ug;
  DO = 1;
  function t(e) {
    const n = e.regex, r = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/, a = n.either(
      // Special case: only hexadecimal binary powers can contain fractions
      /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
      // Hexadecimal numbers without fraction and optional binary power
      /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
      // Decimal numbers
      /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
    ), i = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/, s = n.either(
      /[()]/,
      /[{}]/,
      /\[\[/,
      /[[\]]/,
      /\\/,
      /,/
    );
    return {
      name: "R",
      keywords: {
        $pattern: r,
        keyword: "function if in break next repeat else for while",
        literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
        built_in: (
          // Builtin constants
          "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
        )
      },
      contains: [
        // Roxygen comments
        e.COMMENT(
          /#'/,
          /$/,
          { contains: [
            {
              // Handle `@examples` separately to cause all subsequent code
              // until the next `@`-tag on its own line to be kept as-is,
              // preventing highlighting. This code is example R code, so nested
              // doctags shouldn’t be treated as such. See
              // `test/markup/r/roxygen.txt` for an example.
              scope: "doctag",
              match: /@examples/,
              starts: {
                end: n.lookahead(n.either(
                  // end if another doc comment
                  /\n^#'\s*(?=@[a-zA-Z]+)/,
                  // or a line with no comment
                  /\n^(?!#')/
                )),
                endsParent: !0
              }
            },
            {
              // Handle `@param` to highlight the parameter name following
              // after.
              scope: "doctag",
              begin: "@param",
              end: /$/,
              contains: [
                {
                  scope: "variable",
                  variants: [
                    { match: r },
                    { match: /`(?:\\.|[^`\\])+`/ }
                  ],
                  endsParent: !0
                }
              ]
            },
            {
              scope: "doctag",
              match: /@[a-zA-Z]+/
            },
            {
              scope: "keyword",
              match: /\\[a-zA-Z]+/
            }
          ] }
        ),
        e.HASH_COMMENT_MODE,
        {
          scope: "string",
          contains: [e.BACKSLASH_ESCAPE],
          variants: [
            e.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\(/,
              end: /\)(-*)"/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\{/,
              end: /\}(-*)"/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\[/,
              end: /\](-*)"/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\(/,
              end: /\)(-*)'/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\{/,
              end: /\}(-*)'/
            }),
            e.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\[/,
              end: /\](-*)'/
            }),
            {
              begin: '"',
              end: '"',
              relevance: 0
            },
            {
              begin: "'",
              end: "'",
              relevance: 0
            }
          ]
        },
        // Matching numbers immediately following punctuation and operators is
        // tricky since we need to look at the character ahead of a number to
        // ensure the number is not part of an identifier, and we cannot use
        // negative look-behind assertions. So instead we explicitly handle all
        // possible combinations of (operator|punctuation), number.
        // TODO: replace with negative look-behind when available
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
        // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
        {
          relevance: 0,
          variants: [
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                i,
                a
              ]
            },
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                /%[^%]*%/,
                a
              ]
            },
            {
              scope: {
                1: "punctuation",
                2: "number"
              },
              match: [
                s,
                a
              ]
            },
            {
              scope: { 2: "number" },
              match: [
                /[^a-zA-Z0-9._]|^/,
                // not part of an identifier, or start of document
                a
              ]
            }
          ]
        },
        // Operators/punctuation when they're not directly followed by numbers
        {
          // Relevance boost for the most common assignment form.
          scope: { 3: "operator" },
          match: [
            r,
            /\s+/,
            /<-/,
            /\s+/
          ]
        },
        {
          scope: "operator",
          relevance: 0,
          variants: [
            { match: i },
            { match: /%[^%]*%/ }
          ]
        },
        {
          scope: "punctuation",
          relevance: 0,
          match: s
        },
        {
          // Escaped identifier
          begin: "`",
          end: "`",
          contains: [{ begin: /\\./ }]
        }
      ]
    };
  }
  return ug = t, ug;
}
var dg, wO;
function Bte() {
  if (wO) return dg;
  wO = 1;
  function t(e) {
    return {
      name: "ReasonML",
      aliases: ["re"],
      keywords: {
        $pattern: /[a-z_]\w*!?/,
        keyword: [
          "and",
          "as",
          "asr",
          "assert",
          "begin",
          "class",
          "constraint",
          "do",
          "done",
          "downto",
          "else",
          "end",
          "esfun",
          "exception",
          "external",
          "for",
          "fun",
          "function",
          "functor",
          "if",
          "in",
          "include",
          "inherit",
          "initializer",
          "land",
          "lazy",
          "let",
          "lor",
          "lsl",
          "lsr",
          "lxor",
          "mod",
          "module",
          "mutable",
          "new",
          "nonrec",
          "object",
          "of",
          "open",
          "or",
          "pri",
          "pub",
          "rec",
          "sig",
          "struct",
          "switch",
          "then",
          "to",
          "try",
          "type",
          "val",
          "virtual",
          "when",
          "while",
          "with"
        ],
        built_in: [
          "array",
          "bool",
          "bytes",
          "char",
          "exn|5",
          "float",
          "int",
          "int32",
          "int64",
          "list",
          "lazy_t|5",
          "nativeint|5",
          "ref",
          "string",
          "unit"
        ],
        literal: ["true", "false"]
      },
      illegal: /(:-|:=|\$\{|\+=)/,
      contains: [
        {
          scope: "literal",
          match: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        e.C_LINE_COMMENT_MODE,
        e.COMMENT(/\/\*/, /\*\//, { illegal: /^(#,\/\/)/ }),
        {
          /* type variable */
          scope: "symbol",
          match: /\'[A-Za-z_](?!\')[\w\']*/
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          scope: "type",
          match: /`[A-Z][\w\']*/
        },
        {
          /* module or constructor */
          scope: "type",
          match: /\b[A-Z][\w\']*/,
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          match: /[a-z_]\w*\'[\w\']*/,
          relevance: 0
        },
        {
          scope: "operator",
          match: /\s+(\|\||\+[\+\.]?|\*[\*\/\.]?|\/[\.]?|\.\.\.|\|>|&&|===?)\s+/,
          relevance: 0
        },
        e.inherit(e.APOS_STRING_MODE, {
          scope: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          scope: "number",
          variants: [
            { match: /\b0[xX][a-fA-F0-9_]+[Lln]?/ },
            { match: /\b0[oO][0-7_]+[Lln]?/ },
            { match: /\b0[bB][01_]+[Lln]?/ },
            { match: /\b[0-9][0-9_]*([Lln]|(\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ }
          ],
          relevance: 0
        }
      ]
    };
  }
  return dg = t, dg;
}
var pg, LO;
function Ute() {
  if (LO) return pg;
  LO = 1;
  function t(e) {
    return {
      name: "RenderMan RIB",
      keywords: "ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",
      illegal: "</",
      contains: [
        e.HASH_COMMENT_MODE,
        e.C_NUMBER_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE
      ]
    };
  }
  return pg = t, pg;
}
var _g, MO;
function Gte() {
  if (MO) return _g;
  MO = 1;
  function t(e) {
    const n = "[a-zA-Z-_][^\\n{]+\\{", r = {
      className: "attribute",
      begin: /[a-zA-Z-_]+/,
      end: /\s*:/,
      excludeEnd: !0,
      starts: {
        end: ";",
        relevance: 0,
        contains: [
          {
            className: "variable",
            begin: /\.[a-zA-Z-_]+/
          },
          {
            className: "keyword",
            begin: /\(optional\)/
          }
        ]
      }
    };
    return {
      name: "Roboconf",
      aliases: [
        "graph",
        "instances"
      ],
      case_insensitive: !0,
      keywords: "import",
      contains: [
        // Facet sections
        {
          begin: "^facet " + n,
          end: /\}/,
          keywords: "facet",
          contains: [
            r,
            e.HASH_COMMENT_MODE
          ]
        },
        // Instance sections
        {
          begin: "^\\s*instance of " + n,
          end: /\}/,
          keywords: "name count channels instance-data instance-state instance of",
          illegal: /\S/,
          contains: [
            "self",
            r,
            e.HASH_COMMENT_MODE
          ]
        },
        // Component sections
        {
          begin: "^" + n,
          end: /\}/,
          contains: [
            r,
            e.HASH_COMMENT_MODE
          ]
        },
        // Comments
        e.HASH_COMMENT_MODE
      ]
    };
  }
  return _g = t, _g;
}
var mg, kO;
function Hte() {
  if (kO) return mg;
  kO = 1;
  function t(e) {
    const n = "foreach do while for if from to step else on-error and or not in", r = "global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime", a = "add remove enable disable set get print export edit find run debug error info warning", i = "true false yes no nothing nil null", s = "traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw", l = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, c = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e.BACKSLASH_ESCAPE,
        l,
        {
          className: "variable",
          begin: /\$\(/,
          end: /\)/,
          contains: [e.BACKSLASH_ESCAPE]
        }
      ]
    }, d = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    return {
      name: "MikroTik RouterOS script",
      aliases: ["mikrotik"],
      case_insensitive: !0,
      keywords: {
        $pattern: /:?[\w-]+/,
        literal: i,
        keyword: n + " :" + n.split(" ").join(" :") + " :" + r.split(" ").join(" :")
      },
      contains: [
        {
          // illegal syntax
          variants: [
            {
              // -- comment
              begin: /\/\*/,
              end: /\*\//
            },
            {
              // Stan comment
              begin: /\/\//,
              end: /$/
            },
            {
              // HTML tags
              begin: /<\//,
              end: />/
            }
          ],
          illegal: /./
        },
        e.COMMENT("^#", "$"),
        c,
        d,
        l,
        // attribute=value
        {
          // > is to avoid matches with => in other grammars
          begin: /[\w-]+=([^\s{}[\]()>]+)/,
          relevance: 0,
          returnBegin: !0,
          contains: [
            {
              className: "attribute",
              begin: /[^=]+/
            },
            {
              begin: /=/,
              endsWithParent: !0,
              relevance: 0,
              contains: [
                c,
                d,
                l,
                {
                  className: "literal",
                  begin: "\\b(" + i.split(" ").join("|") + ")\\b"
                },
                {
                  // Do not format unclassified values. Needed to exclude highlighting of values as built_in.
                  begin: /("[^"]*"|[^\s{}[\]]+)/
                }
                /*
                {
                  // IPv4 addresses and subnets
                  className: 'number',
                  variants: [
                    {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
                    {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
                    {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
                  ]
                },
                {
                  // MAC addresses and DHCP Client IDs
                  className: 'number',
                  begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
                },
                */
              ]
            }
          ]
        },
        {
          // HEX values
          className: "number",
          begin: /\*[0-9a-fA-F]+/
        },
        {
          begin: "\\b(" + a.split(" ").join("|") + ")([\\s[(\\]|])",
          returnBegin: !0,
          contains: [
            {
              className: "built_in",
              // 'function',
              begin: /\w+/
            }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "(\\.\\./|/|\\s)((" + s.split(" ").join("|") + ");?\\s)+" },
            {
              begin: /\.\./,
              relevance: 0
            }
          ]
        }
      ]
    };
  }
  return mg = t, mg;
}
var fg, PO;
function Yte() {
  if (PO) return fg;
  PO = 1;
  function t(e) {
    const n = [
      "abs",
      "acos",
      "ambient",
      "area",
      "asin",
      "atan",
      "atmosphere",
      "attribute",
      "calculatenormal",
      "ceil",
      "cellnoise",
      "clamp",
      "comp",
      "concat",
      "cos",
      "degrees",
      "depth",
      "Deriv",
      "diffuse",
      "distance",
      "Du",
      "Dv",
      "environment",
      "exp",
      "faceforward",
      "filterstep",
      "floor",
      "format",
      "fresnel",
      "incident",
      "length",
      "lightsource",
      "log",
      "match",
      "max",
      "min",
      "mod",
      "noise",
      "normalize",
      "ntransform",
      "opposite",
      "option",
      "phong",
      "pnoise",
      "pow",
      "printf",
      "ptlined",
      "radians",
      "random",
      "reflect",
      "refract",
      "renderinfo",
      "round",
      "setcomp",
      "setxcomp",
      "setycomp",
      "setzcomp",
      "shadow",
      "sign",
      "sin",
      "smoothstep",
      "specular",
      "specularbrdf",
      "spline",
      "sqrt",
      "step",
      "tan",
      "texture",
      "textureinfo",
      "trace",
      "transform",
      "vtransform",
      "xcomp",
      "ycomp",
      "zcomp"
    ], r = [
      "matrix",
      "float",
      "color",
      "point",
      "normal",
      "vector"
    ], a = [
      "while",
      "for",
      "if",
      "do",
      "return",
      "else",
      "break",
      "extern",
      "continue"
    ], i = {
      match: [
        /(surface|displacement|light|volume|imager)/,
        /\s+/,
        e.IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "RenderMan RSL",
      keywords: {
        keyword: a,
        built_in: n,
        type: r
      },
      illegal: "</",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        e.APOS_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        i,
        {
          beginKeywords: "illuminate illuminance gather",
          end: "\\("
        }
      ]
    };
  }
  return fg = t, fg;
}
var gg, FO;
function zte() {
  if (FO) return gg;
  FO = 1;
  function t(e) {
    return {
      name: "Oracle Rules Language",
      keywords: {
        keyword: "BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",
        built_in: "IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "literal",
          variants: [
            {
              // looks like #-comment
              begin: "#\\s+",
              relevance: 0
            },
            { begin: "#[a-zA-Z .]+" }
          ]
        }
      ]
    };
  }
  return gg = t, gg;
}
var hg, BO;
function qte() {
  if (BO) return hg;
  BO = 1;
  function t(e) {
    const n = e.regex, r = {
      className: "title.function.invoke",
      relevance: 0,
      begin: n.concat(
        /\b/,
        /(?!let|for|while|if|else|match\b)/,
        e.IDENT_RE,
        n.lookahead(/\s*\(/)
      )
    }, a = "([ui](8|16|32|64|128|size)|f(32|64))?", i = [
      "abstract",
      "as",
      "async",
      "await",
      "become",
      "box",
      "break",
      "const",
      "continue",
      "crate",
      "do",
      "dyn",
      "else",
      "enum",
      "extern",
      "false",
      "final",
      "fn",
      "for",
      "if",
      "impl",
      "in",
      "let",
      "loop",
      "macro",
      "match",
      "mod",
      "move",
      "mut",
      "override",
      "priv",
      "pub",
      "ref",
      "return",
      "self",
      "Self",
      "static",
      "struct",
      "super",
      "trait",
      "true",
      "try",
      "type",
      "typeof",
      "unsafe",
      "unsized",
      "use",
      "virtual",
      "where",
      "while",
      "yield"
    ], s = [
      "true",
      "false",
      "Some",
      "None",
      "Ok",
      "Err"
    ], l = [
      // functions
      "drop ",
      // traits
      "Copy",
      "Send",
      "Sized",
      "Sync",
      "Drop",
      "Fn",
      "FnMut",
      "FnOnce",
      "ToOwned",
      "Clone",
      "Debug",
      "PartialEq",
      "PartialOrd",
      "Eq",
      "Ord",
      "AsRef",
      "AsMut",
      "Into",
      "From",
      "Default",
      "Iterator",
      "Extend",
      "IntoIterator",
      "DoubleEndedIterator",
      "ExactSizeIterator",
      "SliceConcatExt",
      "ToString",
      // macros
      "assert!",
      "assert_eq!",
      "bitflags!",
      "bytes!",
      "cfg!",
      "col!",
      "concat!",
      "concat_idents!",
      "debug_assert!",
      "debug_assert_eq!",
      "env!",
      "eprintln!",
      "panic!",
      "file!",
      "format!",
      "format_args!",
      "include_bytes!",
      "include_str!",
      "line!",
      "local_data_key!",
      "module_path!",
      "option_env!",
      "print!",
      "println!",
      "select!",
      "stringify!",
      "try!",
      "unimplemented!",
      "unreachable!",
      "vec!",
      "write!",
      "writeln!",
      "macro_rules!",
      "assert_ne!",
      "debug_assert_ne!"
    ], c = [
      "i8",
      "i16",
      "i32",
      "i64",
      "i128",
      "isize",
      "u8",
      "u16",
      "u32",
      "u64",
      "u128",
      "usize",
      "f32",
      "f64",
      "str",
      "char",
      "bool",
      "Box",
      "Option",
      "Result",
      "String",
      "Vec"
    ];
    return {
      name: "Rust",
      aliases: ["rs"],
      keywords: {
        $pattern: e.IDENT_RE + "!?",
        type: c,
        keyword: i,
        literal: s,
        built_in: l
      },
      illegal: "</",
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        e.inherit(e.QUOTE_STRING_MODE, {
          begin: /b?"/,
          illegal: null
        }),
        {
          className: "string",
          variants: [
            { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
            { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
          ]
        },
        {
          className: "symbol",
          begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
        },
        {
          className: "number",
          variants: [
            { begin: "\\b0b([01_]+)" + a },
            { begin: "\\b0o([0-7_]+)" + a },
            { begin: "\\b0x([A-Fa-f0-9_]+)" + a },
            { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + a }
          ],
          relevance: 0
        },
        {
          begin: [
            /fn/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.function"
          }
        },
        {
          className: "meta",
          begin: "#!?\\[",
          end: "\\]",
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          begin: [
            /let/,
            /\s+/,
            /(?:mut\s+)?/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "keyword",
            4: "variable"
          }
        },
        // must come before impl/for rule later
        {
          begin: [
            /for/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE,
            /\s+/,
            /in/
          ],
          className: {
            1: "keyword",
            3: "variable",
            5: "keyword"
          }
        },
        {
          begin: [
            /type/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: [
            /(?:trait|enum|struct|union|impl|for)/,
            /\s+/,
            e.UNDERSCORE_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: e.IDENT_RE + "::",
          keywords: {
            keyword: "Self",
            built_in: l,
            type: c
          }
        },
        {
          className: "punctuation",
          begin: "->"
        },
        r
      ]
    };
  }
  return hg = t, hg;
}
var Eg, UO;
function Vte() {
  if (UO) return Eg;
  UO = 1;
  function t(e) {
    const n = e.regex, r = [
      "do",
      "if",
      "then",
      "else",
      "end",
      "until",
      "while",
      "abort",
      "array",
      "attrib",
      "by",
      "call",
      "cards",
      "cards4",
      "catname",
      "continue",
      "datalines",
      "datalines4",
      "delete",
      "delim",
      "delimiter",
      "display",
      "dm",
      "drop",
      "endsas",
      "error",
      "file",
      "filename",
      "footnote",
      "format",
      "goto",
      "in",
      "infile",
      "informat",
      "input",
      "keep",
      "label",
      "leave",
      "length",
      "libname",
      "link",
      "list",
      "lostcard",
      "merge",
      "missing",
      "modify",
      "options",
      "output",
      "out",
      "page",
      "put",
      "redirect",
      "remove",
      "rename",
      "replace",
      "retain",
      "return",
      "select",
      "set",
      "skip",
      "startsas",
      "stop",
      "title",
      "update",
      "waitsas",
      "where",
      "window",
      "x|0",
      "systask",
      "add",
      "and",
      "alter",
      "as",
      "cascade",
      "check",
      "create",
      "delete",
      "describe",
      "distinct",
      "drop",
      "foreign",
      "from",
      "group",
      "having",
      "index",
      "insert",
      "into",
      "in",
      "key",
      "like",
      "message",
      "modify",
      "msgtype",
      "not",
      "null",
      "on",
      "or",
      "order",
      "primary",
      "references",
      "reset",
      "restrict",
      "select",
      "set",
      "table",
      "unique",
      "update",
      "validate",
      "view",
      "where"
    ], a = [
      "abs",
      "addr",
      "airy",
      "arcos",
      "arsin",
      "atan",
      "attrc",
      "attrn",
      "band",
      "betainv",
      "blshift",
      "bnot",
      "bor",
      "brshift",
      "bxor",
      "byte",
      "cdf",
      "ceil",
      "cexist",
      "cinv",
      "close",
      "cnonct",
      "collate",
      "compbl",
      "compound",
      "compress",
      "cos",
      "cosh",
      "css",
      "curobs",
      "cv",
      "daccdb",
      "daccdbsl",
      "daccsl",
      "daccsyd",
      "dacctab",
      "dairy",
      "date",
      "datejul",
      "datepart",
      "datetime",
      "day",
      "dclose",
      "depdb",
      "depdbsl",
      "depdbsl",
      "depsl",
      "depsl",
      "depsyd",
      "depsyd",
      "deptab",
      "deptab",
      "dequote",
      "dhms",
      "dif",
      "digamma",
      "dim",
      "dinfo",
      "dnum",
      "dopen",
      "doptname",
      "doptnum",
      "dread",
      "dropnote",
      "dsname",
      "erf",
      "erfc",
      "exist",
      "exp",
      "fappend",
      "fclose",
      "fcol",
      "fdelete",
      "fetch",
      "fetchobs",
      "fexist",
      "fget",
      "fileexist",
      "filename",
      "fileref",
      "finfo",
      "finv",
      "fipname",
      "fipnamel",
      "fipstate",
      "floor",
      "fnonct",
      "fnote",
      "fopen",
      "foptname",
      "foptnum",
      "fpoint",
      "fpos",
      "fput",
      "fread",
      "frewind",
      "frlen",
      "fsep",
      "fuzz",
      "fwrite",
      "gaminv",
      "gamma",
      "getoption",
      "getvarc",
      "getvarn",
      "hbound",
      "hms",
      "hosthelp",
      "hour",
      "ibessel",
      "index",
      "indexc",
      "indexw",
      "input",
      "inputc",
      "inputn",
      "int",
      "intck",
      "intnx",
      "intrr",
      "irr",
      "jbessel",
      "juldate",
      "kurtosis",
      "lag",
      "lbound",
      "left",
      "length",
      "lgamma",
      "libname",
      "libref",
      "log",
      "log10",
      "log2",
      "logpdf",
      "logpmf",
      "logsdf",
      "lowcase",
      "max",
      "mdy",
      "mean",
      "min",
      "minute",
      "mod",
      "month",
      "mopen",
      "mort",
      "n",
      "netpv",
      "nmiss",
      "normal",
      "note",
      "npv",
      "open",
      "ordinal",
      "pathname",
      "pdf",
      "peek",
      "peekc",
      "pmf",
      "point",
      "poisson",
      "poke",
      "probbeta",
      "probbnml",
      "probchi",
      "probf",
      "probgam",
      "probhypr",
      "probit",
      "probnegb",
      "probnorm",
      "probt",
      "put",
      "putc",
      "putn",
      "qtr",
      "quote",
      "ranbin",
      "rancau",
      "ranexp",
      "rangam",
      "range",
      "rank",
      "rannor",
      "ranpoi",
      "rantbl",
      "rantri",
      "ranuni",
      "repeat",
      "resolve",
      "reverse",
      "rewind",
      "right",
      "round",
      "saving",
      "scan",
      "sdf",
      "second",
      "sign",
      "sin",
      "sinh",
      "skewness",
      "soundex",
      "spedis",
      "sqrt",
      "std",
      "stderr",
      "stfips",
      "stname",
      "stnamel",
      "substr",
      "sum",
      "symget",
      "sysget",
      "sysmsg",
      "sysprod",
      "sysrc",
      "system",
      "tan",
      "tanh",
      "time",
      "timepart",
      "tinv",
      "tnonct",
      "today",
      "translate",
      "tranwrd",
      "trigamma",
      "trim",
      "trimn",
      "trunc",
      "uniform",
      "upcase",
      "uss",
      "var",
      "varfmt",
      "varinfmt",
      "varlabel",
      "varlen",
      "varname",
      "varnum",
      "varray",
      "varrayx",
      "vartype",
      "verify",
      "vformat",
      "vformatd",
      "vformatdx",
      "vformatn",
      "vformatnx",
      "vformatw",
      "vformatwx",
      "vformatx",
      "vinarray",
      "vinarrayx",
      "vinformat",
      "vinformatd",
      "vinformatdx",
      "vinformatn",
      "vinformatnx",
      "vinformatw",
      "vinformatwx",
      "vinformatx",
      "vlabel",
      "vlabelx",
      "vlength",
      "vlengthx",
      "vname",
      "vnamex",
      "vtype",
      "vtypex",
      "weekday",
      "year",
      "yyq",
      "zipfips",
      "zipname",
      "zipnamel",
      "zipstate"
    ], i = [
      "bquote",
      "nrbquote",
      "cmpres",
      "qcmpres",
      "compstor",
      "datatyp",
      "display",
      "do",
      "else",
      "end",
      "eval",
      "global",
      "goto",
      "if",
      "index",
      "input",
      "keydef",
      "label",
      "left",
      "length",
      "let",
      "local",
      "lowcase",
      "macro",
      "mend",
      "nrbquote",
      "nrquote",
      "nrstr",
      "put",
      "qcmpres",
      "qleft",
      "qlowcase",
      "qscan",
      "qsubstr",
      "qsysfunc",
      "qtrim",
      "quote",
      "qupcase",
      "scan",
      "str",
      "substr",
      "superq",
      "syscall",
      "sysevalf",
      "sysexec",
      "sysfunc",
      "sysget",
      "syslput",
      "sysprod",
      "sysrc",
      "sysrput",
      "then",
      "to",
      "trim",
      "unquote",
      "until",
      "upcase",
      "verify",
      "while",
      "window"
    ];
    return {
      name: "SAS",
      case_insensitive: !0,
      keywords: {
        literal: [
          "null",
          "missing",
          "_all_",
          "_automatic_",
          "_character_",
          "_infile_",
          "_n_",
          "_name_",
          "_null_",
          "_numeric_",
          "_user_",
          "_webout_"
        ],
        keyword: r
      },
      contains: [
        {
          // Distinct highlight for proc <proc>, data, run, quit
          className: "keyword",
          begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
        },
        {
          // Macro variables
          className: "variable",
          begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
        },
        {
          begin: [
            /^\s*/,
            /datalines;|cards;/,
            /(?:.*\n)+/,
            /^\s*;\s*$/
          ],
          className: {
            2: "keyword",
            3: "string"
          }
        },
        {
          begin: [
            /%mend|%macro/,
            /\s+/,
            /[a-zA-Z_&][a-zA-Z0-9_]*/
          ],
          className: {
            1: "built_in",
            3: "title.function"
          }
        },
        {
          // Built-in macro variables
          className: "built_in",
          begin: "%" + n.either(...i)
        },
        {
          // User-defined macro functions
          className: "title.function",
          begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
        },
        {
          // TODO: this is most likely an incorrect classification
          // built_in may need more nuance
          // https://github.com/highlightjs/highlight.js/issues/2521
          className: "meta",
          begin: n.either(...a) + "(?=\\()"
        },
        {
          className: "string",
          variants: [
            e.APOS_STRING_MODE,
            e.QUOTE_STRING_MODE
          ]
        },
        e.COMMENT("\\*", ";"),
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Eg = t, Eg;
}
var Sg, GO;
function $te() {
  if (GO) return Sg;
  GO = 1;
  function t(e) {
    const n = e.regex, r = {
      className: "meta",
      begin: "@[A-Za-z]+"
    }, a = {
      className: "subst",
      variants: [
        { begin: "\\$[A-Za-z0-9_]+" },
        {
          begin: /\$\{/,
          end: /\}/
        }
      ]
    }, i = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""'
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          begin: '[a-z]+"',
          end: '"',
          illegal: "\\n",
          contains: [
            e.BACKSLASH_ESCAPE,
            a
          ]
        },
        {
          className: "string",
          begin: '[a-z]+"""',
          end: '"""',
          contains: [a],
          relevance: 10
        }
      ]
    }, s = {
      className: "type",
      begin: "\\b[A-Z][A-Za-z0-9_]*",
      relevance: 0
    }, l = {
      className: "title",
      begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
      relevance: 0
    }, c = {
      className: "class",
      beginKeywords: "class object trait type",
      end: /[:={\[\n;]/,
      excludeEnd: !0,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          beginKeywords: "extends with",
          relevance: 10
        },
        {
          begin: /\[/,
          end: /\]/,
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0,
          contains: [
            s,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0,
          contains: [
            s,
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE
          ]
        },
        l
      ]
    }, d = {
      className: "function",
      beginKeywords: "def",
      end: n.lookahead(/[:={\[(\n;]/),
      contains: [l]
    }, p = {
      begin: [
        /^\s*/,
        // Is first token on the line
        "extension",
        /\s+(?=[[(])/
        // followed by at least one space and `[` or `(`
      ],
      beginScope: { 2: "keyword" }
    }, _ = {
      begin: [
        /^\s*/,
        // Is first token on the line
        /end/,
        /\s+/,
        /(extension\b)?/
        // `extension` is the only marker that follows an `end` that cannot be captured by another rule.
      ],
      beginScope: {
        2: "keyword",
        4: "keyword"
      }
    }, f = [
      { match: /\.inline\b/ },
      {
        begin: /\binline(?=\s)/,
        keywords: "inline"
      }
    ], g = {
      begin: [
        /\(\s*/,
        // Opening `(` of a parameter or argument list
        /using/,
        /\s+(?!\))/
        // Spaces not followed by `)`
      ],
      beginScope: { 2: "keyword" }
    };
    return {
      name: "Scala",
      keywords: {
        literal: "true false null",
        keyword: "type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent"
      },
      contains: [
        {
          begin: [
            "//>",
            /\s+/,
            /using/,
            /\s+/,
            /\S+/
          ],
          beginScope: {
            1: "comment",
            3: "keyword",
            5: "type"
          },
          end: /$/,
          contains: [
            {
              className: "string",
              begin: /\S+/
            }
          ]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        i,
        s,
        d,
        c,
        e.C_NUMBER_MODE,
        p,
        _,
        ...f,
        g,
        r
      ]
    };
  }
  return Sg = t, Sg;
}
var bg, HO;
function Wte() {
  if (HO) return bg;
  HO = 1;
  function t(e) {
    const n = "[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+", r = "(-|\\+)?\\d+([./]\\d+)?", a = r + "[+\\-]" + r + "i", i = {
      $pattern: n,
      built_in: "case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"
    }, s = {
      className: "literal",
      begin: "(#t|#f|#\\\\" + n + "|#\\\\.)"
    }, l = {
      className: "number",
      variants: [
        {
          begin: r,
          relevance: 0
        },
        {
          begin: a,
          relevance: 0
        },
        { begin: "#b[0-1]+(/[0-1]+)?" },
        { begin: "#o[0-7]+(/[0-7]+)?" },
        { begin: "#x[0-9a-f]+(/[0-9a-f]+)?" }
      ]
    }, c = e.QUOTE_STRING_MODE, d = [
      e.COMMENT(
        ";",
        "$",
        { relevance: 0 }
      ),
      e.COMMENT("#\\|", "\\|#")
    ], p = {
      begin: n,
      relevance: 0
    }, _ = {
      className: "symbol",
      begin: "'" + n
    }, f = {
      endsWithParent: !0,
      relevance: 0
    }, g = {
      variants: [
        { begin: /'/ },
        { begin: "`" }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            s,
            c,
            l,
            p,
            _
          ]
        }
      ]
    }, E = {
      className: "name",
      relevance: 0,
      begin: n,
      keywords: i
    }, R = {
      variants: [
        {
          begin: "\\(",
          end: "\\)"
        },
        {
          begin: "\\[",
          end: "\\]"
        }
      ],
      contains: [
        {
          begin: /lambda/,
          endsWithParent: !0,
          returnBegin: !0,
          contains: [
            E,
            {
              endsParent: !0,
              variants: [
                {
                  begin: /\(/,
                  end: /\)/
                },
                {
                  begin: /\[/,
                  end: /\]/
                }
              ],
              contains: [p]
            }
          ]
        },
        E,
        f
      ]
    };
    return f.contains = [
      s,
      l,
      c,
      p,
      _,
      g,
      R
    ].concat(d), {
      name: "Scheme",
      aliases: ["scm"],
      illegal: /\S/,
      contains: [
        e.SHEBANG(),
        l,
        c,
        _,
        g,
        R
      ].concat(d)
    };
  }
  return bg = t, bg;
}
var Tg, YO;
function Kte() {
  if (YO) return Tg;
  YO = 1;
  function t(e) {
    const n = [
      e.C_NUMBER_MODE,
      {
        className: "string",
        begin: `'|"`,
        end: `'|"`,
        contains: [
          e.BACKSLASH_ESCAPE,
          { begin: "''" }
        ]
      }
    ];
    return {
      name: "Scilab",
      aliases: ["sci"],
      keywords: {
        $pattern: /%?\w+/,
        keyword: "abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",
        literal: "%f %F %t %T %pi %eps %inf %nan %e %i %z %s",
        built_in: (
          // Scilab has more than 2000 functions. Just list the most commons
          "abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"
        )
      },
      illegal: '("|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            e.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        // seems to be a guard against [ident]' or [ident].
        // perhaps to prevent attributes from flagging as keywords?
        {
          begin: "[a-zA-Z_][a-zA-Z_0-9]*[\\.']+",
          relevance: 0
        },
        {
          begin: "\\[",
          end: "\\][\\.']*",
          relevance: 0,
          contains: n
        },
        e.COMMENT("//", "$")
      ].concat(n)
    };
  }
  return Tg = t, Tg;
}
var yg, zO;
function Qte() {
  if (zO) return yg;
  zO = 1;
  const t = (l) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: l.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        l.APOS_STRING_MODE,
        l.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: l.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], r = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], a = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], i = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse();
  function s(l) {
    const c = t(l), d = a, p = r, _ = "@[a-z-]+", f = "and or not only", E = {
      className: "variable",
      begin: "(\\$" + "[a-zA-Z-][a-zA-Z0-9_-]*" + ")\\b",
      relevance: 0
    };
    return {
      name: "SCSS",
      case_insensitive: !0,
      illegal: "[=/|']",
      contains: [
        l.C_LINE_COMMENT_MODE,
        l.C_BLOCK_COMMENT_MODE,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        c.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: "#[A-Za-z0-9_-]+",
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\.[A-Za-z0-9_-]+",
          relevance: 0
        },
        c.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-tag",
          begin: "\\b(" + e.join("|") + ")\\b",
          // was there, before, but why?
          relevance: 0
        },
        {
          className: "selector-pseudo",
          begin: ":(" + p.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + d.join("|") + ")"
        },
        E,
        {
          // pseudo-selector params
          begin: /\(/,
          end: /\)/,
          contains: [c.CSS_NUMBER_MODE]
        },
        c.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + i.join("|") + ")\\b"
        },
        { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
        {
          begin: /:/,
          end: /[;}{]/,
          relevance: 0,
          contains: [
            c.BLOCK_COMMENT,
            E,
            c.HEXCOLOR,
            c.CSS_NUMBER_MODE,
            l.QUOTE_STRING_MODE,
            l.APOS_STRING_MODE,
            c.IMPORTANT,
            c.FUNCTION_DISPATCH
          ]
        },
        // matching these here allows us to treat them more like regular CSS
        // rules so everything between the {} gets regular rule highlighting,
        // which is what we want for page and font-face
        {
          begin: "@(page|font-face)",
          keywords: {
            $pattern: _,
            keyword: "@page @font-face"
          }
        },
        {
          begin: "@",
          end: "[{;]",
          returnBegin: !0,
          keywords: {
            $pattern: /[a-z-]+/,
            keyword: f,
            attribute: n.join(" ")
          },
          contains: [
            {
              begin: _,
              className: "keyword"
            },
            {
              begin: /[a-z-]+(?=:)/,
              className: "attribute"
            },
            E,
            l.QUOTE_STRING_MODE,
            l.APOS_STRING_MODE,
            c.HEXCOLOR,
            c.CSS_NUMBER_MODE
          ]
        },
        c.FUNCTION_DISPATCH
      ]
    };
  }
  return yg = s, yg;
}
var vg, qO;
function jte() {
  if (qO) return vg;
  qO = 1;
  function t(e) {
    return {
      name: "Shell Session",
      aliases: [
        "console",
        "shellsession"
      ],
      contains: [
        {
          className: "meta.prompt",
          // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
          // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
          // echo /path/to/home > t.exe
          begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
          starts: {
            end: /[^\\](?=\s*$)/,
            subLanguage: "bash"
          }
        }
      ]
    };
  }
  return vg = t, vg;
}
var Cg, VO;
function Xte() {
  if (VO) return Cg;
  VO = 1;
  function t(e) {
    const n = [
      "add",
      "and",
      "cmp",
      "cmpg",
      "cmpl",
      "const",
      "div",
      "double",
      "float",
      "goto",
      "if",
      "int",
      "long",
      "move",
      "mul",
      "neg",
      "new",
      "nop",
      "not",
      "or",
      "rem",
      "return",
      "shl",
      "shr",
      "sput",
      "sub",
      "throw",
      "ushr",
      "xor"
    ], r = [
      "aget",
      "aput",
      "array",
      "check",
      "execute",
      "fill",
      "filled",
      "goto/16",
      "goto/32",
      "iget",
      "instance",
      "invoke",
      "iput",
      "monitor",
      "packed",
      "sget",
      "sparse"
    ], a = [
      "transient",
      "constructor",
      "abstract",
      "final",
      "synthetic",
      "public",
      "private",
      "protected",
      "static",
      "bridge",
      "system"
    ];
    return {
      name: "Smali",
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0
        },
        e.COMMENT(
          "#",
          "$",
          { relevance: 0 }
        ),
        {
          className: "keyword",
          variants: [
            { begin: "\\s*\\.end\\s[a-zA-Z0-9]*" },
            {
              begin: "^[ ]*\\.[a-zA-Z]*",
              relevance: 0
            },
            {
              begin: "\\s:[a-zA-Z_0-9]*",
              relevance: 0
            },
            { begin: "\\s(" + a.join("|") + ")" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "\\s(" + n.join("|") + ")\\s" },
            {
              begin: "\\s(" + n.join("|") + ")((-|/)[a-zA-Z0-9]+)+\\s",
              relevance: 10
            },
            {
              begin: "\\s(" + r.join("|") + ")((-|/)[a-zA-Z0-9]+)*\\s",
              relevance: 10
            }
          ]
        },
        {
          className: "class",
          begin: `L[^(;:
]*;`,
          relevance: 0
        },
        { begin: "[vp][0-9]+" }
      ]
    };
  }
  return Cg = t, Cg;
}
var Rg, $O;
function Zte() {
  if ($O) return Rg;
  $O = 1;
  function t(e) {
    const n = "[a-z][a-zA-Z0-9_]*", r = {
      className: "string",
      begin: "\\$.{1}"
    }, a = {
      className: "symbol",
      begin: "#" + e.UNDERSCORE_IDENT_RE
    };
    return {
      name: "Smalltalk",
      aliases: ["st"],
      keywords: [
        "self",
        "super",
        "nil",
        "true",
        "false",
        "thisContext"
      ],
      contains: [
        e.COMMENT('"', '"'),
        e.APOS_STRING_MODE,
        {
          className: "type",
          begin: "\\b[A-Z][A-Za-z0-9_]*",
          relevance: 0
        },
        {
          begin: n + ":",
          relevance: 0
        },
        e.C_NUMBER_MODE,
        a,
        r,
        {
          // This looks more complicated than needed to avoid combinatorial
          // explosion under V8. It effectively means `| var1 var2 ... |` with
          // whitespace adjacent to `|` being optional.
          begin: "\\|[ ]*" + n + "([ ]+" + n + ")*[ ]*\\|",
          returnBegin: !0,
          end: /\|/,
          illegal: /\S/,
          contains: [{ begin: "(\\|[ ]*)?" + n }]
        },
        {
          begin: "#\\(",
          end: "\\)",
          contains: [
            e.APOS_STRING_MODE,
            r,
            e.C_NUMBER_MODE,
            a
          ]
        }
      ]
    };
  }
  return Rg = t, Rg;
}
var Ag, WO;
function Jte() {
  if (WO) return Ag;
  WO = 1;
  function t(e) {
    return {
      name: "SML (Standard ML)",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: (
          /* according to Definition of Standard ML 97  */
          "abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while"
        ),
        built_in: (
          /* built-in types according to basis library */
          "array bool char exn int list option order real ref string substring vector unit word"
        ),
        literal: "true false NONE SOME LESS EQUAL GREATER nil"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        e.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*"
        },
        e.inherit(e.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /[-=]>/
          // relevance booster
        }
      ]
    };
  }
  return Ag = t, Ag;
}
var Og, KO;
function ene() {
  if (KO) return Og;
  KO = 1;
  function t(e) {
    const n = {
      className: "variable",
      begin: /\b_+[a-zA-Z]\w*/
    }, r = {
      className: "title",
      begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
    }, a = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"',
          contains: [
            {
              begin: '""',
              relevance: 0
            }
          ]
        },
        {
          begin: "'",
          end: "'",
          contains: [
            {
              begin: "''",
              relevance: 0
            }
          ]
        }
      ]
    }, i = [
      "break",
      "breakWith",
      "breakOut",
      "breakTo",
      "case",
      "catch",
      "continue",
      "continueWith",
      "default",
      "do",
      "else",
      "exit",
      "exitWith",
      "for",
      "forEach",
      "from",
      "if",
      "local",
      "private",
      "switch",
      "step",
      "then",
      "throw",
      "to",
      "try",
      "waitUntil",
      "while",
      "with"
    ], s = [
      "blufor",
      "civilian",
      "configNull",
      "controlNull",
      "displayNull",
      "diaryRecordNull",
      "east",
      "endl",
      "false",
      "grpNull",
      "independent",
      "lineBreak",
      "locationNull",
      "nil",
      "objNull",
      "opfor",
      "pi",
      "resistance",
      "scriptNull",
      "sideAmbientLife",
      "sideEmpty",
      "sideEnemy",
      "sideFriendly",
      "sideLogic",
      "sideUnknown",
      "taskNull",
      "teamMemberNull",
      "true",
      "west"
    ], l = [
      "abs",
      "accTime",
      "acos",
      "action",
      "actionIDs",
      "actionKeys",
      "actionKeysEx",
      "actionKeysImages",
      "actionKeysNames",
      "actionKeysNamesArray",
      "actionName",
      "actionParams",
      "activateAddons",
      "activatedAddons",
      "activateKey",
      "activeTitleEffectParams",
      "add3DENConnection",
      "add3DENEventHandler",
      "add3DENLayer",
      "addAction",
      "addBackpack",
      "addBackpackCargo",
      "addBackpackCargoGlobal",
      "addBackpackGlobal",
      "addBinocularItem",
      "addCamShake",
      "addCuratorAddons",
      "addCuratorCameraArea",
      "addCuratorEditableObjects",
      "addCuratorEditingArea",
      "addCuratorPoints",
      "addEditorObject",
      "addEventHandler",
      "addForce",
      "addForceGeneratorRTD",
      "addGoggles",
      "addGroupIcon",
      "addHandgunItem",
      "addHeadgear",
      "addItem",
      "addItemCargo",
      "addItemCargoGlobal",
      "addItemPool",
      "addItemToBackpack",
      "addItemToUniform",
      "addItemToVest",
      "addLiveStats",
      "addMagazine",
      "addMagazineAmmoCargo",
      "addMagazineCargo",
      "addMagazineCargoGlobal",
      "addMagazineGlobal",
      "addMagazinePool",
      "addMagazines",
      "addMagazineTurret",
      "addMenu",
      "addMenuItem",
      "addMissionEventHandler",
      "addMPEventHandler",
      "addMusicEventHandler",
      "addonFiles",
      "addOwnedMine",
      "addPlayerScores",
      "addPrimaryWeaponItem",
      "addPublicVariableEventHandler",
      "addRating",
      "addResources",
      "addScore",
      "addScoreSide",
      "addSecondaryWeaponItem",
      "addSwitchableUnit",
      "addTeamMember",
      "addToRemainsCollector",
      "addTorque",
      "addUniform",
      "addUserActionEventHandler",
      "addVehicle",
      "addVest",
      "addWaypoint",
      "addWeapon",
      "addWeaponCargo",
      "addWeaponCargoGlobal",
      "addWeaponGlobal",
      "addWeaponItem",
      "addWeaponPool",
      "addWeaponTurret",
      "addWeaponWithAttachmentsCargo",
      "addWeaponWithAttachmentsCargoGlobal",
      "admin",
      "agent",
      "agents",
      "AGLToASL",
      "aimedAtTarget",
      "aimPos",
      "airDensityCurveRTD",
      "airDensityRTD",
      "airplaneThrottle",
      "airportSide",
      "AISFinishHeal",
      "alive",
      "all3DENEntities",
      "allActiveTitleEffects",
      "allAddonsInfo",
      "allAirports",
      "allControls",
      "allCurators",
      "allCutLayers",
      "allDead",
      "allDeadMen",
      "allDiaryRecords",
      "allDiarySubjects",
      "allDisplays",
      "allEnv3DSoundSources",
      "allGroups",
      "allLODs",
      "allMapMarkers",
      "allMines",
      "allMissionObjects",
      "allObjects",
      "allow3DMode",
      "allowCrewInImmobile",
      "allowCuratorLogicIgnoreAreas",
      "allowDamage",
      "allowDammage",
      "allowedService",
      "allowFileOperations",
      "allowFleeing",
      "allowGetIn",
      "allowService",
      "allowSprint",
      "allPlayers",
      "allSimpleObjects",
      "allSites",
      "allTurrets",
      "allUnits",
      "allUnitsUAV",
      "allUsers",
      "allVariables",
      "ambientTemperature",
      "ammo",
      "ammoOnPylon",
      "and",
      "animate",
      "animateBay",
      "animateDoor",
      "animatePylon",
      "animateSource",
      "animationNames",
      "animationPhase",
      "animationSourcePhase",
      "animationState",
      "apertureParams",
      "append",
      "apply",
      "armoryPoints",
      "arrayIntersect",
      "asin",
      "ASLToAGL",
      "ASLToATL",
      "assert",
      "assignAsCargo",
      "assignAsCargoIndex",
      "assignAsCommander",
      "assignAsDriver",
      "assignAsGunner",
      "assignAsTurret",
      "assignCurator",
      "assignedCargo",
      "assignedCommander",
      "assignedDriver",
      "assignedGroup",
      "assignedGunner",
      "assignedItems",
      "assignedTarget",
      "assignedTeam",
      "assignedVehicle",
      "assignedVehicleRole",
      "assignedVehicles",
      "assignItem",
      "assignTeam",
      "assignToAirport",
      "atan",
      "atan2",
      "atg",
      "ATLToASL",
      "attachedObject",
      "attachedObjects",
      "attachedTo",
      "attachObject",
      "attachTo",
      "attackEnabled",
      "awake",
      "backpack",
      "backpackCargo",
      "backpackContainer",
      "backpackItems",
      "backpackMagazines",
      "backpackSpaceFor",
      "behaviour",
      "benchmark",
      "bezierInterpolation",
      "binocular",
      "binocularItems",
      "binocularMagazine",
      "boundingBox",
      "boundingBoxReal",
      "boundingCenter",
      "brakesDisabled",
      "briefingName",
      "buildingExit",
      "buildingPos",
      "buldozer_EnableRoadDiag",
      "buldozer_IsEnabledRoadDiag",
      "buldozer_LoadNewRoads",
      "buldozer_reloadOperMap",
      "buttonAction",
      "buttonSetAction",
      "cadetMode",
      "calculatePath",
      "calculatePlayerVisibilityByFriendly",
      "call",
      "callExtension",
      "camCommand",
      "camCommit",
      "camCommitPrepared",
      "camCommitted",
      "camConstuctionSetParams",
      "camCreate",
      "camDestroy",
      "cameraEffect",
      "cameraEffectEnableHUD",
      "cameraInterest",
      "cameraOn",
      "cameraView",
      "campaignConfigFile",
      "camPreload",
      "camPreloaded",
      "camPrepareBank",
      "camPrepareDir",
      "camPrepareDive",
      "camPrepareFocus",
      "camPrepareFov",
      "camPrepareFovRange",
      "camPreparePos",
      "camPrepareRelPos",
      "camPrepareTarget",
      "camSetBank",
      "camSetDir",
      "camSetDive",
      "camSetFocus",
      "camSetFov",
      "camSetFovRange",
      "camSetPos",
      "camSetRelPos",
      "camSetTarget",
      "camTarget",
      "camUseNVG",
      "canAdd",
      "canAddItemToBackpack",
      "canAddItemToUniform",
      "canAddItemToVest",
      "cancelSimpleTaskDestination",
      "canDeployWeapon",
      "canFire",
      "canMove",
      "canSlingLoad",
      "canStand",
      "canSuspend",
      "canTriggerDynamicSimulation",
      "canUnloadInCombat",
      "canVehicleCargo",
      "captive",
      "captiveNum",
      "cbChecked",
      "cbSetChecked",
      "ceil",
      "channelEnabled",
      "cheatsEnabled",
      "checkAIFeature",
      "checkVisibility",
      "className",
      "clear3DENAttribute",
      "clear3DENInventory",
      "clearAllItemsFromBackpack",
      "clearBackpackCargo",
      "clearBackpackCargoGlobal",
      "clearForcesRTD",
      "clearGroupIcons",
      "clearItemCargo",
      "clearItemCargoGlobal",
      "clearItemPool",
      "clearMagazineCargo",
      "clearMagazineCargoGlobal",
      "clearMagazinePool",
      "clearOverlay",
      "clearRadio",
      "clearWeaponCargo",
      "clearWeaponCargoGlobal",
      "clearWeaponPool",
      "clientOwner",
      "closeDialog",
      "closeDisplay",
      "closeOverlay",
      "collapseObjectTree",
      "collect3DENHistory",
      "collectiveRTD",
      "collisionDisabledWith",
      "combatBehaviour",
      "combatMode",
      "commandArtilleryFire",
      "commandChat",
      "commander",
      "commandFire",
      "commandFollow",
      "commandFSM",
      "commandGetOut",
      "commandingMenu",
      "commandMove",
      "commandRadio",
      "commandStop",
      "commandSuppressiveFire",
      "commandTarget",
      "commandWatch",
      "comment",
      "commitOverlay",
      "compatibleItems",
      "compatibleMagazines",
      "compile",
      "compileFinal",
      "compileScript",
      "completedFSM",
      "composeText",
      "configClasses",
      "configFile",
      "configHierarchy",
      "configName",
      "configOf",
      "configProperties",
      "configSourceAddonList",
      "configSourceMod",
      "configSourceModList",
      "confirmSensorTarget",
      "connectTerminalToUAV",
      "connectToServer",
      "controlsGroupCtrl",
      "conversationDisabled",
      "copyFromClipboard",
      "copyToClipboard",
      "copyWaypoints",
      "cos",
      "count",
      "countEnemy",
      "countFriendly",
      "countSide",
      "countType",
      "countUnknown",
      "create3DENComposition",
      "create3DENEntity",
      "createAgent",
      "createCenter",
      "createDialog",
      "createDiaryLink",
      "createDiaryRecord",
      "createDiarySubject",
      "createDisplay",
      "createGearDialog",
      "createGroup",
      "createGuardedPoint",
      "createHashMap",
      "createHashMapFromArray",
      "createLocation",
      "createMarker",
      "createMarkerLocal",
      "createMenu",
      "createMine",
      "createMissionDisplay",
      "createMPCampaignDisplay",
      "createSimpleObject",
      "createSimpleTask",
      "createSite",
      "createSoundSource",
      "createTask",
      "createTeam",
      "createTrigger",
      "createUnit",
      "createVehicle",
      "createVehicleCrew",
      "createVehicleLocal",
      "crew",
      "ctAddHeader",
      "ctAddRow",
      "ctClear",
      "ctCurSel",
      "ctData",
      "ctFindHeaderRows",
      "ctFindRowHeader",
      "ctHeaderControls",
      "ctHeaderCount",
      "ctRemoveHeaders",
      "ctRemoveRows",
      "ctrlActivate",
      "ctrlAddEventHandler",
      "ctrlAngle",
      "ctrlAnimateModel",
      "ctrlAnimationPhaseModel",
      "ctrlAt",
      "ctrlAutoScrollDelay",
      "ctrlAutoScrollRewind",
      "ctrlAutoScrollSpeed",
      "ctrlBackgroundColor",
      "ctrlChecked",
      "ctrlClassName",
      "ctrlCommit",
      "ctrlCommitted",
      "ctrlCreate",
      "ctrlDelete",
      "ctrlEnable",
      "ctrlEnabled",
      "ctrlFade",
      "ctrlFontHeight",
      "ctrlForegroundColor",
      "ctrlHTMLLoaded",
      "ctrlIDC",
      "ctrlIDD",
      "ctrlMapAnimAdd",
      "ctrlMapAnimClear",
      "ctrlMapAnimCommit",
      "ctrlMapAnimDone",
      "ctrlMapCursor",
      "ctrlMapMouseOver",
      "ctrlMapPosition",
      "ctrlMapScale",
      "ctrlMapScreenToWorld",
      "ctrlMapSetPosition",
      "ctrlMapWorldToScreen",
      "ctrlModel",
      "ctrlModelDirAndUp",
      "ctrlModelScale",
      "ctrlMousePosition",
      "ctrlParent",
      "ctrlParentControlsGroup",
      "ctrlPosition",
      "ctrlRemoveAllEventHandlers",
      "ctrlRemoveEventHandler",
      "ctrlScale",
      "ctrlScrollValues",
      "ctrlSetActiveColor",
      "ctrlSetAngle",
      "ctrlSetAutoScrollDelay",
      "ctrlSetAutoScrollRewind",
      "ctrlSetAutoScrollSpeed",
      "ctrlSetBackgroundColor",
      "ctrlSetChecked",
      "ctrlSetDisabledColor",
      "ctrlSetEventHandler",
      "ctrlSetFade",
      "ctrlSetFocus",
      "ctrlSetFont",
      "ctrlSetFontH1",
      "ctrlSetFontH1B",
      "ctrlSetFontH2",
      "ctrlSetFontH2B",
      "ctrlSetFontH3",
      "ctrlSetFontH3B",
      "ctrlSetFontH4",
      "ctrlSetFontH4B",
      "ctrlSetFontH5",
      "ctrlSetFontH5B",
      "ctrlSetFontH6",
      "ctrlSetFontH6B",
      "ctrlSetFontHeight",
      "ctrlSetFontHeightH1",
      "ctrlSetFontHeightH2",
      "ctrlSetFontHeightH3",
      "ctrlSetFontHeightH4",
      "ctrlSetFontHeightH5",
      "ctrlSetFontHeightH6",
      "ctrlSetFontHeightSecondary",
      "ctrlSetFontP",
      "ctrlSetFontPB",
      "ctrlSetFontSecondary",
      "ctrlSetForegroundColor",
      "ctrlSetModel",
      "ctrlSetModelDirAndUp",
      "ctrlSetModelScale",
      "ctrlSetMousePosition",
      "ctrlSetPixelPrecision",
      "ctrlSetPosition",
      "ctrlSetPositionH",
      "ctrlSetPositionW",
      "ctrlSetPositionX",
      "ctrlSetPositionY",
      "ctrlSetScale",
      "ctrlSetScrollValues",
      "ctrlSetShadow",
      "ctrlSetStructuredText",
      "ctrlSetText",
      "ctrlSetTextColor",
      "ctrlSetTextColorSecondary",
      "ctrlSetTextSecondary",
      "ctrlSetTextSelection",
      "ctrlSetTooltip",
      "ctrlSetTooltipColorBox",
      "ctrlSetTooltipColorShade",
      "ctrlSetTooltipColorText",
      "ctrlSetTooltipMaxWidth",
      "ctrlSetURL",
      "ctrlSetURLOverlayMode",
      "ctrlShadow",
      "ctrlShow",
      "ctrlShown",
      "ctrlStyle",
      "ctrlText",
      "ctrlTextColor",
      "ctrlTextHeight",
      "ctrlTextSecondary",
      "ctrlTextSelection",
      "ctrlTextWidth",
      "ctrlTooltip",
      "ctrlType",
      "ctrlURL",
      "ctrlURLOverlayMode",
      "ctrlVisible",
      "ctRowControls",
      "ctRowCount",
      "ctSetCurSel",
      "ctSetData",
      "ctSetHeaderTemplate",
      "ctSetRowTemplate",
      "ctSetValue",
      "ctValue",
      "curatorAddons",
      "curatorCamera",
      "curatorCameraArea",
      "curatorCameraAreaCeiling",
      "curatorCoef",
      "curatorEditableObjects",
      "curatorEditingArea",
      "curatorEditingAreaType",
      "curatorMouseOver",
      "curatorPoints",
      "curatorRegisteredObjects",
      "curatorSelected",
      "curatorWaypointCost",
      "current3DENOperation",
      "currentChannel",
      "currentCommand",
      "currentMagazine",
      "currentMagazineDetail",
      "currentMagazineDetailTurret",
      "currentMagazineTurret",
      "currentMuzzle",
      "currentNamespace",
      "currentPilot",
      "currentTask",
      "currentTasks",
      "currentThrowable",
      "currentVisionMode",
      "currentWaypoint",
      "currentWeapon",
      "currentWeaponMode",
      "currentWeaponTurret",
      "currentZeroing",
      "cursorObject",
      "cursorTarget",
      "customChat",
      "customRadio",
      "customWaypointPosition",
      "cutFadeOut",
      "cutObj",
      "cutRsc",
      "cutText",
      "damage",
      "date",
      "dateToNumber",
      "dayTime",
      "deActivateKey",
      "debriefingText",
      "debugFSM",
      "debugLog",
      "decayGraphValues",
      "deg",
      "delete3DENEntities",
      "deleteAt",
      "deleteCenter",
      "deleteCollection",
      "deleteEditorObject",
      "deleteGroup",
      "deleteGroupWhenEmpty",
      "deleteIdentity",
      "deleteLocation",
      "deleteMarker",
      "deleteMarkerLocal",
      "deleteRange",
      "deleteResources",
      "deleteSite",
      "deleteStatus",
      "deleteTeam",
      "deleteVehicle",
      "deleteVehicleCrew",
      "deleteWaypoint",
      "detach",
      "detectedMines",
      "diag_activeMissionFSMs",
      "diag_activeScripts",
      "diag_activeSQFScripts",
      "diag_activeSQSScripts",
      "diag_allMissionEventHandlers",
      "diag_captureFrame",
      "diag_captureFrameToFile",
      "diag_captureSlowFrame",
      "diag_codePerformance",
      "diag_deltaTime",
      "diag_drawmode",
      "diag_dumpCalltraceToLog",
      "diag_dumpScriptAssembly",
      "diag_dumpTerrainSynth",
      "diag_dynamicSimulationEnd",
      "diag_enable",
      "diag_enabled",
      "diag_exportConfig",
      "diag_exportTerrainSVG",
      "diag_fps",
      "diag_fpsmin",
      "diag_frameno",
      "diag_getTerrainSegmentOffset",
      "diag_lightNewLoad",
      "diag_list",
      "diag_localized",
      "diag_log",
      "diag_logSlowFrame",
      "diag_mergeConfigFile",
      "diag_recordTurretLimits",
      "diag_resetFSM",
      "diag_resetshapes",
      "diag_scope",
      "diag_setLightNew",
      "diag_stacktrace",
      "diag_tickTime",
      "diag_toggle",
      "dialog",
      "diarySubjectExists",
      "didJIP",
      "didJIPOwner",
      "difficulty",
      "difficultyEnabled",
      "difficultyEnabledRTD",
      "difficultyOption",
      "direction",
      "directionStabilizationEnabled",
      "directSay",
      "disableAI",
      "disableBrakes",
      "disableCollisionWith",
      "disableConversation",
      "disableDebriefingStats",
      "disableMapIndicators",
      "disableNVGEquipment",
      "disableRemoteSensors",
      "disableSerialization",
      "disableTIEquipment",
      "disableUAVConnectability",
      "disableUserInput",
      "displayAddEventHandler",
      "displayChild",
      "displayCtrl",
      "displayParent",
      "displayRemoveAllEventHandlers",
      "displayRemoveEventHandler",
      "displaySetEventHandler",
      "displayUniqueName",
      "displayUpdate",
      "dissolveTeam",
      "distance",
      "distance2D",
      "distanceSqr",
      "distributionRegion",
      "do3DENAction",
      "doArtilleryFire",
      "doFire",
      "doFollow",
      "doFSM",
      "doGetOut",
      "doMove",
      "doorPhase",
      "doStop",
      "doSuppressiveFire",
      "doTarget",
      "doWatch",
      "drawArrow",
      "drawEllipse",
      "drawIcon",
      "drawIcon3D",
      "drawLaser",
      "drawLine",
      "drawLine3D",
      "drawLink",
      "drawLocation",
      "drawPolygon",
      "drawRectangle",
      "drawTriangle",
      "driver",
      "drop",
      "dynamicSimulationDistance",
      "dynamicSimulationDistanceCoef",
      "dynamicSimulationEnabled",
      "dynamicSimulationSystemEnabled",
      "echo",
      "edit3DENMissionAttributes",
      "editObject",
      "editorSetEventHandler",
      "effectiveCommander",
      "elevatePeriscope",
      "emptyPositions",
      "enableAI",
      "enableAIFeature",
      "enableAimPrecision",
      "enableAttack",
      "enableAudioFeature",
      "enableAutoStartUpRTD",
      "enableAutoTrimRTD",
      "enableCamShake",
      "enableCaustics",
      "enableChannel",
      "enableCollisionWith",
      "enableCopilot",
      "enableDebriefingStats",
      "enableDiagLegend",
      "enableDirectionStabilization",
      "enableDynamicSimulation",
      "enableDynamicSimulationSystem",
      "enableEndDialog",
      "enableEngineArtillery",
      "enableEnvironment",
      "enableFatigue",
      "enableGunLights",
      "enableInfoPanelComponent",
      "enableIRLasers",
      "enableMimics",
      "enablePersonTurret",
      "enableRadio",
      "enableReload",
      "enableRopeAttach",
      "enableSatNormalOnDetail",
      "enableSaving",
      "enableSentences",
      "enableSimulation",
      "enableSimulationGlobal",
      "enableStamina",
      "enableStressDamage",
      "enableTeamSwitch",
      "enableTraffic",
      "enableUAVConnectability",
      "enableUAVWaypoints",
      "enableVehicleCargo",
      "enableVehicleSensor",
      "enableWeaponDisassembly",
      "endLoadingScreen",
      "endMission",
      "engineOn",
      "enginesIsOnRTD",
      "enginesPowerRTD",
      "enginesRpmRTD",
      "enginesTorqueRTD",
      "entities",
      "environmentEnabled",
      "environmentVolume",
      "equipmentDisabled",
      "estimatedEndServerTime",
      "estimatedTimeLeft",
      "evalObjectArgument",
      "everyBackpack",
      "everyContainer",
      "exec",
      "execEditorScript",
      "execFSM",
      "execVM",
      "exp",
      "expectedDestination",
      "exportJIPMessages",
      "eyeDirection",
      "eyePos",
      "face",
      "faction",
      "fadeEnvironment",
      "fadeMusic",
      "fadeRadio",
      "fadeSound",
      "fadeSpeech",
      "failMission",
      "fileExists",
      "fillWeaponsFromPool",
      "find",
      "findAny",
      "findCover",
      "findDisplay",
      "findEditorObject",
      "findEmptyPosition",
      "findEmptyPositionReady",
      "findIf",
      "findNearestEnemy",
      "finishMissionInit",
      "finite",
      "fire",
      "fireAtTarget",
      "firstBackpack",
      "flag",
      "flagAnimationPhase",
      "flagOwner",
      "flagSide",
      "flagTexture",
      "flatten",
      "fleeing",
      "floor",
      "flyInHeight",
      "flyInHeightASL",
      "focusedCtrl",
      "fog",
      "fogForecast",
      "fogParams",
      "forceAddUniform",
      "forceAtPositionRTD",
      "forceCadetDifficulty",
      "forcedMap",
      "forceEnd",
      "forceFlagTexture",
      "forceFollowRoad",
      "forceGeneratorRTD",
      "forceMap",
      "forceRespawn",
      "forceSpeed",
      "forceUnicode",
      "forceWalk",
      "forceWeaponFire",
      "forceWeatherChange",
      "forEachMember",
      "forEachMemberAgent",
      "forEachMemberTeam",
      "forgetTarget",
      "format",
      "formation",
      "formationDirection",
      "formationLeader",
      "formationMembers",
      "formationPosition",
      "formationTask",
      "formatText",
      "formLeader",
      "freeExtension",
      "freeLook",
      "fromEditor",
      "fuel",
      "fullCrew",
      "gearIDCAmmoCount",
      "gearSlotAmmoCount",
      "gearSlotData",
      "gestureState",
      "get",
      "get3DENActionState",
      "get3DENAttribute",
      "get3DENCamera",
      "get3DENConnections",
      "get3DENEntity",
      "get3DENEntityID",
      "get3DENGrid",
      "get3DENIconsVisible",
      "get3DENLayerEntities",
      "get3DENLinesVisible",
      "get3DENMissionAttribute",
      "get3DENMouseOver",
      "get3DENSelected",
      "getAimingCoef",
      "getAllEnv3DSoundControllers",
      "getAllEnvSoundControllers",
      "getAllHitPointsDamage",
      "getAllOwnedMines",
      "getAllPylonsInfo",
      "getAllSoundControllers",
      "getAllUnitTraits",
      "getAmmoCargo",
      "getAnimAimPrecision",
      "getAnimSpeedCoef",
      "getArray",
      "getArtilleryAmmo",
      "getArtilleryComputerSettings",
      "getArtilleryETA",
      "getAssetDLCInfo",
      "getAssignedCuratorLogic",
      "getAssignedCuratorUnit",
      "getAttackTarget",
      "getAudioOptionVolumes",
      "getBackpackCargo",
      "getBleedingRemaining",
      "getBurningValue",
      "getCalculatePlayerVisibilityByFriendly",
      "getCameraViewDirection",
      "getCargoIndex",
      "getCenterOfMass",
      "getClientState",
      "getClientStateNumber",
      "getCompatiblePylonMagazines",
      "getConnectedUAV",
      "getConnectedUAVUnit",
      "getContainerMaxLoad",
      "getCorpse",
      "getCruiseControl",
      "getCursorObjectParams",
      "getCustomAimCoef",
      "getCustomSoundController",
      "getCustomSoundControllerCount",
      "getDammage",
      "getDebriefingText",
      "getDescription",
      "getDir",
      "getDirVisual",
      "getDiverState",
      "getDLCAssetsUsage",
      "getDLCAssetsUsageByName",
      "getDLCs",
      "getDLCUsageTime",
      "getEditorCamera",
      "getEditorMode",
      "getEditorObjectScope",
      "getElevationOffset",
      "getEngineTargetRPMRTD",
      "getEnv3DSoundController",
      "getEnvSoundController",
      "getEventHandlerInfo",
      "getFatigue",
      "getFieldManualStartPage",
      "getForcedFlagTexture",
      "getForcedSpeed",
      "getFriend",
      "getFSMVariable",
      "getFuelCargo",
      "getGraphValues",
      "getGroupIcon",
      "getGroupIconParams",
      "getGroupIcons",
      "getHideFrom",
      "getHit",
      "getHitIndex",
      "getHitPointDamage",
      "getItemCargo",
      "getLighting",
      "getLightingAt",
      "getLoadedModsInfo",
      "getMagazineCargo",
      "getMarkerColor",
      "getMarkerPos",
      "getMarkerSize",
      "getMarkerType",
      "getMass",
      "getMissionConfig",
      "getMissionConfigValue",
      "getMissionDLCs",
      "getMissionLayerEntities",
      "getMissionLayers",
      "getMissionPath",
      "getModelInfo",
      "getMousePosition",
      "getMusicPlayedTime",
      "getNumber",
      "getObjectArgument",
      "getObjectChildren",
      "getObjectDLC",
      "getObjectFOV",
      "getObjectID",
      "getObjectMaterials",
      "getObjectProxy",
      "getObjectScale",
      "getObjectTextures",
      "getObjectType",
      "getObjectViewDistance",
      "getOpticsMode",
      "getOrDefault",
      "getOrDefaultCall",
      "getOxygenRemaining",
      "getPersonUsedDLCs",
      "getPilotCameraDirection",
      "getPilotCameraPosition",
      "getPilotCameraRotation",
      "getPilotCameraTarget",
      "getPiPViewDistance",
      "getPlateNumber",
      "getPlayerChannel",
      "getPlayerID",
      "getPlayerScores",
      "getPlayerUID",
      "getPlayerVoNVolume",
      "getPos",
      "getPosASL",
      "getPosASLVisual",
      "getPosASLW",
      "getPosATL",
      "getPosATLVisual",
      "getPosVisual",
      "getPosWorld",
      "getPosWorldVisual",
      "getPylonMagazines",
      "getRelDir",
      "getRelPos",
      "getRemoteSensorsDisabled",
      "getRepairCargo",
      "getResolution",
      "getRoadInfo",
      "getRotorBrakeRTD",
      "getSensorTargets",
      "getSensorThreats",
      "getShadowDistance",
      "getShotParents",
      "getSlingLoad",
      "getSoundController",
      "getSoundControllerResult",
      "getSpeed",
      "getStamina",
      "getStatValue",
      "getSteamFriendsServers",
      "getSubtitleOptions",
      "getSuppression",
      "getTerrainGrid",
      "getTerrainHeight",
      "getTerrainHeightASL",
      "getTerrainInfo",
      "getText",
      "getTextRaw",
      "getTextureInfo",
      "getTextWidth",
      "getTiParameters",
      "getTotalDLCUsageTime",
      "getTrimOffsetRTD",
      "getTurretLimits",
      "getTurretOpticsMode",
      "getUnitFreefallInfo",
      "getUnitLoadout",
      "getUnitTrait",
      "getUnloadInCombat",
      "getUserInfo",
      "getUserMFDText",
      "getUserMFDValue",
      "getVariable",
      "getVehicleCargo",
      "getVehicleTiPars",
      "getWeaponCargo",
      "getWeaponSway",
      "getWingsOrientationRTD",
      "getWingsPositionRTD",
      "getWPPos",
      "glanceAt",
      "globalChat",
      "globalRadio",
      "goggles",
      "goto",
      "group",
      "groupChat",
      "groupFromNetId",
      "groupIconSelectable",
      "groupIconsVisible",
      "groupID",
      "groupOwner",
      "groupRadio",
      "groups",
      "groupSelectedUnits",
      "groupSelectUnit",
      "gunner",
      "gusts",
      "halt",
      "handgunItems",
      "handgunMagazine",
      "handgunWeapon",
      "handsHit",
      "hashValue",
      "hasInterface",
      "hasPilotCamera",
      "hasWeapon",
      "hcAllGroups",
      "hcGroupParams",
      "hcLeader",
      "hcRemoveAllGroups",
      "hcRemoveGroup",
      "hcSelected",
      "hcSelectGroup",
      "hcSetGroup",
      "hcShowBar",
      "hcShownBar",
      "headgear",
      "hideBody",
      "hideObject",
      "hideObjectGlobal",
      "hideSelection",
      "hint",
      "hintC",
      "hintCadet",
      "hintSilent",
      "hmd",
      "hostMission",
      "htmlLoad",
      "HUDMovementLevels",
      "humidity",
      "image",
      "importAllGroups",
      "importance",
      "in",
      "inArea",
      "inAreaArray",
      "incapacitatedState",
      "inflame",
      "inflamed",
      "infoPanel",
      "infoPanelComponentEnabled",
      "infoPanelComponents",
      "infoPanels",
      "inGameUISetEventHandler",
      "inheritsFrom",
      "initAmbientLife",
      "inPolygon",
      "inputAction",
      "inputController",
      "inputMouse",
      "inRangeOfArtillery",
      "insert",
      "insertEditorObject",
      "intersect",
      "is3DEN",
      "is3DENMultiplayer",
      "is3DENPreview",
      "isAbleToBreathe",
      "isActionMenuVisible",
      "isAgent",
      "isAimPrecisionEnabled",
      "isAllowedCrewInImmobile",
      "isArray",
      "isAutoHoverOn",
      "isAutonomous",
      "isAutoStartUpEnabledRTD",
      "isAutotest",
      "isAutoTrimOnRTD",
      "isAwake",
      "isBleeding",
      "isBurning",
      "isClass",
      "isCollisionLightOn",
      "isCopilotEnabled",
      "isDamageAllowed",
      "isDedicated",
      "isDLCAvailable",
      "isEngineOn",
      "isEqualRef",
      "isEqualTo",
      "isEqualType",
      "isEqualTypeAll",
      "isEqualTypeAny",
      "isEqualTypeArray",
      "isEqualTypeParams",
      "isFilePatchingEnabled",
      "isFinal",
      "isFlashlightOn",
      "isFlatEmpty",
      "isForcedWalk",
      "isFormationLeader",
      "isGameFocused",
      "isGamePaused",
      "isGroupDeletedWhenEmpty",
      "isHidden",
      "isInRemainsCollector",
      "isInstructorFigureEnabled",
      "isIRLaserOn",
      "isKeyActive",
      "isKindOf",
      "isLaserOn",
      "isLightOn",
      "isLocalized",
      "isManualFire",
      "isMarkedForCollection",
      "isMissionProfileNamespaceLoaded",
      "isMultiplayer",
      "isMultiplayerSolo",
      "isNil",
      "isNotEqualRef",
      "isNotEqualTo",
      "isNull",
      "isNumber",
      "isObjectHidden",
      "isObjectRTD",
      "isOnRoad",
      "isPiPEnabled",
      "isPlayer",
      "isRealTime",
      "isRemoteExecuted",
      "isRemoteExecutedJIP",
      "isSaving",
      "isSensorTargetConfirmed",
      "isServer",
      "isShowing3DIcons",
      "isSimpleObject",
      "isSprintAllowed",
      "isStaminaEnabled",
      "isSteamMission",
      "isSteamOverlayEnabled",
      "isStreamFriendlyUIEnabled",
      "isStressDamageEnabled",
      "isText",
      "isTouchingGround",
      "isTurnedOut",
      "isTutHintsEnabled",
      "isUAVConnectable",
      "isUAVConnected",
      "isUIContext",
      "isUniformAllowed",
      "isVehicleCargo",
      "isVehicleRadarOn",
      "isVehicleSensorEnabled",
      "isWalking",
      "isWeaponDeployed",
      "isWeaponRested",
      "itemCargo",
      "items",
      "itemsWithMagazines",
      "join",
      "joinAs",
      "joinAsSilent",
      "joinSilent",
      "joinString",
      "kbAddDatabase",
      "kbAddDatabaseTargets",
      "kbAddTopic",
      "kbHasTopic",
      "kbReact",
      "kbRemoveTopic",
      "kbTell",
      "kbWasSaid",
      "keyImage",
      "keyName",
      "keys",
      "knowsAbout",
      "land",
      "landAt",
      "landResult",
      "language",
      "laserTarget",
      "lbAdd",
      "lbClear",
      "lbColor",
      "lbColorRight",
      "lbCurSel",
      "lbData",
      "lbDelete",
      "lbIsSelected",
      "lbPicture",
      "lbPictureRight",
      "lbSelection",
      "lbSetColor",
      "lbSetColorRight",
      "lbSetCurSel",
      "lbSetData",
      "lbSetPicture",
      "lbSetPictureColor",
      "lbSetPictureColorDisabled",
      "lbSetPictureColorSelected",
      "lbSetPictureRight",
      "lbSetPictureRightColor",
      "lbSetPictureRightColorDisabled",
      "lbSetPictureRightColorSelected",
      "lbSetSelectColor",
      "lbSetSelectColorRight",
      "lbSetSelected",
      "lbSetText",
      "lbSetTextRight",
      "lbSetTooltip",
      "lbSetValue",
      "lbSize",
      "lbSort",
      "lbSortBy",
      "lbSortByValue",
      "lbText",
      "lbTextRight",
      "lbTooltip",
      "lbValue",
      "leader",
      "leaderboardDeInit",
      "leaderboardGetRows",
      "leaderboardInit",
      "leaderboardRequestRowsFriends",
      "leaderboardRequestRowsGlobal",
      "leaderboardRequestRowsGlobalAroundUser",
      "leaderboardsRequestUploadScore",
      "leaderboardsRequestUploadScoreKeepBest",
      "leaderboardState",
      "leaveVehicle",
      "libraryCredits",
      "libraryDisclaimers",
      "lifeState",
      "lightAttachObject",
      "lightDetachObject",
      "lightIsOn",
      "lightnings",
      "limitSpeed",
      "linearConversion",
      "lineIntersects",
      "lineIntersectsObjs",
      "lineIntersectsSurfaces",
      "lineIntersectsWith",
      "linkItem",
      "list",
      "listObjects",
      "listRemoteTargets",
      "listVehicleSensors",
      "ln",
      "lnbAddArray",
      "lnbAddColumn",
      "lnbAddRow",
      "lnbClear",
      "lnbColor",
      "lnbColorRight",
      "lnbCurSelRow",
      "lnbData",
      "lnbDeleteColumn",
      "lnbDeleteRow",
      "lnbGetColumnsPosition",
      "lnbPicture",
      "lnbPictureRight",
      "lnbSetColor",
      "lnbSetColorRight",
      "lnbSetColumnsPos",
      "lnbSetCurSelRow",
      "lnbSetData",
      "lnbSetPicture",
      "lnbSetPictureColor",
      "lnbSetPictureColorRight",
      "lnbSetPictureColorSelected",
      "lnbSetPictureColorSelectedRight",
      "lnbSetPictureRight",
      "lnbSetText",
      "lnbSetTextRight",
      "lnbSetTooltip",
      "lnbSetValue",
      "lnbSize",
      "lnbSort",
      "lnbSortBy",
      "lnbSortByValue",
      "lnbText",
      "lnbTextRight",
      "lnbValue",
      "load",
      "loadAbs",
      "loadBackpack",
      "loadConfig",
      "loadFile",
      "loadGame",
      "loadIdentity",
      "loadMagazine",
      "loadOverlay",
      "loadStatus",
      "loadUniform",
      "loadVest",
      "localize",
      "localNamespace",
      "locationPosition",
      "lock",
      "lockCameraTo",
      "lockCargo",
      "lockDriver",
      "locked",
      "lockedCameraTo",
      "lockedCargo",
      "lockedDriver",
      "lockedInventory",
      "lockedTurret",
      "lockIdentity",
      "lockInventory",
      "lockTurret",
      "lockWp",
      "log",
      "logEntities",
      "logNetwork",
      "logNetworkTerminate",
      "lookAt",
      "lookAtPos",
      "magazineCargo",
      "magazines",
      "magazinesAllTurrets",
      "magazinesAmmo",
      "magazinesAmmoCargo",
      "magazinesAmmoFull",
      "magazinesDetail",
      "magazinesDetailBackpack",
      "magazinesDetailUniform",
      "magazinesDetailVest",
      "magazinesTurret",
      "magazineTurretAmmo",
      "mapAnimAdd",
      "mapAnimClear",
      "mapAnimCommit",
      "mapAnimDone",
      "mapCenterOnCamera",
      "mapGridPosition",
      "markAsFinishedOnSteam",
      "markerAlpha",
      "markerBrush",
      "markerChannel",
      "markerColor",
      "markerDir",
      "markerPolyline",
      "markerPos",
      "markerShadow",
      "markerShape",
      "markerSize",
      "markerText",
      "markerType",
      "matrixMultiply",
      "matrixTranspose",
      "max",
      "maxLoad",
      "members",
      "menuAction",
      "menuAdd",
      "menuChecked",
      "menuClear",
      "menuCollapse",
      "menuData",
      "menuDelete",
      "menuEnable",
      "menuEnabled",
      "menuExpand",
      "menuHover",
      "menuPicture",
      "menuSetAction",
      "menuSetCheck",
      "menuSetData",
      "menuSetPicture",
      "menuSetShortcut",
      "menuSetText",
      "menuSetURL",
      "menuSetValue",
      "menuShortcut",
      "menuShortcutText",
      "menuSize",
      "menuSort",
      "menuText",
      "menuURL",
      "menuValue",
      "merge",
      "min",
      "mineActive",
      "mineDetectedBy",
      "missileTarget",
      "missileTargetPos",
      "missionConfigFile",
      "missionDifficulty",
      "missionEnd",
      "missionName",
      "missionNameSource",
      "missionNamespace",
      "missionProfileNamespace",
      "missionStart",
      "missionVersion",
      "mod",
      "modelToWorld",
      "modelToWorldVisual",
      "modelToWorldVisualWorld",
      "modelToWorldWorld",
      "modParams",
      "moonIntensity",
      "moonPhase",
      "morale",
      "move",
      "move3DENCamera",
      "moveInAny",
      "moveInCargo",
      "moveInCommander",
      "moveInDriver",
      "moveInGunner",
      "moveInTurret",
      "moveObjectToEnd",
      "moveOut",
      "moveTime",
      "moveTo",
      "moveToCompleted",
      "moveToFailed",
      "musicVolume",
      "name",
      "namedProperties",
      "nameSound",
      "nearEntities",
      "nearestBuilding",
      "nearestLocation",
      "nearestLocations",
      "nearestLocationWithDubbing",
      "nearestMines",
      "nearestObject",
      "nearestObjects",
      "nearestTerrainObjects",
      "nearObjects",
      "nearObjectsReady",
      "nearRoads",
      "nearSupplies",
      "nearTargets",
      "needReload",
      "needService",
      "netId",
      "netObjNull",
      "newOverlay",
      "nextMenuItemIndex",
      "nextWeatherChange",
      "nMenuItems",
      "not",
      "numberOfEnginesRTD",
      "numberToDate",
      "objectCurators",
      "objectFromNetId",
      "objectParent",
      "objStatus",
      "onBriefingGroup",
      "onBriefingNotes",
      "onBriefingPlan",
      "onBriefingTeamSwitch",
      "onCommandModeChanged",
      "onDoubleClick",
      "onEachFrame",
      "onGroupIconClick",
      "onGroupIconOverEnter",
      "onGroupIconOverLeave",
      "onHCGroupSelectionChanged",
      "onMapSingleClick",
      "onPlayerConnected",
      "onPlayerDisconnected",
      "onPreloadFinished",
      "onPreloadStarted",
      "onShowNewObject",
      "onTeamSwitch",
      "openCuratorInterface",
      "openDLCPage",
      "openGPS",
      "openMap",
      "openSteamApp",
      "openYoutubeVideo",
      "or",
      "orderGetIn",
      "overcast",
      "overcastForecast",
      "owner",
      "param",
      "params",
      "parseNumber",
      "parseSimpleArray",
      "parseText",
      "parsingNamespace",
      "particlesQuality",
      "periscopeElevation",
      "pickWeaponPool",
      "pitch",
      "pixelGrid",
      "pixelGridBase",
      "pixelGridNoUIScale",
      "pixelH",
      "pixelW",
      "playableSlotsNumber",
      "playableUnits",
      "playAction",
      "playActionNow",
      "player",
      "playerRespawnTime",
      "playerSide",
      "playersNumber",
      "playGesture",
      "playMission",
      "playMove",
      "playMoveNow",
      "playMusic",
      "playScriptedMission",
      "playSound",
      "playSound3D",
      "playSoundUI",
      "pose",
      "position",
      "positionCameraToWorld",
      "posScreenToWorld",
      "posWorldToScreen",
      "ppEffectAdjust",
      "ppEffectCommit",
      "ppEffectCommitted",
      "ppEffectCreate",
      "ppEffectDestroy",
      "ppEffectEnable",
      "ppEffectEnabled",
      "ppEffectForceInNVG",
      "precision",
      "preloadCamera",
      "preloadObject",
      "preloadSound",
      "preloadTitleObj",
      "preloadTitleRsc",
      "preprocessFile",
      "preprocessFileLineNumbers",
      "primaryWeapon",
      "primaryWeaponItems",
      "primaryWeaponMagazine",
      "priority",
      "processDiaryLink",
      "productVersion",
      "profileName",
      "profileNamespace",
      "profileNameSteam",
      "progressLoadingScreen",
      "progressPosition",
      "progressSetPosition",
      "publicVariable",
      "publicVariableClient",
      "publicVariableServer",
      "pushBack",
      "pushBackUnique",
      "putWeaponPool",
      "queryItemsPool",
      "queryMagazinePool",
      "queryWeaponPool",
      "rad",
      "radioChannelAdd",
      "radioChannelCreate",
      "radioChannelInfo",
      "radioChannelRemove",
      "radioChannelSetCallSign",
      "radioChannelSetLabel",
      "radioEnabled",
      "radioVolume",
      "rain",
      "rainbow",
      "rainParams",
      "random",
      "rank",
      "rankId",
      "rating",
      "rectangular",
      "regexFind",
      "regexMatch",
      "regexReplace",
      "registeredTasks",
      "registerTask",
      "reload",
      "reloadEnabled",
      "remoteControl",
      "remoteExec",
      "remoteExecCall",
      "remoteExecutedOwner",
      "remove3DENConnection",
      "remove3DENEventHandler",
      "remove3DENLayer",
      "removeAction",
      "removeAll3DENEventHandlers",
      "removeAllActions",
      "removeAllAssignedItems",
      "removeAllBinocularItems",
      "removeAllContainers",
      "removeAllCuratorAddons",
      "removeAllCuratorCameraAreas",
      "removeAllCuratorEditingAreas",
      "removeAllEventHandlers",
      "removeAllHandgunItems",
      "removeAllItems",
      "removeAllItemsWithMagazines",
      "removeAllMissionEventHandlers",
      "removeAllMPEventHandlers",
      "removeAllMusicEventHandlers",
      "removeAllOwnedMines",
      "removeAllPrimaryWeaponItems",
      "removeAllSecondaryWeaponItems",
      "removeAllUserActionEventHandlers",
      "removeAllWeapons",
      "removeBackpack",
      "removeBackpackGlobal",
      "removeBinocularItem",
      "removeCuratorAddons",
      "removeCuratorCameraArea",
      "removeCuratorEditableObjects",
      "removeCuratorEditingArea",
      "removeDiaryRecord",
      "removeDiarySubject",
      "removeDrawIcon",
      "removeDrawLinks",
      "removeEventHandler",
      "removeFromRemainsCollector",
      "removeGoggles",
      "removeGroupIcon",
      "removeHandgunItem",
      "removeHeadgear",
      "removeItem",
      "removeItemFromBackpack",
      "removeItemFromUniform",
      "removeItemFromVest",
      "removeItems",
      "removeMagazine",
      "removeMagazineGlobal",
      "removeMagazines",
      "removeMagazinesTurret",
      "removeMagazineTurret",
      "removeMenuItem",
      "removeMissionEventHandler",
      "removeMPEventHandler",
      "removeMusicEventHandler",
      "removeOwnedMine",
      "removePrimaryWeaponItem",
      "removeSecondaryWeaponItem",
      "removeSimpleTask",
      "removeSwitchableUnit",
      "removeTeamMember",
      "removeUniform",
      "removeUserActionEventHandler",
      "removeVest",
      "removeWeapon",
      "removeWeaponAttachmentCargo",
      "removeWeaponCargo",
      "removeWeaponGlobal",
      "removeWeaponTurret",
      "reportRemoteTarget",
      "requiredVersion",
      "resetCamShake",
      "resetSubgroupDirection",
      "resize",
      "resources",
      "respawnVehicle",
      "restartEditorCamera",
      "reveal",
      "revealMine",
      "reverse",
      "reversedMouseY",
      "roadAt",
      "roadsConnectedTo",
      "roleDescription",
      "ropeAttachedObjects",
      "ropeAttachedTo",
      "ropeAttachEnabled",
      "ropeAttachTo",
      "ropeCreate",
      "ropeCut",
      "ropeDestroy",
      "ropeDetach",
      "ropeEndPosition",
      "ropeLength",
      "ropes",
      "ropesAttachedTo",
      "ropeSegments",
      "ropeUnwind",
      "ropeUnwound",
      "rotorsForcesRTD",
      "rotorsRpmRTD",
      "round",
      "runInitScript",
      "safeZoneH",
      "safeZoneW",
      "safeZoneWAbs",
      "safeZoneX",
      "safeZoneXAbs",
      "safeZoneY",
      "save3DENInventory",
      "saveGame",
      "saveIdentity",
      "saveJoysticks",
      "saveMissionProfileNamespace",
      "saveOverlay",
      "saveProfileNamespace",
      "saveStatus",
      "saveVar",
      "savingEnabled",
      "say",
      "say2D",
      "say3D",
      "scopeName",
      "score",
      "scoreSide",
      "screenshot",
      "screenToWorld",
      "scriptDone",
      "scriptName",
      "scudState",
      "secondaryWeapon",
      "secondaryWeaponItems",
      "secondaryWeaponMagazine",
      "select",
      "selectBestPlaces",
      "selectDiarySubject",
      "selectedEditorObjects",
      "selectEditorObject",
      "selectionNames",
      "selectionPosition",
      "selectionVectorDirAndUp",
      "selectLeader",
      "selectMax",
      "selectMin",
      "selectNoPlayer",
      "selectPlayer",
      "selectRandom",
      "selectRandomWeighted",
      "selectWeapon",
      "selectWeaponTurret",
      "sendAUMessage",
      "sendSimpleCommand",
      "sendTask",
      "sendTaskResult",
      "sendUDPMessage",
      "sentencesEnabled",
      "serverCommand",
      "serverCommandAvailable",
      "serverCommandExecutable",
      "serverName",
      "serverNamespace",
      "serverTime",
      "set",
      "set3DENAttribute",
      "set3DENAttributes",
      "set3DENGrid",
      "set3DENIconsVisible",
      "set3DENLayer",
      "set3DENLinesVisible",
      "set3DENLogicType",
      "set3DENMissionAttribute",
      "set3DENMissionAttributes",
      "set3DENModelsVisible",
      "set3DENObjectType",
      "set3DENSelected",
      "setAccTime",
      "setActualCollectiveRTD",
      "setAirplaneThrottle",
      "setAirportSide",
      "setAmmo",
      "setAmmoCargo",
      "setAmmoOnPylon",
      "setAnimSpeedCoef",
      "setAperture",
      "setApertureNew",
      "setArmoryPoints",
      "setAttributes",
      "setAutonomous",
      "setBehaviour",
      "setBehaviourStrong",
      "setBleedingRemaining",
      "setBrakesRTD",
      "setCameraInterest",
      "setCamShakeDefParams",
      "setCamShakeParams",
      "setCamUseTi",
      "setCaptive",
      "setCenterOfMass",
      "setCollisionLight",
      "setCombatBehaviour",
      "setCombatMode",
      "setCompassOscillation",
      "setConvoySeparation",
      "setCruiseControl",
      "setCuratorCameraAreaCeiling",
      "setCuratorCoef",
      "setCuratorEditingAreaType",
      "setCuratorWaypointCost",
      "setCurrentChannel",
      "setCurrentTask",
      "setCurrentWaypoint",
      "setCustomAimCoef",
      "SetCustomMissionData",
      "setCustomSoundController",
      "setCustomWeightRTD",
      "setDamage",
      "setDammage",
      "setDate",
      "setDebriefingText",
      "setDefaultCamera",
      "setDestination",
      "setDetailMapBlendPars",
      "setDiaryRecordText",
      "setDiarySubjectPicture",
      "setDir",
      "setDirection",
      "setDrawIcon",
      "setDriveOnPath",
      "setDropInterval",
      "setDynamicSimulationDistance",
      "setDynamicSimulationDistanceCoef",
      "setEditorMode",
      "setEditorObjectScope",
      "setEffectCondition",
      "setEffectiveCommander",
      "setEngineRpmRTD",
      "setFace",
      "setFaceanimation",
      "setFatigue",
      "setFeatureType",
      "setFlagAnimationPhase",
      "setFlagOwner",
      "setFlagSide",
      "setFlagTexture",
      "setFog",
      "setForceGeneratorRTD",
      "setFormation",
      "setFormationTask",
      "setFormDir",
      "setFriend",
      "setFromEditor",
      "setFSMVariable",
      "setFuel",
      "setFuelCargo",
      "setGroupIcon",
      "setGroupIconParams",
      "setGroupIconsSelectable",
      "setGroupIconsVisible",
      "setGroupid",
      "setGroupIdGlobal",
      "setGroupOwner",
      "setGusts",
      "setHideBehind",
      "setHit",
      "setHitIndex",
      "setHitPointDamage",
      "setHorizonParallaxCoef",
      "setHUDMovementLevels",
      "setHumidity",
      "setIdentity",
      "setImportance",
      "setInfoPanel",
      "setLeader",
      "setLightAmbient",
      "setLightAttenuation",
      "setLightBrightness",
      "setLightColor",
      "setLightConePars",
      "setLightDayLight",
      "setLightFlareMaxDistance",
      "setLightFlareSize",
      "setLightIntensity",
      "setLightIR",
      "setLightnings",
      "setLightUseFlare",
      "setLightVolumeShape",
      "setLocalWindParams",
      "setMagazineTurretAmmo",
      "setMarkerAlpha",
      "setMarkerAlphaLocal",
      "setMarkerBrush",
      "setMarkerBrushLocal",
      "setMarkerColor",
      "setMarkerColorLocal",
      "setMarkerDir",
      "setMarkerDirLocal",
      "setMarkerPolyline",
      "setMarkerPolylineLocal",
      "setMarkerPos",
      "setMarkerPosLocal",
      "setMarkerShadow",
      "setMarkerShadowLocal",
      "setMarkerShape",
      "setMarkerShapeLocal",
      "setMarkerSize",
      "setMarkerSizeLocal",
      "setMarkerText",
      "setMarkerTextLocal",
      "setMarkerType",
      "setMarkerTypeLocal",
      "setMass",
      "setMaxLoad",
      "setMimic",
      "setMissileTarget",
      "setMissileTargetPos",
      "setMousePosition",
      "setMusicEffect",
      "setMusicEventHandler",
      "setName",
      "setNameSound",
      "setObjectArguments",
      "setObjectMaterial",
      "setObjectMaterialGlobal",
      "setObjectProxy",
      "setObjectScale",
      "setObjectTexture",
      "setObjectTextureGlobal",
      "setObjectViewDistance",
      "setOpticsMode",
      "setOvercast",
      "setOwner",
      "setOxygenRemaining",
      "setParticleCircle",
      "setParticleClass",
      "setParticleFire",
      "setParticleParams",
      "setParticleRandom",
      "setPilotCameraDirection",
      "setPilotCameraRotation",
      "setPilotCameraTarget",
      "setPilotLight",
      "setPiPEffect",
      "setPiPViewDistance",
      "setPitch",
      "setPlateNumber",
      "setPlayable",
      "setPlayerRespawnTime",
      "setPlayerVoNVolume",
      "setPos",
      "setPosASL",
      "setPosASL2",
      "setPosASLW",
      "setPosATL",
      "setPosition",
      "setPosWorld",
      "setPylonLoadout",
      "setPylonsPriority",
      "setRadioMsg",
      "setRain",
      "setRainbow",
      "setRandomLip",
      "setRank",
      "setRectangular",
      "setRepairCargo",
      "setRotorBrakeRTD",
      "setShadowDistance",
      "setShotParents",
      "setSide",
      "setSimpleTaskAlwaysVisible",
      "setSimpleTaskCustomData",
      "setSimpleTaskDescription",
      "setSimpleTaskDestination",
      "setSimpleTaskTarget",
      "setSimpleTaskType",
      "setSimulWeatherLayers",
      "setSize",
      "setSkill",
      "setSlingLoad",
      "setSoundEffect",
      "setSpeaker",
      "setSpeech",
      "setSpeedMode",
      "setStamina",
      "setStaminaScheme",
      "setStatValue",
      "setSuppression",
      "setSystemOfUnits",
      "setTargetAge",
      "setTaskMarkerOffset",
      "setTaskResult",
      "setTaskState",
      "setTerrainGrid",
      "setTerrainHeight",
      "setText",
      "setTimeMultiplier",
      "setTiParameter",
      "setTitleEffect",
      "setTowParent",
      "setTrafficDensity",
      "setTrafficDistance",
      "setTrafficGap",
      "setTrafficSpeed",
      "setTriggerActivation",
      "setTriggerArea",
      "setTriggerInterval",
      "setTriggerStatements",
      "setTriggerText",
      "setTriggerTimeout",
      "setTriggerType",
      "setTurretLimits",
      "setTurretOpticsMode",
      "setType",
      "setUnconscious",
      "setUnitAbility",
      "setUnitCombatMode",
      "setUnitFreefallHeight",
      "setUnitLoadout",
      "setUnitPos",
      "setUnitPosWeak",
      "setUnitRank",
      "setUnitRecoilCoefficient",
      "setUnitTrait",
      "setUnloadInCombat",
      "setUserActionText",
      "setUserMFDText",
      "setUserMFDValue",
      "setVariable",
      "setVectorDir",
      "setVectorDirAndUp",
      "setVectorUp",
      "setVehicleAmmo",
      "setVehicleAmmoDef",
      "setVehicleArmor",
      "setVehicleCargo",
      "setVehicleId",
      "setVehicleLock",
      "setVehiclePosition",
      "setVehicleRadar",
      "setVehicleReceiveRemoteTargets",
      "setVehicleReportOwnPosition",
      "setVehicleReportRemoteTargets",
      "setVehicleTiPars",
      "setVehicleVarName",
      "setVelocity",
      "setVelocityModelSpace",
      "setVelocityTransformation",
      "setViewDistance",
      "setVisibleIfTreeCollapsed",
      "setWantedRPMRTD",
      "setWaves",
      "setWaypointBehaviour",
      "setWaypointCombatMode",
      "setWaypointCompletionRadius",
      "setWaypointDescription",
      "setWaypointForceBehaviour",
      "setWaypointFormation",
      "setWaypointHousePosition",
      "setWaypointLoiterAltitude",
      "setWaypointLoiterRadius",
      "setWaypointLoiterType",
      "setWaypointName",
      "setWaypointPosition",
      "setWaypointScript",
      "setWaypointSpeed",
      "setWaypointStatements",
      "setWaypointTimeout",
      "setWaypointType",
      "setWaypointVisible",
      "setWeaponReloadingTime",
      "setWeaponZeroing",
      "setWind",
      "setWindDir",
      "setWindForce",
      "setWindStr",
      "setWingForceScaleRTD",
      "setWPPos",
      "show3DIcons",
      "showChat",
      "showCinemaBorder",
      "showCommandingMenu",
      "showCompass",
      "showCuratorCompass",
      "showGps",
      "showHUD",
      "showLegend",
      "showMap",
      "shownArtilleryComputer",
      "shownChat",
      "shownCompass",
      "shownCuratorCompass",
      "showNewEditorObject",
      "shownGps",
      "shownHUD",
      "shownMap",
      "shownPad",
      "shownRadio",
      "shownScoretable",
      "shownSubtitles",
      "shownUAVFeed",
      "shownWarrant",
      "shownWatch",
      "showPad",
      "showRadio",
      "showScoretable",
      "showSubtitles",
      "showUAVFeed",
      "showWarrant",
      "showWatch",
      "showWaypoint",
      "showWaypoints",
      "side",
      "sideChat",
      "sideRadio",
      "simpleTasks",
      "simulationEnabled",
      "simulCloudDensity",
      "simulCloudOcclusion",
      "simulInClouds",
      "simulWeatherSync",
      "sin",
      "size",
      "sizeOf",
      "skill",
      "skillFinal",
      "skipTime",
      "sleep",
      "sliderPosition",
      "sliderRange",
      "sliderSetPosition",
      "sliderSetRange",
      "sliderSetSpeed",
      "sliderSpeed",
      "slingLoadAssistantShown",
      "soldierMagazines",
      "someAmmo",
      "sort",
      "soundVolume",
      "spawn",
      "speaker",
      "speechVolume",
      "speed",
      "speedMode",
      "splitString",
      "sqrt",
      "squadParams",
      "stance",
      "startLoadingScreen",
      "stop",
      "stopEngineRTD",
      "stopped",
      "str",
      "sunOrMoon",
      "supportInfo",
      "suppressFor",
      "surfaceIsWater",
      "surfaceNormal",
      "surfaceTexture",
      "surfaceType",
      "swimInDepth",
      "switchableUnits",
      "switchAction",
      "switchCamera",
      "switchGesture",
      "switchLight",
      "switchMove",
      "synchronizedObjects",
      "synchronizedTriggers",
      "synchronizedWaypoints",
      "synchronizeObjectsAdd",
      "synchronizeObjectsRemove",
      "synchronizeTrigger",
      "synchronizeWaypoint",
      "systemChat",
      "systemOfUnits",
      "systemTime",
      "systemTimeUTC",
      "tan",
      "targetKnowledge",
      "targets",
      "targetsAggregate",
      "targetsQuery",
      "taskAlwaysVisible",
      "taskChildren",
      "taskCompleted",
      "taskCustomData",
      "taskDescription",
      "taskDestination",
      "taskHint",
      "taskMarkerOffset",
      "taskName",
      "taskParent",
      "taskResult",
      "taskState",
      "taskType",
      "teamMember",
      "teamName",
      "teams",
      "teamSwitch",
      "teamSwitchEnabled",
      "teamType",
      "terminate",
      "terrainIntersect",
      "terrainIntersectASL",
      "terrainIntersectAtASL",
      "text",
      "textLog",
      "textLogFormat",
      "tg",
      "time",
      "timeMultiplier",
      "titleCut",
      "titleFadeOut",
      "titleObj",
      "titleRsc",
      "titleText",
      "toArray",
      "toFixed",
      "toLower",
      "toLowerANSI",
      "toString",
      "toUpper",
      "toUpperANSI",
      "triggerActivated",
      "triggerActivation",
      "triggerAmmo",
      "triggerArea",
      "triggerAttachedVehicle",
      "triggerAttachObject",
      "triggerAttachVehicle",
      "triggerDynamicSimulation",
      "triggerInterval",
      "triggerStatements",
      "triggerText",
      "triggerTimeout",
      "triggerTimeoutCurrent",
      "triggerType",
      "trim",
      "turretLocal",
      "turretOwner",
      "turretUnit",
      "tvAdd",
      "tvClear",
      "tvCollapse",
      "tvCollapseAll",
      "tvCount",
      "tvCurSel",
      "tvData",
      "tvDelete",
      "tvExpand",
      "tvExpandAll",
      "tvIsSelected",
      "tvPicture",
      "tvPictureRight",
      "tvSelection",
      "tvSetColor",
      "tvSetCurSel",
      "tvSetData",
      "tvSetPicture",
      "tvSetPictureColor",
      "tvSetPictureColorDisabled",
      "tvSetPictureColorSelected",
      "tvSetPictureRight",
      "tvSetPictureRightColor",
      "tvSetPictureRightColorDisabled",
      "tvSetPictureRightColorSelected",
      "tvSetSelectColor",
      "tvSetSelected",
      "tvSetText",
      "tvSetTooltip",
      "tvSetValue",
      "tvSort",
      "tvSortAll",
      "tvSortByValue",
      "tvSortByValueAll",
      "tvText",
      "tvTooltip",
      "tvValue",
      "type",
      "typeName",
      "typeOf",
      "UAVControl",
      "uiNamespace",
      "uiSleep",
      "unassignCurator",
      "unassignItem",
      "unassignTeam",
      "unassignVehicle",
      "underwater",
      "uniform",
      "uniformContainer",
      "uniformItems",
      "uniformMagazines",
      "uniqueUnitItems",
      "unitAddons",
      "unitAimPosition",
      "unitAimPositionVisual",
      "unitBackpack",
      "unitCombatMode",
      "unitIsUAV",
      "unitPos",
      "unitReady",
      "unitRecoilCoefficient",
      "units",
      "unitsBelowHeight",
      "unitTurret",
      "unlinkItem",
      "unlockAchievement",
      "unregisterTask",
      "updateDrawIcon",
      "updateMenuItem",
      "updateObjectTree",
      "useAIOperMapObstructionTest",
      "useAISteeringComponent",
      "useAudioTimeForMoves",
      "userInputDisabled",
      "values",
      "vectorAdd",
      "vectorCos",
      "vectorCrossProduct",
      "vectorDiff",
      "vectorDir",
      "vectorDirVisual",
      "vectorDistance",
      "vectorDistanceSqr",
      "vectorDotProduct",
      "vectorFromTo",
      "vectorLinearConversion",
      "vectorMagnitude",
      "vectorMagnitudeSqr",
      "vectorModelToWorld",
      "vectorModelToWorldVisual",
      "vectorMultiply",
      "vectorNormalized",
      "vectorUp",
      "vectorUpVisual",
      "vectorWorldToModel",
      "vectorWorldToModelVisual",
      "vehicle",
      "vehicleCargoEnabled",
      "vehicleChat",
      "vehicleMoveInfo",
      "vehicleRadio",
      "vehicleReceiveRemoteTargets",
      "vehicleReportOwnPosition",
      "vehicleReportRemoteTargets",
      "vehicles",
      "vehicleVarName",
      "velocity",
      "velocityModelSpace",
      "verifySignature",
      "vest",
      "vestContainer",
      "vestItems",
      "vestMagazines",
      "viewDistance",
      "visibleCompass",
      "visibleGps",
      "visibleMap",
      "visiblePosition",
      "visiblePositionASL",
      "visibleScoretable",
      "visibleWatch",
      "waves",
      "waypointAttachedObject",
      "waypointAttachedVehicle",
      "waypointAttachObject",
      "waypointAttachVehicle",
      "waypointBehaviour",
      "waypointCombatMode",
      "waypointCompletionRadius",
      "waypointDescription",
      "waypointForceBehaviour",
      "waypointFormation",
      "waypointHousePosition",
      "waypointLoiterAltitude",
      "waypointLoiterRadius",
      "waypointLoiterType",
      "waypointName",
      "waypointPosition",
      "waypoints",
      "waypointScript",
      "waypointsEnabledUAV",
      "waypointShow",
      "waypointSpeed",
      "waypointStatements",
      "waypointTimeout",
      "waypointTimeoutCurrent",
      "waypointType",
      "waypointVisible",
      "weaponAccessories",
      "weaponAccessoriesCargo",
      "weaponCargo",
      "weaponDirection",
      "weaponInertia",
      "weaponLowered",
      "weaponReloadingTime",
      "weapons",
      "weaponsInfo",
      "weaponsItems",
      "weaponsItemsCargo",
      "weaponState",
      "weaponsTurret",
      "weightRTD",
      "WFSideText",
      "wind",
      "windDir",
      "windRTD",
      "windStr",
      "wingsForcesRTD",
      "worldName",
      "worldSize",
      "worldToModel",
      "worldToModelVisual",
      "worldToScreen"
    ], c = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: "define undef ifdef ifndef else endif include if",
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e.inherit(a, { className: "string" }),
        {
          begin: /<[^\n>]*>/,
          end: /$/,
          illegal: "\\n"
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
    return {
      name: "SQF",
      case_insensitive: !0,
      keywords: {
        keyword: i,
        built_in: l,
        literal: s
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.NUMBER_MODE,
        n,
        r,
        a,
        c
      ],
      illegal: [
        //$ is only valid when used with Hex numbers (e.g. $FF)
        /\$[^a-fA-F0-9]/,
        /\w\$/,
        /\?/,
        //There's no ? in SQF
        /@/,
        //There's no @ in SQF
        // Brute-force-fixing the build error. See https://github.com/highlightjs/highlight.js/pull/3193#issuecomment-843088729
        / \| /,
        // . is only used in numbers
        /[a-zA-Z_]\./,
        /\:\=/,
        /\[\:/
      ]
    };
  }
  return Og = t, Og;
}
var Ng, QO;
function tne() {
  if (QO) return Ng;
  QO = 1;
  function t(e) {
    const n = e.regex, r = e.COMMENT("--", "$"), a = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/,
          contains: [{ begin: /''/ }]
        }
      ]
    }, i = {
      begin: /"/,
      end: /"/,
      contains: [{ begin: /""/ }]
    }, s = [
      "true",
      "false",
      // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
      // "null",
      "unknown"
    ], l = [
      "double precision",
      "large object",
      "with timezone",
      "without timezone"
    ], c = [
      "bigint",
      "binary",
      "blob",
      "boolean",
      "char",
      "character",
      "clob",
      "date",
      "dec",
      "decfloat",
      "decimal",
      "float",
      "int",
      "integer",
      "interval",
      "nchar",
      "nclob",
      "national",
      "numeric",
      "real",
      "row",
      "smallint",
      "time",
      "timestamp",
      "varchar",
      "varying",
      // modifier (character varying)
      "varbinary"
    ], d = [
      "add",
      "asc",
      "collation",
      "desc",
      "final",
      "first",
      "last",
      "view"
    ], p = [
      "abs",
      "acos",
      "all",
      "allocate",
      "alter",
      "and",
      "any",
      "are",
      "array",
      "array_agg",
      "array_max_cardinality",
      "as",
      "asensitive",
      "asin",
      "asymmetric",
      "at",
      "atan",
      "atomic",
      "authorization",
      "avg",
      "begin",
      "begin_frame",
      "begin_partition",
      "between",
      "bigint",
      "binary",
      "blob",
      "boolean",
      "both",
      "by",
      "call",
      "called",
      "cardinality",
      "cascaded",
      "case",
      "cast",
      "ceil",
      "ceiling",
      "char",
      "char_length",
      "character",
      "character_length",
      "check",
      "classifier",
      "clob",
      "close",
      "coalesce",
      "collate",
      "collect",
      "column",
      "commit",
      "condition",
      "connect",
      "constraint",
      "contains",
      "convert",
      "copy",
      "corr",
      "corresponding",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "create",
      "cross",
      "cube",
      "cume_dist",
      "current",
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_row",
      "current_schema",
      "current_time",
      "current_timestamp",
      "current_path",
      "current_role",
      "current_transform_group_for_type",
      "current_user",
      "cursor",
      "cycle",
      "date",
      "day",
      "deallocate",
      "dec",
      "decimal",
      "decfloat",
      "declare",
      "default",
      "define",
      "delete",
      "dense_rank",
      "deref",
      "describe",
      "deterministic",
      "disconnect",
      "distinct",
      "double",
      "drop",
      "dynamic",
      "each",
      "element",
      "else",
      "empty",
      "end",
      "end_frame",
      "end_partition",
      "end-exec",
      "equals",
      "escape",
      "every",
      "except",
      "exec",
      "execute",
      "exists",
      "exp",
      "external",
      "extract",
      "false",
      "fetch",
      "filter",
      "first_value",
      "float",
      "floor",
      "for",
      "foreign",
      "frame_row",
      "free",
      "from",
      "full",
      "function",
      "fusion",
      "get",
      "global",
      "grant",
      "group",
      "grouping",
      "groups",
      "having",
      "hold",
      "hour",
      "identity",
      "in",
      "indicator",
      "initial",
      "inner",
      "inout",
      "insensitive",
      "insert",
      "int",
      "integer",
      "intersect",
      "intersection",
      "interval",
      "into",
      "is",
      "join",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "language",
      "large",
      "last_value",
      "lateral",
      "lead",
      "leading",
      "left",
      "like",
      "like_regex",
      "listagg",
      "ln",
      "local",
      "localtime",
      "localtimestamp",
      "log",
      "log10",
      "lower",
      "match",
      "match_number",
      "match_recognize",
      "matches",
      "max",
      "member",
      "merge",
      "method",
      "min",
      "minute",
      "mod",
      "modifies",
      "module",
      "month",
      "multiset",
      "national",
      "natural",
      "nchar",
      "nclob",
      "new",
      "no",
      "none",
      "normalize",
      "not",
      "nth_value",
      "ntile",
      "null",
      "nullif",
      "numeric",
      "octet_length",
      "occurrences_regex",
      "of",
      "offset",
      "old",
      "omit",
      "on",
      "one",
      "only",
      "open",
      "or",
      "order",
      "out",
      "outer",
      "over",
      "overlaps",
      "overlay",
      "parameter",
      "partition",
      "pattern",
      "per",
      "percent",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "period",
      "portion",
      "position",
      "position_regex",
      "power",
      "precedes",
      "precision",
      "prepare",
      "primary",
      "procedure",
      "ptf",
      "range",
      "rank",
      "reads",
      "real",
      "recursive",
      "ref",
      "references",
      "referencing",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "release",
      "result",
      "return",
      "returns",
      "revoke",
      "right",
      "rollback",
      "rollup",
      "row",
      "row_number",
      "rows",
      "running",
      "savepoint",
      "scope",
      "scroll",
      "search",
      "second",
      "seek",
      "select",
      "sensitive",
      "session_user",
      "set",
      "show",
      "similar",
      "sin",
      "sinh",
      "skip",
      "smallint",
      "some",
      "specific",
      "specifictype",
      "sql",
      "sqlexception",
      "sqlstate",
      "sqlwarning",
      "sqrt",
      "start",
      "static",
      "stddev_pop",
      "stddev_samp",
      "submultiset",
      "subset",
      "substring",
      "substring_regex",
      "succeeds",
      "sum",
      "symmetric",
      "system",
      "system_time",
      "system_user",
      "table",
      "tablesample",
      "tan",
      "tanh",
      "then",
      "time",
      "timestamp",
      "timezone_hour",
      "timezone_minute",
      "to",
      "trailing",
      "translate",
      "translate_regex",
      "translation",
      "treat",
      "trigger",
      "trim",
      "trim_array",
      "true",
      "truncate",
      "uescape",
      "union",
      "unique",
      "unknown",
      "unnest",
      "update",
      "upper",
      "user",
      "using",
      "value",
      "values",
      "value_of",
      "var_pop",
      "var_samp",
      "varbinary",
      "varchar",
      "varying",
      "versioning",
      "when",
      "whenever",
      "where",
      "width_bucket",
      "window",
      "with",
      "within",
      "without",
      "year"
    ], _ = [
      "abs",
      "acos",
      "array_agg",
      "asin",
      "atan",
      "avg",
      "cast",
      "ceil",
      "ceiling",
      "coalesce",
      "corr",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "cume_dist",
      "dense_rank",
      "deref",
      "element",
      "exp",
      "extract",
      "first_value",
      "floor",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "last_value",
      "lead",
      "listagg",
      "ln",
      "log",
      "log10",
      "lower",
      "max",
      "min",
      "mod",
      "nth_value",
      "ntile",
      "nullif",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "position",
      "position_regex",
      "power",
      "rank",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "row_number",
      "sin",
      "sinh",
      "sqrt",
      "stddev_pop",
      "stddev_samp",
      "substring",
      "substring_regex",
      "sum",
      "tan",
      "tanh",
      "translate",
      "translate_regex",
      "treat",
      "trim",
      "trim_array",
      "unnest",
      "upper",
      "value_of",
      "var_pop",
      "var_samp",
      "width_bucket"
    ], f = [
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_schema",
      "current_transform_group_for_type",
      "current_user",
      "session_user",
      "system_time",
      "system_user",
      "current_time",
      "localtime",
      "current_timestamp",
      "localtimestamp"
    ], g = [
      "create table",
      "insert into",
      "primary key",
      "foreign key",
      "not null",
      "alter table",
      "add constraint",
      "grouping sets",
      "on overflow",
      "character set",
      "respect nulls",
      "ignore nulls",
      "nulls first",
      "nulls last",
      "depth first",
      "breadth first"
    ], E = _, T = [
      ...p,
      ...d
    ].filter((P) => !_.includes(P)), R = {
      className: "variable",
      begin: /@[a-z0-9][a-z0-9_]*/
    }, A = {
      className: "operator",
      begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
      relevance: 0
    }, I = {
      begin: n.concat(/\b/, n.either(...E), /\s*\(/),
      relevance: 0,
      keywords: { built_in: E }
    };
    function x(P, {
      exceptions: D,
      when: L
    } = {}) {
      const K = L;
      return D = D || [], P.map((J) => J.match(/\|\d+$/) || D.includes(J) ? J : K(J) ? `${J}|0` : J);
    }
    return {
      name: "SQL",
      case_insensitive: !0,
      // does not include {} or HTML tags `</`
      illegal: /[{}]|<\//,
      keywords: {
        $pattern: /\b[\w\.]+/,
        keyword: x(T, { when: (P) => P.length < 3 }),
        literal: s,
        type: c,
        built_in: f
      },
      contains: [
        {
          begin: n.either(...g),
          relevance: 0,
          keywords: {
            $pattern: /[\w\.]+/,
            keyword: T.concat(g),
            literal: s,
            type: c
          }
        },
        {
          className: "type",
          begin: n.either(...l)
        },
        I,
        R,
        a,
        i,
        e.C_NUMBER_MODE,
        e.C_BLOCK_COMMENT_MODE,
        r,
        A
      ]
    };
  }
  return Ng = t, Ng;
}
var Ig, jO;
function nne() {
  if (jO) return Ig;
  jO = 1;
  function t(e) {
    const n = e.regex, r = [
      "functions",
      "model",
      "data",
      "parameters",
      "quantities",
      "transformed",
      "generated"
    ], a = [
      "for",
      "in",
      "if",
      "else",
      "while",
      "break",
      "continue",
      "return"
    ], i = [
      "array",
      "tuple",
      "complex",
      "int",
      "real",
      "vector",
      "complex_vector",
      "ordered",
      "positive_ordered",
      "simplex",
      "unit_vector",
      "row_vector",
      "complex_row_vector",
      "matrix",
      "complex_matrix",
      "cholesky_factor_corr|10",
      "cholesky_factor_cov|10",
      "corr_matrix|10",
      "cov_matrix|10",
      "void"
    ], s = [
      "abs",
      "acos",
      "acosh",
      "add_diag",
      "algebra_solver",
      "algebra_solver_newton",
      "append_array",
      "append_col",
      "append_row",
      "asin",
      "asinh",
      "atan",
      "atan2",
      "atanh",
      "bessel_first_kind",
      "bessel_second_kind",
      "binary_log_loss",
      "block",
      "cbrt",
      "ceil",
      "chol2inv",
      "cholesky_decompose",
      "choose",
      "col",
      "cols",
      "columns_dot_product",
      "columns_dot_self",
      "complex_schur_decompose",
      "complex_schur_decompose_t",
      "complex_schur_decompose_u",
      "conj",
      "cos",
      "cosh",
      "cov_exp_quad",
      "crossprod",
      "csr_extract",
      "csr_extract_u",
      "csr_extract_v",
      "csr_extract_w",
      "csr_matrix_times_vector",
      "csr_to_dense_matrix",
      "cumulative_sum",
      "dae",
      "dae_tol",
      "determinant",
      "diag_matrix",
      "diagonal",
      "diag_post_multiply",
      "diag_pre_multiply",
      "digamma",
      "dims",
      "distance",
      "dot_product",
      "dot_self",
      "eigendecompose",
      "eigendecompose_sym",
      "eigenvalues",
      "eigenvalues_sym",
      "eigenvectors",
      "eigenvectors_sym",
      "erf",
      "erfc",
      "exp",
      "exp2",
      "expm1",
      "falling_factorial",
      "fdim",
      "fft",
      "fft2",
      "floor",
      "fma",
      "fmax",
      "fmin",
      "fmod",
      "gamma_p",
      "gamma_q",
      "generalized_inverse",
      "get_imag",
      "get_real",
      "head",
      "hmm_hidden_state_prob",
      "hmm_marginal",
      "hypot",
      "identity_matrix",
      "inc_beta",
      "integrate_1d",
      "integrate_ode",
      "integrate_ode_adams",
      "integrate_ode_bdf",
      "integrate_ode_rk45",
      "int_step",
      "inv",
      "inv_cloglog",
      "inv_erfc",
      "inverse",
      "inverse_spd",
      "inv_fft",
      "inv_fft2",
      "inv_inc_beta",
      "inv_logit",
      "inv_Phi",
      "inv_sqrt",
      "inv_square",
      "is_inf",
      "is_nan",
      "lambert_w0",
      "lambert_wm1",
      "lbeta",
      "lchoose",
      "ldexp",
      "lgamma",
      "linspaced_array",
      "linspaced_int_array",
      "linspaced_row_vector",
      "linspaced_vector",
      "lmgamma",
      "lmultiply",
      "log",
      "log1m",
      "log1m_exp",
      "log1m_inv_logit",
      "log1p",
      "log1p_exp",
      "log_determinant",
      "log_diff_exp",
      "log_falling_factorial",
      "log_inv_logit",
      "log_inv_logit_diff",
      "logit",
      "log_mix",
      "log_modified_bessel_first_kind",
      "log_rising_factorial",
      "log_softmax",
      "log_sum_exp",
      "machine_precision",
      "map_rect",
      "matrix_exp",
      "matrix_exp_multiply",
      "matrix_power",
      "max",
      "mdivide_left_spd",
      "mdivide_left_tri_low",
      "mdivide_right_spd",
      "mdivide_right_tri_low",
      "mean",
      "min",
      "modified_bessel_first_kind",
      "modified_bessel_second_kind",
      "multiply_lower_tri_self_transpose",
      "negative_infinity",
      "norm",
      "norm1",
      "norm2",
      "not_a_number",
      "num_elements",
      "ode_adams",
      "ode_adams_tol",
      "ode_adjoint_tol_ctl",
      "ode_bdf",
      "ode_bdf_tol",
      "ode_ckrk",
      "ode_ckrk_tol",
      "ode_rk45",
      "ode_rk45_tol",
      "one_hot_array",
      "one_hot_int_array",
      "one_hot_row_vector",
      "one_hot_vector",
      "ones_array",
      "ones_int_array",
      "ones_row_vector",
      "ones_vector",
      "owens_t",
      "Phi",
      "Phi_approx",
      "polar",
      "positive_infinity",
      "pow",
      "print",
      "prod",
      "proj",
      "qr",
      "qr_Q",
      "qr_R",
      "qr_thin",
      "qr_thin_Q",
      "qr_thin_R",
      "quad_form",
      "quad_form_diag",
      "quad_form_sym",
      "quantile",
      "rank",
      "reduce_sum",
      "reject",
      "rep_array",
      "rep_matrix",
      "rep_row_vector",
      "rep_vector",
      "reverse",
      "rising_factorial",
      "round",
      "row",
      "rows",
      "rows_dot_product",
      "rows_dot_self",
      "scale_matrix_exp_multiply",
      "sd",
      "segment",
      "sin",
      "singular_values",
      "sinh",
      "size",
      "softmax",
      "sort_asc",
      "sort_desc",
      "sort_indices_asc",
      "sort_indices_desc",
      "sqrt",
      "square",
      "squared_distance",
      "step",
      "sub_col",
      "sub_row",
      "sum",
      "svd",
      "svd_U",
      "svd_V",
      "symmetrize_from_lower_tri",
      "tail",
      "tan",
      "tanh",
      "target",
      "tcrossprod",
      "tgamma",
      "to_array_1d",
      "to_array_2d",
      "to_complex",
      "to_int",
      "to_matrix",
      "to_row_vector",
      "to_vector",
      "trace",
      "trace_gen_quad_form",
      "trace_quad_form",
      "trigamma",
      "trunc",
      "uniform_simplex",
      "variance",
      "zeros_array",
      "zeros_int_array",
      "zeros_row_vector"
    ], l = [
      "bernoulli",
      "bernoulli_logit",
      "bernoulli_logit_glm",
      "beta",
      "beta_binomial",
      "beta_proportion",
      "binomial",
      "binomial_logit",
      "categorical",
      "categorical_logit",
      "categorical_logit_glm",
      "cauchy",
      "chi_square",
      "dirichlet",
      "discrete_range",
      "double_exponential",
      "exp_mod_normal",
      "exponential",
      "frechet",
      "gamma",
      "gaussian_dlm_obs",
      "gumbel",
      "hmm_latent",
      "hypergeometric",
      "inv_chi_square",
      "inv_gamma",
      "inv_wishart",
      "inv_wishart_cholesky",
      "lkj_corr",
      "lkj_corr_cholesky",
      "logistic",
      "loglogistic",
      "lognormal",
      "multi_gp",
      "multi_gp_cholesky",
      "multinomial",
      "multinomial_logit",
      "multi_normal",
      "multi_normal_cholesky",
      "multi_normal_prec",
      "multi_student_cholesky_t",
      "multi_student_t",
      "multi_student_t_cholesky",
      "neg_binomial",
      "neg_binomial_2",
      "neg_binomial_2_log",
      "neg_binomial_2_log_glm",
      "normal",
      "normal_id_glm",
      "ordered_logistic",
      "ordered_logistic_glm",
      "ordered_probit",
      "pareto",
      "pareto_type_2",
      "poisson",
      "poisson_log",
      "poisson_log_glm",
      "rayleigh",
      "scaled_inv_chi_square",
      "skew_double_exponential",
      "skew_normal",
      "std_normal",
      "std_normal_log",
      "student_t",
      "uniform",
      "von_mises",
      "weibull",
      "wiener",
      "wishart",
      "wishart_cholesky"
    ], c = e.COMMENT(
      /\/\*/,
      /\*\//,
      {
        relevance: 0,
        contains: [
          {
            scope: "doctag",
            match: /@(return|param)/
          }
        ]
      }
    ), d = {
      scope: "meta",
      begin: /#include\b/,
      end: /$/,
      contains: [
        {
          match: /[a-z][a-z-._]+/,
          scope: "string"
        },
        e.C_LINE_COMMENT_MODE
      ]
    }, p = [
      "lower",
      "upper",
      "offset",
      "multiplier"
    ];
    return {
      name: "Stan",
      aliases: ["stanfuncs"],
      keywords: {
        $pattern: e.IDENT_RE,
        title: r,
        type: i,
        keyword: a,
        built_in: s
      },
      contains: [
        e.C_LINE_COMMENT_MODE,
        d,
        e.HASH_COMMENT_MODE,
        c,
        {
          scope: "built_in",
          match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
          relevance: 0
        },
        {
          match: n.concat(/[<,]\s*/, n.either(...p), /\s*=/),
          keywords: p
        },
        {
          scope: "keyword",
          match: /\btarget(?=\s*\+=)/
        },
        {
          // highlights the 'T' in T[,] for only Stan language distributrions
          match: [
            /~\s*/,
            n.either(...l),
            /(?:\(\))/,
            /\s*T(?=\s*\[)/
          ],
          scope: {
            2: "built_in",
            4: "keyword"
          }
        },
        {
          // highlights distributions that end with special endings
          scope: "built_in",
          keywords: l,
          begin: n.concat(/\w*/, n.either(...l), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
        },
        {
          // highlights distributions after ~
          begin: [
            /~/,
            /\s*/,
            n.concat(n.either(...l), /(?=\s*[\(.*\)])/)
          ],
          scope: { 3: "built_in" }
        },
        {
          // highlights user defined distributions after ~
          begin: [
            /~/,
            /\s*\w+(?=\s*[\(.*\)])/,
            "(?!.*/\b(" + n.either(...l) + ")\b)"
          ],
          scope: { 2: "title.function" }
        },
        {
          // highlights user defined distributions with special endings
          scope: "title.function",
          begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
        },
        {
          scope: "number",
          match: n.concat(
            // Comes from @RunDevelopment accessed 11/29/2021 at
            // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56
            // start of big noncapture group which
            // 1. gets numbers that are by themselves
            // 2. numbers that are separated by _
            // 3. numbers that are separted by .
            /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/,
            // grabs scientific notation
            // grabs complex numbers with i
            /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/
          ),
          relevance: 0
        },
        {
          scope: "string",
          begin: /"/,
          end: /"/
        }
      ]
    };
  }
  return Ig = t, Ig;
}
var xg, XO;
function rne() {
  if (XO) return xg;
  XO = 1;
  function t(e) {
    return {
      name: "Stata",
      aliases: [
        "do",
        "ado"
      ],
      case_insensitive: !0,
      keywords: "if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",
      contains: [
        {
          className: "symbol",
          begin: /`[a-zA-Z0-9_]+'/
        },
        {
          className: "variable",
          begin: /\$\{?[a-zA-Z0-9_]+\}?/,
          relevance: 0
        },
        {
          className: "string",
          variants: [
            { begin: `\`"[^\r
]*?"'` },
            { begin: `"[^\r
"]*"` }
          ]
        },
        {
          className: "built_in",
          variants: [{ begin: "\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()" }]
        },
        e.COMMENT("^[ 	]*\\*.*$", !1),
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return xg = t, xg;
}
var Dg, ZO;
function ane() {
  if (ZO) return Dg;
  ZO = 1;
  function t(e) {
    return {
      name: "STEP Part 21",
      aliases: [
        "p21",
        "step",
        "stp"
      ],
      case_insensitive: !0,
      // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
      keywords: {
        $pattern: "[A-Z_][A-Z0-9_.]*",
        keyword: [
          "HEADER",
          "ENDSEC",
          "DATA"
        ]
      },
      contains: [
        {
          className: "meta",
          begin: "ISO-10303-21;",
          relevance: 10
        },
        {
          className: "meta",
          begin: "END-ISO-10303-21;",
          relevance: 10
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        e.COMMENT("/\\*\\*!", "\\*/"),
        e.C_NUMBER_MODE,
        e.inherit(e.APOS_STRING_MODE, { illegal: null }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "symbol",
          variants: [
            {
              begin: "#",
              end: "\\d+",
              illegal: "\\W"
            }
          ]
        }
      ]
    };
  }
  return Dg = t, Dg;
}
var wg, JO;
function ine() {
  if (JO) return wg;
  JO = 1;
  const t = (l) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: l.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        l.APOS_STRING_MODE,
        l.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: l.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "p",
    "q",
    "quote",
    "samp",
    "section",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ], r = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ], a = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ], i = [
    "align-content",
    "align-items",
    "align-self",
    "all",
    "animation",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-timing-function",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-repeat",
    "background-size",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "direction",
    "display",
    "empty-cells",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-size",
    "font-size-adjust",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-variant",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "gap",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "inline-size",
    "isolation",
    "justify-content",
    "left",
    "letter-spacing",
    "line-break",
    "line-height",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "pointer-events",
    "position",
    "quotes",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "row-gap",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-style",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-transform",
    "text-underline-position",
    "top",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "unicode-bidi",
    "vertical-align",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "z-index"
    // reverse makes sure longer attributes `font-weight` are matched fully
    // instead of getting false positives on say `font`
  ].reverse();
  function s(l) {
    const c = t(l), d = "and or not only", p = {
      className: "variable",
      begin: "\\$" + l.IDENT_RE
    }, _ = [
      "charset",
      "css",
      "debug",
      "extend",
      "font-face",
      "for",
      "import",
      "include",
      "keyframes",
      "media",
      "mixin",
      "page",
      "warn",
      "while"
    ], f = "(?=[.\\s\\n[:,(])";
    return {
      name: "Stylus",
      aliases: ["styl"],
      case_insensitive: !1,
      keywords: "if else for in",
      illegal: "(" + [
        "\\?",
        "(\\bReturn\\b)",
        // monkey
        "(\\bEnd\\b)",
        // monkey
        "(\\bend\\b)",
        // vbscript
        "(\\bdef\\b)",
        // gradle
        ";",
        // a whole lot of languages
        "#\\s",
        // markdown
        "\\*\\s",
        // markdown
        "===\\s",
        // markdown
        "\\|",
        "%"
        // prolog
      ].join("|") + ")",
      contains: [
        // strings
        l.QUOTE_STRING_MODE,
        l.APOS_STRING_MODE,
        // comments
        l.C_LINE_COMMENT_MODE,
        l.C_BLOCK_COMMENT_MODE,
        // hex colors
        c.HEXCOLOR,
        // class tag
        {
          begin: "\\.[a-zA-Z][a-zA-Z0-9_-]*" + f,
          className: "selector-class"
        },
        // id tag
        {
          begin: "#[a-zA-Z][a-zA-Z0-9_-]*" + f,
          className: "selector-id"
        },
        // tags
        {
          begin: "\\b(" + e.join("|") + ")" + f,
          className: "selector-tag"
        },
        // psuedo selectors
        {
          className: "selector-pseudo",
          begin: "&?:(" + r.join("|") + ")" + f
        },
        {
          className: "selector-pseudo",
          begin: "&?:(:)?(" + a.join("|") + ")" + f
        },
        c.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "keyword",
          begin: /@media/,
          starts: {
            end: /[{;}]/,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: d,
              attribute: n.join(" ")
            },
            contains: [c.CSS_NUMBER_MODE]
          }
        },
        // @ keywords
        {
          className: "keyword",
          begin: "@((-(o|moz|ms|webkit)-)?(" + _.join("|") + "))\\b"
        },
        // variables
        p,
        // dimension
        c.CSS_NUMBER_MODE,
        // functions
        //  - only from beginning of line + whitespace
        {
          className: "function",
          begin: "^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",
          illegal: "[\\n]",
          returnBegin: !0,
          contains: [
            {
              className: "title",
              begin: "\\b[a-zA-Z][a-zA-Z0-9_-]*"
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                c.HEXCOLOR,
                p,
                l.APOS_STRING_MODE,
                c.CSS_NUMBER_MODE,
                l.QUOTE_STRING_MODE
              ]
            }
          ]
        },
        // css variables
        c.CSS_VARIABLE,
        // attributes
        //  - only from beginning of line + whitespace
        //  - must have whitespace after it
        {
          className: "attribute",
          begin: "\\b(" + i.join("|") + ")\\b",
          starts: {
            // value container
            end: /;|$/,
            contains: [
              c.HEXCOLOR,
              p,
              l.APOS_STRING_MODE,
              l.QUOTE_STRING_MODE,
              c.CSS_NUMBER_MODE,
              l.C_BLOCK_COMMENT_MODE,
              c.IMPORTANT,
              c.FUNCTION_DISPATCH
            ],
            illegal: /\./,
            relevance: 0
          }
        },
        c.FUNCTION_DISPATCH
      ]
    };
  }
  return wg = s, wg;
}
var Lg, eN;
function sne() {
  if (eN) return Lg;
  eN = 1;
  function t(e) {
    return {
      name: "SubUnit",
      case_insensitive: !0,
      contains: [
        {
          className: "string",
          begin: `\\[
(multipart)?`,
          end: `\\]
`
        },
        {
          className: "string",
          begin: "\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"
        },
        {
          className: "string",
          begin: "(\\+|-)\\d+"
        },
        {
          className: "keyword",
          relevance: 10,
          variants: [
            { begin: "^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?" },
            { begin: "^progress(:?)(\\s+)?(pop|push)?" },
            { begin: "^tags:" },
            { begin: "^time:" }
          ]
        }
      ]
    };
  }
  return Lg = t, Lg;
}
var Mg, tN;
function one() {
  if (tN) return Mg;
  tN = 1;
  function t(J) {
    return J ? typeof J == "string" ? J : J.source : null;
  }
  function e(J) {
    return n("(?=", J, ")");
  }
  function n(...J) {
    return J.map(($) => t($)).join("");
  }
  function r(J) {
    const X = J[J.length - 1];
    return typeof X == "object" && X.constructor === Object ? (J.splice(J.length - 1, 1), X) : {};
  }
  function a(...J) {
    return "(" + (r(J).capture ? "" : "?:") + J.map((ae) => t(ae)).join("|") + ")";
  }
  const i = (J) => n(
    /\b/,
    J,
    /\w$/.test(J) ? /\b/ : /\B/
  ), s = [
    "Protocol",
    // contextual
    "Type"
    // contextual
  ].map(i), l = [
    "init",
    "self"
  ].map(i), c = [
    "Any",
    "Self"
  ], d = [
    // strings below will be fed into the regular `keywords` engine while regex
    // will result in additional modes being created to scan for those keywords to
    // avoid conflicts with other rules
    "actor",
    "any",
    // contextual
    "associatedtype",
    "async",
    "await",
    /as\?/,
    // operator
    /as!/,
    // operator
    "as",
    // operator
    "borrowing",
    // contextual
    "break",
    "case",
    "catch",
    "class",
    "consume",
    // contextual
    "consuming",
    // contextual
    "continue",
    "convenience",
    // contextual
    "copy",
    // contextual
    "default",
    "defer",
    "deinit",
    "didSet",
    // contextual
    "distributed",
    "do",
    "dynamic",
    // contextual
    "each",
    "else",
    "enum",
    "extension",
    "fallthrough",
    /fileprivate\(set\)/,
    "fileprivate",
    "final",
    // contextual
    "for",
    "func",
    "get",
    // contextual
    "guard",
    "if",
    "import",
    "indirect",
    // contextual
    "infix",
    // contextual
    /init\?/,
    /init!/,
    "inout",
    /internal\(set\)/,
    "internal",
    "in",
    "is",
    // operator
    "isolated",
    // contextual
    "nonisolated",
    // contextual
    "lazy",
    // contextual
    "let",
    "macro",
    "mutating",
    // contextual
    "nonmutating",
    // contextual
    /open\(set\)/,
    // contextual
    "open",
    // contextual
    "operator",
    "optional",
    // contextual
    "override",
    // contextual
    "postfix",
    // contextual
    "precedencegroup",
    "prefix",
    // contextual
    /private\(set\)/,
    "private",
    "protocol",
    /public\(set\)/,
    "public",
    "repeat",
    "required",
    // contextual
    "rethrows",
    "return",
    "set",
    // contextual
    "some",
    // contextual
    "static",
    "struct",
    "subscript",
    "super",
    "switch",
    "throws",
    "throw",
    /try\?/,
    // operator
    /try!/,
    // operator
    "try",
    // operator
    "typealias",
    /unowned\(safe\)/,
    // contextual
    /unowned\(unsafe\)/,
    // contextual
    "unowned",
    // contextual
    "var",
    "weak",
    // contextual
    "where",
    "while",
    "willSet"
    // contextual
  ], p = [
    "false",
    "nil",
    "true"
  ], _ = [
    "assignment",
    "associativity",
    "higherThan",
    "left",
    "lowerThan",
    "none",
    "right"
  ], f = [
    "#colorLiteral",
    "#column",
    "#dsohandle",
    "#else",
    "#elseif",
    "#endif",
    "#error",
    "#file",
    "#fileID",
    "#fileLiteral",
    "#filePath",
    "#function",
    "#if",
    "#imageLiteral",
    "#keyPath",
    "#line",
    "#selector",
    "#sourceLocation",
    "#warning"
  ], g = [
    "abs",
    "all",
    "any",
    "assert",
    "assertionFailure",
    "debugPrint",
    "dump",
    "fatalError",
    "getVaList",
    "isKnownUniquelyReferenced",
    "max",
    "min",
    "numericCast",
    "pointwiseMax",
    "pointwiseMin",
    "precondition",
    "preconditionFailure",
    "print",
    "readLine",
    "repeatElement",
    "sequence",
    "stride",
    "swap",
    "swift_unboxFromSwiftValueWithType",
    "transcode",
    "type",
    "unsafeBitCast",
    "unsafeDowncast",
    "withExtendedLifetime",
    "withUnsafeMutablePointer",
    "withUnsafePointer",
    "withVaList",
    "withoutActuallyEscaping",
    "zip"
  ], E = a(
    /[/=\-+!*%<>&|^~?]/,
    /[\u00A1-\u00A7]/,
    /[\u00A9\u00AB]/,
    /[\u00AC\u00AE]/,
    /[\u00B0\u00B1]/,
    /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
    /[\u2016-\u2017]/,
    /[\u2020-\u2027]/,
    /[\u2030-\u203E]/,
    /[\u2041-\u2053]/,
    /[\u2055-\u205E]/,
    /[\u2190-\u23FF]/,
    /[\u2500-\u2775]/,
    /[\u2794-\u2BFF]/,
    /[\u2E00-\u2E7F]/,
    /[\u3001-\u3003]/,
    /[\u3008-\u3020]/,
    /[\u3030]/
  ), T = a(
    E,
    /[\u0300-\u036F]/,
    /[\u1DC0-\u1DFF]/,
    /[\u20D0-\u20FF]/,
    /[\uFE00-\uFE0F]/,
    /[\uFE20-\uFE2F]/
    // TODO: The following characters are also allowed, but the regex isn't supported yet.
    // /[\u{E0100}-\u{E01EF}]/u
  ), R = n(E, T, "*"), A = a(
    /[a-zA-Z_]/,
    /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
    /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
    /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
    /[\u1E00-\u1FFF]/,
    /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
    /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
    /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
    /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
    /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
    /[\uFE47-\uFEFE\uFF00-\uFFFD]/
    // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
    // The following characters are also allowed, but the regexes aren't supported yet.
    // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
    // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
    // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
    // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
  ), I = a(
    A,
    /\d/,
    /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
  ), x = n(A, I, "*"), P = n(/[A-Z]/, I, "*"), D = [
    "attached",
    "autoclosure",
    n(/convention\(/, a("swift", "block", "c"), /\)/),
    "discardableResult",
    "dynamicCallable",
    "dynamicMemberLookup",
    "escaping",
    "freestanding",
    "frozen",
    "GKInspectable",
    "IBAction",
    "IBDesignable",
    "IBInspectable",
    "IBOutlet",
    "IBSegueAction",
    "inlinable",
    "main",
    "nonobjc",
    "NSApplicationMain",
    "NSCopying",
    "NSManaged",
    n(/objc\(/, x, /\)/),
    "objc",
    "objcMembers",
    "propertyWrapper",
    "requires_stored_property_inits",
    "resultBuilder",
    "Sendable",
    "testable",
    "UIApplicationMain",
    "unchecked",
    "unknown",
    "usableFromInline",
    "warn_unqualified_access"
  ], L = [
    "iOS",
    "iOSApplicationExtension",
    "macOS",
    "macOSApplicationExtension",
    "macCatalyst",
    "macCatalystApplicationExtension",
    "watchOS",
    "watchOSApplicationExtension",
    "tvOS",
    "tvOSApplicationExtension",
    "swift"
  ];
  function K(J) {
    const X = {
      match: /\s+/,
      relevance: 0
    }, $ = J.COMMENT(
      "/\\*",
      "\\*/",
      { contains: ["self"] }
    ), ae = [
      J.C_LINE_COMMENT_MODE,
      $
    ], ce = {
      match: [
        /\./,
        a(...s, ...l)
      ],
      className: { 2: "keyword" }
    }, ve = {
      // Consume .keyword to prevent highlighting properties and methods as keywords.
      match: n(/\./, a(...d)),
      relevance: 0
    }, ge = d.filter((ut) => typeof ut == "string").concat(["_|0"]), fe = d.filter((ut) => typeof ut != "string").concat(c).map(i), Fe = { variants: [
      {
        className: "keyword",
        match: a(...fe, ...l)
      }
    ] }, ne = {
      $pattern: a(
        /\b\w+/,
        // regular keywords
        /#\w+/
        // number keywords
      ),
      keyword: ge.concat(f),
      literal: p
    }, se = [
      ce,
      ve,
      Fe
    ], z = {
      // Consume .built_in to prevent highlighting properties and methods.
      match: n(/\./, a(...g)),
      relevance: 0
    }, v = {
      className: "built_in",
      match: n(/\b/, a(...g), /(?=\()/)
    }, H = [
      z,
      v
    ], oe = {
      // Prevent -> from being highlighting as an operator.
      match: /->/,
      relevance: 0
    }, k = {
      className: "operator",
      relevance: 0,
      variants: [
        { match: R },
        {
          // dot-operator: only operators that start with a dot are allowed to use dots as
          // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
          // characters that may also include dots.
          match: `\\.(\\.|${T})+`
        }
      ]
    }, me = [
      oe,
      k
    ], Ce = "([0-9]_*)+", he = "([0-9a-fA-F]_*)+", Ne = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${Ce})(\\.(${Ce}))?([eE][+-]?(${Ce}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0x(${he})(\\.(${he}))?([pP][+-]?(${Ce}))?\\b` },
        // octal-literal
        { match: /\b0o([0-7]_*)+\b/ },
        // binary-literal
        { match: /\b0b([01]_*)+\b/ }
      ]
    }, ye = (ut = "") => ({
      className: "subst",
      variants: [
        { match: n(/\\/, ut, /[0\\tnr"']/) },
        { match: n(/\\/, ut, /u\{[0-9a-fA-F]{1,8}\}/) }
      ]
    }), Ue = (ut = "") => ({
      className: "subst",
      match: n(/\\/, ut, /[\t ]*(?:[\r\n]|\r\n)/)
    }), Me = (ut = "") => ({
      className: "subst",
      label: "interpol",
      begin: n(/\\/, ut, /\(/),
      end: /\)/
    }), Qe = (ut = "") => ({
      begin: n(ut, /"""/),
      end: n(/"""/, ut),
      contains: [
        ye(ut),
        Ue(ut),
        Me(ut)
      ]
    }), _e = (ut = "") => ({
      begin: n(ut, /"/),
      end: n(/"/, ut),
      contains: [
        ye(ut),
        Me(ut)
      ]
    }), je = {
      className: "string",
      variants: [
        Qe(),
        Qe("#"),
        Qe("##"),
        Qe("###"),
        _e(),
        _e("#"),
        _e("##"),
        _e("###")
      ]
    }, et = [
      J.BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [J.BACKSLASH_ESCAPE]
      }
    ], nt = {
      begin: /\/[^\s](?=[^/\n]*\/)/,
      end: /\//,
      contains: et
    }, mt = (ut) => {
      const wr = n(ut, /\//), br = n(/\//, ut);
      return {
        begin: wr,
        end: br,
        contains: [
          ...et,
          {
            scope: "comment",
            begin: `#(?!.*${br})`,
            end: /$/
          }
        ]
      };
    }, bt = {
      scope: "regexp",
      variants: [
        mt("###"),
        mt("##"),
        mt("#"),
        nt
      ]
    }, _t = { match: n(/`/, x, /`/) }, He = {
      className: "variable",
      match: /\$\d+/
    }, Gt = {
      className: "variable",
      match: `\\$${I}+`
    }, pt = [
      _t,
      He,
      Gt
    ], Be = {
      match: /(@|#(un)?)available/,
      scope: "keyword",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: L,
          contains: [
            ...me,
            Ne,
            je
          ]
        }
      ] }
    }, It = {
      scope: "keyword",
      match: n(/@/, a(...D))
    }, Oe = {
      scope: "meta",
      match: n(/@/, x)
    }, j = [
      Be,
      It,
      Oe
    ], Se = {
      match: e(/\b[A-Z]/),
      relevance: 0,
      contains: [
        {
          // Common Apple frameworks, for relevance boost
          className: "type",
          match: n(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, I, "+")
        },
        {
          // Type identifier
          className: "type",
          match: P,
          relevance: 0
        },
        {
          // Optional type
          match: /[?!]+/,
          relevance: 0
        },
        {
          // Variadic parameter
          match: /\.\.\./,
          relevance: 0
        },
        {
          // Protocol composition
          match: n(/\s+&\s+/, e(P)),
          relevance: 0
        }
      ]
    }, ue = {
      begin: /</,
      end: />/,
      keywords: ne,
      contains: [
        ...ae,
        ...se,
        ...j,
        oe,
        Se
      ]
    };
    Se.contains.push(ue);
    const be = {
      match: n(x, /\s*:/),
      keywords: "_|0",
      relevance: 0
    }, Ge = {
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: ne,
      contains: [
        "self",
        be,
        ...ae,
        bt,
        ...se,
        ...H,
        ...me,
        Ne,
        je,
        ...pt,
        ...j,
        Se
      ]
    }, Ze = {
      begin: /</,
      end: />/,
      keywords: "repeat each",
      contains: [
        ...ae,
        Se
      ]
    }, vt = {
      begin: a(
        e(n(x, /\s*:/)),
        e(n(x, /\s+/, x, /\s*:/))
      ),
      end: /:/,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          match: /\b_\b/
        },
        {
          className: "params",
          match: x
        }
      ]
    }, Pt = {
      begin: /\(/,
      end: /\)/,
      keywords: ne,
      contains: [
        vt,
        ...ae,
        ...se,
        ...me,
        Ne,
        je,
        ...j,
        Se,
        Ge
      ],
      endsParent: !0,
      illegal: /["']/
    }, Ln = {
      match: [
        /(func|macro)/,
        /\s+/,
        a(_t.match, x, R)
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        Ze,
        Pt,
        X
      ],
      illegal: [
        /\[/,
        /%/
      ]
    }, Rn = {
      match: [
        /\b(?:subscript|init[?!]?)/,
        /\s*(?=[<(])/
      ],
      className: { 1: "keyword" },
      contains: [
        Ze,
        Pt,
        X
      ],
      illegal: /\[|%/
    }, nn = {
      match: [
        /operator/,
        /\s+/,
        R
      ],
      className: {
        1: "keyword",
        3: "title"
      }
    }, Fn = {
      begin: [
        /precedencegroup/,
        /\s+/,
        P
      ],
      className: {
        1: "keyword",
        3: "title"
      },
      contains: [Se],
      keywords: [
        ..._,
        ...p
      ],
      end: /}/
    };
    for (const ut of je.variants) {
      const wr = ut.contains.find((Wi) => Wi.label === "interpol");
      wr.keywords = ne;
      const br = [
        ...se,
        ...H,
        ...me,
        Ne,
        je,
        ...pt
      ];
      wr.contains = [
        ...br,
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            "self",
            ...br
          ]
        }
      ];
    }
    return {
      name: "Swift",
      keywords: ne,
      contains: [
        ...ae,
        Ln,
        Rn,
        {
          beginKeywords: "struct protocol class extension enum actor",
          end: "\\{",
          excludeEnd: !0,
          keywords: ne,
          contains: [
            J.inherit(J.TITLE_MODE, {
              className: "title.class",
              begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
            }),
            ...se
          ]
        },
        nn,
        Fn,
        {
          beginKeywords: "import",
          end: /$/,
          contains: [...ae],
          relevance: 0
        },
        bt,
        ...se,
        ...H,
        ...me,
        Ne,
        je,
        ...pt,
        ...j,
        Se,
        Ge
      ]
    };
  }
  return Mg = K, Mg;
}
var kg, nN;
function lne() {
  if (nN) return kg;
  nN = 1;
  function t(e) {
    return {
      name: "Tagger Script",
      contains: [
        {
          className: "comment",
          begin: /\$noop\(/,
          end: /\)/,
          contains: [
            { begin: /\\[()]/ },
            {
              begin: /\(/,
              end: /\)/,
              contains: [
                { begin: /\\[()]/ },
                "self"
              ]
            }
          ],
          relevance: 10
        },
        {
          className: "keyword",
          begin: /\$[_a-zA-Z0-9]+(?=\()/
        },
        {
          className: "variable",
          begin: /%[_a-zA-Z0-9:]+%/
        },
        {
          className: "symbol",
          begin: /\\[\\nt$%,()]/
        },
        {
          className: "symbol",
          begin: /\\u[a-fA-F0-9]{4}/
        }
      ]
    };
  }
  return kg = t, kg;
}
var Pg, rN;
function cne() {
  if (rN) return Pg;
  rN = 1;
  function t(e) {
    const n = "true false yes no null", r = "[\\w#;/?:@&=+$,.~*'()[\\]]+", a = {
      className: "attr",
      variants: [
        { begin: "\\w[\\w :\\/.-]*:(?=[ 	]|$)" },
        {
          // double quoted keys
          begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)'
        },
        {
          // single quoted keys
          begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)"
        }
      ]
    }, i = {
      className: "template-variable",
      variants: [
        {
          // jinja templates Ansible
          begin: /\{\{/,
          end: /\}\}/
        },
        {
          // Ruby i18n
          begin: /%\{/,
          end: /\}/
        }
      ]
    }, s = {
      className: "string",
      relevance: 0,
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        { begin: /\S+/ }
      ],
      contains: [
        e.BACKSLASH_ESCAPE,
        i
      ]
    }, l = e.inherit(s, { variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /[^\s,{}[\]]+/ }
    ] }), f = {
      className: "number",
      begin: "\\b" + "[0-9]{4}(-[0-9][0-9]){0,2}" + "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?" + "(\\.[0-9]*)?" + "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?" + "\\b"
    }, g = {
      end: ",",
      endsWithParent: !0,
      excludeEnd: !0,
      keywords: n,
      relevance: 0
    }, E = {
      begin: /\{/,
      end: /\}/,
      contains: [g],
      illegal: "\\n",
      relevance: 0
    }, T = {
      begin: "\\[",
      end: "\\]",
      contains: [g],
      illegal: "\\n",
      relevance: 0
    }, R = [
      a,
      {
        className: "meta",
        begin: "^---\\s*$",
        relevance: 10
      },
      {
        // multi line string
        // Blocks start with a | or > followed by a newline
        //
        // Indentation of subsequent lines must be the same to
        // be considered part of the block
        className: "string",
        begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
      },
      {
        // Ruby/Rails erb
        begin: "<%[%=-]?",
        end: "[%-]?%>",
        subLanguage: "ruby",
        excludeBegin: !0,
        excludeEnd: !0,
        relevance: 0
      },
      {
        // named tags
        className: "type",
        begin: "!\\w+!" + r
      },
      // https://yaml.org/spec/1.2/spec.html#id2784064
      {
        // verbatim tags
        className: "type",
        begin: "!<" + r + ">"
      },
      {
        // primary tags
        className: "type",
        begin: "!" + r
      },
      {
        // secondary tags
        className: "type",
        begin: "!!" + r
      },
      {
        // fragment id &ref
        className: "meta",
        begin: "&" + e.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // fragment reference *ref
        className: "meta",
        begin: "\\*" + e.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // array listing
        className: "bullet",
        // TODO: remove |$ hack when we have proper look-ahead support
        begin: "-(?=[ ]|$)",
        relevance: 0
      },
      e.HASH_COMMENT_MODE,
      {
        beginKeywords: n,
        keywords: { literal: n }
      },
      f,
      // numbers are any valid C-style number that
      // sit isolated from other words
      {
        className: "number",
        begin: e.C_NUMBER_RE + "\\b",
        relevance: 0
      },
      E,
      T,
      s
    ], A = [...R];
    return A.pop(), A.push(l), g.contains = A, {
      name: "YAML",
      case_insensitive: !0,
      aliases: ["yml"],
      contains: R
    };
  }
  return Pg = t, Pg;
}
var Fg, aN;
function une() {
  if (aN) return Fg;
  aN = 1;
  function t(e) {
    return {
      name: "Test Anything Protocol",
      case_insensitive: !0,
      contains: [
        e.HASH_COMMENT_MODE,
        // version of format and total amount of testcases
        {
          className: "meta",
          variants: [
            { begin: "^TAP version (\\d+)$" },
            { begin: "^1\\.\\.(\\d+)$" }
          ]
        },
        // YAML block
        {
          begin: /---$/,
          end: "\\.\\.\\.$",
          subLanguage: "yaml",
          relevance: 0
        },
        // testcase number
        {
          className: "number",
          begin: " (\\d+) "
        },
        // testcase status and description
        {
          className: "symbol",
          variants: [
            { begin: "^ok" },
            { begin: "^not ok" }
          ]
        }
      ]
    };
  }
  return Fg = t, Fg;
}
var Bg, iN;
function dne() {
  if (iN) return Bg;
  iN = 1;
  function t(e) {
    const n = e.regex, r = /[a-zA-Z_][a-zA-Z0-9_]*/, a = {
      className: "number",
      variants: [
        e.BINARY_NUMBER_MODE,
        e.C_NUMBER_MODE
      ]
    };
    return {
      name: "Tcl",
      aliases: ["tk"],
      keywords: [
        "after",
        "append",
        "apply",
        "array",
        "auto_execok",
        "auto_import",
        "auto_load",
        "auto_mkindex",
        "auto_mkindex_old",
        "auto_qualify",
        "auto_reset",
        "bgerror",
        "binary",
        "break",
        "catch",
        "cd",
        "chan",
        "clock",
        "close",
        "concat",
        "continue",
        "dde",
        "dict",
        "encoding",
        "eof",
        "error",
        "eval",
        "exec",
        "exit",
        "expr",
        "fblocked",
        "fconfigure",
        "fcopy",
        "file",
        "fileevent",
        "filename",
        "flush",
        "for",
        "foreach",
        "format",
        "gets",
        "glob",
        "global",
        "history",
        "http",
        "if",
        "incr",
        "info",
        "interp",
        "join",
        "lappend|10",
        "lassign|10",
        "lindex|10",
        "linsert|10",
        "list",
        "llength|10",
        "load",
        "lrange|10",
        "lrepeat|10",
        "lreplace|10",
        "lreverse|10",
        "lsearch|10",
        "lset|10",
        "lsort|10",
        "mathfunc",
        "mathop",
        "memory",
        "msgcat",
        "namespace",
        "open",
        "package",
        "parray",
        "pid",
        "pkg::create",
        "pkg_mkIndex",
        "platform",
        "platform::shell",
        "proc",
        "puts",
        "pwd",
        "read",
        "refchan",
        "regexp",
        "registry",
        "regsub|10",
        "rename",
        "return",
        "safe",
        "scan",
        "seek",
        "set",
        "socket",
        "source",
        "split",
        "string",
        "subst",
        "switch",
        "tcl_endOfWord",
        "tcl_findLibrary",
        "tcl_startOfNextWord",
        "tcl_startOfPreviousWord",
        "tcl_wordBreakAfter",
        "tcl_wordBreakBefore",
        "tcltest",
        "tclvars",
        "tell",
        "time",
        "tm",
        "trace",
        "unknown",
        "unload",
        "unset",
        "update",
        "uplevel",
        "upvar",
        "variable",
        "vwait",
        "while"
      ],
      contains: [
        e.COMMENT(";[ \\t]*#", "$"),
        e.COMMENT("^[ \\t]*#", "$"),
        {
          beginKeywords: "proc",
          end: "[\\{]",
          excludeEnd: !0,
          contains: [
            {
              className: "title",
              begin: "[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "[ \\t\\n\\r]",
              endsWithParent: !0,
              excludeEnd: !0
            }
          ]
        },
        {
          className: "variable",
          variants: [
            { begin: n.concat(
              /\$/,
              n.optional(/::/),
              r,
              "(::",
              r,
              ")*"
            ) },
            {
              begin: "\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "\\}",
              contains: [a]
            }
          ]
        },
        {
          className: "string",
          contains: [e.BACKSLASH_ESCAPE],
          variants: [e.inherit(e.QUOTE_STRING_MODE, { illegal: null })]
        },
        a
      ]
    };
  }
  return Bg = t, Bg;
}
var Ug, sN;
function pne() {
  if (sN) return Ug;
  sN = 1;
  function t(e) {
    const n = [
      "bool",
      "byte",
      "i16",
      "i32",
      "i64",
      "double",
      "string",
      "binary"
    ];
    return {
      name: "Thrift",
      keywords: {
        keyword: [
          "namespace",
          "const",
          "typedef",
          "struct",
          "enum",
          "service",
          "exception",
          "void",
          "oneway",
          "set",
          "list",
          "map",
          "required",
          "optional"
        ],
        type: n,
        literal: "true false"
      },
      contains: [
        e.QUOTE_STRING_MODE,
        e.NUMBER_MODE,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "struct enum service exception",
          end: /\{/,
          illegal: /\n/,
          contains: [
            e.inherit(e.TITLE_MODE, {
              // hack: eating everything after the first title
              starts: {
                endsWithParent: !0,
                excludeEnd: !0
              }
            })
          ]
        },
        {
          begin: "\\b(set|list|map)\\s*<",
          keywords: { type: [
            ...n,
            "set",
            "list",
            "map"
          ] },
          end: ">",
          contains: ["self"]
        }
      ]
    };
  }
  return Ug = t, Ug;
}
var Gg, oN;
function _ne() {
  if (oN) return Gg;
  oN = 1;
  function t(e) {
    const n = {
      className: "number",
      begin: "[1-9][0-9]*",
      /* no leading zeros */
      relevance: 0
    }, r = {
      className: "symbol",
      begin: ":[^\\]]+"
    }, a = {
      className: "built_in",
      begin: "(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",
      end: "\\]",
      contains: [
        "self",
        n,
        r
      ]
    }, i = {
      className: "built_in",
      begin: "(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",
      end: "\\]",
      contains: [
        "self",
        n,
        e.QUOTE_STRING_MODE,
        /* for pos section at bottom */
        r
      ]
    };
    return {
      name: "TP",
      keywords: {
        keyword: [
          "ABORT",
          "ACC",
          "ADJUST",
          "AND",
          "AP_LD",
          "BREAK",
          "CALL",
          "CNT",
          "COL",
          "CONDITION",
          "CONFIG",
          "DA",
          "DB",
          "DIV",
          "DETECT",
          "ELSE",
          "END",
          "ENDFOR",
          "ERR_NUM",
          "ERROR_PROG",
          "FINE",
          "FOR",
          "GP",
          "GUARD",
          "INC",
          "IF",
          "JMP",
          "LINEAR_MAX_SPEED",
          "LOCK",
          "MOD",
          "MONITOR",
          "OFFSET",
          "Offset",
          "OR",
          "OVERRIDE",
          "PAUSE",
          "PREG",
          "PTH",
          "RT_LD",
          "RUN",
          "SELECT",
          "SKIP",
          "Skip",
          "TA",
          "TB",
          "TO",
          "TOOL_OFFSET",
          "Tool_Offset",
          "UF",
          "UT",
          "UFRAME_NUM",
          "UTOOL_NUM",
          "UNLOCK",
          "WAIT",
          "X",
          "Y",
          "Z",
          "W",
          "P",
          "R",
          "STRLEN",
          "SUBSTR",
          "FINDSTR",
          "VOFFSET",
          "PROG",
          "ATTR",
          "MN",
          "POS"
        ],
        literal: [
          "ON",
          "OFF",
          "max_speed",
          "LPOS",
          "JPOS",
          "ENABLE",
          "DISABLE",
          "START",
          "STOP",
          "RESET"
        ]
      },
      contains: [
        a,
        i,
        {
          className: "keyword",
          begin: "/(PROG|ATTR|MN|POS|END)\\b"
        },
        {
          /* this is for cases like ,CALL */
          className: "keyword",
          begin: "(CALL|RUN|POINT_LOGIC|LBL)\\b"
        },
        {
          /* this is for cases like CNT100 where the default lexemes do not
           * separate the keyword and the number */
          className: "keyword",
          begin: "\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"
        },
        {
          /* to catch numbers that do not have a word boundary on the left */
          className: "number",
          begin: "\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",
          relevance: 0
        },
        e.COMMENT("//", "[;$]"),
        e.COMMENT("!", "[;$]"),
        e.COMMENT("--eg:", "$"),
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        e.C_NUMBER_MODE,
        {
          className: "variable",
          begin: "\\$[A-Za-z0-9_]+"
        }
      ]
    };
  }
  return Gg = t, Gg;
}
var Hg, lN;
function mne() {
  if (lN) return Hg;
  lN = 1;
  function t(e) {
    const n = e.regex, r = [
      "absolute_url",
      "asset|0",
      "asset_version",
      "attribute",
      "block",
      "constant",
      "controller|0",
      "country_timezones",
      "csrf_token",
      "cycle",
      "date",
      "dump",
      "expression",
      "form|0",
      "form_end",
      "form_errors",
      "form_help",
      "form_label",
      "form_rest",
      "form_row",
      "form_start",
      "form_widget",
      "html_classes",
      "include",
      "is_granted",
      "logout_path",
      "logout_url",
      "max",
      "min",
      "parent",
      "path|0",
      "random",
      "range",
      "relative_path",
      "render",
      "render_esi",
      "source",
      "template_from_string",
      "url|0"
    ], a = [
      "abs",
      "abbr_class",
      "abbr_method",
      "batch",
      "capitalize",
      "column",
      "convert_encoding",
      "country_name",
      "currency_name",
      "currency_symbol",
      "data_uri",
      "date",
      "date_modify",
      "default",
      "escape",
      "file_excerpt",
      "file_link",
      "file_relative",
      "filter",
      "first",
      "format",
      "format_args",
      "format_args_as_text",
      "format_currency",
      "format_date",
      "format_datetime",
      "format_file",
      "format_file_from_text",
      "format_number",
      "format_time",
      "html_to_markdown",
      "humanize",
      "inky_to_html",
      "inline_css",
      "join",
      "json_encode",
      "keys",
      "language_name",
      "last",
      "length",
      "locale_name",
      "lower",
      "map",
      "markdown",
      "markdown_to_html",
      "merge",
      "nl2br",
      "number_format",
      "raw",
      "reduce",
      "replace",
      "reverse",
      "round",
      "slice",
      "slug",
      "sort",
      "spaceless",
      "split",
      "striptags",
      "timezone_name",
      "title",
      "trans",
      "transchoice",
      "trim",
      "u|0",
      "upper",
      "url_encode",
      "yaml_dump",
      "yaml_encode"
    ];
    let i = [
      "apply",
      "autoescape",
      "block",
      "cache",
      "deprecated",
      "do",
      "embed",
      "extends",
      "filter",
      "flush",
      "for",
      "form_theme",
      "from",
      "if",
      "import",
      "include",
      "macro",
      "sandbox",
      "set",
      "stopwatch",
      "trans",
      "trans_default_domain",
      "transchoice",
      "use",
      "verbatim",
      "with"
    ];
    i = i.concat(i.map((T) => `end${T}`));
    const s = {
      scope: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    }, l = {
      scope: "number",
      match: /\d+/
    }, c = {
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      contains: [
        s,
        l
      ]
    }, d = {
      beginKeywords: r.join(" "),
      keywords: { name: r },
      relevance: 0,
      contains: [c]
    }, p = {
      match: /\|(?=[A-Za-z_]+:?)/,
      beginScope: "punctuation",
      relevance: 0,
      contains: [
        {
          match: /[A-Za-z_]+:?/,
          keywords: a
        }
      ]
    }, _ = (T, { relevance: R }) => ({
      beginScope: {
        1: "template-tag",
        3: "name"
      },
      relevance: R || 2,
      endScope: "template-tag",
      begin: [
        /\{%/,
        /\s*/,
        n.either(...T)
      ],
      end: /%\}/,
      keywords: "in",
      contains: [
        p,
        d,
        s,
        l
      ]
    }), f = /[a-z_]+/, g = _(i, { relevance: 2 }), E = _([f], { relevance: 1 });
    return {
      name: "Twig",
      aliases: ["craftcms"],
      case_insensitive: !0,
      subLanguage: "xml",
      contains: [
        e.COMMENT(/\{#/, /#\}/),
        g,
        E,
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [
            "self",
            p,
            d,
            s,
            l
          ]
        }
      ]
    };
  }
  return Hg = t, Hg;
}
var Yg, cN;
function fne() {
  if (cN) return Yg;
  cN = 1;
  const t = "[A-Za-z$_][0-9A-Za-z$_]*", e = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ], n = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], r = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], a = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], i = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], s = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ], l = [].concat(
    i,
    r,
    a
  );
  function c(p) {
    const _ = p.regex, f = (ye, { after: Ue }) => {
      const Me = "</" + ye[0].slice(1);
      return ye.input.indexOf(Me, Ue) !== -1;
    }, g = t, E = {
      begin: "<>",
      end: "</>"
    }, T = /<[A-Za-z0-9\\._:-]+\s*\/>/, R = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (ye, Ue) => {
        const Me = ye[0].length + ye.index, Qe = ye.input[Me];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          Qe === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          Qe === ","
        ) {
          Ue.ignoreMatch();
          return;
        }
        Qe === ">" && (f(ye, { after: Me }) || Ue.ignoreMatch());
        let _e;
        const je = ye.input.substring(Me);
        if (_e = je.match(/^\s*=/)) {
          Ue.ignoreMatch();
          return;
        }
        if ((_e = je.match(/^\s+extends\s+/)) && _e.index === 0) {
          Ue.ignoreMatch();
          return;
        }
      }
    }, A = {
      $pattern: t,
      keyword: e,
      literal: n,
      built_in: l,
      "variable.language": s
    }, I = "[0-9](_?[0-9])*", x = `\\.(${I})`, P = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", D = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${P})((${x})|\\.)?|(${x}))[eE][+-]?(${I})\\b` },
        { begin: `\\b(${P})\\b((${x})\\b|\\.)?|(${x})\\b` },
        // DecimalBigIntegerLiteral
        { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    }, L = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: A,
      contains: []
      // defined later
    }, K = {
      begin: "html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          p.BACKSLASH_ESCAPE,
          L
        ],
        subLanguage: "xml"
      }
    }, J = {
      begin: "css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          p.BACKSLASH_ESCAPE,
          L
        ],
        subLanguage: "css"
      }
    }, X = {
      begin: "gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: !1,
        contains: [
          p.BACKSLASH_ESCAPE,
          L
        ],
        subLanguage: "graphql"
      }
    }, $ = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        p.BACKSLASH_ESCAPE,
        L
      ]
    }, ce = {
      className: "comment",
      variants: [
        p.COMMENT(
          /\/\*\*(?!\/)/,
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                begin: "(?=@[A-Za-z]+)",
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  },
                  {
                    className: "type",
                    begin: "\\{",
                    end: "\\}",
                    excludeEnd: !0,
                    excludeBegin: !0,
                    relevance: 0
                  },
                  {
                    className: "variable",
                    begin: g + "(?=\\s*(-)|$)",
                    endsParent: !0,
                    relevance: 0
                  },
                  // eat spaces (not newlines) so we can find
                  // types or variables
                  {
                    begin: /(?=[^\n])\s/,
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ),
        p.C_BLOCK_COMMENT_MODE,
        p.C_LINE_COMMENT_MODE
      ]
    }, ve = [
      p.APOS_STRING_MODE,
      p.QUOTE_STRING_MODE,
      K,
      J,
      X,
      $,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      D
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    L.contains = ve.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: A,
      contains: [
        "self"
      ].concat(ve)
    });
    const ge = [].concat(ce, L.contains), fe = ge.concat([
      // eat recursive parens in sub expressions
      {
        begin: /\(/,
        end: /\)/,
        keywords: A,
        contains: ["self"].concat(ge)
      }
    ]), Fe = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      keywords: A,
      contains: fe
    }, ne = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            g,
            /\s+/,
            /extends/,
            /\s+/,
            _.concat(g, "(", _.concat(/\./, g), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            g
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    }, se = {
      relevance: 0,
      match: _.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...r,
          ...a
        ]
      }
    }, z = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, v = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            g,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [Fe],
      illegal: /%/
    }, H = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function oe(ye) {
      return _.concat("(?!", ye.join("|"), ")");
    }
    const k = {
      match: _.concat(
        /\b/,
        oe([
          ...i,
          "super",
          "import"
        ]),
        g,
        _.lookahead(/\(/)
      ),
      className: "title.function",
      relevance: 0
    }, me = {
      begin: _.concat(/\./, _.lookahead(
        _.concat(g, /(?![0-9A-Za-z$_(])/)
      )),
      end: g,
      excludeBegin: !0,
      keywords: "prototype",
      className: "property",
      relevance: 0
    }, Ce = {
      match: [
        /get|set/,
        /\s+/,
        g,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        Fe
      ]
    }, he = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + p.UNDERSCORE_IDENT_RE + ")\\s*=>", Ne = {
      match: [
        /const|var|let/,
        /\s+/,
        g,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        _.lookahead(he)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        Fe
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: A,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS: fe, CLASS_REFERENCE: se },
      illegal: /#(?![$_A-z])/,
      contains: [
        p.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        z,
        p.APOS_STRING_MODE,
        p.QUOTE_STRING_MODE,
        K,
        J,
        X,
        $,
        ce,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        D,
        se,
        {
          className: "attr",
          begin: g + _.lookahead(":"),
          relevance: 0
        },
        Ne,
        {
          // "value" container
          begin: "(" + p.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            ce,
            p.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: he,
              returnBegin: !0,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: p.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: !0
                    },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: !0,
                      excludeEnd: !0,
                      keywords: A,
                      contains: fe
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: E.begin, end: E.end },
                { match: T },
                {
                  begin: R.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": R.isTrulyOpeningTag,
                  end: R.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: R.begin,
                  end: R.end,
                  skip: !0,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        v,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + p.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: !0,
          label: "func.def",
          contains: [
            Fe,
            p.inherit(p.TITLE_MODE, { begin: g, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        me,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + g,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [Fe]
        },
        k,
        H,
        ne,
        Ce,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  function d(p) {
    const _ = c(p), f = t, g = [
      "any",
      "void",
      "number",
      "boolean",
      "string",
      "object",
      "never",
      "symbol",
      "bigint",
      "unknown"
    ], E = {
      beginKeywords: "namespace",
      end: /\{/,
      excludeEnd: !0,
      contains: [_.exports.CLASS_REFERENCE]
    }, T = {
      beginKeywords: "interface",
      end: /\{/,
      excludeEnd: !0,
      keywords: {
        keyword: "interface extends",
        built_in: g
      },
      contains: [_.exports.CLASS_REFERENCE]
    }, R = {
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use strict['"]/
    }, A = [
      "type",
      "namespace",
      "interface",
      "public",
      "private",
      "protected",
      "implements",
      "declare",
      "abstract",
      "readonly",
      "enum",
      "override"
    ], I = {
      $pattern: t,
      keyword: e.concat(A),
      literal: n,
      built_in: l.concat(g),
      "variable.language": s
    }, x = {
      className: "meta",
      begin: "@" + f
    }, P = (L, K, J) => {
      const X = L.contains.findIndex(($) => $.label === K);
      if (X === -1)
        throw new Error("can not find mode to replace");
      L.contains.splice(X, 1, J);
    };
    Object.assign(_.keywords, I), _.exports.PARAMS_CONTAINS.push(x), _.contains = _.contains.concat([
      x,
      E,
      T
    ]), P(_, "shebang", p.SHEBANG()), P(_, "use_strict", R);
    const D = _.contains.find((L) => L.label === "func.def");
    return D.relevance = 0, Object.assign(_, {
      name: "TypeScript",
      aliases: [
        "ts",
        "tsx",
        "mts",
        "cts"
      ]
    }), _;
  }
  return Yg = d, Yg;
}
var zg, uN;
function gne() {
  if (uN) return zg;
  uN = 1;
  function t(e) {
    return {
      name: "Vala",
      keywords: {
        keyword: (
          // Value types
          "char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var"
        ),
        built_in: "DBus GLib CCode Gee Object Gtk Posix",
        literal: "false true null"
      },
      contains: [
        {
          className: "class",
          beginKeywords: "class interface namespace",
          end: /\{/,
          excludeEnd: !0,
          illegal: "[^,:\\n\\s\\.]",
          contains: [e.UNDERSCORE_TITLE_MODE]
        },
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""',
          relevance: 5
        },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
        e.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "^#",
          end: "$"
        }
      ]
    };
  }
  return zg = t, zg;
}
var qg, dN;
function hne() {
  if (dN) return qg;
  dN = 1;
  function t(e) {
    const n = e.regex, r = {
      className: "string",
      begin: /"(""|[^/n])"C\b/
    }, a = {
      className: "string",
      begin: /"/,
      end: /"/,
      illegal: /\n/,
      contains: [
        {
          // double quote escape
          begin: /""/
        }
      ]
    }, i = /\d{1,2}\/\d{1,2}\/\d{4}/, s = /\d{4}-\d{1,2}-\d{1,2}/, l = /(\d|1[012])(:\d+){0,2} *(AM|PM)/, c = /\d{1,2}(:\d{1,2}){1,2}/, d = {
      className: "literal",
      variants: [
        {
          // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
          begin: n.concat(/# */, n.either(s, i), / *#/)
        },
        {
          // #H:mm[:ss]# (24h Time)
          begin: n.concat(/# */, c, / *#/)
        },
        {
          // #h[:mm[:ss]] A# (12h Time)
          begin: n.concat(/# */, l, / *#/)
        },
        {
          // date plus time
          begin: n.concat(
            /# */,
            n.either(s, i),
            / +/,
            n.either(l, c),
            / *#/
          )
        }
      ]
    }, p = {
      className: "number",
      relevance: 0,
      variants: [
        {
          // Float
          begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
        },
        {
          // Integer (base 10)
          begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 16)
          begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 8)
          begin: /&O[0-7_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 2)
          begin: /&B[01_]+((U?[SIL])|[%&])?/
        }
      ]
    }, _ = {
      className: "label",
      begin: /^\w+:/
    }, f = e.COMMENT(/'''/, /$/, { contains: [
      {
        className: "doctag",
        begin: /<\/?/,
        end: />/
      }
    ] }), g = e.COMMENT(null, /$/, { variants: [
      { begin: /'/ },
      {
        // TODO: Use multi-class for leading spaces
        begin: /([\t ]|^)REM(?=\s)/
      }
    ] });
    return {
      name: "Visual Basic .NET",
      aliases: ["vb"],
      case_insensitive: !0,
      classNameAliases: { label: "symbol" },
      keywords: {
        keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
        built_in: (
          // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
          "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort"
        ),
        type: (
          // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
          "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort"
        ),
        literal: "true false nothing"
      },
      illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
      contains: [
        r,
        a,
        d,
        p,
        _,
        f,
        g,
        {
          className: "meta",
          // TODO: Use multi-class for indentation once available
          begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
          end: /$/,
          keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
          contains: [g]
        }
      ]
    };
  }
  return qg = t, qg;
}
var Vg, pN;
function Ene() {
  if (pN) return Vg;
  pN = 1;
  function t(e) {
    const n = e.regex, r = [
      "lcase",
      "month",
      "vartype",
      "instrrev",
      "ubound",
      "setlocale",
      "getobject",
      "rgb",
      "getref",
      "string",
      "weekdayname",
      "rnd",
      "dateadd",
      "monthname",
      "now",
      "day",
      "minute",
      "isarray",
      "cbool",
      "round",
      "formatcurrency",
      "conversions",
      "csng",
      "timevalue",
      "second",
      "year",
      "space",
      "abs",
      "clng",
      "timeserial",
      "fixs",
      "len",
      "asc",
      "isempty",
      "maths",
      "dateserial",
      "atn",
      "timer",
      "isobject",
      "filter",
      "weekday",
      "datevalue",
      "ccur",
      "isdate",
      "instr",
      "datediff",
      "formatdatetime",
      "replace",
      "isnull",
      "right",
      "sgn",
      "array",
      "snumeric",
      "log",
      "cdbl",
      "hex",
      "chr",
      "lbound",
      "msgbox",
      "ucase",
      "getlocale",
      "cos",
      "cdate",
      "cbyte",
      "rtrim",
      "join",
      "hour",
      "oct",
      "typename",
      "trim",
      "strcomp",
      "int",
      "createobject",
      "loadpicture",
      "tan",
      "formatnumber",
      "mid",
      "split",
      "cint",
      "sin",
      "datepart",
      "ltrim",
      "sqr",
      "time",
      "derived",
      "eval",
      "date",
      "formatpercent",
      "exp",
      "inputbox",
      "left",
      "ascw",
      "chrw",
      "regexp",
      "cstr",
      "err"
    ], a = [
      "server",
      "response",
      "request",
      // take no arguments so can be called without ()
      "scriptengine",
      "scriptenginebuildversion",
      "scriptengineminorversion",
      "scriptenginemajorversion"
    ], i = {
      begin: n.concat(n.either(...r), "\\s*\\("),
      // relevance 0 because this is acting as a beginKeywords really
      relevance: 0,
      keywords: { built_in: r }
    };
    return {
      name: "VBScript",
      aliases: ["vbs"],
      case_insensitive: !0,
      keywords: {
        keyword: [
          "call",
          "class",
          "const",
          "dim",
          "do",
          "loop",
          "erase",
          "execute",
          "executeglobal",
          "exit",
          "for",
          "each",
          "next",
          "function",
          "if",
          "then",
          "else",
          "on",
          "error",
          "option",
          "explicit",
          "new",
          "private",
          "property",
          "let",
          "get",
          "public",
          "randomize",
          "redim",
          "rem",
          "select",
          "case",
          "set",
          "stop",
          "sub",
          "while",
          "wend",
          "with",
          "end",
          "to",
          "elseif",
          "is",
          "or",
          "xor",
          "and",
          "not",
          "class_initialize",
          "class_terminate",
          "default",
          "preserve",
          "in",
          "me",
          "byval",
          "byref",
          "step",
          "resume",
          "goto"
        ],
        built_in: a,
        literal: [
          "true",
          "false",
          "null",
          "nothing",
          "empty"
        ]
      },
      illegal: "//",
      contains: [
        i,
        e.inherit(e.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }),
        e.COMMENT(
          /'/,
          /$/,
          { relevance: 0 }
        ),
        e.C_NUMBER_MODE
      ]
    };
  }
  return Vg = t, Vg;
}
var $g, _N;
function Sne() {
  if (_N) return $g;
  _N = 1;
  function t(e) {
    return {
      name: "VBScript in HTML",
      subLanguage: "xml",
      contains: [
        {
          begin: "<%",
          end: "%>",
          subLanguage: "vbscript"
        }
      ]
    };
  }
  return $g = t, $g;
}
var Wg, mN;
function bne() {
  if (mN) return Wg;
  mN = 1;
  function t(e) {
    const n = e.regex, r = {
      $pattern: /\$?[\w]+(\$[\w]+)*/,
      keyword: [
        "accept_on",
        "alias",
        "always",
        "always_comb",
        "always_ff",
        "always_latch",
        "and",
        "assert",
        "assign",
        "assume",
        "automatic",
        "before",
        "begin",
        "bind",
        "bins",
        "binsof",
        "bit",
        "break",
        "buf|0",
        "bufif0",
        "bufif1",
        "byte",
        "case",
        "casex",
        "casez",
        "cell",
        "chandle",
        "checker",
        "class",
        "clocking",
        "cmos",
        "config",
        "const",
        "constraint",
        "context",
        "continue",
        "cover",
        "covergroup",
        "coverpoint",
        "cross",
        "deassign",
        "default",
        "defparam",
        "design",
        "disable",
        "dist",
        "do",
        "edge",
        "else",
        "end",
        "endcase",
        "endchecker",
        "endclass",
        "endclocking",
        "endconfig",
        "endfunction",
        "endgenerate",
        "endgroup",
        "endinterface",
        "endmodule",
        "endpackage",
        "endprimitive",
        "endprogram",
        "endproperty",
        "endspecify",
        "endsequence",
        "endtable",
        "endtask",
        "enum",
        "event",
        "eventually",
        "expect",
        "export",
        "extends",
        "extern",
        "final",
        "first_match",
        "for",
        "force",
        "foreach",
        "forever",
        "fork",
        "forkjoin",
        "function",
        "generate|5",
        "genvar",
        "global",
        "highz0",
        "highz1",
        "if",
        "iff",
        "ifnone",
        "ignore_bins",
        "illegal_bins",
        "implements",
        "implies",
        "import",
        "incdir",
        "include",
        "initial",
        "inout",
        "input",
        "inside",
        "instance",
        "int",
        "integer",
        "interconnect",
        "interface",
        "intersect",
        "join",
        "join_any",
        "join_none",
        "large",
        "let",
        "liblist",
        "library",
        "local",
        "localparam",
        "logic",
        "longint",
        "macromodule",
        "matches",
        "medium",
        "modport",
        "module",
        "nand",
        "negedge",
        "nettype",
        "new",
        "nexttime",
        "nmos",
        "nor",
        "noshowcancelled",
        "not",
        "notif0",
        "notif1",
        "or",
        "output",
        "package",
        "packed",
        "parameter",
        "pmos",
        "posedge",
        "primitive",
        "priority",
        "program",
        "property",
        "protected",
        "pull0",
        "pull1",
        "pulldown",
        "pullup",
        "pulsestyle_ondetect",
        "pulsestyle_onevent",
        "pure",
        "rand",
        "randc",
        "randcase",
        "randsequence",
        "rcmos",
        "real",
        "realtime",
        "ref",
        "reg",
        "reject_on",
        "release",
        "repeat",
        "restrict",
        "return",
        "rnmos",
        "rpmos",
        "rtran",
        "rtranif0",
        "rtranif1",
        "s_always",
        "s_eventually",
        "s_nexttime",
        "s_until",
        "s_until_with",
        "scalared",
        "sequence",
        "shortint",
        "shortreal",
        "showcancelled",
        "signed",
        "small",
        "soft",
        "solve",
        "specify",
        "specparam",
        "static",
        "string",
        "strong",
        "strong0",
        "strong1",
        "struct",
        "super",
        "supply0",
        "supply1",
        "sync_accept_on",
        "sync_reject_on",
        "table",
        "tagged",
        "task",
        "this",
        "throughout",
        "time",
        "timeprecision",
        "timeunit",
        "tran",
        "tranif0",
        "tranif1",
        "tri",
        "tri0",
        "tri1",
        "triand",
        "trior",
        "trireg",
        "type",
        "typedef",
        "union",
        "unique",
        "unique0",
        "unsigned",
        "until",
        "until_with",
        "untyped",
        "use",
        "uwire",
        "var",
        "vectored",
        "virtual",
        "void",
        "wait",
        "wait_order",
        "wand",
        "weak",
        "weak0",
        "weak1",
        "while",
        "wildcard",
        "wire",
        "with",
        "within",
        "wor",
        "xnor",
        "xor"
      ],
      literal: ["null"],
      built_in: [
        "$finish",
        "$stop",
        "$exit",
        "$fatal",
        "$error",
        "$warning",
        "$info",
        "$realtime",
        "$time",
        "$printtimescale",
        "$bitstoreal",
        "$bitstoshortreal",
        "$itor",
        "$signed",
        "$cast",
        "$bits",
        "$stime",
        "$timeformat",
        "$realtobits",
        "$shortrealtobits",
        "$rtoi",
        "$unsigned",
        "$asserton",
        "$assertkill",
        "$assertpasson",
        "$assertfailon",
        "$assertnonvacuouson",
        "$assertoff",
        "$assertcontrol",
        "$assertpassoff",
        "$assertfailoff",
        "$assertvacuousoff",
        "$isunbounded",
        "$sampled",
        "$fell",
        "$changed",
        "$past_gclk",
        "$fell_gclk",
        "$changed_gclk",
        "$rising_gclk",
        "$steady_gclk",
        "$coverage_control",
        "$coverage_get",
        "$coverage_save",
        "$set_coverage_db_name",
        "$rose",
        "$stable",
        "$past",
        "$rose_gclk",
        "$stable_gclk",
        "$future_gclk",
        "$falling_gclk",
        "$changing_gclk",
        "$display",
        "$coverage_get_max",
        "$coverage_merge",
        "$get_coverage",
        "$load_coverage_db",
        "$typename",
        "$unpacked_dimensions",
        "$left",
        "$low",
        "$increment",
        "$clog2",
        "$ln",
        "$log10",
        "$exp",
        "$sqrt",
        "$pow",
        "$floor",
        "$ceil",
        "$sin",
        "$cos",
        "$tan",
        "$countbits",
        "$onehot",
        "$isunknown",
        "$fatal",
        "$warning",
        "$dimensions",
        "$right",
        "$high",
        "$size",
        "$asin",
        "$acos",
        "$atan",
        "$atan2",
        "$hypot",
        "$sinh",
        "$cosh",
        "$tanh",
        "$asinh",
        "$acosh",
        "$atanh",
        "$countones",
        "$onehot0",
        "$error",
        "$info",
        "$random",
        "$dist_chi_square",
        "$dist_erlang",
        "$dist_exponential",
        "$dist_normal",
        "$dist_poisson",
        "$dist_t",
        "$dist_uniform",
        "$q_initialize",
        "$q_remove",
        "$q_exam",
        "$async$and$array",
        "$async$nand$array",
        "$async$or$array",
        "$async$nor$array",
        "$sync$and$array",
        "$sync$nand$array",
        "$sync$or$array",
        "$sync$nor$array",
        "$q_add",
        "$q_full",
        "$psprintf",
        "$async$and$plane",
        "$async$nand$plane",
        "$async$or$plane",
        "$async$nor$plane",
        "$sync$and$plane",
        "$sync$nand$plane",
        "$sync$or$plane",
        "$sync$nor$plane",
        "$system",
        "$display",
        "$displayb",
        "$displayh",
        "$displayo",
        "$strobe",
        "$strobeb",
        "$strobeh",
        "$strobeo",
        "$write",
        "$readmemb",
        "$readmemh",
        "$writememh",
        "$value$plusargs",
        "$dumpvars",
        "$dumpon",
        "$dumplimit",
        "$dumpports",
        "$dumpportson",
        "$dumpportslimit",
        "$writeb",
        "$writeh",
        "$writeo",
        "$monitor",
        "$monitorb",
        "$monitorh",
        "$monitoro",
        "$writememb",
        "$dumpfile",
        "$dumpoff",
        "$dumpall",
        "$dumpflush",
        "$dumpportsoff",
        "$dumpportsall",
        "$dumpportsflush",
        "$fclose",
        "$fdisplay",
        "$fdisplayb",
        "$fdisplayh",
        "$fdisplayo",
        "$fstrobe",
        "$fstrobeb",
        "$fstrobeh",
        "$fstrobeo",
        "$swrite",
        "$swriteb",
        "$swriteh",
        "$swriteo",
        "$fscanf",
        "$fread",
        "$fseek",
        "$fflush",
        "$feof",
        "$fopen",
        "$fwrite",
        "$fwriteb",
        "$fwriteh",
        "$fwriteo",
        "$fmonitor",
        "$fmonitorb",
        "$fmonitorh",
        "$fmonitoro",
        "$sformat",
        "$sformatf",
        "$fgetc",
        "$ungetc",
        "$fgets",
        "$sscanf",
        "$rewind",
        "$ftell",
        "$ferror"
      ]
    }, a = [
      "__FILE__",
      "__LINE__"
    ], i = [
      "begin_keywords",
      "celldefine",
      "default_nettype",
      "default_decay_time",
      "default_trireg_strength",
      "define",
      "delay_mode_distributed",
      "delay_mode_path",
      "delay_mode_unit",
      "delay_mode_zero",
      "else",
      "elsif",
      "end_keywords",
      "endcelldefine",
      "endif",
      "ifdef",
      "ifndef",
      "include",
      "line",
      "nounconnected_drive",
      "pragma",
      "resetall",
      "timescale",
      "unconnected_drive",
      "undef",
      "undefineall"
    ];
    return {
      name: "Verilog",
      aliases: [
        "v",
        "sv",
        "svh"
      ],
      case_insensitive: !1,
      keywords: r,
      contains: [
        e.C_BLOCK_COMMENT_MODE,
        e.C_LINE_COMMENT_MODE,
        e.QUOTE_STRING_MODE,
        {
          scope: "number",
          contains: [e.BACKSLASH_ESCAPE],
          variants: [
            { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            {
              // decimal
              begin: /\b[0-9][0-9_]*/,
              relevance: 0
            }
          ]
        },
        /* parameters to instances */
        {
          scope: "variable",
          variants: [
            { begin: "#\\((?!parameter).+\\)" },
            {
              begin: "\\.\\w+",
              relevance: 0
            }
          ]
        },
        {
          scope: "variable.constant",
          match: n.concat(/`/, n.either(...a))
        },
        {
          scope: "meta",
          begin: n.concat(/`/, n.either(...i)),
          end: /$|\/\/|\/\*/,
          returnEnd: !0,
          keywords: i
        }
      ]
    };
  }
  return Wg = t, Wg;
}
var Kg, fN;
function Tne() {
  if (fN) return Kg;
  fN = 1;
  function t(e) {
    const n = "\\d(_|\\d)*", r = "[eE][-+]?" + n, a = n + "(\\." + n + ")?(" + r + ")?", i = "\\w+", l = "\\b(" + (n + "#" + i + "(\\." + i + ")?#(" + r + ")?") + "|" + a + ")";
    return {
      name: "VHDL",
      case_insensitive: !0,
      keywords: {
        keyword: [
          "abs",
          "access",
          "after",
          "alias",
          "all",
          "and",
          "architecture",
          "array",
          "assert",
          "assume",
          "assume_guarantee",
          "attribute",
          "begin",
          "block",
          "body",
          "buffer",
          "bus",
          "case",
          "component",
          "configuration",
          "constant",
          "context",
          "cover",
          "disconnect",
          "downto",
          "default",
          "else",
          "elsif",
          "end",
          "entity",
          "exit",
          "fairness",
          "file",
          "for",
          "force",
          "function",
          "generate",
          "generic",
          "group",
          "guarded",
          "if",
          "impure",
          "in",
          "inertial",
          "inout",
          "is",
          "label",
          "library",
          "linkage",
          "literal",
          "loop",
          "map",
          "mod",
          "nand",
          "new",
          "next",
          "nor",
          "not",
          "null",
          "of",
          "on",
          "open",
          "or",
          "others",
          "out",
          "package",
          "parameter",
          "port",
          "postponed",
          "procedure",
          "process",
          "property",
          "protected",
          "pure",
          "range",
          "record",
          "register",
          "reject",
          "release",
          "rem",
          "report",
          "restrict",
          "restrict_guarantee",
          "return",
          "rol",
          "ror",
          "select",
          "sequence",
          "severity",
          "shared",
          "signal",
          "sla",
          "sll",
          "sra",
          "srl",
          "strong",
          "subtype",
          "then",
          "to",
          "transport",
          "type",
          "unaffected",
          "units",
          "until",
          "use",
          "variable",
          "view",
          "vmode",
          "vprop",
          "vunit",
          "wait",
          "when",
          "while",
          "with",
          "xnor",
          "xor"
        ],
        built_in: [
          "boolean",
          "bit",
          "character",
          "integer",
          "time",
          "delay_length",
          "natural",
          "positive",
          "string",
          "bit_vector",
          "file_open_kind",
          "file_open_status",
          "std_logic",
          "std_logic_vector",
          "unsigned",
          "signed",
          "boolean_vector",
          "integer_vector",
          "std_ulogic",
          "std_ulogic_vector",
          "unresolved_unsigned",
          "u_unsigned",
          "unresolved_signed",
          "u_signed",
          "real_vector",
          "time_vector"
        ],
        literal: [
          // severity_level
          "false",
          "true",
          "note",
          "warning",
          "error",
          "failure",
          // textio
          "line",
          "text",
          "side",
          "width"
        ]
      },
      illegal: /\{/,
      contains: [
        e.C_BLOCK_COMMENT_MODE,
        // VHDL-2008 block commenting.
        e.COMMENT("--", "$"),
        e.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: l,
          relevance: 0
        },
        {
          className: "string",
          begin: "'(U|X|0|1|Z|W|L|H|-)'",
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          className: "symbol",
          begin: "'[A-Za-z](_?[A-Za-z0-9])*",
          contains: [e.BACKSLASH_ESCAPE]
        }
      ]
    };
  }
  return Kg = t, Kg;
}
var Qg, gN;
function yne() {
  if (gN) return Qg;
  gN = 1;
  function t(e) {
    return {
      name: "Vim Script",
      keywords: {
        $pattern: /[!#@\w]+/,
        keyword: (
          // express version except: ! & * < = > !! # @ @@
          "N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank"
        ),
        built_in: (
          // built in func
          "synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"
        )
      },
      illegal: /;/,
      contains: [
        e.NUMBER_MODE,
        {
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n"
        },
        /*
        	      A double quote can start either a string or a line comment. Strings are
        	      ended before the end of a line by another double quote and can contain
        	      escaped double-quotes and post-escaped line breaks.
        
        	      Also, any double quote at the beginning of a line is a comment but we
        	      don't handle that properly at the moment: any double quote inside will
        	      turn them into a string. Handling it properly will require a smarter
        	      parser.
        	      */
        {
          className: "string",
          begin: /"(\\"|\n\\|[^"\n])*"/
        },
        e.COMMENT('"', "$"),
        {
          className: "variable",
          begin: /[bwtglsav]:[\w\d_]+/
        },
        {
          begin: [
            /\b(?:function|function!)/,
            /\s+/,
            e.IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title"
          },
          end: "$",
          relevance: 0,
          contains: [
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        {
          className: "symbol",
          begin: /<[\w-]+>/
        }
      ]
    };
  }
  return Qg = t, Qg;
}
var jg, hN;
function vne() {
  if (hN) return jg;
  hN = 1;
  function t(e) {
    e.regex;
    const n = e.COMMENT(/\(;/, /;\)/);
    n.contains.push("self");
    const r = e.COMMENT(/;;/, /$/), a = [
      "anyfunc",
      "block",
      "br",
      "br_if",
      "br_table",
      "call",
      "call_indirect",
      "data",
      "drop",
      "elem",
      "else",
      "end",
      "export",
      "func",
      "global.get",
      "global.set",
      "local.get",
      "local.set",
      "local.tee",
      "get_global",
      "get_local",
      "global",
      "if",
      "import",
      "local",
      "loop",
      "memory",
      "memory.grow",
      "memory.size",
      "module",
      "mut",
      "nop",
      "offset",
      "param",
      "result",
      "return",
      "select",
      "set_global",
      "set_local",
      "start",
      "table",
      "tee_local",
      "then",
      "type",
      "unreachable"
    ], i = {
      begin: [
        /(?:func|call|call_indirect)/,
        /\s+/,
        /\$[^\s)]+/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      }
    }, s = {
      className: "variable",
      begin: /\$[\w_]+/
    }, l = {
      match: /(\((?!;)|\))+/,
      className: "punctuation",
      relevance: 0
    }, c = {
      className: "number",
      relevance: 0,
      // borrowed from Prism, TODO: split out into variants
      match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
    }, d = {
      // look-ahead prevents us from gobbling up opcodes
      match: /(i32|i64|f32|f64)(?!\.)/,
      className: "type"
    }, p = {
      className: "keyword",
      // borrowed from Prism, TODO: split out into variants
      match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
    };
    return {
      name: "WebAssembly",
      keywords: {
        $pattern: /[\w.]+/,
        keyword: a
      },
      contains: [
        r,
        n,
        {
          match: [
            /(?:offset|align)/,
            /\s*/,
            /=/
          ],
          className: {
            1: "keyword",
            3: "operator"
          }
        },
        s,
        l,
        i,
        e.QUOTE_STRING_MODE,
        d,
        p,
        c
      ]
    };
  }
  return jg = t, jg;
}
var Xg, EN;
function Cne() {
  if (EN) return Xg;
  EN = 1;
  function t(e) {
    const n = e.regex, r = /[a-zA-Z]\w*/, a = [
      "as",
      "break",
      "class",
      "construct",
      "continue",
      "else",
      "for",
      "foreign",
      "if",
      "import",
      "in",
      "is",
      "return",
      "static",
      "var",
      "while"
    ], i = [
      "true",
      "false",
      "null"
    ], s = [
      "this",
      "super"
    ], l = [
      "Bool",
      "Class",
      "Fiber",
      "Fn",
      "List",
      "Map",
      "Null",
      "Num",
      "Object",
      "Range",
      "Sequence",
      "String",
      "System"
    ], c = [
      "-",
      "~",
      /\*/,
      "%",
      /\.\.\./,
      /\.\./,
      /\+/,
      "<<",
      ">>",
      ">=",
      "<=",
      "<",
      ">",
      /\^/,
      /!=/,
      /!/,
      /\bis\b/,
      "==",
      "&&",
      "&",
      /\|\|/,
      /\|/,
      /\?:/,
      "="
    ], d = {
      relevance: 0,
      match: n.concat(/\b(?!(if|while|for|else|super)\b)/, r, /(?=\s*[({])/),
      className: "title.function"
    }, p = {
      match: n.concat(
        n.either(
          n.concat(/\b(?!(if|while|for|else|super)\b)/, r),
          n.either(...c)
        ),
        /(?=\s*\([^)]+\)\s*\{)/
      ),
      className: "title.function",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            {
              relevance: 0,
              scope: "params",
              match: r
            }
          ]
        }
      ] }
    }, _ = {
      variants: [
        { match: [
          /class\s+/,
          r,
          /\s+is\s+/,
          r
        ] },
        { match: [
          /class\s+/,
          r
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: a
    }, f = {
      relevance: 0,
      match: n.either(...c),
      className: "operator"
    }, g = {
      className: "string",
      begin: /"""/,
      end: /"""/
    }, E = {
      className: "property",
      begin: n.concat(/\./, n.lookahead(r)),
      end: r,
      excludeBegin: !0,
      relevance: 0
    }, T = {
      relevance: 0,
      match: n.concat(/\b_/, r),
      scope: "variable"
    }, R = {
      relevance: 0,
      match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
      scope: "title.class",
      keywords: { _: l }
    }, A = e.C_NUMBER_MODE, I = {
      match: [
        r,
        /\s*/,
        /=/,
        /\s*/,
        /\(/,
        r,
        /\)\s*\{/
      ],
      scope: {
        1: "title.function",
        3: "operator",
        6: "params"
      }
    }, x = e.COMMENT(
      /\/\*\*/,
      /\*\//,
      { contains: [
        {
          match: /@[a-z]+/,
          scope: "doctag"
        },
        "self"
      ] }
    ), P = {
      scope: "subst",
      begin: /%\(/,
      end: /\)/,
      contains: [
        A,
        R,
        d,
        T,
        f
      ]
    }, D = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        P,
        {
          scope: "char.escape",
          variants: [
            { match: /\\\\|\\["0%abefnrtv]/ },
            { match: /\\x[0-9A-F]{2}/ },
            { match: /\\u[0-9A-F]{4}/ },
            { match: /\\U[0-9A-F]{8}/ }
          ]
        }
      ]
    };
    P.contains.push(D);
    const L = [
      ...a,
      ...s,
      ...i
    ], K = {
      relevance: 0,
      match: n.concat(
        "\\b(?!",
        L.join("|"),
        "\\b)",
        /[a-zA-Z_]\w*(?:[?!]|\b)/
      ),
      className: "variable"
    };
    return {
      name: "Wren",
      keywords: {
        keyword: a,
        "variable.language": s,
        literal: i
      },
      contains: [
        {
          // scope: "meta",
          scope: "comment",
          variants: [
            {
              begin: [
                /#!?/,
                /[A-Za-z_]+(?=\()/
              ],
              beginScope: {
                // 2: "attr"
              },
              keywords: { literal: i },
              contains: [
                // NUMBER,
                // VARIABLE
              ],
              end: /\)/
            },
            {
              begin: [
                /#!?/,
                /[A-Za-z_]+/
              ],
              beginScope: {
                // 2: "attr"
              },
              end: /$/
            }
          ]
        },
        A,
        D,
        g,
        x,
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        R,
        _,
        I,
        p,
        d,
        f,
        T,
        E,
        K
      ]
    };
  }
  return Xg = t, Xg;
}
var Zg, SN;
function Rne() {
  if (SN) return Zg;
  SN = 1;
  function t(e) {
    return {
      name: "Intel x86 Assembly",
      case_insensitive: !0,
      keywords: {
        $pattern: "[.%]?" + e.IDENT_RE,
        keyword: "lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",
        built_in: (
          // Instruction pointer
          "ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr"
        ),
        meta: "%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"
      },
      contains: [
        e.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        {
          className: "number",
          variants: [
            // Float number and x87 BCD
            {
              begin: "\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",
              relevance: 0
            },
            // Hex number in $
            {
              begin: "\\$[0-9][0-9A-Fa-f]*",
              relevance: 0
            },
            // Number in H,D,T,Q,O,B,Y suffix
            { begin: "\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b" },
            // Number in X,D,T,Q,O,B,Y prefix
            { begin: "\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b" }
          ]
        },
        // Double quote string
        e.QUOTE_STRING_MODE,
        {
          className: "string",
          variants: [
            // Single-quoted string
            {
              begin: "'",
              end: "[^\\\\]'"
            },
            // Backquoted string
            {
              begin: "`",
              end: "[^\\\\]`"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            // Global label and local label
            { begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)" },
            // Macro-local label
            { begin: "^\\s*%%[A-Za-z0-9_$#@~.?]*:" }
          ],
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%[0-9]+",
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%!S+",
          relevance: 0
        },
        {
          className: "meta",
          begin: /^\s*\.[\w_-]+/
        }
      ]
    };
  }
  return Zg = t, Zg;
}
var Jg, bN;
function Ane() {
  if (bN) return Jg;
  bN = 1;
  function t(e) {
    const n = [
      "if",
      "then",
      "else",
      "do",
      "while",
      "until",
      "for",
      "loop",
      "import",
      "with",
      "is",
      "as",
      "where",
      "when",
      "by",
      "data",
      "constant",
      "integer",
      "real",
      "text",
      "name",
      "boolean",
      "symbol",
      "infix",
      "prefix",
      "postfix",
      "block",
      "tree"
    ], r = [
      "in",
      "mod",
      "rem",
      "and",
      "or",
      "xor",
      "not",
      "abs",
      "sign",
      "floor",
      "ceil",
      "sqrt",
      "sin",
      "cos",
      "tan",
      "asin",
      "acos",
      "atan",
      "exp",
      "expm1",
      "log",
      "log2",
      "log10",
      "log1p",
      "pi",
      "at",
      "text_length",
      "text_range",
      "text_find",
      "text_replace",
      "contains",
      "page",
      "slide",
      "basic_slide",
      "title_slide",
      "title",
      "subtitle",
      "fade_in",
      "fade_out",
      "fade_at",
      "clear_color",
      "color",
      "line_color",
      "line_width",
      "texture_wrap",
      "texture_transform",
      "texture",
      "scale_?x",
      "scale_?y",
      "scale_?z?",
      "translate_?x",
      "translate_?y",
      "translate_?z?",
      "rotate_?x",
      "rotate_?y",
      "rotate_?z?",
      "rectangle",
      "circle",
      "ellipse",
      "sphere",
      "path",
      "line_to",
      "move_to",
      "quad_to",
      "curve_to",
      "theme",
      "background",
      "contents",
      "locally",
      "time",
      "mouse_?x",
      "mouse_?y",
      "mouse_buttons"
    ], a = [
      "ObjectLoader",
      "Animate",
      "MovieCredits",
      "Slides",
      "Filters",
      "Shading",
      "Materials",
      "LensFlare",
      "Mapping",
      "VLCAudioVideo",
      "StereoDecoder",
      "PointCloud",
      "NetworkAccess",
      "RemoteControl",
      "RegExp",
      "ChromaKey",
      "Snowfall",
      "NodeJS",
      "Speech",
      "Charts"
    ], s = {
      $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
      keyword: n,
      literal: [
        "true",
        "false",
        "nil"
      ],
      built_in: r.concat(a)
    }, l = {
      className: "string",
      begin: '"',
      end: '"',
      illegal: "\\n"
    }, c = {
      className: "string",
      begin: "'",
      end: "'",
      illegal: "\\n"
    }, d = {
      className: "string",
      begin: "<<",
      end: ">>"
    }, p = {
      className: "number",
      begin: "[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"
    }, _ = {
      beginKeywords: "import",
      end: "$",
      keywords: s,
      contains: [l]
    }, f = {
      className: "function",
      begin: /[a-z][^\n]*->/,
      returnBegin: !0,
      end: /->/,
      contains: [
        e.inherit(e.TITLE_MODE, { starts: {
          endsWithParent: !0,
          keywords: s
        } })
      ]
    };
    return {
      name: "XL",
      aliases: ["tao"],
      keywords: s,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        l,
        c,
        d,
        f,
        _,
        p,
        e.NUMBER_MODE
      ]
    };
  }
  return Jg = t, Jg;
}
var eh, TN;
function One() {
  if (TN) return eh;
  TN = 1;
  function t(e) {
    return {
      name: "XQuery",
      aliases: [
        "xpath",
        "xq",
        "xqm"
      ],
      case_insensitive: !1,
      illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
      keywords: {
        $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
        keyword: [
          "module",
          "schema",
          "namespace",
          "boundary-space",
          "preserve",
          "no-preserve",
          "strip",
          "default",
          "collation",
          "base-uri",
          "ordering",
          "context",
          "decimal-format",
          "decimal-separator",
          "copy-namespaces",
          "empty-sequence",
          "except",
          "exponent-separator",
          "external",
          "grouping-separator",
          "inherit",
          "no-inherit",
          "lax",
          "minus-sign",
          "per-mille",
          "percent",
          "schema-attribute",
          "schema-element",
          "strict",
          "unordered",
          "zero-digit",
          "declare",
          "import",
          "option",
          "function",
          "validate",
          "variable",
          "for",
          "at",
          "in",
          "let",
          "where",
          "order",
          "group",
          "by",
          "return",
          "if",
          "then",
          "else",
          "tumbling",
          "sliding",
          "window",
          "start",
          "when",
          "only",
          "end",
          "previous",
          "next",
          "stable",
          "ascending",
          "descending",
          "allowing",
          "empty",
          "greatest",
          "least",
          "some",
          "every",
          "satisfies",
          "switch",
          "case",
          "typeswitch",
          "try",
          "catch",
          "and",
          "or",
          "to",
          "union",
          "intersect",
          "instance",
          "of",
          "treat",
          "as",
          "castable",
          "cast",
          "map",
          "array",
          "delete",
          "insert",
          "into",
          "replace",
          "value",
          "rename",
          "copy",
          "modify",
          "update"
        ],
        type: [
          "item",
          "document-node",
          "node",
          "attribute",
          "document",
          "element",
          "comment",
          "namespace",
          "namespace-node",
          "processing-instruction",
          "text",
          "construction",
          "xs:anyAtomicType",
          "xs:untypedAtomic",
          "xs:duration",
          "xs:time",
          "xs:decimal",
          "xs:float",
          "xs:double",
          "xs:gYearMonth",
          "xs:gYear",
          "xs:gMonthDay",
          "xs:gMonth",
          "xs:gDay",
          "xs:boolean",
          "xs:base64Binary",
          "xs:hexBinary",
          "xs:anyURI",
          "xs:QName",
          "xs:NOTATION",
          "xs:dateTime",
          "xs:dateTimeStamp",
          "xs:date",
          "xs:string",
          "xs:normalizedString",
          "xs:token",
          "xs:language",
          "xs:NMTOKEN",
          "xs:Name",
          "xs:NCName",
          "xs:ID",
          "xs:IDREF",
          "xs:ENTITY",
          "xs:integer",
          "xs:nonPositiveInteger",
          "xs:negativeInteger",
          "xs:long",
          "xs:int",
          "xs:short",
          "xs:byte",
          "xs:nonNegativeInteger",
          "xs:unisignedLong",
          "xs:unsignedInt",
          "xs:unsignedShort",
          "xs:unsignedByte",
          "xs:positiveInteger",
          "xs:yearMonthDuration",
          "xs:dayTimeDuration"
        ],
        literal: [
          "eq",
          "ne",
          "lt",
          "le",
          "gt",
          "ge",
          "is",
          "self::",
          "child::",
          "descendant::",
          "descendant-or-self::",
          "attribute::",
          "following::",
          "following-sibling::",
          "parent::",
          "ancestor::",
          "ancestor-or-self::",
          "preceding::",
          "preceding-sibling::",
          "NaN"
        ]
      },
      contains: [
        {
          className: "variable",
          begin: /[$][\w\-:]+/
        },
        {
          className: "built_in",
          variants: [
            {
              begin: /\barray:/,
              end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
            },
            {
              begin: /\bmap:/,
              end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
            },
            {
              begin: /\bmath:/,
              end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
            },
            {
              begin: /\bop:/,
              end: /\(/,
              excludeEnd: !0
            },
            {
              begin: /\bfn:/,
              end: /\(/,
              excludeEnd: !0
            },
            // do not highlight inbuilt strings as variable or xml element names
            { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
            {
              begin: /\blocal:/,
              end: /\(/,
              excludeEnd: !0
            },
            {
              begin: /\bzip:/,
              end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
            },
            {
              begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
              end: /\(/,
              excludeEnd: !0
            }
          ]
        },
        {
          className: "string",
          variants: [
            {
              begin: /"/,
              end: /"/,
              contains: [
                {
                  begin: /""/,
                  relevance: 0
                }
              ]
            },
            {
              begin: /'/,
              end: /'/,
              contains: [
                {
                  begin: /''/,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          className: "number",
          begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
          relevance: 0
        },
        {
          className: "comment",
          begin: /\(:/,
          end: /:\)/,
          relevance: 10,
          contains: [
            {
              className: "doctag",
              begin: /@\w+/
            }
          ]
        },
        {
          className: "meta",
          begin: /%[\w\-:]+/
        },
        {
          className: "title",
          begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
          end: /;/
        },
        {
          beginKeywords: "element attribute comment document processing-instruction",
          end: /\{/,
          excludeEnd: !0
        },
        {
          begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
          end: /(\/[\w._:-]+>)/,
          subLanguage: "xml",
          contains: [
            {
              begin: /\{/,
              end: /\}/,
              subLanguage: "xquery"
            },
            "self"
          ]
        }
      ]
    };
  }
  return eh = t, eh;
}
var th, yN;
function Nne() {
  if (yN) return th;
  yN = 1;
  function t(e) {
    const n = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        e.inherit(e.APOS_STRING_MODE, { illegal: null }),
        e.inherit(e.QUOTE_STRING_MODE, { illegal: null })
      ]
    }, r = e.UNDERSCORE_TITLE_MODE, a = { variants: [
      e.BINARY_NUMBER_MODE,
      e.C_NUMBER_MODE
    ] }, i = (
      // classes and objects
      "namespace class interface use extends function return abstract final public protected private static deprecated throw try catch Exception echo empty isset instanceof unset let var new const self require if else elseif switch case default do while loop for continue break likely unlikely __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ array boolean float double integer object resource string char long unsigned bool int uint ulong uchar true false null undefined"
    );
    return {
      name: "Zephir",
      aliases: ["zep"],
      keywords: i,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.COMMENT(
          /\/\*/,
          /\*\//,
          { contains: [
            {
              className: "doctag",
              begin: /@[A-Za-z]+/
            }
          ] }
        ),
        {
          className: "string",
          begin: /<<<['"]?\w+['"]?$/,
          end: /^\w+;/,
          contains: [e.BACKSLASH_ESCAPE]
        },
        {
          // swallow composed identifiers to avoid parsing them as keywords
          begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
        },
        {
          className: "function",
          beginKeywords: "function fn",
          end: /[;{]/,
          excludeEnd: !0,
          illegal: /\$|\[|%/,
          contains: [
            r,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: i,
              contains: [
                "self",
                e.C_BLOCK_COMMENT_MODE,
                n,
                a
              ]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: !0,
          illegal: /[:($"]/,
          contains: [
            { beginKeywords: "extends implements" },
            r
          ]
        },
        {
          beginKeywords: "namespace",
          end: /;/,
          illegal: /[.']/,
          contains: [r]
        },
        {
          beginKeywords: "use",
          end: /;/,
          contains: [r]
        },
        {
          begin: /=>/
          // No markup, just a relevance booster
        },
        n,
        a
      ]
    };
  }
  return th = t, th;
}
var Z = ZZ;
Z.registerLanguage("1c", JZ());
Z.registerLanguage("abnf", eJ());
Z.registerLanguage("accesslog", tJ());
Z.registerLanguage("actionscript", nJ());
Z.registerLanguage("ada", rJ());
Z.registerLanguage("angelscript", aJ());
Z.registerLanguage("apache", iJ());
Z.registerLanguage("applescript", sJ());
Z.registerLanguage("arcade", oJ());
Z.registerLanguage("arduino", lJ());
Z.registerLanguage("armasm", cJ());
Z.registerLanguage("xml", uJ());
Z.registerLanguage("asciidoc", dJ());
Z.registerLanguage("aspectj", pJ());
Z.registerLanguage("autohotkey", _J());
Z.registerLanguage("autoit", mJ());
Z.registerLanguage("avrasm", fJ());
Z.registerLanguage("awk", gJ());
Z.registerLanguage("axapta", hJ());
Z.registerLanguage("bash", EJ());
Z.registerLanguage("basic", SJ());
Z.registerLanguage("bnf", bJ());
Z.registerLanguage("brainfuck", TJ());
Z.registerLanguage("c", yJ());
Z.registerLanguage("cal", vJ());
Z.registerLanguage("capnproto", CJ());
Z.registerLanguage("ceylon", RJ());
Z.registerLanguage("clean", AJ());
Z.registerLanguage("clojure", OJ());
Z.registerLanguage("clojure-repl", NJ());
Z.registerLanguage("cmake", IJ());
Z.registerLanguage("coffeescript", xJ());
Z.registerLanguage("coq", DJ());
Z.registerLanguage("cos", wJ());
Z.registerLanguage("cpp", LJ());
Z.registerLanguage("crmsh", MJ());
Z.registerLanguage("crystal", kJ());
Z.registerLanguage("csharp", PJ());
Z.registerLanguage("csp", FJ());
Z.registerLanguage("css", BJ());
Z.registerLanguage("d", UJ());
Z.registerLanguage("markdown", GJ());
Z.registerLanguage("dart", HJ());
Z.registerLanguage("delphi", YJ());
Z.registerLanguage("diff", zJ());
Z.registerLanguage("django", qJ());
Z.registerLanguage("dns", VJ());
Z.registerLanguage("dockerfile", $J());
Z.registerLanguage("dos", WJ());
Z.registerLanguage("dsconfig", KJ());
Z.registerLanguage("dts", QJ());
Z.registerLanguage("dust", jJ());
Z.registerLanguage("ebnf", XJ());
Z.registerLanguage("elixir", ZJ());
Z.registerLanguage("elm", JJ());
Z.registerLanguage("ruby", eee());
Z.registerLanguage("erb", tee());
Z.registerLanguage("erlang-repl", nee());
Z.registerLanguage("erlang", ree());
Z.registerLanguage("excel", aee());
Z.registerLanguage("fix", iee());
Z.registerLanguage("flix", see());
Z.registerLanguage("fortran", oee());
Z.registerLanguage("fsharp", lee());
Z.registerLanguage("gams", cee());
Z.registerLanguage("gauss", uee());
Z.registerLanguage("gcode", dee());
Z.registerLanguage("gherkin", pee());
Z.registerLanguage("glsl", _ee());
Z.registerLanguage("gml", mee());
Z.registerLanguage("go", fee());
Z.registerLanguage("golo", gee());
Z.registerLanguage("gradle", hee());
Z.registerLanguage("graphql", Eee());
Z.registerLanguage("groovy", See());
Z.registerLanguage("haml", bee());
Z.registerLanguage("handlebars", Tee());
Z.registerLanguage("haskell", yee());
Z.registerLanguage("haxe", vee());
Z.registerLanguage("hsp", Cee());
Z.registerLanguage("http", Ree());
Z.registerLanguage("hy", Aee());
Z.registerLanguage("inform7", Oee());
Z.registerLanguage("ini", Nee());
Z.registerLanguage("irpf90", Iee());
Z.registerLanguage("isbl", xee());
Z.registerLanguage("java", Dee());
Z.registerLanguage("javascript", wee());
Z.registerLanguage("jboss-cli", Lee());
Z.registerLanguage("json", Mee());
Z.registerLanguage("julia", kee());
Z.registerLanguage("julia-repl", Pee());
Z.registerLanguage("kotlin", Fee());
Z.registerLanguage("lasso", Bee());
Z.registerLanguage("latex", Uee());
Z.registerLanguage("ldif", Gee());
Z.registerLanguage("leaf", Hee());
Z.registerLanguage("less", Yee());
Z.registerLanguage("lisp", zee());
Z.registerLanguage("livecodeserver", qee());
Z.registerLanguage("livescript", Vee());
Z.registerLanguage("llvm", $ee());
Z.registerLanguage("lsl", Wee());
Z.registerLanguage("lua", Kee());
Z.registerLanguage("makefile", Qee());
Z.registerLanguage("mathematica", jee());
Z.registerLanguage("matlab", Xee());
Z.registerLanguage("maxima", Zee());
Z.registerLanguage("mel", Jee());
Z.registerLanguage("mercury", ete());
Z.registerLanguage("mipsasm", tte());
Z.registerLanguage("mizar", nte());
Z.registerLanguage("perl", rte());
Z.registerLanguage("mojolicious", ate());
Z.registerLanguage("monkey", ite());
Z.registerLanguage("moonscript", ste());
Z.registerLanguage("n1ql", ote());
Z.registerLanguage("nestedtext", lte());
Z.registerLanguage("nginx", cte());
Z.registerLanguage("nim", ute());
Z.registerLanguage("nix", dte());
Z.registerLanguage("node-repl", pte());
Z.registerLanguage("nsis", _te());
Z.registerLanguage("objectivec", mte());
Z.registerLanguage("ocaml", fte());
Z.registerLanguage("openscad", gte());
Z.registerLanguage("oxygene", hte());
Z.registerLanguage("parser3", Ete());
Z.registerLanguage("pf", Ste());
Z.registerLanguage("pgsql", bte());
Z.registerLanguage("php", Tte());
Z.registerLanguage("php-template", yte());
Z.registerLanguage("plaintext", vte());
Z.registerLanguage("pony", Cte());
Z.registerLanguage("powershell", Rte());
Z.registerLanguage("processing", Ate());
Z.registerLanguage("profile", Ote());
Z.registerLanguage("prolog", Nte());
Z.registerLanguage("properties", Ite());
Z.registerLanguage("protobuf", xte());
Z.registerLanguage("puppet", Dte());
Z.registerLanguage("purebasic", wte());
Z.registerLanguage("python", Lte());
Z.registerLanguage("python-repl", Mte());
Z.registerLanguage("q", kte());
Z.registerLanguage("qml", Pte());
Z.registerLanguage("r", Fte());
Z.registerLanguage("reasonml", Bte());
Z.registerLanguage("rib", Ute());
Z.registerLanguage("roboconf", Gte());
Z.registerLanguage("routeros", Hte());
Z.registerLanguage("rsl", Yte());
Z.registerLanguage("ruleslanguage", zte());
Z.registerLanguage("rust", qte());
Z.registerLanguage("sas", Vte());
Z.registerLanguage("scala", $te());
Z.registerLanguage("scheme", Wte());
Z.registerLanguage("scilab", Kte());
Z.registerLanguage("scss", Qte());
Z.registerLanguage("shell", jte());
Z.registerLanguage("smali", Xte());
Z.registerLanguage("smalltalk", Zte());
Z.registerLanguage("sml", Jte());
Z.registerLanguage("sqf", ene());
Z.registerLanguage("sql", tne());
Z.registerLanguage("stan", nne());
Z.registerLanguage("stata", rne());
Z.registerLanguage("step21", ane());
Z.registerLanguage("stylus", ine());
Z.registerLanguage("subunit", sne());
Z.registerLanguage("swift", one());
Z.registerLanguage("taggerscript", lne());
Z.registerLanguage("yaml", cne());
Z.registerLanguage("tap", une());
Z.registerLanguage("tcl", dne());
Z.registerLanguage("thrift", pne());
Z.registerLanguage("tp", _ne());
Z.registerLanguage("twig", mne());
Z.registerLanguage("typescript", fne());
Z.registerLanguage("vala", gne());
Z.registerLanguage("vbnet", hne());
Z.registerLanguage("vbscript", Ene());
Z.registerLanguage("vbscript-html", Sne());
Z.registerLanguage("verilog", bne());
Z.registerLanguage("vhdl", Tne());
Z.registerLanguage("vim", yne());
Z.registerLanguage("wasm", vne());
Z.registerLanguage("wren", Cne());
Z.registerLanguage("x86asm", Rne());
Z.registerLanguage("xl", Ane());
Z.registerLanguage("xquery", One());
Z.registerLanguage("zephir", Nne());
Z.HighlightJS = Z;
Z.default = Z;
var Ine = Z;
const xne = /* @__PURE__ */ oo(Ine), Dne = ({
  language: t,
  children: e
}) => {
  const n = un(null);
  return wn(() => {
    n.current && (n.current.getAttribute("data-highlighted") === "yes" || xne.highlightElement(n.current));
  }, []), /* @__PURE__ */ C.jsx("pre", { style: { margin: 0 }, children: /* @__PURE__ */ C.jsx(
    "code",
    {
      ref: n,
      style: {
        borderBottomLeftRadius: "0.7rem",
        borderBottomRightRadius: "0.7rem",
        fontFamily: "monospace",
        fontSize: "14px"
      },
      className: `language-${t}`,
      children: e
    }
  ) });
}, wne = ({ children: t, ...e }) => {
  const n = $E(), r = e.node?.children?.[0], a = r?.properties?.className?.[0], i = /language-(\w+)/.exec(a || ""), s = r?.children?.[0]?.value, l = i && s, c = l ? /* @__PURE__ */ C.jsx(Dne, { language: i[1], children: s }) : null, d = l ? null : /* @__PURE__ */ C.jsx(
    Zt,
    {
      sx: {
        background: n ? Bt[900] : Bt[200],
        borderRadius: "0.7rem",
        padding: (p) => p.spacing(1),
        paddingRight: "2.5em",
        minHeight: "20px",
        overflowX: "auto"
      },
      children: /* @__PURE__ */ C.jsx(
        "code",
        {
          ...e,
          style: {
            whiteSpace: "pre-wrap"
          },
          children: t
        }
      )
    }
  );
  return /* @__PURE__ */ C.jsxs(
    Zt,
    {
      sx: {
        position: "relative"
      },
      children: [
        /* @__PURE__ */ C.jsxs(
          fn,
          {
            px: 2,
            py: 1,
            direction: "row",
            sx: {
              justifyContent: "space-between",
              alignItems: "center",
              borderTopLeftRadius: "0.7rem",
              borderTopRightRadius: "0.7rem",
              color: "text.secondary",
              background: n ? Bt[900] : Bt[200]
            },
            children: [
              /* @__PURE__ */ C.jsx(_s, { variant: "caption", children: i?.[1] || "Raw code" }),
              /* @__PURE__ */ C.jsx(kI, { edge: "end", value: s })
            ]
          }
        ),
        c,
        d
      ]
    }
  );
}, Lne = ({ element: t }) => {
  const { onElementRefClick: e } = qn(Hi);
  return t.display === "inline" ? /* @__PURE__ */ C.jsx("span", { style: { fontWeight: 700 }, children: t.name }) : /* @__PURE__ */ C.jsx(
    yE,
    {
      role: "link",
      className: "element-link",
      sx: { cursor: "pointer" },
      onClick: () => e && e(t),
      children: t.name
    }
  );
}, Mne = b2`
  from {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`, vN = "​";
function kne({ whitespace: t }) {
  return /* @__PURE__ */ C.jsx(
    Zt,
    {
      component: "span",
      sx: {
        display: "inline-block",
        width: "12px",
        height: "12px",
        backgroundColor: "text.primary",
        borderRadius: "50%",
        animation: `1s ease-in-out 0.1s ${Mne} infinite`,
        ml: t ? "0.5em" : 0
      }
    }
  );
}
const Pne = () => (t) => {
  Xl(t, "text", (e, n, r) => {
    const a = /\u200B/g, i = [...e.value?.matchAll(a) || []];
    if (i.length > 0) {
      const s = [];
      let l = 0;
      i.forEach((c) => {
        const [d] = c, p = c.index, _ = p + d.length;
        p > l && s.push({
          type: "text",
          value: e.value.slice(l, p)
        }), s.push({
          type: "blinkingCursor",
          data: {
            hName: "blinkingCursor",
            hProperties: { text: "Blinking Cursor" }
          }
        }), l = _;
      }), l < e.value.length && s.push({
        type: "text",
        value: e.value.slice(l)
      }), r.children.splice(n, 1, ...s);
    }
  });
};
function iE({ refElements: t, allowHtml: e, latex: n, children: r }) {
  const a = Cn(() => {
    let s = [];
    return e && (s = [BQ, ...s]), n && (s = [k$, ...s]), s;
  }, [e, n]), i = Cn(() => {
    let s = [Pne, WX];
    return n && (s = [...s, aZ]), s;
  }, [n]);
  return /* @__PURE__ */ C.jsx(
    sq,
    {
      remarkPlugins: i,
      rehypePlugins: a,
      className: "markdown-body",
      components: {
        a({ children: s, ...l }) {
          const c = s, d = t?.find((p) => p.name === c);
          return d ? /* @__PURE__ */ C.jsx(Lne, { element: d }) : (
            // @ts-ignore
            /* @__PURE__ */ C.jsx(yE, { ...l, target: "_blank", children: s })
          );
        },
        code({ ...s }) {
          return /* @__PURE__ */ C.jsx(iZ, { ...s });
        },
        pre({ ...s }) {
          return /* @__PURE__ */ C.jsx(wne, { ...s });
        },
        table({ children: s, ...l }) {
          return /* @__PURE__ */ C.jsx(
            o7,
            {
              sx: {
                width: "fit-content",
                minWidth: "300px"
              },
              elevation: 0,
              component: a7,
              children: /* @__PURE__ */ C.jsx(i7, { ...l, children: s })
            }
          );
        },
        thead({ children: s, ...l }) {
          return /* @__PURE__ */ C.jsx(l7, { ...l, children: s });
        },
        tr({ children: s, ...l }) {
          return /* @__PURE__ */ C.jsx(c7, { ...l, children: s });
        },
        th({ children: s, ...l }) {
          return (
            // @ts-ignore
            /* @__PURE__ */ C.jsx(xT, { ...l, align: "right", sx: { padding: 1 }, children: s })
          );
        },
        td({ children: s, ...l }) {
          return (
            // @ts-ignore
            /* @__PURE__ */ C.jsx(xT, { ...l, align: "right", sx: { padding: 1 }, children: s })
          );
        },
        tbody({ children: s, ...l }) {
          return /* @__PURE__ */ C.jsx(s7, { ...l, children: s });
        },
        // @ts-expect-error custom plugin
        blinkingCursor: () => /* @__PURE__ */ C.jsx(kne, { whitespace: !0 })
      },
      children: r
    }
  );
}
const Fne = ({ element: t }) => {
  const { data: e, error: n, isLoading: r } = KE(t.url || null), { config: a } = ua(), i = a?.features?.unsafe_allow_html, s = a?.features?.latex;
  let l = "";
  return r ? l = "Loading..." : n ? l = "An error occurred" : e && (l = e), !r && !n && t.language && (l = `\`\`\`${t.language}
${l}
\`\`\``), /* @__PURE__ */ C.jsx(Zt, { sx: { fontFamily: (c) => c.typography.fontFamily }, children: /* @__PURE__ */ C.jsx(iE, { allowHtml: i, latex: s, children: l }) });
}, Bne = ({ items: t }) => /* @__PURE__ */ C.jsx(fn, { spacing: 1, children: t.map((e, n) => /* @__PURE__ */ C.jsxs(x2, { color: "info", icon: !1, children: [
  /* @__PURE__ */ C.jsx(r7, { children: e.name }),
  /* @__PURE__ */ C.jsx(Fne, { element: e })
] }, n)) });
var Une = function(e, n, r) {
  var a = document.head || document.getElementsByTagName("head")[0], i = document.createElement("script");
  typeof n == "function" && (r = n, n = {}), n = n || {}, r = r || function() {
  }, i.type = n.type || "text/javascript", i.charset = n.charset || "utf8", i.async = "async" in n ? !!n.async : !0, i.src = e, n.attrs && Gne(i, n.attrs), n.text && (i.text = "" + n.text);
  var s = "onload" in i ? CN : Hne;
  s(i, r), i.onload || CN(i, r), a.appendChild(i);
};
function Gne(t, e) {
  for (var n in e)
    t.setAttribute(n, e[n]);
}
function CN(t, e) {
  t.onload = function() {
    this.onerror = this.onload = null, e(null, t);
  }, t.onerror = function() {
    this.onerror = this.onload = null, e(new Error("Failed to load " + this.src), t);
  };
}
function Hne(t, e) {
  t.onreadystatechange = function() {
    this.readyState != "complete" && this.readyState != "loaded" || (this.onreadystatechange = null, e(null, t));
  };
}
var Yne = function(e) {
  return zne(e) && !qne(e);
};
function zne(t) {
  return !!t && typeof t == "object";
}
function qne(t) {
  var e = Object.prototype.toString.call(t);
  return e === "[object RegExp]" || e === "[object Date]" || Wne(t);
}
var Vne = typeof Symbol == "function" && Symbol.for, $ne = Vne ? Symbol.for("react.element") : 60103;
function Wne(t) {
  return t.$$typeof === $ne;
}
function Kne(t) {
  return Array.isArray(t) ? [] : {};
}
function Hl(t, e) {
  return e.clone !== !1 && e.isMergeableObject(t) ? io(Kne(t), t, e) : t;
}
function Qne(t, e, n) {
  return t.concat(e).map(function(r) {
    return Hl(r, n);
  });
}
function jne(t, e) {
  if (!e.customMerge)
    return io;
  var n = e.customMerge(t);
  return typeof n == "function" ? n : io;
}
function Xne(t) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(t).filter(function(e) {
    return Object.propertyIsEnumerable.call(t, e);
  }) : [];
}
function RN(t) {
  return Object.keys(t).concat(Xne(t));
}
function oD(t, e) {
  try {
    return e in t;
  } catch {
    return !1;
  }
}
function Zne(t, e) {
  return oD(t, e) && !(Object.hasOwnProperty.call(t, e) && Object.propertyIsEnumerable.call(t, e));
}
function Jne(t, e, n) {
  var r = {};
  return n.isMergeableObject(t) && RN(t).forEach(function(a) {
    r[a] = Hl(t[a], n);
  }), RN(e).forEach(function(a) {
    Zne(t, a) || (oD(t, a) && n.isMergeableObject(e[a]) ? r[a] = jne(a, n)(t[a], e[a], n) : r[a] = Hl(e[a], n));
  }), r;
}
function io(t, e, n) {
  n = n || {}, n.arrayMerge = n.arrayMerge || Qne, n.isMergeableObject = n.isMergeableObject || Yne, n.cloneUnlessOtherwiseSpecified = Hl;
  var r = Array.isArray(e), a = Array.isArray(t), i = r === a;
  return i ? r ? n.arrayMerge(t, e, n) : Jne(t, e, n) : Hl(e, n);
}
io.all = function(e, n) {
  if (!Array.isArray(e))
    throw new Error("first argument should be an array");
  return e.reduce(function(r, a) {
    return io(r, a, n);
  }, {});
};
var ere = io, lD = ere, tre = Object.create, Kd = Object.defineProperty, nre = Object.getOwnPropertyDescriptor, rre = Object.getOwnPropertyNames, are = Object.getPrototypeOf, ire = Object.prototype.hasOwnProperty, sre = (t, e) => {
  for (var n in e)
    Kd(t, n, { get: e[n], enumerable: !0 });
}, cD = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let a of rre(e))
      !ire.call(t, a) && a !== n && Kd(t, a, { get: () => e[a], enumerable: !(r = nre(e, a)) || r.enumerable });
  return t;
}, Y1 = (t, e, n) => (n = t != null ? tre(are(t)) : {}, cD(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  !t || !t.__esModule ? Kd(n, "default", { value: t, enumerable: !0 }) : n,
  t
)), ore = (t) => cD(Kd({}, "__esModule", { value: !0 }), t), uD = {};
sre(uD, {
  callPlayer: () => vre,
  getConfig: () => Tre,
  getSDK: () => bre,
  isBlobUrl: () => Rre,
  isMediaStream: () => Cre,
  lazy: () => dre,
  omit: () => yre,
  parseEndTime: () => hre,
  parseStartTime: () => gre,
  queryString: () => Sre,
  randomString: () => Ere,
  supportsWebKitPresentationMode: () => Are
});
var Qd = ore(uD), lre = Y1($e), cre = Y1(Une), ure = Y1(lD);
const dre = (t) => lre.default.lazy(async () => {
  const e = await t();
  return typeof e.default == "function" ? e : e.default;
}), pre = /[?&#](?:start|t)=([0-9hms]+)/, _re = /[?&#]end=([0-9hms]+)/, sE = /(\d+)(h|m|s)/g, mre = /^\d+$/;
function dD(t, e) {
  if (t instanceof Array)
    return;
  const n = t.match(e);
  if (n) {
    const r = n[1];
    if (r.match(sE))
      return fre(r);
    if (mre.test(r))
      return parseInt(r);
  }
}
function fre(t) {
  let e = 0, n = sE.exec(t);
  for (; n !== null; ) {
    const [, r, a] = n;
    a === "h" && (e += parseInt(r, 10) * 60 * 60), a === "m" && (e += parseInt(r, 10) * 60), a === "s" && (e += parseInt(r, 10)), n = sE.exec(t);
  }
  return e;
}
function gre(t) {
  return dD(t, pre);
}
function hre(t) {
  return dD(t, _re);
}
function Ere() {
  return Math.random().toString(36).substr(2, 5);
}
function Sre(t) {
  return Object.keys(t).map((e) => `${e}=${t[e]}`).join("&");
}
function nh(t) {
  return window[t] ? window[t] : window.exports && window.exports[t] ? window.exports[t] : window.module && window.module.exports && window.module.exports[t] ? window.module.exports[t] : null;
}
const zs = {}, bre = function(e, n, r = null, a = () => !0, i = cre.default) {
  const s = nh(n);
  return s && a(s) ? Promise.resolve(s) : new Promise((l, c) => {
    if (zs[e]) {
      zs[e].push({ resolve: l, reject: c });
      return;
    }
    zs[e] = [{ resolve: l, reject: c }];
    const d = (p) => {
      zs[e].forEach((_) => _.resolve(p));
    };
    if (r) {
      const p = window[r];
      window[r] = function() {
        p && p(), d(nh(n));
      };
    }
    i(e, (p) => {
      p ? (zs[e].forEach((_) => _.reject(p)), zs[e] = null) : r || d(nh(n));
    });
  });
};
function Tre(t, e) {
  return (0, ure.default)(e.config, t.config);
}
function yre(t, ...e) {
  const n = [].concat(...e), r = {}, a = Object.keys(t);
  for (const i of a)
    n.indexOf(i) === -1 && (r[i] = t[i]);
  return r;
}
function vre(t, ...e) {
  if (!this.player || !this.player[t]) {
    let n = `ReactPlayer: ${this.constructor.displayName} player could not call %c${t}%c – `;
    return this.player ? this.player[t] || (n += "The method was not available") : n += "The player was not available", console.warn(n, "font-weight: bold", ""), null;
  }
  return this.player[t](...e);
}
function Cre(t) {
  return typeof window < "u" && typeof window.MediaStream < "u" && t instanceof window.MediaStream;
}
function Rre(t) {
  return /^blob:/.test(t);
}
function Are(t = document.createElement("video")) {
  const e = /iPhone|iPod/.test(navigator.userAgent) === !1;
  return t.webkitSupportsPresentationMode && typeof t.webkitSetPresentationMode == "function" && e;
}
var z1 = Object.defineProperty, Ore = Object.getOwnPropertyDescriptor, Nre = Object.getOwnPropertyNames, Ire = Object.prototype.hasOwnProperty, xre = (t, e) => {
  for (var n in e)
    z1(t, n, { get: e[n], enumerable: !0 });
}, Dre = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let a of Nre(e))
      !Ire.call(t, a) && a !== n && z1(t, a, { get: () => e[a], enumerable: !(r = Ore(e, a)) || r.enumerable });
  return t;
}, wre = (t) => Dre(z1({}, "__esModule", { value: !0 }), t), pD = {};
xre(pD, {
  AUDIO_EXTENSIONS: () => q1,
  DASH_EXTENSIONS: () => AD,
  FLV_EXTENSIONS: () => OD,
  HLS_EXTENSIONS: () => $1,
  MATCH_URL_DAILYMOTION: () => yD,
  MATCH_URL_FACEBOOK: () => gD,
  MATCH_URL_FACEBOOK_WATCH: () => hD,
  MATCH_URL_KALTURA: () => RD,
  MATCH_URL_MIXCLOUD: () => vD,
  MATCH_URL_MUX: () => fD,
  MATCH_URL_SOUNDCLOUD: () => _D,
  MATCH_URL_STREAMABLE: () => ED,
  MATCH_URL_TWITCH_CHANNEL: () => TD,
  MATCH_URL_TWITCH_VIDEO: () => bD,
  MATCH_URL_VIDYARD: () => CD,
  MATCH_URL_VIMEO: () => mD,
  MATCH_URL_WISTIA: () => SD,
  MATCH_URL_YOUTUBE: () => oE,
  VIDEO_EXTENSIONS: () => V1,
  canPlay: () => Mre
});
var Lre = wre(pD), AN = Qd;
const oE = /(?:youtu\.be\/|youtube(?:-nocookie|education)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=|shorts\/|live\/))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//, _D = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/, mD = /vimeo\.com\/(?!progressive_redirect).+/, fD = /stream\.mux\.com\/(?!\w+\.m3u8)(\w+)/, gD = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/, hD = /^https?:\/\/fb\.watch\/.+$/, ED = /streamable\.com\/([a-z0-9]+)$/, SD = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?([^?]+)/, bD = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/, TD = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/, yD = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?(?:[\w.#_-]+)?/, vD = /mixcloud\.com\/([^/]+\/[^/]+)/, CD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-_]+)/, RD = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/, q1 = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i, V1 = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i, $1 = /\.(m3u8)($|\?)/i, AD = /\.(mpd)($|\?)/i, OD = /\.(flv)($|\?)/i, lE = (t) => {
  if (t instanceof Array) {
    for (const e of t)
      if (typeof e == "string" && lE(e) || lE(e.src))
        return !0;
    return !1;
  }
  return (0, AN.isMediaStream)(t) || (0, AN.isBlobUrl)(t) ? !0 : q1.test(t) || V1.test(t) || $1.test(t) || AD.test(t) || OD.test(t);
}, Mre = {
  youtube: (t) => t instanceof Array ? t.every((e) => oE.test(e)) : oE.test(t),
  soundcloud: (t) => _D.test(t) && !q1.test(t),
  vimeo: (t) => mD.test(t) && !V1.test(t) && !$1.test(t),
  mux: (t) => fD.test(t),
  facebook: (t) => gD.test(t) || hD.test(t),
  streamable: (t) => ED.test(t),
  wistia: (t) => SD.test(t),
  twitch: (t) => bD.test(t) || TD.test(t),
  dailymotion: (t) => yD.test(t),
  mixcloud: (t) => vD.test(t),
  vidyard: (t) => CD.test(t),
  kaltura: (t) => RD.test(t),
  file: lE
};
var W1 = Object.defineProperty, kre = Object.getOwnPropertyDescriptor, Pre = Object.getOwnPropertyNames, Fre = Object.prototype.hasOwnProperty, Bre = (t, e) => {
  for (var n in e)
    W1(t, n, { get: e[n], enumerable: !0 });
}, Ure = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let a of Pre(e))
      !Fre.call(t, a) && a !== n && W1(t, a, { get: () => e[a], enumerable: !(r = kre(e, a)) || r.enumerable });
  return t;
}, Gre = (t) => Ure(W1({}, "__esModule", { value: !0 }), t), ND = {};
Bre(ND, {
  default: () => Yre
});
var Hre = Gre(ND), Ar = Qd, fr = Lre, Yre = [
  {
    key: "youtube",
    name: "YouTube",
    canPlay: fr.canPlay.youtube,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerYouTube' */
      "./YouTube-cPsGPo0I.js"
    ).then((t) => t.Y))
  },
  {
    key: "soundcloud",
    name: "SoundCloud",
    canPlay: fr.canPlay.soundcloud,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerSoundCloud' */
      "./SoundCloud-B-397Dbu.js"
    ).then((t) => t.S))
  },
  {
    key: "vimeo",
    name: "Vimeo",
    canPlay: fr.canPlay.vimeo,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerVimeo' */
      "./Vimeo-BtKLADhW.js"
    ).then((t) => t.V))
  },
  {
    key: "mux",
    name: "Mux",
    canPlay: fr.canPlay.mux,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerMux' */
      "./Mux-DPuJZiqR.js"
    ).then((t) => t.M))
  },
  {
    key: "facebook",
    name: "Facebook",
    canPlay: fr.canPlay.facebook,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerFacebook' */
      "./Facebook-BD1QnHMQ.js"
    ).then((t) => t.F))
  },
  {
    key: "streamable",
    name: "Streamable",
    canPlay: fr.canPlay.streamable,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerStreamable' */
      "./Streamable-DI_gIEA6.js"
    ).then((t) => t.S))
  },
  {
    key: "wistia",
    name: "Wistia",
    canPlay: fr.canPlay.wistia,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerWistia' */
      "./Wistia-rBKMuA7M.js"
    ).then((t) => t.W))
  },
  {
    key: "twitch",
    name: "Twitch",
    canPlay: fr.canPlay.twitch,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerTwitch' */
      "./Twitch-Cs7zimkm.js"
    ).then((t) => t.T))
  },
  {
    key: "dailymotion",
    name: "DailyMotion",
    canPlay: fr.canPlay.dailymotion,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerDailyMotion' */
      "./DailyMotion-Cc4xzdmI.js"
    ).then((t) => t.D))
  },
  {
    key: "mixcloud",
    name: "Mixcloud",
    canPlay: fr.canPlay.mixcloud,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerMixcloud' */
      "./Mixcloud-gozaz1JM.js"
    ).then((t) => t.M))
  },
  {
    key: "vidyard",
    name: "Vidyard",
    canPlay: fr.canPlay.vidyard,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerVidyard' */
      "./Vidyard-CHWZv_tL.js"
    ).then((t) => t.V))
  },
  {
    key: "kaltura",
    name: "Kaltura",
    canPlay: fr.canPlay.kaltura,
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerKaltura' */
      "./Kaltura-CBtUIJIP.js"
    ).then((t) => t.K))
  },
  {
    key: "file",
    name: "FilePlayer",
    canPlay: fr.canPlay.file,
    canEnablePIP: (t) => fr.canPlay.file(t) && (document.pictureInPictureEnabled || (0, Ar.supportsWebKitPresentationMode)()) && !fr.AUDIO_EXTENSIONS.test(t),
    lazyPlayer: (0, Ar.lazy)(() => import(
      /* webpackChunkName: 'reactPlayerFilePlayer' */
      "./FilePlayer-DN1iY09e.js"
    ).then((t) => t.F))
  }
], ON = Number.isNaN || function(e) {
  return typeof e == "number" && e !== e;
};
function zre(t, e) {
  return !!(t === e || ON(t) && ON(e));
}
function qre(t, e) {
  if (t.length !== e.length)
    return !1;
  for (var n = 0; n < t.length; n++)
    if (!zre(t[n], e[n]))
      return !1;
  return !0;
}
function Vre(t, e) {
  e === void 0 && (e = qre);
  var n, r = [], a, i = !1;
  function s() {
    for (var l = [], c = 0; c < arguments.length; c++)
      l[c] = arguments[c];
    return i && n === this && e(l, r) || (a = t.apply(this, l), i = !0, n = this, r = l), a;
  }
  return s;
}
const $re = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Vre
}, Symbol.toStringTag, { value: "Module" })), Wre = /* @__PURE__ */ g7($re);
var Kre = typeof Element < "u", Qre = typeof Map == "function", jre = typeof Set == "function", Xre = typeof ArrayBuffer == "function" && !!ArrayBuffer.isView;
function $u(t, e) {
  if (t === e) return !0;
  if (t && e && typeof t == "object" && typeof e == "object") {
    if (t.constructor !== e.constructor) return !1;
    var n, r, a;
    if (Array.isArray(t)) {
      if (n = t.length, n != e.length) return !1;
      for (r = n; r-- !== 0; )
        if (!$u(t[r], e[r])) return !1;
      return !0;
    }
    var i;
    if (Qre && t instanceof Map && e instanceof Map) {
      if (t.size !== e.size) return !1;
      for (i = t.entries(); !(r = i.next()).done; )
        if (!e.has(r.value[0])) return !1;
      for (i = t.entries(); !(r = i.next()).done; )
        if (!$u(r.value[1], e.get(r.value[0]))) return !1;
      return !0;
    }
    if (jre && t instanceof Set && e instanceof Set) {
      if (t.size !== e.size) return !1;
      for (i = t.entries(); !(r = i.next()).done; )
        if (!e.has(r.value[0])) return !1;
      return !0;
    }
    if (Xre && ArrayBuffer.isView(t) && ArrayBuffer.isView(e)) {
      if (n = t.length, n != e.length) return !1;
      for (r = n; r-- !== 0; )
        if (t[r] !== e[r]) return !1;
      return !0;
    }
    if (t.constructor === RegExp) return t.source === e.source && t.flags === e.flags;
    if (t.valueOf !== Object.prototype.valueOf && typeof t.valueOf == "function" && typeof e.valueOf == "function") return t.valueOf() === e.valueOf();
    if (t.toString !== Object.prototype.toString && typeof t.toString == "function" && typeof e.toString == "function") return t.toString() === e.toString();
    if (a = Object.keys(t), n = a.length, n !== Object.keys(e).length) return !1;
    for (r = n; r-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(e, a[r])) return !1;
    if (Kre && t instanceof Element) return !1;
    for (r = n; r-- !== 0; )
      if (!((a[r] === "_owner" || a[r] === "__v" || a[r] === "__o") && t.$$typeof) && !$u(t[a[r]], e[a[r]]))
        return !1;
    return !0;
  }
  return t !== t && e !== e;
}
var ID = function(e, n) {
  try {
    return $u(e, n);
  } catch (r) {
    if ((r.message || "").match(/stack|recursion/i))
      return console.warn("react-fast-compare cannot handle circular refs"), !1;
    throw r;
  }
}, Zre = Object.create, jd = Object.defineProperty, Jre = Object.getOwnPropertyDescriptor, eae = Object.getOwnPropertyNames, tae = Object.getPrototypeOf, nae = Object.prototype.hasOwnProperty, rae = (t, e) => {
  for (var n in e)
    jd(t, n, { get: e[n], enumerable: !0 });
}, xD = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let a of eae(e))
      !nae.call(t, a) && a !== n && jd(t, a, { get: () => e[a], enumerable: !(r = Jre(e, a)) || r.enumerable });
  return t;
}, aae = (t, e, n) => (n = t != null ? Zre(tae(t)) : {}, xD(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  !t || !t.__esModule ? jd(n, "default", { value: t, enumerable: !0 }) : n,
  t
)), iae = (t) => xD(jd({}, "__esModule", { value: !0 }), t), DD = {};
rae(DD, {
  defaultProps: () => lae,
  propTypes: () => oae
});
var wD = iae(DD), sae = aae(TI);
const { string: Jn, bool: gr, number: qs, array: rh, oneOfType: cl, shape: Ur, object: ar, func: Gn, node: NN } = sae.default, oae = {
  url: cl([Jn, rh, ar]),
  playing: gr,
  loop: gr,
  controls: gr,
  volume: qs,
  muted: gr,
  playbackRate: qs,
  width: cl([Jn, qs]),
  height: cl([Jn, qs]),
  style: ar,
  progressInterval: qs,
  playsinline: gr,
  pip: gr,
  stopOnUnmount: gr,
  light: cl([gr, Jn, ar]),
  playIcon: NN,
  previewTabIndex: qs,
  previewAriaLabel: Jn,
  fallback: NN,
  oEmbedUrl: Jn,
  wrapper: cl([
    Jn,
    Gn,
    Ur({ render: Gn.isRequired })
  ]),
  config: Ur({
    soundcloud: Ur({
      options: ar
    }),
    youtube: Ur({
      playerVars: ar,
      embedOptions: ar,
      onUnstarted: Gn
    }),
    facebook: Ur({
      appId: Jn,
      version: Jn,
      playerId: Jn,
      attributes: ar
    }),
    dailymotion: Ur({
      params: ar
    }),
    vimeo: Ur({
      playerOptions: ar,
      title: Jn
    }),
    mux: Ur({
      attributes: ar,
      version: Jn
    }),
    file: Ur({
      attributes: ar,
      tracks: rh,
      forceVideo: gr,
      forceAudio: gr,
      forceHLS: gr,
      forceSafariHLS: gr,
      forceDisableHls: gr,
      forceDASH: gr,
      forceFLV: gr,
      hlsOptions: ar,
      hlsVersion: Jn,
      dashVersion: Jn,
      flvVersion: Jn
    }),
    wistia: Ur({
      options: ar,
      playerId: Jn,
      customControls: rh
    }),
    mixcloud: Ur({
      options: ar
    }),
    twitch: Ur({
      options: ar,
      playerId: Jn
    }),
    vidyard: Ur({
      options: ar
    })
  }),
  onReady: Gn,
  onStart: Gn,
  onPlay: Gn,
  onPause: Gn,
  onBuffer: Gn,
  onBufferEnd: Gn,
  onEnded: Gn,
  onError: Gn,
  onDuration: Gn,
  onSeek: Gn,
  onPlaybackRateChange: Gn,
  onPlaybackQualityChange: Gn,
  onProgress: Gn,
  onClickPreview: Gn,
  onEnablePIP: Gn,
  onDisablePIP: Gn
}, er = () => {
}, lae = {
  playing: !1,
  loop: !1,
  controls: !1,
  volume: null,
  muted: !1,
  playbackRate: 1,
  width: "640px",
  height: "360px",
  style: {},
  progressInterval: 1e3,
  playsinline: !1,
  pip: !1,
  stopOnUnmount: !0,
  light: !1,
  fallback: null,
  wrapper: "div",
  previewTabIndex: 0,
  previewAriaLabel: "",
  oEmbedUrl: "https://noembed.com/embed?url={url}",
  config: {
    soundcloud: {
      options: {
        visual: !0,
        // Undocumented, but makes player fill container and look better
        buying: !1,
        liking: !1,
        download: !1,
        sharing: !1,
        show_comments: !1,
        show_playcount: !1
      }
    },
    youtube: {
      playerVars: {
        playsinline: 1,
        showinfo: 0,
        rel: 0,
        iv_load_policy: 3,
        modestbranding: 1
      },
      embedOptions: {},
      onUnstarted: er
    },
    facebook: {
      appId: "1309697205772819",
      version: "v3.3",
      playerId: null,
      attributes: {}
    },
    dailymotion: {
      params: {
        api: 1,
        "endscreen-enable": !1
      }
    },
    vimeo: {
      playerOptions: {
        autopause: !1,
        byline: !1,
        portrait: !1,
        title: !1
      },
      title: null
    },
    mux: {
      attributes: {},
      version: "2"
    },
    file: {
      attributes: {},
      tracks: [],
      forceVideo: !1,
      forceAudio: !1,
      forceHLS: !1,
      forceDASH: !1,
      forceFLV: !1,
      hlsOptions: {},
      hlsVersion: "1.1.4",
      dashVersion: "3.1.3",
      flvVersion: "1.5.0",
      forceDisableHls: !1
    },
    wistia: {
      options: {},
      playerId: null,
      customControls: null
    },
    mixcloud: {
      options: {
        hide_cover: 1
      }
    },
    twitch: {
      options: {},
      playerId: null
    },
    vidyard: {
      options: {}
    }
  },
  onReady: er,
  onStart: er,
  onPlay: er,
  onPause: er,
  onBuffer: er,
  onBufferEnd: er,
  onEnded: er,
  onError: er,
  onDuration: er,
  onSeek: er,
  onPlaybackRateChange: er,
  onPlaybackQualityChange: er,
  onProgress: er,
  onClickPreview: er,
  onEnablePIP: er,
  onDisablePIP: er
};
var cae = Object.create, ac = Object.defineProperty, uae = Object.getOwnPropertyDescriptor, dae = Object.getOwnPropertyNames, pae = Object.getPrototypeOf, _ae = Object.prototype.hasOwnProperty, mae = (t, e, n) => e in t ? ac(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, fae = (t, e) => {
  for (var n in e)
    ac(t, n, { get: e[n], enumerable: !0 });
}, LD = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let a of dae(e))
      !_ae.call(t, a) && a !== n && ac(t, a, { get: () => e[a], enumerable: !(r = uae(e, a)) || r.enumerable });
  return t;
}, MD = (t, e, n) => (n = t != null ? cae(pae(t)) : {}, LD(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  !t || !t.__esModule ? ac(n, "default", { value: t, enumerable: !0 }) : n,
  t
)), gae = (t) => LD(ac({}, "__esModule", { value: !0 }), t), In = (t, e, n) => (mae(t, typeof e != "symbol" ? e + "" : e, n), n), kD = {};
fae(kD, {
  default: () => Xd
});
var hae = gae(kD), IN = MD($e), Eae = MD(ID), PD = wD, Sae = Qd;
const bae = 5e3;
class Xd extends IN.Component {
  constructor() {
    super(...arguments), In(this, "mounted", !1), In(this, "isReady", !1), In(this, "isPlaying", !1), In(this, "isLoading", !0), In(this, "loadOnReady", null), In(this, "startOnPlay", !0), In(this, "seekOnPlay", null), In(this, "onDurationCalled", !1), In(this, "handlePlayerMount", (e) => {
      if (this.player) {
        this.progress();
        return;
      }
      this.player = e, this.player.load(this.props.url), this.progress();
    }), In(this, "getInternalPlayer", (e) => this.player ? this.player[e] : null), In(this, "progress", () => {
      if (this.props.url && this.player && this.isReady) {
        const e = this.getCurrentTime() || 0, n = this.getSecondsLoaded(), r = this.getDuration();
        if (r) {
          const a = {
            playedSeconds: e,
            played: e / r
          };
          n !== null && (a.loadedSeconds = n, a.loaded = n / r), (a.playedSeconds !== this.prevPlayed || a.loadedSeconds !== this.prevLoaded) && this.props.onProgress(a), this.prevPlayed = a.playedSeconds, this.prevLoaded = a.loadedSeconds;
        }
      }
      this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval);
    }), In(this, "handleReady", () => {
      if (!this.mounted)
        return;
      this.isReady = !0, this.isLoading = !1;
      const { onReady: e, playing: n, volume: r, muted: a } = this.props;
      e(), !a && r !== null && this.player.setVolume(r), this.loadOnReady ? (this.player.load(this.loadOnReady, !0), this.loadOnReady = null) : n && this.player.play(), this.handleDurationCheck();
    }), In(this, "handlePlay", () => {
      this.isPlaying = !0, this.isLoading = !1;
      const { onStart: e, onPlay: n, playbackRate: r } = this.props;
      this.startOnPlay && (this.player.setPlaybackRate && r !== 1 && this.player.setPlaybackRate(r), e(), this.startOnPlay = !1), n(), this.seekOnPlay && (this.seekTo(this.seekOnPlay), this.seekOnPlay = null), this.handleDurationCheck();
    }), In(this, "handlePause", (e) => {
      this.isPlaying = !1, this.isLoading || this.props.onPause(e);
    }), In(this, "handleEnded", () => {
      const { activePlayer: e, loop: n, onEnded: r } = this.props;
      e.loopOnEnded && n && this.seekTo(0), n || (this.isPlaying = !1, r());
    }), In(this, "handleError", (...e) => {
      this.isLoading = !1, this.props.onError(...e);
    }), In(this, "handleDurationCheck", () => {
      clearTimeout(this.durationCheckTimeout);
      const e = this.getDuration();
      e ? this.onDurationCalled || (this.props.onDuration(e), this.onDurationCalled = !0) : this.durationCheckTimeout = setTimeout(this.handleDurationCheck, 100);
    }), In(this, "handleLoaded", () => {
      this.isLoading = !1;
    });
  }
  componentDidMount() {
    this.mounted = !0;
  }
  componentWillUnmount() {
    clearTimeout(this.progressTimeout), clearTimeout(this.durationCheckTimeout), this.isReady && this.props.stopOnUnmount && (this.player.stop(), this.player.disablePIP && this.player.disablePIP()), this.mounted = !1;
  }
  componentDidUpdate(e) {
    if (!this.player)
      return;
    const { url: n, playing: r, volume: a, muted: i, playbackRate: s, pip: l, loop: c, activePlayer: d, disableDeferredLoading: p } = this.props;
    if (!(0, Eae.default)(e.url, n)) {
      if (this.isLoading && !d.forceLoad && !p && !(0, Sae.isMediaStream)(n)) {
        console.warn(`ReactPlayer: the attempt to load ${n} is being deferred until the player has loaded`), this.loadOnReady = n;
        return;
      }
      this.isLoading = !0, this.startOnPlay = !0, this.onDurationCalled = !1, this.player.load(n, this.isReady);
    }
    !e.playing && r && !this.isPlaying && this.player.play(), e.playing && !r && this.isPlaying && this.player.pause(), !e.pip && l && this.player.enablePIP && this.player.enablePIP(), e.pip && !l && this.player.disablePIP && this.player.disablePIP(), e.volume !== a && a !== null && this.player.setVolume(a), e.muted !== i && (i ? this.player.mute() : (this.player.unmute(), a !== null && setTimeout(() => this.player.setVolume(a)))), e.playbackRate !== s && this.player.setPlaybackRate && this.player.setPlaybackRate(s), e.loop !== c && this.player.setLoop && this.player.setLoop(c);
  }
  getDuration() {
    return this.isReady ? this.player.getDuration() : null;
  }
  getCurrentTime() {
    return this.isReady ? this.player.getCurrentTime() : null;
  }
  getSecondsLoaded() {
    return this.isReady ? this.player.getSecondsLoaded() : null;
  }
  seekTo(e, n, r) {
    if (!this.isReady) {
      e !== 0 && (this.seekOnPlay = e, setTimeout(() => {
        this.seekOnPlay = null;
      }, bae));
      return;
    }
    if (n ? n === "fraction" : e > 0 && e < 1) {
      const i = this.player.getDuration();
      if (!i) {
        console.warn("ReactPlayer: could not seek using fraction – duration not yet available");
        return;
      }
      this.player.seekTo(i * e, r);
      return;
    }
    this.player.seekTo(e, r);
  }
  render() {
    const e = this.props.activePlayer;
    return e ? /* @__PURE__ */ IN.default.createElement(
      e,
      {
        ...this.props,
        onMount: this.handlePlayerMount,
        onReady: this.handleReady,
        onPlay: this.handlePlay,
        onPause: this.handlePause,
        onEnded: this.handleEnded,
        onLoaded: this.handleLoaded,
        onError: this.handleError
      }
    ) : null;
  }
}
In(Xd, "displayName", "Player");
In(Xd, "propTypes", PD.propTypes);
In(Xd, "defaultProps", PD.defaultProps);
var Tae = Object.create, ic = Object.defineProperty, yae = Object.getOwnPropertyDescriptor, vae = Object.getOwnPropertyNames, Cae = Object.getPrototypeOf, Rae = Object.prototype.hasOwnProperty, Aae = (t, e, n) => e in t ? ic(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, Oae = (t, e) => {
  for (var n in e)
    ic(t, n, { get: e[n], enumerable: !0 });
}, FD = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let a of vae(e))
      !Rae.call(t, a) && a !== n && ic(t, a, { get: () => e[a], enumerable: !(r = yae(e, a)) || r.enumerable });
  return t;
}, sc = (t, e, n) => (n = t != null ? Tae(Cae(t)) : {}, FD(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  !t || !t.__esModule ? ic(n, "default", { value: t, enumerable: !0 }) : n,
  t
)), Nae = (t) => FD(ic({}, "__esModule", { value: !0 }), t), Nn = (t, e, n) => (Aae(t, typeof e != "symbol" ? e + "" : e, n), n), BD = {};
Oae(BD, {
  createReactPlayer: () => Fae
});
var Iae = Nae(BD), Qs = sc($e), xae = sc(lD), ah = sc(Wre), xN = sc(ID), gl = wD, UD = Qd, Dae = sc(hae);
const wae = (0, UD.lazy)(() => import(
  /* webpackChunkName: 'reactPlayerPreview' */
  "./Preview-B8zSAFi1.js"
).then((t) => t.P)), Lae = typeof window < "u" && window.document && typeof document < "u", Mae = typeof Qn < "u" && Qn.window && Qn.window.document, kae = Object.keys(gl.propTypes), Pae = Lae || Mae ? Qs.Suspense : () => null, ul = [], Fae = (t, e) => {
  var n;
  return n = class extends Qs.Component {
    constructor() {
      super(...arguments), Nn(this, "state", {
        showPreview: !!this.props.light
      }), Nn(this, "references", {
        wrapper: (r) => {
          this.wrapper = r;
        },
        player: (r) => {
          this.player = r;
        }
      }), Nn(this, "handleClickPreview", (r) => {
        this.setState({ showPreview: !1 }), this.props.onClickPreview(r);
      }), Nn(this, "showPreview", () => {
        this.setState({ showPreview: !0 });
      }), Nn(this, "getDuration", () => this.player ? this.player.getDuration() : null), Nn(this, "getCurrentTime", () => this.player ? this.player.getCurrentTime() : null), Nn(this, "getSecondsLoaded", () => this.player ? this.player.getSecondsLoaded() : null), Nn(this, "getInternalPlayer", (r = "player") => this.player ? this.player.getInternalPlayer(r) : null), Nn(this, "seekTo", (r, a, i) => {
        if (!this.player)
          return null;
        this.player.seekTo(r, a, i);
      }), Nn(this, "handleReady", () => {
        this.props.onReady(this);
      }), Nn(this, "getActivePlayer", (0, ah.default)((r) => {
        for (const a of [...ul, ...t])
          if (a.canPlay(r))
            return a;
        return e || null;
      })), Nn(this, "getConfig", (0, ah.default)((r, a) => {
        const { config: i } = this.props;
        return xae.default.all([
          gl.defaultProps.config,
          gl.defaultProps.config[a] || {},
          i,
          i[a] || {}
        ]);
      })), Nn(this, "getAttributes", (0, ah.default)((r) => (0, UD.omit)(this.props, kae))), Nn(this, "renderActivePlayer", (r) => {
        if (!r)
          return null;
        const a = this.getActivePlayer(r);
        if (!a)
          return null;
        const i = this.getConfig(r, a.key);
        return /* @__PURE__ */ Qs.default.createElement(
          Dae.default,
          {
            ...this.props,
            key: a.key,
            ref: this.references.player,
            config: i,
            activePlayer: a.lazyPlayer || a,
            onReady: this.handleReady
          }
        );
      });
    }
    shouldComponentUpdate(r, a) {
      return !(0, xN.default)(this.props, r) || !(0, xN.default)(this.state, a);
    }
    componentDidUpdate(r) {
      const { light: a } = this.props;
      !r.light && a && this.setState({ showPreview: !0 }), r.light && !a && this.setState({ showPreview: !1 });
    }
    renderPreview(r) {
      if (!r)
        return null;
      const { light: a, playIcon: i, previewTabIndex: s, oEmbedUrl: l, previewAriaLabel: c } = this.props;
      return /* @__PURE__ */ Qs.default.createElement(
        wae,
        {
          url: r,
          light: a,
          playIcon: i,
          previewTabIndex: s,
          previewAriaLabel: c,
          oEmbedUrl: l,
          onClick: this.handleClickPreview
        }
      );
    }
    render() {
      const { url: r, style: a, width: i, height: s, fallback: l, wrapper: c } = this.props, { showPreview: d } = this.state, p = this.getAttributes(r), _ = typeof c == "string" ? this.references.wrapper : void 0;
      return /* @__PURE__ */ Qs.default.createElement(c, { ref: _, style: { ...a, width: i, height: s }, ...p }, /* @__PURE__ */ Qs.default.createElement(Pae, { fallback: l }, d ? this.renderPreview(r) : this.renderActivePlayer(r)));
    }
  }, Nn(n, "displayName", "ReactPlayer"), Nn(n, "propTypes", gl.propTypes), Nn(n, "defaultProps", gl.defaultProps), Nn(n, "addCustomPlayer", (r) => {
    ul.push(r);
  }), Nn(n, "removeCustomPlayers", () => {
    ul.length = 0;
  }), Nn(n, "canPlay", (r) => {
    for (const a of [...ul, ...t])
      if (a.canPlay(r))
        return !0;
    return !1;
  }), Nn(n, "canEnablePIP", (r) => {
    for (const a of [...ul, ...t])
      if (a.canEnablePIP && a.canEnablePIP(r))
        return !0;
    return !1;
  }), n;
};
var Bae = Object.create, Zd = Object.defineProperty, Uae = Object.getOwnPropertyDescriptor, Gae = Object.getOwnPropertyNames, Hae = Object.getPrototypeOf, Yae = Object.prototype.hasOwnProperty, zae = (t, e) => {
  for (var n in e)
    Zd(t, n, { get: e[n], enumerable: !0 });
}, GD = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let a of Gae(e))
      !Yae.call(t, a) && a !== n && Zd(t, a, { get: () => e[a], enumerable: !(r = Uae(e, a)) || r.enumerable });
  return t;
}, qae = (t, e, n) => (n = t != null ? Bae(Hae(t)) : {}, GD(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  !t || !t.__esModule ? Zd(n, "default", { value: t, enumerable: !0 }) : n,
  t
)), Vae = (t) => GD(Zd({}, "__esModule", { value: !0 }), t), HD = {};
zae(HD, {
  default: () => Qae
});
var $ae = Vae(HD), cE = qae(Hre), Wae = Iae;
const Kae = cE.default[cE.default.length - 1];
var Qae = (0, Wae.createReactPlayer)(cE.default, Kae);
const jae = /* @__PURE__ */ oo($ae), Xae = ({ element: t }) => t.url ? /* @__PURE__ */ C.jsx(
  jae,
  {
    className: `${t.display}-video`,
    width: "100%",
    controls: !0,
    url: t.url,
    config: t.playerConfig || {}
  }
) : null, Zae = ({ items: t }) => /* @__PURE__ */ C.jsx(
  WI,
  {
    elements: t,
    renderElement: (e) => /* @__PURE__ */ C.jsx(Xae, { element: e.element })
  }
), Jae = ({ elements: t }) => {
  if (!t.length)
    return null;
  const e = t.reduce(
    (n, r) => (n[r.type] || (n[r.type] = []), n[r.type].push(r), n),
    {}
  );
  return /* @__PURE__ */ C.jsxs(fn, { gap: 1, mb: 2, children: [
    e.image?.length ? /* @__PURE__ */ C.jsx(BU, { items: e.image }) : null,
    e.text?.length ? /* @__PURE__ */ C.jsx(Bne, { items: e.text }) : null,
    e.pdf?.length ? /* @__PURE__ */ C.jsx(GU, { items: e.pdf }) : null,
    e.audio?.length ? /* @__PURE__ */ C.jsx(nU, { items: e.audio }) : null,
    e.video?.length ? /* @__PURE__ */ C.jsx(Zae, { items: e.video }) : null,
    e.file?.length ? /* @__PURE__ */ C.jsx(MU, { items: e.file }) : null,
    e.plotly?.length ? /* @__PURE__ */ C.jsx(qU, { items: e.plotly }) : null,
    e.dataframe?.length ? /* @__PURE__ */ C.jsx(iU, { items: e.dataframe }) : null
  ] });
}, eie = 50, tie = 3e3, ih = gs(
  ({ message: t, elements: e, preserveSize: n, allowHtml: r, latex: a }) => {
    let i = 0, s = 0;
    const l = t.streaming && t.output ? t.output + vN : t.output, {
      preparedContent: c,
      inlinedElements: d,
      refElements: p
    } = Oy({
      elements: e,
      id: t.id,
      content: l,
      language: t.language
    });
    i += c.split(`
`).length, s += c.length;
    const _ = t.type.includes("message"), f = /* @__PURE__ */ C.jsx(
      iE,
      {
        allowHtml: r,
        latex: a,
        refElements: p,
        children: _ ? c : `#### Output:     
${c}`
      }
    );
    let g;
    if (t.input && t.showInput) {
      const A = t.streaming && t.input ? t.input + vN : t.input, { preparedContent: I, refElements: x } = Oy({
        elements: e,
        id: t.id,
        content: A,
        language: typeof t.showInput == "string" ? t.showInput : void 0
      });
      i += I.split(`
`).length, s += I.length, g = /* @__PURE__ */ C.jsx(
        iE,
        {
          allowHtml: r,
          latex: a,
          refElements: x,
          children: `#### Input:  
${I}`
        }
      );
    }
    const E = /* @__PURE__ */ C.jsxs(
      _s,
      {
        sx: {
          minHeight: "20px",
          fontSize: "1rem",
          fontFamily: (A) => A.typography.fontFamily,
          overflowX: "auto"
        },
        component: "div",
        children: [
          g,
          g && f ? /* @__PURE__ */ C.jsx(XP, { sx: { my: 1 } }) : null,
          f
        ]
      }
    ), R = i > eie || s > tie ? /* @__PURE__ */ C.jsx(eU, { defaultExpandAll: n, children: E }) : E;
    return /* @__PURE__ */ C.jsxs(fn, { className: "message-content", width: "100%", children: [
      g || c ? R : null,
      /* @__PURE__ */ C.jsx(Jae, { elements: d })
    ] });
  }
), Jd = () => window.theme?.layout === "wide" ? "min(60rem, 100vw)" : "min(48rem, 100vw)", nie = ql(vP)(() => ({
  borderRadius: 5,
  width: "100px"
}));
function rie({ show: t }) {
  const e = Jd();
  return /* @__PURE__ */ C.jsx(CP, { in: t, children: /* @__PURE__ */ C.jsx(
    mn,
    {
      sx: {
        maxWidth: e,
        width: "100%",
        mx: "auto",
        borderRadius: "1rem",
        px: 2,
        boxSizing: "border-box",
        height: 3,
        color: "text.primary"
      },
      children: /* @__PURE__ */ C.jsx(nie, { color: "inherit" })
    }
  ) });
}
const aie = ["on_chat_start", "on_message", "on_audio_end"], YD = (t) => t.steps?.some(
  (e) => e.type === "tool" || e.type.includes("message") || YD(e)
) || !1, zD = (t) => t.steps?.some(
  (e) => e.type === "assistant_message" || zD(e)
) || !1, Zs = gs(
  ({ messages: t, elements: e, actions: n, indent: r, isRunning: a, scorableRun: i }) => {
    const s = qn(Hi), { config: l } = ua();
    return /* @__PURE__ */ C.jsx(C.Fragment, { children: t.map((c) => {
      if (aie.includes(c.name)) {
        const d = !c.end && !c.isError && s.loading, p = l?.ui.cot === "tool_call", _ = l?.ui.cot === "hidden", f = p ? d && !YD(c) : !1, g = _ ? d && !zD(c) : !1, E = !d && c.name !== "on_chat_start" ? c : void 0;
        return /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
          c.steps?.length ? /* @__PURE__ */ C.jsx(
            Zs,
            {
              messages: c.steps,
              elements: e,
              actions: n,
              indent: r,
              isRunning: d,
              scorableRun: E
            },
            c.id
          ) : null,
          /* @__PURE__ */ C.jsx(
            rie,
            {
              show: f || g
            },
            c.id + "loader"
          )
        ] });
      } else {
        const d = c.type === "run" ? c : i, p = c === d?.steps?.findLast(
          (g) => g.type === "assistant_message"
        ), _ = t.findLast((g) => g.type === "assistant_message") === c, f = p || _;
        return /* @__PURE__ */ C.jsx(
          $ie,
          {
            message: c,
            elements: e,
            actions: n,
            indent: r,
            isRunning: a,
            scorableRun: d,
            isScorable: f
          },
          c.id
        );
      }
    }) });
  }
);
function iie() {
  if (console && console.warn) {
    for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
      e[n] = arguments[n];
    typeof e[0] == "string" && (e[0] = `react-i18next:: ${e[0]}`), console.warn(...e);
  }
}
const DN = {};
function uE() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  typeof e[0] == "string" && DN[e[0]] || (typeof e[0] == "string" && (DN[e[0]] = /* @__PURE__ */ new Date()), iie(...e));
}
const qD = (t, e) => () => {
  if (t.isInitialized)
    e();
  else {
    const n = () => {
      setTimeout(() => {
        t.off("initialized", n);
      }, 0), e();
    };
    t.on("initialized", n);
  }
};
function wN(t, e, n) {
  t.loadNamespaces(e, qD(t, n));
}
function LN(t, e, n, r) {
  typeof n == "string" && (n = [n]), n.forEach((a) => {
    t.options.ns.indexOf(a) < 0 && t.options.ns.push(a);
  }), t.loadLanguages(e, qD(t, r));
}
function sie(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const r = e.languages[0], a = e.options ? e.options.fallbackLng : !1, i = e.languages[e.languages.length - 1];
  if (r.toLowerCase() === "cimode") return !0;
  const s = (l, c) => {
    const d = e.services.backendConnector.state[`${l}|${c}`];
    return d === -1 || d === 2;
  };
  return n.bindI18n && n.bindI18n.indexOf("languageChanging") > -1 && e.services.backendConnector.backend && e.isLanguageChangingTo && !s(e.isLanguageChangingTo, t) ? !1 : !!(e.hasResourceBundle(r, t) || !e.services.backendConnector.backend || e.options.resources && !e.options.partialBundledLanguages || s(r, t) && (!a || s(i, t)));
}
function oie(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  return !e.languages || !e.languages.length ? (uE("i18n.languages were undefined or empty", e.languages), !0) : e.options.ignoreJSONStructure !== void 0 ? e.hasLoadedNamespace(t, {
    lng: n.lng,
    precheck: (a, i) => {
      if (n.bindI18n && n.bindI18n.indexOf("languageChanging") > -1 && a.services.backendConnector.backend && a.isLanguageChangingTo && !i(a.isLanguageChangingTo, t)) return !1;
    }
  }) : sie(t, e, n);
}
const lie = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g, cie = {
  "&amp;": "&",
  "&#38;": "&",
  "&lt;": "<",
  "&#60;": "<",
  "&gt;": ">",
  "&#62;": ">",
  "&apos;": "'",
  "&#39;": "'",
  "&quot;": '"',
  "&#34;": '"',
  "&nbsp;": " ",
  "&#160;": " ",
  "&copy;": "©",
  "&#169;": "©",
  "&reg;": "®",
  "&#174;": "®",
  "&hellip;": "…",
  "&#8230;": "…",
  "&#x2F;": "/",
  "&#47;": "/"
}, uie = (t) => cie[t], die = (t) => t.replace(lie, uie);
let dE = {
  bindI18n: "languageChanged",
  bindI18nStore: "",
  transEmptyNodeValue: "",
  transSupportBasicHtmlNodes: !0,
  transWrapTextNodes: "",
  transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
  useSuspense: !0,
  unescape: die
};
function pie() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  dE = {
    ...dE,
    ...t
  };
}
function _ie() {
  return dE;
}
let VD;
function mie(t) {
  VD = t;
}
function fie() {
  return VD;
}
const gie = {
  type: "3rdParty",
  init(t) {
    pie(t.options.react), mie(t);
  }
}, hie = so();
class Eie {
  constructor() {
    this.usedNamespaces = {};
  }
  addUsedNamespaces(e) {
    e.forEach((n) => {
      this.usedNamespaces[n] || (this.usedNamespaces[n] = !0);
    });
  }
  getUsedNamespaces() {
    return Object.keys(this.usedNamespaces);
  }
}
const Sie = (t, e) => {
  const n = un();
  return wn(() => {
    n.current = t;
  }, [t, e]), n.current;
};
function $D(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const {
    i18n: n
  } = e, {
    i18n: r,
    defaultNS: a
  } = qn(hie) || {}, i = n || r || fie();
  if (i && !i.reportNamespaces && (i.reportNamespaces = new Eie()), !i) {
    uE("You will need to pass in an i18next instance by using initReactI18next");
    const x = (D, L) => typeof L == "string" ? L : L && typeof L == "object" && typeof L.defaultValue == "string" ? L.defaultValue : Array.isArray(D) ? D[D.length - 1] : D, P = [x, {}, !1];
    return P.t = x, P.i18n = {}, P.ready = !1, P;
  }
  i.options.react && i.options.react.wait !== void 0 && uE("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
  const s = {
    ..._ie(),
    ...i.options.react,
    ...e
  }, {
    useSuspense: l,
    keyPrefix: c
  } = s;
  let d = a || i.options && i.options.defaultNS;
  d = typeof d == "string" ? [d] : d || ["translation"], i.reportNamespaces.addUsedNamespaces && i.reportNamespaces.addUsedNamespaces(d);
  const p = (i.isInitialized || i.initializedStoreOnce) && d.every((x) => oie(x, i, s));
  function _() {
    return i.getFixedT(e.lng || null, s.nsMode === "fallback" ? d : d[0], c);
  }
  const [f, g] = Hn(_);
  let E = d.join();
  e.lng && (E = `${e.lng}${E}`);
  const T = Sie(E), R = un(!0);
  wn(() => {
    const {
      bindI18n: x,
      bindI18nStore: P
    } = s;
    R.current = !0, !p && !l && (e.lng ? LN(i, e.lng, d, () => {
      R.current && g(_);
    }) : wN(i, d, () => {
      R.current && g(_);
    })), p && T && T !== E && R.current && g(_);
    function D() {
      R.current && g(_);
    }
    return x && i && i.on(x, D), P && i && i.store.on(P, D), () => {
      R.current = !1, x && i && x.split(" ").forEach((L) => i.off(L, D)), P && i && P.split(" ").forEach((L) => i.store.off(L, D));
    };
  }, [i, E]);
  const A = un(!0);
  wn(() => {
    R.current && !A.current && g(_), A.current = !1;
  }, [i, c]);
  const I = [f, i, p];
  if (I.t = f, I.i18n = i, I.ready = p, p || !p && !l) return I;
  throw new Promise((x) => {
    e.lng ? LN(i, e.lng, d, () => x()) : wN(i, d, () => x());
  });
}
const Yn = ({ path: t, options: e, suffix: n }) => {
  const { t: r, i18n: a } = $D();
  return a.exists(t, e) ? /* @__PURE__ */ C.jsxs("span", { children: [
    r(t, e),
    n
  ] }) : /* @__PURE__ */ C.jsx(RP, { variant: "text", width: 20 });
}, K1 = () => {
  const { t, ready: e, i18n: n } = $D();
  return {
    t: (r, a) => n.exists(r, a) ? t(r, a) : "...",
    ready: e,
    i18n: n
  };
};
function bie({
  step: t,
  children: e,
  isRunning: n
}) {
  const [r, a] = Hn(!1), [i, s] = Hn(!1), l = Cn(() => n && t.start && !t.end && !t.isError, [t, n]), c = t.output || t.steps?.length, d = t.isError, p = t.name;
  return /* @__PURE__ */ C.jsxs(fn, { flexGrow: 1, direction: "column", gap: 1, width: 0, children: [
    /* @__PURE__ */ C.jsxs(
      Zt,
      {
        display: "flex",
        position: "relative",
        alignItems: "center",
        onMouseOver: () => s(!0),
        onMouseOut: () => s(!1),
        onClick: () => a(!r),
        id: `step-${p}`,
        children: [
          /* @__PURE__ */ C.jsxs(Zt, { children: [
            /* @__PURE__ */ C.jsx(
              _s,
              {
                variant: "button",
                sx: {
                  textTransform: "none",
                  cursor: c ? "pointer" : "default",
                  color: d ? "error.main" : i ? "text.primary" : "text.secondary",
                  fontFamily: (_) => _.typography.fontFamily
                },
                children: l ? /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
                  /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.detailsButton.using" }),
                  " ",
                  p
                ] }) : /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
                  /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.detailsButton.used" }),
                  " ",
                  p
                ] })
              }
            ),
            " ",
            l && /* @__PURE__ */ C.jsx(
              u7,
              {
                color: "inherit",
                sx: { borderRadius: "1rem", height: "3px" }
              }
            )
          ] }),
          c && (i || r) ? r ? /* @__PURE__ */ C.jsx(HI, { sx: { height: 18, with: 18, cursor: "pointer" } }) : /* @__PURE__ */ C.jsx(WE, { sx: { height: 18, with: 18, cursor: "pointer" } }) : null
        ]
      }
    ),
    r && /* @__PURE__ */ C.jsx(
      Zt,
      {
        flexGrow: 1,
        pl: 1,
        sx: {
          borderBottomLeftRadius: "10px",
          borderLeft: (_) => `1px solid ${_.palette.text.secondary}`,
          borderBottom: (_) => `1px solid ${_.palette.text.secondary}`
        },
        children: e
      }
    )
  ] });
}
const Tie = ({ children: t, ...e }) => /* @__PURE__ */ C.jsx("span", { children: /* @__PURE__ */ C.jsx(
  Td,
  {
    sx: {
      textTransform: "none",
      color: (n) => n.palette.mode === "dark" ? "text.primary" : n.palette.primary.main,
      background: (n) => n.palette.mode === "dark" ? Bt[700] : n.palette.primary.light,
      "&:hover": {
        background: (n) => n.palette.mode === "dark" ? Bt[700] : n.palette.primary.light
      }
    },
    ...e,
    children: t
  }
) }), yie = (t) => /* @__PURE__ */ C.jsx(xr, { children: /* @__PURE__ */ C.jsxs(
  "svg",
  {
    ...t,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" }),
      /* @__PURE__ */ C.jsx("path", { d: "m15 5 4 4" })
    ]
  }
) });
function vie({
  message: t,
  children: e
}) {
  const n = ua(), { askUser: r, loading: a } = qn(Hi), { editMessage: i } = zi(), s = Yt(Vl), l = a || !!r, [c, d] = Hn(!1), p = un(null), _ = !!n.config?.features.edit_message, f = () => {
    if (p.current) {
      const g = p.current.value;
      s((E) => {
        const T = E.findIndex((A) => A.id === t.id);
        if (T === -1)
          return E;
        const R = E.slice(0, T + 1);
        return R[T].steps = [], R;
      }), d(!1), i({ ...t, output: g });
    }
  };
  return /* @__PURE__ */ C.jsx(mn, { display: "flex", flexDirection: "column", width: "100%", children: /* @__PURE__ */ C.jsxs(
    mn,
    {
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
      gap: 1,
      width: "100%",
      sx: {
        "&:hover .edit-icon": {
          visibility: "visible"
        }
      },
      children: [
        !c && _ && /* @__PURE__ */ C.jsx(
          zl,
          {
            sx: {
              ml: "auto",
              visibility: "hidden"
            },
            className: "edit-icon",
            onClick: () => d(!0),
            disabled: l,
            children: /* @__PURE__ */ C.jsx(yie, { sx: { height: 16, width: 16 } })
          }
        ),
        /* @__PURE__ */ C.jsx(
          mn,
          {
            sx: {
              px: 2.5,
              position: "relative",
              borderRadius: "1.5rem",
              backgroundColor: "background.paper",
              width: c ? "100%" : "auto",
              maxWidth: c ? "100%" : "70%",
              flexGrow: c ? 1 : 0,
              ml: _ ? "default" : "auto"
            },
            children: c ? /* @__PURE__ */ C.jsxs(Fa, { py: 1.5, children: [
              /* @__PURE__ */ C.jsx(
                v2,
                {
                  id: "edit-chat-input",
                  multiline: !0,
                  autoFocus: !0,
                  variant: "standard",
                  autoComplete: "off",
                  defaultValue: t.output,
                  fullWidth: !0,
                  inputRef: p,
                  InputProps: {
                    disableUnderline: !0,
                    sx: {
                      pl: 0,
                      width: "100%"
                    }
                  }
                }
              ),
              /* @__PURE__ */ C.jsxs(mn, { display: "flex", justifyContent: "flex-end", gap: 1, children: [
                /* @__PURE__ */ C.jsx(Tie, { onClick: () => d(!1), children: /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.newChatDialog.cancel" }) }),
                /* @__PURE__ */ C.jsx(
                  PI,
                  {
                    className: "confirm-edit",
                    disabled: l,
                    variant: "outlined",
                    onClick: f,
                    children: /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.newChatDialog.confirm" })
                  }
                )
              ] })
            ] }) : e
          }
        )
      ]
    }
  ) });
}
const Cie = {
  type: "logger",
  log(t) {
    this.output("log", t);
  },
  warn(t) {
    this.output("warn", t);
  },
  error(t) {
    this.output("error", t);
  },
  output(t, e) {
    console && console[t] && console[t].apply(console, e);
  }
};
class _d {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(e, n);
  }
  init(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = n.prefix || "i18next:", this.logger = e || Cie, this.options = n, this.debug = n.debug;
  }
  log() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "log", "", !0);
  }
  warn() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "warn", "", !0);
  }
  error() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "error", "");
  }
  deprecate() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "warn", "WARNING DEPRECATED: ", !0);
  }
  forward(e, n, r, a) {
    return a && !this.debug ? null : (typeof e[0] == "string" && (e[0] = `${r}${this.prefix} ${e[0]}`), this.logger[n](e));
  }
  create(e) {
    return new _d(this.logger, {
      prefix: `${this.prefix}:${e}:`,
      ...this.options
    });
  }
  clone(e) {
    return e = e || this.options, e.prefix = e.prefix || this.prefix, new _d(this.logger, e);
  }
}
var ka = new _d();
class ep {
  constructor() {
    this.observers = {};
  }
  on(e, n) {
    return e.split(" ").forEach((r) => {
      this.observers[r] = this.observers[r] || [], this.observers[r].push(n);
    }), this;
  }
  off(e, n) {
    if (this.observers[e]) {
      if (!n) {
        delete this.observers[e];
        return;
      }
      this.observers[e] = this.observers[e].filter((r) => r !== n);
    }
  }
  emit(e) {
    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), a = 1; a < n; a++)
      r[a - 1] = arguments[a];
    this.observers[e] && [].concat(this.observers[e]).forEach((s) => {
      s(...r);
    }), this.observers["*"] && [].concat(this.observers["*"]).forEach((s) => {
      s.apply(s, [e, ...r]);
    });
  }
}
function dl() {
  let t, e;
  const n = new Promise((r, a) => {
    t = r, e = a;
  });
  return n.resolve = t, n.reject = e, n;
}
function MN(t) {
  return t == null ? "" : "" + t;
}
function Rie(t, e, n) {
  t.forEach((r) => {
    e[r] && (n[r] = e[r]);
  });
}
function Q1(t, e, n) {
  function r(s) {
    return s && s.indexOf("###") > -1 ? s.replace(/###/g, ".") : s;
  }
  function a() {
    return !t || typeof t == "string";
  }
  const i = typeof e != "string" ? [].concat(e) : e.split(".");
  for (; i.length > 1; ) {
    if (a()) return {};
    const s = r(i.shift());
    !t[s] && n && (t[s] = new n()), Object.prototype.hasOwnProperty.call(t, s) ? t = t[s] : t = {};
  }
  return a() ? {} : {
    obj: t,
    k: r(i.shift())
  };
}
function kN(t, e, n) {
  const {
    obj: r,
    k: a
  } = Q1(t, e, Object);
  r[a] = n;
}
function Aie(t, e, n, r) {
  const {
    obj: a,
    k: i
  } = Q1(t, e, Object);
  a[i] = a[i] || [], a[i].push(n);
}
function md(t, e) {
  const {
    obj: n,
    k: r
  } = Q1(t, e);
  if (n)
    return n[r];
}
function Oie(t, e, n) {
  const r = md(t, n);
  return r !== void 0 ? r : md(e, n);
}
function WD(t, e, n) {
  for (const r in e)
    r !== "__proto__" && r !== "constructor" && (r in t ? typeof t[r] == "string" || t[r] instanceof String || typeof e[r] == "string" || e[r] instanceof String ? n && (t[r] = e[r]) : WD(t[r], e[r], n) : t[r] = e[r]);
  return t;
}
function Vs(t) {
  return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var Nie = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function Iie(t) {
  return typeof t == "string" ? t.replace(/[&<>"'\/]/g, (e) => Nie[e]) : t;
}
const xie = [" ", ",", "?", "!", ";"];
function Die(t, e, n) {
  e = e || "", n = n || "";
  const r = xie.filter((s) => e.indexOf(s) < 0 && n.indexOf(s) < 0);
  if (r.length === 0) return !0;
  const a = new RegExp(`(${r.map((s) => s === "?" ? "\\?" : s).join("|")})`);
  let i = !a.test(t);
  if (!i) {
    const s = t.indexOf(n);
    s > 0 && !a.test(t.substring(0, s)) && (i = !0);
  }
  return i;
}
function fd(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!t) return;
  if (t[e]) return t[e];
  const r = e.split(n);
  let a = t;
  for (let i = 0; i < r.length; ++i) {
    if (!a || typeof a[r[i]] == "string" && i + 1 < r.length)
      return;
    if (a[r[i]] === void 0) {
      let s = 2, l = r.slice(i, i + s).join(n), c = a[l];
      for (; c === void 0 && r.length > i + s; )
        s++, l = r.slice(i, i + s).join(n), c = a[l];
      if (c === void 0) return;
      if (c === null) return null;
      if (e.endsWith(l)) {
        if (typeof c == "string") return c;
        if (l && typeof c[l] == "string") return c[l];
      }
      const d = r.slice(i + s).join(n);
      return d ? fd(c, d, n) : void 0;
    }
    a = a[r[i]];
  }
  return a;
}
function gd(t) {
  return t && t.indexOf("_") > 0 ? t.replace("_", "-") : t;
}
class PN extends ep {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super(), this.data = e || {}, this.options = n, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.options.ignoreJSONStructure === void 0 && (this.options.ignoreJSONStructure = !0);
  }
  addNamespaces(e) {
    this.options.ns.indexOf(e) < 0 && this.options.ns.push(e);
  }
  removeNamespaces(e) {
    const n = this.options.ns.indexOf(e);
    n > -1 && this.options.ns.splice(n, 1);
  }
  getResource(e, n, r) {
    let a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const i = a.keySeparator !== void 0 ? a.keySeparator : this.options.keySeparator, s = a.ignoreJSONStructure !== void 0 ? a.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let l = [e, n];
    r && typeof r != "string" && (l = l.concat(r)), r && typeof r == "string" && (l = l.concat(i ? r.split(i) : r)), e.indexOf(".") > -1 && (l = e.split("."));
    const c = md(this.data, l);
    return c || !s || typeof r != "string" ? c : fd(this.data && this.data[e] && this.data[e][n], r, i);
  }
  addResource(e, n, r, a) {
    let i = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: !1
    };
    const s = i.keySeparator !== void 0 ? i.keySeparator : this.options.keySeparator;
    let l = [e, n];
    r && (l = l.concat(s ? r.split(s) : r)), e.indexOf(".") > -1 && (l = e.split("."), a = n, n = l[1]), this.addNamespaces(n), kN(this.data, l, a), i.silent || this.emit("added", e, n, r, a);
  }
  addResources(e, n, r) {
    let a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: !1
    };
    for (const i in r)
      (typeof r[i] == "string" || Object.prototype.toString.apply(r[i]) === "[object Array]") && this.addResource(e, n, i, r[i], {
        silent: !0
      });
    a.silent || this.emit("added", e, n, r);
  }
  addResourceBundle(e, n, r, a, i) {
    let s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: !1
    }, l = [e, n];
    e.indexOf(".") > -1 && (l = e.split("."), a = r, r = n, n = l[1]), this.addNamespaces(n);
    let c = md(this.data, l) || {};
    a ? WD(c, r, i) : c = {
      ...c,
      ...r
    }, kN(this.data, l, c), s.silent || this.emit("added", e, n, r);
  }
  removeResourceBundle(e, n) {
    this.hasResourceBundle(e, n) && delete this.data[e][n], this.removeNamespaces(n), this.emit("removed", e, n);
  }
  hasResourceBundle(e, n) {
    return this.getResource(e, n) !== void 0;
  }
  getResourceBundle(e, n) {
    return n || (n = this.options.defaultNS), this.options.compatibilityAPI === "v1" ? {
      ...this.getResource(e, n)
    } : this.getResource(e, n);
  }
  getDataByLanguage(e) {
    return this.data[e];
  }
  hasLanguageSomeTranslations(e) {
    const n = this.getDataByLanguage(e);
    return !!(n && Object.keys(n) || []).find((a) => n[a] && Object.keys(n[a]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}
var KD = {
  processors: {},
  addPostProcessor(t) {
    this.processors[t.name] = t;
  },
  handle(t, e, n, r, a) {
    return t.forEach((i) => {
      this.processors[i] && (e = this.processors[i].process(e, n, r, a));
    }), e;
  }
};
const FN = {};
class hd extends ep {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super(), Rie(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], e, this), this.options = n, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.logger = ka.create("translator");
  }
  changeLanguage(e) {
    e && (this.language = e);
  }
  exists(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (e == null)
      return !1;
    const r = this.resolve(e, n);
    return r && r.res !== void 0;
  }
  extractFromKey(e, n) {
    let r = n.nsSeparator !== void 0 ? n.nsSeparator : this.options.nsSeparator;
    r === void 0 && (r = ":");
    const a = n.keySeparator !== void 0 ? n.keySeparator : this.options.keySeparator;
    let i = n.ns || this.options.defaultNS || [];
    const s = r && e.indexOf(r) > -1, l = !this.options.userDefinedKeySeparator && !n.keySeparator && !this.options.userDefinedNsSeparator && !n.nsSeparator && !Die(e, r, a);
    if (s && !l) {
      const c = e.match(this.interpolator.nestingRegexp);
      if (c && c.length > 0)
        return {
          key: e,
          namespaces: i
        };
      const d = e.split(r);
      (r !== a || r === a && this.options.ns.indexOf(d[0]) > -1) && (i = d.shift()), e = d.join(a);
    }
    return typeof i == "string" && (i = [i]), {
      key: e,
      namespaces: i
    };
  }
  translate(e, n, r) {
    if (typeof n != "object" && this.options.overloadTranslationOptionHandler && (n = this.options.overloadTranslationOptionHandler(arguments)), typeof n == "object" && (n = {
      ...n
    }), n || (n = {}), e == null) return "";
    Array.isArray(e) || (e = [String(e)]);
    const a = n.returnDetails !== void 0 ? n.returnDetails : this.options.returnDetails, i = n.keySeparator !== void 0 ? n.keySeparator : this.options.keySeparator, {
      key: s,
      namespaces: l
    } = this.extractFromKey(e[e.length - 1], n), c = l[l.length - 1], d = n.lng || this.language, p = n.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (d && d.toLowerCase() === "cimode") {
      if (p) {
        const P = n.nsSeparator || this.options.nsSeparator;
        return a ? {
          res: `${c}${P}${s}`,
          usedKey: s,
          exactUsedKey: s,
          usedLng: d,
          usedNS: c,
          usedParams: this.getUsedParamsDetails(n)
        } : `${c}${P}${s}`;
      }
      return a ? {
        res: s,
        usedKey: s,
        exactUsedKey: s,
        usedLng: d,
        usedNS: c,
        usedParams: this.getUsedParamsDetails(n)
      } : s;
    }
    const _ = this.resolve(e, n);
    let f = _ && _.res;
    const g = _ && _.usedKey || s, E = _ && _.exactUsedKey || s, T = Object.prototype.toString.apply(f), R = ["[object Number]", "[object Function]", "[object RegExp]"], A = n.joinArrays !== void 0 ? n.joinArrays : this.options.joinArrays, I = !this.i18nFormat || this.i18nFormat.handleAsObject;
    if (I && f && (typeof f != "string" && typeof f != "boolean" && typeof f != "number") && R.indexOf(T) < 0 && !(typeof A == "string" && T === "[object Array]")) {
      if (!n.returnObjects && !this.options.returnObjects) {
        this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        const P = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(g, f, {
          ...n,
          ns: l
        }) : `key '${s} (${this.language})' returned an object instead of string.`;
        return a ? (_.res = P, _.usedParams = this.getUsedParamsDetails(n), _) : P;
      }
      if (i) {
        const P = T === "[object Array]", D = P ? [] : {}, L = P ? E : g;
        for (const K in f)
          if (Object.prototype.hasOwnProperty.call(f, K)) {
            const J = `${L}${i}${K}`;
            D[K] = this.translate(J, {
              ...n,
              joinArrays: !1,
              ns: l
            }), D[K] === J && (D[K] = f[K]);
          }
        f = D;
      }
    } else if (I && typeof A == "string" && T === "[object Array]")
      f = f.join(A), f && (f = this.extendTranslation(f, e, n, r));
    else {
      let P = !1, D = !1;
      const L = n.count !== void 0 && typeof n.count != "string", K = hd.hasDefaultValue(n), J = L ? this.pluralResolver.getSuffix(d, n.count, n) : "", X = n.ordinal && L ? this.pluralResolver.getSuffix(d, n.count, {
        ordinal: !1
      }) : "", $ = n[`defaultValue${J}`] || n[`defaultValue${X}`] || n.defaultValue;
      !this.isValidLookup(f) && K && (P = !0, f = $), this.isValidLookup(f) || (D = !0, f = s);
      const ce = (n.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && D ? void 0 : f, ve = K && $ !== f && this.options.updateMissing;
      if (D || P || ve) {
        if (this.logger.log(ve ? "updateKey" : "missingKey", d, c, s, ve ? $ : f), i) {
          const ne = this.resolve(s, {
            ...n,
            keySeparator: !1
          });
          ne && ne.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let ge = [];
        const fe = this.languageUtils.getFallbackCodes(this.options.fallbackLng, n.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && fe && fe[0])
          for (let ne = 0; ne < fe.length; ne++)
            ge.push(fe[ne]);
        else this.options.saveMissingTo === "all" ? ge = this.languageUtils.toResolveHierarchy(n.lng || this.language) : ge.push(n.lng || this.language);
        const Fe = (ne, se, z) => {
          const v = K && z !== f ? z : ce;
          this.options.missingKeyHandler ? this.options.missingKeyHandler(ne, c, se, v, ve, n) : this.backendConnector && this.backendConnector.saveMissing && this.backendConnector.saveMissing(ne, c, se, v, ve, n), this.emit("missingKey", ne, c, se, f);
        };
        this.options.saveMissing && (this.options.saveMissingPlurals && L ? ge.forEach((ne) => {
          this.pluralResolver.getSuffixes(ne, n).forEach((se) => {
            Fe([ne], s + se, n[`defaultValue${se}`] || $);
          });
        }) : Fe(ge, s, $));
      }
      f = this.extendTranslation(f, e, n, _, r), D && f === s && this.options.appendNamespaceToMissingKey && (f = `${c}:${s}`), (D || P) && this.options.parseMissingKeyHandler && (this.options.compatibilityAPI !== "v1" ? f = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${c}:${s}` : s, P ? f : void 0) : f = this.options.parseMissingKeyHandler(f));
    }
    return a ? (_.res = f, _.usedParams = this.getUsedParamsDetails(n), _) : f;
  }
  extendTranslation(e, n, r, a, i) {
    var s = this;
    if (this.i18nFormat && this.i18nFormat.parse)
      e = this.i18nFormat.parse(e, {
        ...this.options.interpolation.defaultVariables,
        ...r
      }, r.lng || this.language || a.usedLng, a.usedNS, a.usedKey, {
        resolved: a
      });
    else if (!r.skipInterpolation) {
      r.interpolation && this.interpolator.init({
        ...r,
        interpolation: {
          ...this.options.interpolation,
          ...r.interpolation
        }
      });
      const d = typeof e == "string" && (r && r.interpolation && r.interpolation.skipOnVariables !== void 0 ? r.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let p;
      if (d) {
        const f = e.match(this.interpolator.nestingRegexp);
        p = f && f.length;
      }
      let _ = r.replace && typeof r.replace != "string" ? r.replace : r;
      if (this.options.interpolation.defaultVariables && (_ = {
        ...this.options.interpolation.defaultVariables,
        ..._
      }), e = this.interpolator.interpolate(e, _, r.lng || this.language, r), d) {
        const f = e.match(this.interpolator.nestingRegexp), g = f && f.length;
        p < g && (r.nest = !1);
      }
      !r.lng && this.options.compatibilityAPI !== "v1" && a && a.res && (r.lng = a.usedLng), r.nest !== !1 && (e = this.interpolator.nest(e, function() {
        for (var f = arguments.length, g = new Array(f), E = 0; E < f; E++)
          g[E] = arguments[E];
        return i && i[0] === g[0] && !r.context ? (s.logger.warn(`It seems you are nesting recursively key: ${g[0]} in key: ${n[0]}`), null) : s.translate(...g, n);
      }, r)), r.interpolation && this.interpolator.reset();
    }
    const l = r.postProcess || this.options.postProcess, c = typeof l == "string" ? [l] : l;
    return e != null && c && c.length && r.applyPostProcessor !== !1 && (e = KD.handle(c, e, n, this.options && this.options.postProcessPassResolved ? {
      i18nResolved: {
        ...a,
        usedParams: this.getUsedParamsDetails(r)
      },
      ...r
    } : r, this)), e;
  }
  resolve(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r, a, i, s, l;
    return typeof e == "string" && (e = [e]), e.forEach((c) => {
      if (this.isValidLookup(r)) return;
      const d = this.extractFromKey(c, n), p = d.key;
      a = p;
      let _ = d.namespaces;
      this.options.fallbackNS && (_ = _.concat(this.options.fallbackNS));
      const f = n.count !== void 0 && typeof n.count != "string", g = f && !n.ordinal && n.count === 0 && this.pluralResolver.shouldUseIntlApi(), E = n.context !== void 0 && (typeof n.context == "string" || typeof n.context == "number") && n.context !== "", T = n.lngs ? n.lngs : this.languageUtils.toResolveHierarchy(n.lng || this.language, n.fallbackLng);
      _.forEach((R) => {
        this.isValidLookup(r) || (l = R, !FN[`${T[0]}-${R}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(l) && (FN[`${T[0]}-${R}`] = !0, this.logger.warn(`key "${a}" for languages "${T.join(", ")}" won't get resolved as namespace "${l}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), T.forEach((A) => {
          if (this.isValidLookup(r)) return;
          s = A;
          const I = [p];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys)
            this.i18nFormat.addLookupKeys(I, p, A, R, n);
          else {
            let P;
            f && (P = this.pluralResolver.getSuffix(A, n.count, n));
            const D = `${this.options.pluralSeparator}zero`, L = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (f && (I.push(p + P), n.ordinal && P.indexOf(L) === 0 && I.push(p + P.replace(L, this.options.pluralSeparator)), g && I.push(p + D)), E) {
              const K = `${p}${this.options.contextSeparator}${n.context}`;
              I.push(K), f && (I.push(K + P), n.ordinal && P.indexOf(L) === 0 && I.push(K + P.replace(L, this.options.pluralSeparator)), g && I.push(K + D));
            }
          }
          let x;
          for (; x = I.pop(); )
            this.isValidLookup(r) || (i = x, r = this.getResource(A, R, x, n));
        }));
      });
    }), {
      res: r,
      usedKey: a,
      exactUsedKey: i,
      usedLng: s,
      usedNS: l
    };
  }
  isValidLookup(e) {
    return e !== void 0 && !(!this.options.returnNull && e === null) && !(!this.options.returnEmptyString && e === "");
  }
  getResource(e, n, r) {
    let a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat.getResource(e, n, r, a) : this.resourceStore.getResource(e, n, r, a);
  }
  getUsedParamsDetails() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const n = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"], r = e.replace && typeof e.replace != "string";
    let a = r ? e.replace : e;
    if (r && typeof e.count < "u" && (a.count = e.count), this.options.interpolation.defaultVariables && (a = {
      ...this.options.interpolation.defaultVariables,
      ...a
    }), !r) {
      a = {
        ...a
      };
      for (const i of n)
        delete a[i];
    }
    return a;
  }
  static hasDefaultValue(e) {
    const n = "defaultValue";
    for (const r in e)
      if (Object.prototype.hasOwnProperty.call(e, r) && n === r.substring(0, n.length) && e[r] !== void 0)
        return !0;
    return !1;
  }
}
function sh(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
class BN {
  constructor(e) {
    this.options = e, this.supportedLngs = this.options.supportedLngs || !1, this.logger = ka.create("languageUtils");
  }
  getScriptPartFromCode(e) {
    if (e = gd(e), !e || e.indexOf("-") < 0) return null;
    const n = e.split("-");
    return n.length === 2 || (n.pop(), n[n.length - 1].toLowerCase() === "x") ? null : this.formatLanguageCode(n.join("-"));
  }
  getLanguagePartFromCode(e) {
    if (e = gd(e), !e || e.indexOf("-") < 0) return e;
    const n = e.split("-");
    return this.formatLanguageCode(n[0]);
  }
  formatLanguageCode(e) {
    if (typeof e == "string" && e.indexOf("-") > -1) {
      const n = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
      let r = e.split("-");
      return this.options.lowerCaseLng ? r = r.map((a) => a.toLowerCase()) : r.length === 2 ? (r[0] = r[0].toLowerCase(), r[1] = r[1].toUpperCase(), n.indexOf(r[1].toLowerCase()) > -1 && (r[1] = sh(r[1].toLowerCase()))) : r.length === 3 && (r[0] = r[0].toLowerCase(), r[1].length === 2 && (r[1] = r[1].toUpperCase()), r[0] !== "sgn" && r[2].length === 2 && (r[2] = r[2].toUpperCase()), n.indexOf(r[1].toLowerCase()) > -1 && (r[1] = sh(r[1].toLowerCase())), n.indexOf(r[2].toLowerCase()) > -1 && (r[2] = sh(r[2].toLowerCase()))), r.join("-");
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? e.toLowerCase() : e;
  }
  isSupportedCode(e) {
    return (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) && (e = this.getLanguagePartFromCode(e)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(e) > -1;
  }
  getBestMatchFromCodes(e) {
    if (!e) return null;
    let n;
    return e.forEach((r) => {
      if (n) return;
      const a = this.formatLanguageCode(r);
      (!this.options.supportedLngs || this.isSupportedCode(a)) && (n = a);
    }), !n && this.options.supportedLngs && e.forEach((r) => {
      if (n) return;
      const a = this.getLanguagePartFromCode(r);
      if (this.isSupportedCode(a)) return n = a;
      n = this.options.supportedLngs.find((i) => {
        if (i === a) return i;
        if (!(i.indexOf("-") < 0 && a.indexOf("-") < 0) && i.indexOf(a) === 0)
          return i;
      });
    }), n || (n = this.getFallbackCodes(this.options.fallbackLng)[0]), n;
  }
  getFallbackCodes(e, n) {
    if (!e) return [];
    if (typeof e == "function" && (e = e(n)), typeof e == "string" && (e = [e]), Object.prototype.toString.apply(e) === "[object Array]") return e;
    if (!n) return e.default || [];
    let r = e[n];
    return r || (r = e[this.getScriptPartFromCode(n)]), r || (r = e[this.formatLanguageCode(n)]), r || (r = e[this.getLanguagePartFromCode(n)]), r || (r = e.default), r || [];
  }
  toResolveHierarchy(e, n) {
    const r = this.getFallbackCodes(n || this.options.fallbackLng || [], e), a = [], i = (s) => {
      s && (this.isSupportedCode(s) ? a.push(s) : this.logger.warn(`rejecting language code not found in supportedLngs: ${s}`));
    };
    return typeof e == "string" && (e.indexOf("-") > -1 || e.indexOf("_") > -1) ? (this.options.load !== "languageOnly" && i(this.formatLanguageCode(e)), this.options.load !== "languageOnly" && this.options.load !== "currentOnly" && i(this.getScriptPartFromCode(e)), this.options.load !== "currentOnly" && i(this.getLanguagePartFromCode(e))) : typeof e == "string" && i(this.formatLanguageCode(e)), r.forEach((s) => {
      a.indexOf(s) < 0 && i(this.formatLanguageCode(s));
    }), a;
  }
}
let wie = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}], Lie = {
  1: function(t) {
    return +(t > 1);
  },
  2: function(t) {
    return +(t != 1);
  },
  3: function(t) {
    return 0;
  },
  4: function(t) {
    return t % 10 == 1 && t % 100 != 11 ? 0 : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2;
  },
  5: function(t) {
    return t == 0 ? 0 : t == 1 ? 1 : t == 2 ? 2 : t % 100 >= 3 && t % 100 <= 10 ? 3 : t % 100 >= 11 ? 4 : 5;
  },
  6: function(t) {
    return t == 1 ? 0 : t >= 2 && t <= 4 ? 1 : 2;
  },
  7: function(t) {
    return t == 1 ? 0 : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2;
  },
  8: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : t != 8 && t != 11 ? 2 : 3;
  },
  9: function(t) {
    return +(t >= 2);
  },
  10: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : t < 7 ? 2 : t < 11 ? 3 : 4;
  },
  11: function(t) {
    return t == 1 || t == 11 ? 0 : t == 2 || t == 12 ? 1 : t > 2 && t < 20 ? 2 : 3;
  },
  12: function(t) {
    return +(t % 10 != 1 || t % 100 == 11);
  },
  13: function(t) {
    return +(t !== 0);
  },
  14: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : t == 3 ? 2 : 3;
  },
  15: function(t) {
    return t % 10 == 1 && t % 100 != 11 ? 0 : t % 10 >= 2 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2;
  },
  16: function(t) {
    return t % 10 == 1 && t % 100 != 11 ? 0 : t !== 0 ? 1 : 2;
  },
  17: function(t) {
    return t == 1 || t % 10 == 1 && t % 100 != 11 ? 0 : 1;
  },
  18: function(t) {
    return t == 0 ? 0 : t == 1 ? 1 : 2;
  },
  19: function(t) {
    return t == 1 ? 0 : t == 0 || t % 100 > 1 && t % 100 < 11 ? 1 : t % 100 > 10 && t % 100 < 20 ? 2 : 3;
  },
  20: function(t) {
    return t == 1 ? 0 : t == 0 || t % 100 > 0 && t % 100 < 20 ? 1 : 2;
  },
  21: function(t) {
    return t % 100 == 1 ? 1 : t % 100 == 2 ? 2 : t % 100 == 3 || t % 100 == 4 ? 3 : 0;
  },
  22: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : (t < 0 || t > 10) && t % 10 == 0 ? 2 : 3;
  }
};
const Mie = ["v1", "v2", "v3"], kie = ["v4"], UN = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function Pie() {
  const t = {};
  return wie.forEach((e) => {
    e.lngs.forEach((n) => {
      t[n] = {
        numbers: e.nr,
        plurals: Lie[e.fc]
      };
    });
  }), t;
}
class Fie {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = e, this.options = n, this.logger = ka.create("pluralResolver"), (!this.options.compatibilityJSON || kie.includes(this.options.compatibilityJSON)) && (typeof Intl > "u" || !Intl.PluralRules) && (this.options.compatibilityJSON = "v3", this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")), this.rules = Pie();
  }
  addRule(e, n) {
    this.rules[e] = n;
  }
  getRule(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.shouldUseIntlApi())
      try {
        return new Intl.PluralRules(gd(e), {
          type: n.ordinal ? "ordinal" : "cardinal"
        });
      } catch {
        return;
      }
    return this.rules[e] || this.rules[this.languageUtils.getLanguagePartFromCode(e)];
  }
  needsPlural(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const r = this.getRule(e, n);
    return this.shouldUseIntlApi() ? r && r.resolvedOptions().pluralCategories.length > 1 : r && r.numbers.length > 1;
  }
  getPluralFormsOfKey(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(e, r).map((a) => `${n}${a}`);
  }
  getSuffixes(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const r = this.getRule(e, n);
    return r ? this.shouldUseIntlApi() ? r.resolvedOptions().pluralCategories.sort((a, i) => UN[a] - UN[i]).map((a) => `${this.options.prepend}${n.ordinal ? `ordinal${this.options.prepend}` : ""}${a}`) : r.numbers.map((a) => this.getSuffix(e, a, n)) : [];
  }
  getSuffix(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const a = this.getRule(e, r);
    return a ? this.shouldUseIntlApi() ? `${this.options.prepend}${r.ordinal ? `ordinal${this.options.prepend}` : ""}${a.select(n)}` : this.getSuffixRetroCompatible(a, n) : (this.logger.warn(`no plural rule found for: ${e}`), "");
  }
  getSuffixRetroCompatible(e, n) {
    const r = e.noAbs ? e.plurals(n) : e.plurals(Math.abs(n));
    let a = e.numbers[r];
    this.options.simplifyPluralSuffix && e.numbers.length === 2 && e.numbers[0] === 1 && (a === 2 ? a = "plural" : a === 1 && (a = ""));
    const i = () => this.options.prepend && a.toString() ? this.options.prepend + a.toString() : a.toString();
    return this.options.compatibilityJSON === "v1" ? a === 1 ? "" : typeof a == "number" ? `_plural_${a.toString()}` : i() : this.options.compatibilityJSON === "v2" || this.options.simplifyPluralSuffix && e.numbers.length === 2 && e.numbers[0] === 1 ? i() : this.options.prepend && r.toString() ? this.options.prepend + r.toString() : r.toString();
  }
  shouldUseIntlApi() {
    return !Mie.includes(this.options.compatibilityJSON);
  }
}
function GN(t, e, n) {
  let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".", a = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, i = Oie(t, e, n);
  return !i && a && typeof n == "string" && (i = fd(t, n, r), i === void 0 && (i = fd(e, n, r))), i;
}
class Bie {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = ka.create("interpolator"), this.options = e, this.format = e.interpolation && e.interpolation.format || ((n) => n), this.init(e);
  }
  init() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    e.interpolation || (e.interpolation = {
      escapeValue: !0
    });
    const n = e.interpolation;
    this.escape = n.escape !== void 0 ? n.escape : Iie, this.escapeValue = n.escapeValue !== void 0 ? n.escapeValue : !0, this.useRawValueToEscape = n.useRawValueToEscape !== void 0 ? n.useRawValueToEscape : !1, this.prefix = n.prefix ? Vs(n.prefix) : n.prefixEscaped || "{{", this.suffix = n.suffix ? Vs(n.suffix) : n.suffixEscaped || "}}", this.formatSeparator = n.formatSeparator ? n.formatSeparator : n.formatSeparator || ",", this.unescapePrefix = n.unescapeSuffix ? "" : n.unescapePrefix || "-", this.unescapeSuffix = this.unescapePrefix ? "" : n.unescapeSuffix || "", this.nestingPrefix = n.nestingPrefix ? Vs(n.nestingPrefix) : n.nestingPrefixEscaped || Vs("$t("), this.nestingSuffix = n.nestingSuffix ? Vs(n.nestingSuffix) : n.nestingSuffixEscaped || Vs(")"), this.nestingOptionsSeparator = n.nestingOptionsSeparator ? n.nestingOptionsSeparator : n.nestingOptionsSeparator || ",", this.maxReplaces = n.maxReplaces ? n.maxReplaces : 1e3, this.alwaysFormat = n.alwaysFormat !== void 0 ? n.alwaysFormat : !1, this.resetRegExp();
  }
  reset() {
    this.options && this.init(this.options);
  }
  resetRegExp() {
    const e = `${this.prefix}(.+?)${this.suffix}`;
    this.regexp = new RegExp(e, "g");
    const n = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;
    this.regexpUnescape = new RegExp(n, "g");
    const r = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;
    this.nestingRegexp = new RegExp(r, "g");
  }
  interpolate(e, n, r, a) {
    let i, s, l;
    const c = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    function d(E) {
      return E.replace(/\$/g, "$$$$");
    }
    const p = (E) => {
      if (E.indexOf(this.formatSeparator) < 0) {
        const I = GN(n, c, E, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(I, void 0, r, {
          ...a,
          ...n,
          interpolationkey: E
        }) : I;
      }
      const T = E.split(this.formatSeparator), R = T.shift().trim(), A = T.join(this.formatSeparator).trim();
      return this.format(GN(n, c, R, this.options.keySeparator, this.options.ignoreJSONStructure), A, r, {
        ...a,
        ...n,
        interpolationkey: R
      });
    };
    this.resetRegExp();
    const _ = a && a.missingInterpolationHandler || this.options.missingInterpolationHandler, f = a && a.interpolation && a.interpolation.skipOnVariables !== void 0 ? a.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    return [{
      regex: this.regexpUnescape,
      safeValue: (E) => d(E)
    }, {
      regex: this.regexp,
      safeValue: (E) => this.escapeValue ? d(this.escape(E)) : d(E)
    }].forEach((E) => {
      for (l = 0; i = E.regex.exec(e); ) {
        const T = i[1].trim();
        if (s = p(T), s === void 0)
          if (typeof _ == "function") {
            const A = _(e, i, a);
            s = typeof A == "string" ? A : "";
          } else if (a && Object.prototype.hasOwnProperty.call(a, T))
            s = "";
          else if (f) {
            s = i[0];
            continue;
          } else
            this.logger.warn(`missed to pass in variable ${T} for interpolating ${e}`), s = "";
        else typeof s != "string" && !this.useRawValueToEscape && (s = MN(s));
        const R = E.safeValue(s);
        if (e = e.replace(i[0], R), f ? (E.regex.lastIndex += s.length, E.regex.lastIndex -= i[0].length) : E.regex.lastIndex = 0, l++, l >= this.maxReplaces)
          break;
      }
    }), e;
  }
  nest(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, a, i, s;
    function l(c, d) {
      const p = this.nestingOptionsSeparator;
      if (c.indexOf(p) < 0) return c;
      const _ = c.split(new RegExp(`${p}[ ]*{`));
      let f = `{${_[1]}`;
      c = _[0], f = this.interpolate(f, s);
      const g = f.match(/'/g), E = f.match(/"/g);
      (g && g.length % 2 === 0 && !E || E.length % 2 !== 0) && (f = f.replace(/'/g, '"'));
      try {
        s = JSON.parse(f), d && (s = {
          ...d,
          ...s
        });
      } catch (T) {
        return this.logger.warn(`failed parsing options string in nesting for key ${c}`, T), `${c}${p}${f}`;
      }
      return delete s.defaultValue, c;
    }
    for (; a = this.nestingRegexp.exec(e); ) {
      let c = [];
      s = {
        ...r
      }, s = s.replace && typeof s.replace != "string" ? s.replace : s, s.applyPostProcessor = !1, delete s.defaultValue;
      let d = !1;
      if (a[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(a[1])) {
        const p = a[1].split(this.formatSeparator).map((_) => _.trim());
        a[1] = p.shift(), c = p, d = !0;
      }
      if (i = n(l.call(this, a[1].trim(), s), s), i && a[0] === e && typeof i != "string") return i;
      typeof i != "string" && (i = MN(i)), i || (this.logger.warn(`missed to resolve ${a[1]} for nesting ${e}`), i = ""), d && (i = c.reduce((p, _) => this.format(p, _, r.lng, {
        ...r,
        interpolationkey: a[1].trim()
      }), i.trim())), e = e.replace(a[0], i), this.regexp.lastIndex = 0;
    }
    return e;
  }
}
function Uie(t) {
  let e = t.toLowerCase().trim();
  const n = {};
  if (t.indexOf("(") > -1) {
    const r = t.split("(");
    e = r[0].toLowerCase().trim();
    const a = r[1].substring(0, r[1].length - 1);
    e === "currency" && a.indexOf(":") < 0 ? n.currency || (n.currency = a.trim()) : e === "relativetime" && a.indexOf(":") < 0 ? n.range || (n.range = a.trim()) : a.split(";").forEach((s) => {
      if (!s) return;
      const [l, ...c] = s.split(":"), d = c.join(":").trim().replace(/^'+|'+$/g, "");
      n[l.trim()] || (n[l.trim()] = d), d === "false" && (n[l.trim()] = !1), d === "true" && (n[l.trim()] = !0), isNaN(d) || (n[l.trim()] = parseInt(d, 10));
    });
  }
  return {
    formatName: e,
    formatOptions: n
  };
}
function $s(t) {
  const e = {};
  return function(r, a, i) {
    const s = a + JSON.stringify(i);
    let l = e[s];
    return l || (l = t(gd(a), i), e[s] = l), l(r);
  };
}
class Gie {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = ka.create("formatter"), this.options = e, this.formats = {
      number: $s((n, r) => {
        const a = new Intl.NumberFormat(n, {
          ...r
        });
        return (i) => a.format(i);
      }),
      currency: $s((n, r) => {
        const a = new Intl.NumberFormat(n, {
          ...r,
          style: "currency"
        });
        return (i) => a.format(i);
      }),
      datetime: $s((n, r) => {
        const a = new Intl.DateTimeFormat(n, {
          ...r
        });
        return (i) => a.format(i);
      }),
      relativetime: $s((n, r) => {
        const a = new Intl.RelativeTimeFormat(n, {
          ...r
        });
        return (i) => a.format(i, r.range || "day");
      }),
      list: $s((n, r) => {
        const a = new Intl.ListFormat(n, {
          ...r
        });
        return (i) => a.format(i);
      })
    }, this.init(e);
  }
  init(e) {
    const r = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    }).interpolation;
    this.formatSeparator = r.formatSeparator ? r.formatSeparator : r.formatSeparator || ",";
  }
  add(e, n) {
    this.formats[e.toLowerCase().trim()] = n;
  }
  addCached(e, n) {
    this.formats[e.toLowerCase().trim()] = $s(n);
  }
  format(e, n, r) {
    let a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return n.split(this.formatSeparator).reduce((l, c) => {
      const {
        formatName: d,
        formatOptions: p
      } = Uie(c);
      if (this.formats[d]) {
        let _ = l;
        try {
          const f = a && a.formatParams && a.formatParams[a.interpolationkey] || {}, g = f.locale || f.lng || a.locale || a.lng || r;
          _ = this.formats[d](l, g, {
            ...p,
            ...a,
            ...f
          });
        } catch (f) {
          this.logger.warn(f);
        }
        return _;
      } else
        this.logger.warn(`there was no format function for ${d}`);
      return l;
    }, e);
  }
}
function Hie(t, e) {
  t.pending[e] !== void 0 && (delete t.pending[e], t.pendingCount--);
}
class Yie extends ep {
  constructor(e, n, r) {
    let a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super(), this.backend = e, this.store = n, this.services = r, this.languageUtils = r.languageUtils, this.options = a, this.logger = ka.create("backendConnector"), this.waitingReads = [], this.maxParallelReads = a.maxParallelReads || 10, this.readingCalls = 0, this.maxRetries = a.maxRetries >= 0 ? a.maxRetries : 5, this.retryTimeout = a.retryTimeout >= 1 ? a.retryTimeout : 350, this.state = {}, this.queue = [], this.backend && this.backend.init && this.backend.init(r, a.backend, a);
  }
  queueLoad(e, n, r, a) {
    const i = {}, s = {}, l = {}, c = {};
    return e.forEach((d) => {
      let p = !0;
      n.forEach((_) => {
        const f = `${d}|${_}`;
        !r.reload && this.store.hasResourceBundle(d, _) ? this.state[f] = 2 : this.state[f] < 0 || (this.state[f] === 1 ? s[f] === void 0 && (s[f] = !0) : (this.state[f] = 1, p = !1, s[f] === void 0 && (s[f] = !0), i[f] === void 0 && (i[f] = !0), c[_] === void 0 && (c[_] = !0)));
      }), p || (l[d] = !0);
    }), (Object.keys(i).length || Object.keys(s).length) && this.queue.push({
      pending: s,
      pendingCount: Object.keys(s).length,
      loaded: {},
      errors: [],
      callback: a
    }), {
      toLoad: Object.keys(i),
      pending: Object.keys(s),
      toLoadLanguages: Object.keys(l),
      toLoadNamespaces: Object.keys(c)
    };
  }
  loaded(e, n, r) {
    const a = e.split("|"), i = a[0], s = a[1];
    n && this.emit("failedLoading", i, s, n), r && this.store.addResourceBundle(i, s, r), this.state[e] = n ? -1 : 2;
    const l = {};
    this.queue.forEach((c) => {
      Aie(c.loaded, [i], s), Hie(c, e), n && c.errors.push(n), c.pendingCount === 0 && !c.done && (Object.keys(c.loaded).forEach((d) => {
        l[d] || (l[d] = {});
        const p = c.loaded[d];
        p.length && p.forEach((_) => {
          l[d][_] === void 0 && (l[d][_] = !0);
        });
      }), c.done = !0, c.errors.length ? c.callback(c.errors) : c.callback());
    }), this.emit("loaded", l), this.queue = this.queue.filter((c) => !c.done);
  }
  read(e, n, r) {
    let a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, i = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout, s = arguments.length > 5 ? arguments[5] : void 0;
    if (!e.length) return s(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng: e,
        ns: n,
        fcName: r,
        tried: a,
        wait: i,
        callback: s
      });
      return;
    }
    this.readingCalls++;
    const l = (d, p) => {
      if (this.readingCalls--, this.waitingReads.length > 0) {
        const _ = this.waitingReads.shift();
        this.read(_.lng, _.ns, _.fcName, _.tried, _.wait, _.callback);
      }
      if (d && p && a < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, e, n, r, a + 1, i * 2, s);
        }, i);
        return;
      }
      s(d, p);
    }, c = this.backend[r].bind(this.backend);
    if (c.length === 2) {
      try {
        const d = c(e, n);
        d && typeof d.then == "function" ? d.then((p) => l(null, p)).catch(l) : l(null, d);
      } catch (d) {
        l(d);
      }
      return;
    }
    return c(e, n, l);
  }
  prepareLoading(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, a = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend)
      return this.logger.warn("No backend was added via i18next.use. Will not load resources."), a && a();
    typeof e == "string" && (e = this.languageUtils.toResolveHierarchy(e)), typeof n == "string" && (n = [n]);
    const i = this.queueLoad(e, n, r, a);
    if (!i.toLoad.length)
      return i.pending.length || a(), null;
    i.toLoad.forEach((s) => {
      this.loadOne(s);
    });
  }
  load(e, n, r) {
    this.prepareLoading(e, n, {}, r);
  }
  reload(e, n, r) {
    this.prepareLoading(e, n, {
      reload: !0
    }, r);
  }
  loadOne(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const r = e.split("|"), a = r[0], i = r[1];
    this.read(a, i, "read", void 0, void 0, (s, l) => {
      s && this.logger.warn(`${n}loading namespace ${i} for language ${a} failed`, s), !s && l && this.logger.log(`${n}loaded namespace ${i} for language ${a}`, l), this.loaded(e, s, l);
    });
  }
  saveMissing(e, n, r, a, i) {
    let s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {}, l = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(n)) {
      this.logger.warn(`did not save key "${r}" as the namespace "${n}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (!(r == null || r === "")) {
      if (this.backend && this.backend.create) {
        const c = {
          ...s,
          isUpdate: i
        }, d = this.backend.create.bind(this.backend);
        if (d.length < 6)
          try {
            let p;
            d.length === 5 ? p = d(e, n, r, a, c) : p = d(e, n, r, a), p && typeof p.then == "function" ? p.then((_) => l(null, _)).catch(l) : l(null, p);
          } catch (p) {
            l(p);
          }
        else
          d(e, n, r, a, l, c);
      }
      !e || !e[0] || this.store.addResource(e[0], n, r, a);
    }
  }
}
function HN() {
  return {
    debug: !1,
    initImmediate: !0,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: !1,
    supportedLngs: !1,
    nonExplicitSupportedLngs: !1,
    load: "all",
    preload: !1,
    simplifyPluralSuffix: !0,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: !1,
    saveMissing: !1,
    updateMissing: !1,
    saveMissingTo: "fallback",
    saveMissingPlurals: !0,
    missingKeyHandler: !1,
    missingInterpolationHandler: !1,
    postProcess: !1,
    postProcessPassResolved: !1,
    returnNull: !1,
    returnEmptyString: !0,
    returnObjects: !1,
    joinArrays: !1,
    returnedObjectHandler: !1,
    parseMissingKeyHandler: !1,
    appendNamespaceToMissingKey: !1,
    appendNamespaceToCIMode: !1,
    overloadTranslationOptionHandler: function(e) {
      let n = {};
      if (typeof e[1] == "object" && (n = e[1]), typeof e[1] == "string" && (n.defaultValue = e[1]), typeof e[2] == "string" && (n.tDescription = e[2]), typeof e[2] == "object" || typeof e[3] == "object") {
        const r = e[3] || e[2];
        Object.keys(r).forEach((a) => {
          n[a] = r[a];
        });
      }
      return n;
    },
    interpolation: {
      escapeValue: !0,
      format: (t) => t,
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: !0
    }
  };
}
function YN(t) {
  return typeof t.ns == "string" && (t.ns = [t.ns]), typeof t.fallbackLng == "string" && (t.fallbackLng = [t.fallbackLng]), typeof t.fallbackNS == "string" && (t.fallbackNS = [t.fallbackNS]), t.supportedLngs && t.supportedLngs.indexOf("cimode") < 0 && (t.supportedLngs = t.supportedLngs.concat(["cimode"])), t;
}
function Mu() {
}
function zie(t) {
  Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((n) => {
    typeof t[n] == "function" && (t[n] = t[n].bind(t));
  });
}
class Yl extends ep {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = arguments.length > 1 ? arguments[1] : void 0;
    if (super(), this.options = YN(e), this.services = {}, this.logger = ka, this.modules = {
      external: []
    }, zie(this), n && !this.isInitialized && !e.isClone) {
      if (!this.options.initImmediate)
        return this.init(e, n), this;
      setTimeout(() => {
        this.init(e, n);
      }, 0);
    }
  }
  init() {
    var e = this;
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = arguments.length > 1 ? arguments[1] : void 0;
    typeof n == "function" && (r = n, n = {}), !n.defaultNS && n.defaultNS !== !1 && n.ns && (typeof n.ns == "string" ? n.defaultNS = n.ns : n.ns.indexOf("translation") < 0 && (n.defaultNS = n.ns[0]));
    const a = HN();
    this.options = {
      ...a,
      ...this.options,
      ...YN(n)
    }, this.options.compatibilityAPI !== "v1" && (this.options.interpolation = {
      ...a.interpolation,
      ...this.options.interpolation
    }), n.keySeparator !== void 0 && (this.options.userDefinedKeySeparator = n.keySeparator), n.nsSeparator !== void 0 && (this.options.userDefinedNsSeparator = n.nsSeparator);
    function i(p) {
      return p ? typeof p == "function" ? new p() : p : null;
    }
    if (!this.options.isClone) {
      this.modules.logger ? ka.init(i(this.modules.logger), this.options) : ka.init(null, this.options);
      let p;
      this.modules.formatter ? p = this.modules.formatter : typeof Intl < "u" && (p = Gie);
      const _ = new BN(this.options);
      this.store = new PN(this.options.resources, this.options);
      const f = this.services;
      f.logger = ka, f.resourceStore = this.store, f.languageUtils = _, f.pluralResolver = new Fie(_, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      }), p && (!this.options.interpolation.format || this.options.interpolation.format === a.interpolation.format) && (f.formatter = i(p), f.formatter.init(f, this.options), this.options.interpolation.format = f.formatter.format.bind(f.formatter)), f.interpolator = new Bie(this.options), f.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      }, f.backendConnector = new Yie(i(this.modules.backend), f.resourceStore, f, this.options), f.backendConnector.on("*", function(g) {
        for (var E = arguments.length, T = new Array(E > 1 ? E - 1 : 0), R = 1; R < E; R++)
          T[R - 1] = arguments[R];
        e.emit(g, ...T);
      }), this.modules.languageDetector && (f.languageDetector = i(this.modules.languageDetector), f.languageDetector.init && f.languageDetector.init(f, this.options.detection, this.options)), this.modules.i18nFormat && (f.i18nFormat = i(this.modules.i18nFormat), f.i18nFormat.init && f.i18nFormat.init(this)), this.translator = new hd(this.services, this.options), this.translator.on("*", function(g) {
        for (var E = arguments.length, T = new Array(E > 1 ? E - 1 : 0), R = 1; R < E; R++)
          T[R - 1] = arguments[R];
        e.emit(g, ...T);
      }), this.modules.external.forEach((g) => {
        g.init && g.init(this);
      });
    }
    if (this.format = this.options.interpolation.format, r || (r = Mu), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const p = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      p.length > 0 && p[0] !== "dev" && (this.options.lng = p[0]);
    }
    !this.services.languageDetector && !this.options.lng && this.logger.warn("init: no languageDetector is used and no lng is defined"), ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach((p) => {
      this[p] = function() {
        return e.store[p](...arguments);
      };
    }), ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach((p) => {
      this[p] = function() {
        return e.store[p](...arguments), e;
      };
    });
    const c = dl(), d = () => {
      const p = (_, f) => {
        this.isInitialized && !this.initializedStoreOnce && this.logger.warn("init: i18next is already initialized. You should call init just once!"), this.isInitialized = !0, this.options.isClone || this.logger.log("initialized", this.options), this.emit("initialized", this.options), c.resolve(f), r(_, f);
      };
      if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized) return p(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, p);
    };
    return this.options.resources || !this.options.initImmediate ? d() : setTimeout(d, 0), c;
  }
  loadResources(e) {
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Mu;
    const a = typeof e == "string" ? e : this.language;
    if (typeof e == "function" && (r = e), !this.options.resources || this.options.partialBundledLanguages) {
      if (a && a.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return r();
      const i = [], s = (l) => {
        if (!l || l === "cimode") return;
        this.services.languageUtils.toResolveHierarchy(l).forEach((d) => {
          d !== "cimode" && i.indexOf(d) < 0 && i.push(d);
        });
      };
      a ? s(a) : this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((c) => s(c)), this.options.preload && this.options.preload.forEach((l) => s(l)), this.services.backendConnector.load(i, this.options.ns, (l) => {
        !l && !this.resolvedLanguage && this.language && this.setResolvedLanguage(this.language), r(l);
      });
    } else
      r(null);
  }
  reloadResources(e, n, r) {
    const a = dl();
    return e || (e = this.languages), n || (n = this.options.ns), r || (r = Mu), this.services.backendConnector.reload(e, n, (i) => {
      a.resolve(), r(i);
    }), a;
  }
  use(e) {
    if (!e) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!e.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    return e.type === "backend" && (this.modules.backend = e), (e.type === "logger" || e.log && e.warn && e.error) && (this.modules.logger = e), e.type === "languageDetector" && (this.modules.languageDetector = e), e.type === "i18nFormat" && (this.modules.i18nFormat = e), e.type === "postProcessor" && KD.addPostProcessor(e), e.type === "formatter" && (this.modules.formatter = e), e.type === "3rdParty" && this.modules.external.push(e), this;
  }
  setResolvedLanguage(e) {
    if (!(!e || !this.languages) && !(["cimode", "dev"].indexOf(e) > -1))
      for (let n = 0; n < this.languages.length; n++) {
        const r = this.languages[n];
        if (!(["cimode", "dev"].indexOf(r) > -1) && this.store.hasLanguageSomeTranslations(r)) {
          this.resolvedLanguage = r;
          break;
        }
      }
  }
  changeLanguage(e, n) {
    var r = this;
    this.isLanguageChangingTo = e;
    const a = dl();
    this.emit("languageChanging", e);
    const i = (c) => {
      this.language = c, this.languages = this.services.languageUtils.toResolveHierarchy(c), this.resolvedLanguage = void 0, this.setResolvedLanguage(c);
    }, s = (c, d) => {
      d ? (i(d), this.translator.changeLanguage(d), this.isLanguageChangingTo = void 0, this.emit("languageChanged", d), this.logger.log("languageChanged", d)) : this.isLanguageChangingTo = void 0, a.resolve(function() {
        return r.t(...arguments);
      }), n && n(c, function() {
        return r.t(...arguments);
      });
    }, l = (c) => {
      !e && !c && this.services.languageDetector && (c = []);
      const d = typeof c == "string" ? c : this.services.languageUtils.getBestMatchFromCodes(c);
      d && (this.language || i(d), this.translator.language || this.translator.changeLanguage(d), this.services.languageDetector && this.services.languageDetector.cacheUserLanguage && this.services.languageDetector.cacheUserLanguage(d)), this.loadResources(d, (p) => {
        s(p, d);
      });
    };
    return !e && this.services.languageDetector && !this.services.languageDetector.async ? l(this.services.languageDetector.detect()) : !e && this.services.languageDetector && this.services.languageDetector.async ? this.services.languageDetector.detect.length === 0 ? this.services.languageDetector.detect().then(l) : this.services.languageDetector.detect(l) : l(e), a;
  }
  getFixedT(e, n, r) {
    var a = this;
    const i = function(s, l) {
      let c;
      if (typeof l != "object") {
        for (var d = arguments.length, p = new Array(d > 2 ? d - 2 : 0), _ = 2; _ < d; _++)
          p[_ - 2] = arguments[_];
        c = a.options.overloadTranslationOptionHandler([s, l].concat(p));
      } else
        c = {
          ...l
        };
      c.lng = c.lng || i.lng, c.lngs = c.lngs || i.lngs, c.ns = c.ns || i.ns, c.keyPrefix = c.keyPrefix || r || i.keyPrefix;
      const f = a.options.keySeparator || ".";
      let g;
      return c.keyPrefix && Array.isArray(s) ? g = s.map((E) => `${c.keyPrefix}${f}${E}`) : g = c.keyPrefix ? `${c.keyPrefix}${f}${s}` : s, a.t(g, c);
    };
    return typeof e == "string" ? i.lng = e : i.lngs = e, i.ns = n, i.keyPrefix = r, i;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(e) {
    this.options.defaultNS = e;
  }
  hasLoadedNamespace(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized)
      return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
    if (!this.languages || !this.languages.length)
      return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
    const r = n.lng || this.resolvedLanguage || this.languages[0], a = this.options ? this.options.fallbackLng : !1, i = this.languages[this.languages.length - 1];
    if (r.toLowerCase() === "cimode") return !0;
    const s = (l, c) => {
      const d = this.services.backendConnector.state[`${l}|${c}`];
      return d === -1 || d === 2;
    };
    if (n.precheck) {
      const l = n.precheck(this, s);
      if (l !== void 0) return l;
    }
    return !!(this.hasResourceBundle(r, e) || !this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages || s(r, e) && (!a || s(i, e)));
  }
  loadNamespaces(e, n) {
    const r = dl();
    return this.options.ns ? (typeof e == "string" && (e = [e]), e.forEach((a) => {
      this.options.ns.indexOf(a) < 0 && this.options.ns.push(a);
    }), this.loadResources((a) => {
      r.resolve(), n && n(a);
    }), r) : (n && n(), Promise.resolve());
  }
  loadLanguages(e, n) {
    const r = dl();
    typeof e == "string" && (e = [e]);
    const a = this.options.preload || [], i = e.filter((s) => a.indexOf(s) < 0);
    return i.length ? (this.options.preload = a.concat(i), this.loadResources((s) => {
      r.resolve(), n && n(s);
    }), r) : (n && n(), Promise.resolve());
  }
  dir(e) {
    if (e || (e = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language)), !e) return "rtl";
    const n = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"], r = this.services && this.services.languageUtils || new BN(HN());
    return n.indexOf(r.getLanguagePartFromCode(e)) > -1 || e.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = arguments.length > 1 ? arguments[1] : void 0;
    return new Yl(e, n);
  }
  cloneInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Mu;
    const r = e.forkResourceStore;
    r && delete e.forkResourceStore;
    const a = {
      ...this.options,
      ...e,
      isClone: !0
    }, i = new Yl(a);
    return (e.debug !== void 0 || e.prefix !== void 0) && (i.logger = i.logger.clone(e)), ["store", "services", "language"].forEach((l) => {
      i[l] = this[l];
    }), i.services = {
      ...this.services
    }, i.services.utils = {
      hasLoadedNamespace: i.hasLoadedNamespace.bind(i)
    }, r && (i.store = new PN(this.store.data, a), i.services.resourceStore = i.store), i.translator = new hd(i.services, a), i.translator.on("*", function(l) {
      for (var c = arguments.length, d = new Array(c > 1 ? c - 1 : 0), p = 1; p < c; p++)
        d[p - 1] = arguments[p];
      i.emit(l, ...d);
    }), i.init(a, n), i.translator.options = a, i.translator.backendConnector.services.utils = {
      hasLoadedNamespace: i.hasLoadedNamespace.bind(i)
    }, i;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const lr = Yl.createInstance();
lr.createInstance = Yl.createInstance;
lr.createInstance;
lr.dir;
lr.init;
lr.loadResources;
lr.reloadResources;
lr.use;
lr.changeLanguage;
lr.getFixedT;
lr.t;
lr.exists;
lr.setDefaultNamespace;
lr.hasLoadedNamespace;
lr.loadNamespaces;
lr.loadLanguages;
const qie = {
  fallbackLng: "en-US",
  defaultNS: "translation"
};
function Vie() {
  lr.use(gie).init(qie).catch((t) => console.error("[i18n] Failed to setup localization.", t));
}
Vie();
const $ie = gs(
  ({
    message: t,
    elements: e,
    actions: n,
    isRunning: r,
    indent: a,
    isScorable: i,
    scorableRun: s
  }) => {
    const {
      highlightedMessage: l,
      defaultCollapseContent: c,
      allowHtml: d,
      latex: p,
      onError: _
    } = qn(Hi), { config: f } = ua(), g = Jd(), E = t.waitForAnswer, T = t.type === "user_message", R = !t.type.includes("message"), A = R && f?.ui.cot === "tool_call" && t.type !== "tool", I = R && f?.ui.cot === "hidden";
    return A || I ? t.steps ? /* @__PURE__ */ C.jsx(
      Zs,
      {
        messages: t.steps,
        elements: e,
        actions: n,
        indent: a,
        isRunning: r,
        scorableRun: s
      }
    ) : null : /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
      /* @__PURE__ */ C.jsx(
        Zt,
        {
          sx: {
            color: "text.primary",
            position: "relative"
          },
          className: "step",
          children: /* @__PURE__ */ C.jsx(
            Zt,
            {
              sx: {
                boxSizing: "border-box",
                mx: "auto",
                width: "100%",
                maxWidth: a ? "100%" : g,
                px: 2,
                display: "flex",
                flexDirection: "column",
                position: "relative"
              },
              children: /* @__PURE__ */ C.jsx(
                fn,
                {
                  id: `step-${t.id}`,
                  direction: "row",
                  sx: {
                    pb: a ? 1 : 2,
                    flexGrow: 1,
                    animation: t.id && l === t.id ? `3s ease-in-out 0.1s ${Wie}` : "none"
                  },
                  children: T ? /* @__PURE__ */ C.jsx(
                    Zt,
                    {
                      display: "flex",
                      flexDirection: "column",
                      flexGrow: 1,
                      maxWidth: "100%",
                      children: /* @__PURE__ */ C.jsx(vie, { message: t, children: /* @__PURE__ */ C.jsx(
                        ih,
                        {
                          elements: e,
                          message: t,
                          preserveSize: !!t.streaming || !c,
                          allowHtml: d,
                          latex: p
                        }
                      ) })
                    }
                  ) : /* @__PURE__ */ C.jsxs(
                    fn,
                    {
                      direction: "row",
                      gap: "1rem",
                      width: "100%",
                      className: "ai-message",
                      children: [
                        !R || !a ? /* @__PURE__ */ C.jsx(bB, { author: t.name }) : null,
                        R ? /* @__PURE__ */ C.jsxs(bie, { step: t, isRunning: r, children: [
                          t.steps ? /* @__PURE__ */ C.jsx(
                            Zs,
                            {
                              messages: t.steps.filter(
                                (P) => !P.type.includes("message")
                              ),
                              elements: e,
                              actions: n,
                              indent: a + 1,
                              isRunning: r
                            }
                          ) : null,
                          /* @__PURE__ */ C.jsx(
                            ih,
                            {
                              elements: e,
                              message: t,
                              preserveSize: !!t.streaming || !c,
                              allowHtml: d,
                              latex: p
                            }
                          ),
                          n?.length ? /* @__PURE__ */ C.jsx(by, { message: t, actions: n }) : null,
                          /* @__PURE__ */ C.jsx(Ry, { message: t })
                        ] }) : (
                          // Display an assistant message
                          /* @__PURE__ */ C.jsxs(
                            fn,
                            {
                              alignItems: "flex-start",
                              minWidth: 150,
                              flexGrow: 1,
                              position: "relative",
                              children: [
                                /* @__PURE__ */ C.jsx(
                                  ih,
                                  {
                                    elements: e,
                                    message: t,
                                    preserveSize: !!t.streaming || !c,
                                    allowHtml: d,
                                    latex: p
                                  }
                                ),
                                !r && E && /* @__PURE__ */ C.jsx(SB, { onError: _ }),
                                n?.length ? /* @__PURE__ */ C.jsx(by, { message: t, actions: n }) : null,
                                /* @__PURE__ */ C.jsx(
                                  Ry,
                                  {
                                    message: t,
                                    run: s && i ? s : void 0
                                  }
                                )
                              ]
                            }
                          )
                        )
                      ]
                    }
                  )
                }
              )
            }
          )
        }
      ),
      t.steps && R ? /* @__PURE__ */ C.jsx(
        Zs,
        {
          messages: t.steps.filter((P) => P.type.includes("message")),
          elements: e,
          actions: n,
          indent: 0,
          isRunning: r,
          scorableRun: s
        }
      ) : null,
      t.steps && !R ? /* @__PURE__ */ C.jsx(
        Zs,
        {
          messages: t.steps,
          elements: e,
          actions: n,
          indent: a,
          isRunning: r
        }
      ) : null
    ] });
  }
), Wie = b2`
  from {
    background-color: transparent;
  }
  25% {
    background-color: rgba(255, 173, 51, 0.5);
  }
  to {
    background-color: transparent;
  }
`;
function Kie(t, { insertAt: e } = {}) {
  if (typeof document > "u") return;
  let n = document.head || document.getElementsByTagName("head")[0], r = document.createElement("style");
  r.type = "text/css", e === "top" && n.firstChild ? n.insertBefore(r, n.firstChild) : n.appendChild(r), r.styleSheet ? r.styleSheet.cssText = t : r.appendChild(document.createTextNode(t));
}
Kie(`html[dir=ltr],[data-sonner-toaster][dir=ltr]{--toast-icon-margin-start: -3px;--toast-icon-margin-end: 4px;--toast-svg-margin-start: -1px;--toast-svg-margin-end: 0px;--toast-button-margin-start: auto;--toast-button-margin-end: 0;--toast-close-button-start: 0;--toast-close-button-end: unset;--toast-close-button-transform: translate(-35%, -35%)}html[dir=rtl],[data-sonner-toaster][dir=rtl]{--toast-icon-margin-start: 4px;--toast-icon-margin-end: -3px;--toast-svg-margin-start: 0px;--toast-svg-margin-end: -1px;--toast-button-margin-start: 0;--toast-button-margin-end: auto;--toast-close-button-start: unset;--toast-close-button-end: 0;--toast-close-button-transform: translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1: hsl(0, 0%, 99%);--gray2: hsl(0, 0%, 97.3%);--gray3: hsl(0, 0%, 95.1%);--gray4: hsl(0, 0%, 93%);--gray5: hsl(0, 0%, 90.9%);--gray6: hsl(0, 0%, 88.7%);--gray7: hsl(0, 0%, 85.8%);--gray8: hsl(0, 0%, 78%);--gray9: hsl(0, 0%, 56.1%);--gray10: hsl(0, 0%, 52.3%);--gray11: hsl(0, 0%, 43.5%);--gray12: hsl(0, 0%, 9%);--border-radius: 8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999}[data-sonner-toaster][data-x-position=right]{right:max(var(--offset),env(safe-area-inset-right))}[data-sonner-toaster][data-x-position=left]{left:max(var(--offset),env(safe-area-inset-left))}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translate(-50%)}[data-sonner-toaster][data-y-position=top]{top:max(var(--offset),env(safe-area-inset-top))}[data-sonner-toaster][data-y-position=bottom]{bottom:max(var(--offset),env(safe-area-inset-bottom))}[data-sonner-toast]{--y: translateY(100%);--lift-amount: calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;will-change:transform,opacity,height;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:none;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px #0000001a;width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}[data-sonner-toast][data-y-position=top]{top:0;--y: translateY(-100%);--lift: 1;--lift-amount: calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y: translateY(100%);--lift: -1;--lift-amount: calc(var(--lift) * var(--gap))}[data-sonner-toast] [data-description]{font-weight:400;line-height:1.4;color:inherit}[data-sonner-toast] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast] [data-icon]>*{flex-shrink:0}[data-sonner-toast] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;cursor:pointer;outline:none;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast] [data-button]:focus-visible{box-shadow:0 0 0 2px #0006}[data-sonner-toast] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toast][data-theme=dark] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;background:var(--gray1);color:var(--gray12);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;opacity:0;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast] [data-close-button]:focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}[data-sonner-toast] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast]:hover [data-close-button]{opacity:1}[data-sonner-toast]:focus [data-close-button]{opacity:1}[data-sonner-toast]:focus-within [data-close-button]{opacity:1}[data-sonner-toast]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]:before{content:"";position:absolute;left:0;right:0;height:100%}[data-sonner-toast][data-y-position=top][data-swiping=true]:before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]:before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]:before{content:"";position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast]:after{content:"";position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y: translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale: var(--toasts-before) * .05 + 1;--y: translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y: translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y: translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y: translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y: translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]:before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation:swipe-out .2s ease-out forwards}@keyframes swipe-out{0%{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount)));opacity:1}to{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount) + var(--lift) * -100%));opacity:0}}@media (max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset: 16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - 32px)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position=bottom]{bottom:20px}[data-sonner-toaster][data-y-position=top]{top:20px}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme=light]{--normal-bg: #fff;--normal-border: var(--gray4);--normal-text: var(--gray12);--success-bg: hsl(143, 85%, 96%);--success-border: hsl(145, 92%, 91%);--success-text: hsl(140, 100%, 27%);--info-bg: hsl(208, 100%, 97%);--info-border: hsl(221, 91%, 91%);--info-text: hsl(210, 92%, 45%);--warning-bg: hsl(49, 100%, 97%);--warning-border: hsl(49, 91%, 91%);--warning-text: hsl(31, 92%, 45%);--error-bg: hsl(359, 100%, 97%);--error-border: hsl(359, 100%, 94%);--error-text: hsl(360, 100%, 45%)}[data-sonner-toaster][data-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1)}[data-sonner-toaster][data-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg: #fff;--normal-border: var(--gray3);--normal-text: var(--gray12)}[data-sonner-toaster][data-theme=dark]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1);--success-bg: hsl(150, 100%, 6%);--success-border: hsl(147, 100%, 12%);--success-text: hsl(150, 86%, 65%);--info-bg: hsl(215, 100%, 6%);--info-border: hsl(223, 100%, 12%);--info-text: hsl(216, 87%, 65%);--warning-bg: hsl(64, 100%, 6%);--warning-border: hsl(60, 100%, 12%);--warning-text: hsl(46, 87%, 65%);--error-bg: hsl(358, 76%, 10%);--error-border: hsl(357, 89%, 16%);--error-text: hsl(358, 100%, 81%)}[data-rich-colors=true] [data-sonner-toast][data-type=success],[data-rich-colors=true] [data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true] [data-sonner-toast][data-type=info],[data-rich-colors=true] [data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true] [data-sonner-toast][data-type=warning],[data-rich-colors=true] [data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true] [data-sonner-toast][data-type=error],[data-rich-colors=true] [data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size: 16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}to{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}to{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}to{opacity:.15}}@media (prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none!important;animation:none!important}}.loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}
`);
Array(12).fill(0);
$e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor", height: "20", width: "20" }, $e.createElement("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z", clipRule: "evenodd" }));
$e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", height: "20", width: "20" }, $e.createElement("path", { fillRule: "evenodd", d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z", clipRule: "evenodd" }));
$e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor", height: "20", width: "20" }, $e.createElement("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z", clipRule: "evenodd" }));
$e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor", height: "20", width: "20" }, $e.createElement("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z", clipRule: "evenodd" }));
var pE = 1, Qie = class {
  constructor() {
    this.subscribe = (t) => (this.subscribers.push(t), () => {
      let e = this.subscribers.indexOf(t);
      this.subscribers.splice(e, 1);
    }), this.publish = (t) => {
      this.subscribers.forEach((e) => e(t));
    }, this.addToast = (t) => {
      this.publish(t), this.toasts = [...this.toasts, t];
    }, this.create = (t) => {
      var e;
      let { message: n, ...r } = t, a = typeof t?.id == "number" || ((e = t.id) == null ? void 0 : e.length) > 0 ? t.id : pE++, i = this.toasts.find((l) => l.id === a), s = t.dismissible === void 0 ? !0 : t.dismissible;
      return i ? this.toasts = this.toasts.map((l) => l.id === a ? (this.publish({ ...l, ...t, id: a, title: n }), { ...l, ...t, id: a, dismissible: s, title: n }) : l) : this.addToast({ title: n, ...r, dismissible: s, id: a }), a;
    }, this.dismiss = (t) => (t || this.toasts.forEach((e) => {
      this.subscribers.forEach((n) => n({ id: e.id, dismiss: !0 }));
    }), this.subscribers.forEach((e) => e({ id: t, dismiss: !0 })), t), this.message = (t, e) => this.create({ ...e, message: t }), this.error = (t, e) => this.create({ ...e, message: t, type: "error" }), this.success = (t, e) => this.create({ ...e, type: "success", message: t }), this.info = (t, e) => this.create({ ...e, type: "info", message: t }), this.warning = (t, e) => this.create({ ...e, type: "warning", message: t }), this.loading = (t, e) => this.create({ ...e, type: "loading", message: t }), this.promise = (t, e) => {
      if (!e) return;
      let n;
      e.loading !== void 0 && (n = this.create({ ...e, promise: t, type: "loading", message: e.loading }));
      let r = t instanceof Promise ? t : t(), a = n !== void 0;
      return r.then((i) => {
        if (i && typeof i.ok == "boolean" && !i.ok) {
          a = !1;
          let s = typeof e.error == "function" ? e.error(`HTTP error! status: ${i.status}`) : e.error;
          this.create({ id: n, type: "error", message: s });
        } else if (e.success !== void 0) {
          a = !1;
          let s = typeof e.success == "function" ? e.success(i) : e.success;
          this.create({ id: n, type: "success", message: s });
        }
      }).catch((i) => {
        if (e.error !== void 0) {
          a = !1;
          let s = typeof e.error == "function" ? e.error(i) : e.error;
          this.create({ id: n, type: "error", message: s });
        }
      }).finally(() => {
        var i;
        a && (this.dismiss(n), n = void 0), (i = e.finally) == null || i.call(e);
      }), n;
    }, this.custom = (t, e) => {
      let n = e?.id || pE++;
      return this.create({ jsx: t(n), id: n, ...e }), n;
    }, this.subscribers = [], this.toasts = [];
  }
}, Na = new Qie(), jie = (t, e) => {
  let n = e?.id || pE++;
  return Na.addToast({ title: t, ...e, id: n }), n;
}, Xie = jie, si = Object.assign(Xie, { success: Na.success, info: Na.info, warning: Na.warning, error: Na.error, custom: Na.custom, message: Na.message, promise: Na.promise, dismiss: Na.dismiss, loading: Na.loading });
function Zie({
  setAutoScroll: t,
  autoScroll: e,
  children: n
}) {
  const r = un(), { messages: a } = po(), { session: i } = xd();
  wn(() => {
    t?.(!0);
  }, [i?.socket.id]), wn(() => {
    !r.current || !e || (r.current.scrollTop = r.current.scrollHeight);
  }, [a, e]);
  const s = () => {
    if (!r.current || !t) return;
    const { scrollTop: l, scrollHeight: c, clientHeight: d } = r.current, p = l + d >= c - 10;
    t(p);
  };
  return /* @__PURE__ */ C.jsx(
    mn,
    {
      ref: r,
      position: "relative",
      display: "flex",
      flexDirection: "column",
      flexGrow: 1,
      sx: {
        overflowY: "auto"
      },
      onScroll: s,
      children: n
    }
  );
}
const QD = Vt({
  key: "HighlightMessage",
  default: null
}), Jie = Vt({
  key: "chatSettingsOpen",
  default: !1
}), ese = ({ status: t }) => t === "running" ? /* @__PURE__ */ C.jsx(
  mn,
  {
    sx: {
      marginTop: "-2px",
      width: "24px",
      height: "24px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      color: Bt[700]
    },
    children: /* @__PURE__ */ C.jsx(C2, { color: "inherit", size: 18 })
  }
) : /* @__PURE__ */ C.jsxs(
  AP,
  {
    width: 24,
    height: 24,
    sx: {
      marginTop: "-2px",
      fill: "none"
    },
    children: [
      t === "done" && /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
        /* @__PURE__ */ C.jsx("circle", { cx: 12, cy: 12, r: 9, fill: MI[500] }),
        /* @__PURE__ */ C.jsx(
          "path",
          {
            stroke: Ty,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "m15.333 9.5-4.583 4.583L8.667 12"
          }
        )
      ] }),
      t === "ready" && /* @__PURE__ */ C.jsx("circle", { cx: 12, cy: 12, r: 8.25, stroke: Bt[700], strokeWidth: 1.5 }),
      t === "failed" && /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
        /* @__PURE__ */ C.jsx("circle", { cx: 12, cy: 12, r: 9, fill: yB[500] }),
        /* @__PURE__ */ C.jsx(
          "path",
          {
            stroke: Ty,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "m14.5 9.5-5 5m0-5 5 5"
          }
        )
      ] })
    ]
  }
), zN = ({ index: t, task: e }) => {
  const n = Yt(QD), r = SE();
  return /* @__PURE__ */ C.jsx(OP, { disableGutters: !0, className: `task task-status-${e.status}`, children: /* @__PURE__ */ C.jsxs(
    NP,
    {
      disableRipple: !e.forId,
      sx: {
        color: {
          ready: r.palette.mode === "dark" ? Bt[300] : Bt[700],
          running: r.palette.mode === "dark" ? Bt[100] : Bt[850],
          done: Bt[500],
          failed: Bt[500]
        }[e.status] || r.palette.text.secondary,
        fontWeight: e.status === "running" ? "700" : "500",
        alignItems: "flex-start",
        fontSize: "14px",
        lineHeight: 1.36,
        cursor: e.forId ? "pointer" : "default"
      },
      onClick: () => {
        if (e.forId) {
          n(e.forId);
          const a = document.getElementById(`message-${e.forId}`);
          a && a.scrollIntoView({
            behavior: "smooth",
            block: "start",
            inline: "start"
          });
        }
      },
      children: [
        /* @__PURE__ */ C.jsx(
          mn,
          {
            sx: {
              paddingRight: r.spacing(1),
              flex: "0 0 18px",
              width: "18px"
            },
            children: t
          }
        ),
        /* @__PURE__ */ C.jsx(ese, { status: e.status }),
        /* @__PURE__ */ C.jsx(
          mn,
          {
            sx: {
              paddingLeft: r.spacing(2)
            },
            children: e.title
          }
        )
      ]
    }
  ) });
}, tse = (t) => fetch(t).then((e) => e.json()), qN = ({ status: t }) => {
  const e = SE();
  return /* @__PURE__ */ C.jsxs(
    mn,
    {
      sx: {
        display: "flex",
        alignItems: "center",
        flexDirection: "row",
        padding: e.spacing(2)
      },
      children: [
        /* @__PURE__ */ C.jsx(
          mn,
          {
            sx: {
              flexGrow: "1",
              fontWeight: "600",
              paddingLeft: e.spacing(1),
              fontFamily: e.typography.fontFamily
            },
            children: /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.tasklist.TaskList.title" })
          }
        ),
        /* @__PURE__ */ C.jsx(
          IP,
          {
            label: t || "?",
            sx: {
              fontWeight: "500",
              borderRadius: "4px",
              backgroundColor: e.palette.background.default,
              color: e.palette.mode === "dark" ? Bt[500] : Bt[600]
            }
          }
        )
      ]
    }
  );
}, VN = (t) => ({
  background: t.palette.background.paper,
  borderLeft: `1px solid ${t.palette.divider}`,
  width: "100%",
  display: "flex",
  flexDirection: "column",
  fontFamily: t.typography.fontFamily,
  boxShadow: t.palette.mode === "dark" ? "0px 4px 20px 0px rgba(0, 0, 0, 0.20)" : "0px 4px 20px 0px rgba(0, 0, 0, 0.05)"
}), nse = ({ isMobile: t }) => {
  const e = SE(), { tasklists: n } = uo(), r = n[n.length - 1], a = Cn(() => {
    if (!r?.url) return null;
    const p = new URL(r.url);
    return p.pathname + p.search;
  }, [r?.url]), { error: i, data: s, isLoading: l } = RE(a, tse, {
    keepPreviousData: !0
  });
  if (!a) return null;
  if (l && !s)
    return /* @__PURE__ */ C.jsx("div", { children: /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.tasklist.TaskList.loading" }) });
  if (i)
    return /* @__PURE__ */ C.jsx("div", { children: /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.tasklist.TaskList.error" }) });
  const c = s;
  if (!c)
    return null;
  const d = c.tasks;
  if (t) {
    let p = d.length - 1;
    for (let f = 0; f < d.length; f++)
      if (d[f].status === "running" || d[f].status === "ready") {
        p = f;
        break;
      }
    const _ = d?.[p];
    return /* @__PURE__ */ C.jsx(
      mn,
      {
        component: "aside",
        sx: {
          color: e.palette.text.primary,
          padding: e.spacing(2),
          width: "100%",
          boxSizing: "border-box",
          display: {
            xs: "flex",
            md: "none"
          }
        },
        className: "tasklist tasklist-mobile",
        children: /* @__PURE__ */ C.jsxs(
          mn,
          {
            sx: {
              ...VN(e)
            },
            children: [
              /* @__PURE__ */ C.jsx(qN, { status: c.status }),
              _ && /* @__PURE__ */ C.jsx(NT, { children: /* @__PURE__ */ C.jsx(zN, { index: p + 1, task: _ }) })
            ]
          }
        )
      }
    );
  }
  return /* @__PURE__ */ C.jsx(
    mn,
    {
      component: "aside",
      sx: {
        color: e.palette.text.primary,
        width: "380px",
        flexShrink: "0",
        display: {
          xs: "none",
          md: "flex"
        }
      },
      className: "tasklist tasklist-desktop",
      children: /* @__PURE__ */ C.jsxs(
        mn,
        {
          sx: {
            ...VN(e)
          },
          children: [
            /* @__PURE__ */ C.jsx(qN, { status: c?.status }),
            /* @__PURE__ */ C.jsx(
              mn,
              {
                sx: {
                  overflowY: "auto"
                },
                children: /* @__PURE__ */ C.jsx(NT, { children: d?.map((p, _) => /* @__PURE__ */ C.jsx(zN, { index: _ + 1, task: p }, _)) })
              }
            )
          ]
        }
      )
    }
  );
}, j1 = Vt({
  key: "Attachments",
  default: []
}), rse = gs(
  ({ actions: t, context: e, elements: n, messages: r }) => /* @__PURE__ */ C.jsx(Hi.Provider, { value: e || w2, children: /* @__PURE__ */ C.jsx(
    Zs,
    {
      indent: 0,
      messages: r,
      elements: n,
      actions: t
    }
  ) })
), ase = gs(
  ({
    askUser: t,
    loading: e,
    actions: n,
    elements: r,
    messages: a,
    onFeedbackUpdated: i,
    onFeedbackDeleted: s,
    callAction: l
  }) => {
    const { config: c } = ua(), d = Yt(dI), p = Qt(QD), { uploadFile: _ } = zi(), f = dt(
      (x, P) => _(x, P),
      [_]
    ), g = !!c?.dataPersistence, E = D2(), T = dt(
      (x) => {
        let P = `/element/${x.id}`;
        if (x.display === "side") {
          d(x);
          return;
        }
        return x.threadId && (P += `?thread=${x.threadId}`), E(x.display === "page" ? P : "#");
      },
      [d, E]
    ), R = Cn(
      () => n.map((x) => ({
        ...x,
        onClick: async () => {
          try {
            l?.(x);
          } catch (P) {
            P instanceof Error && si.error(P.message);
          }
        }
      })),
      [n]
    ), A = dt((x) => si.error(x), [si]), I = Cn(() => ({
      uploadFile: f,
      askUser: t,
      allowHtml: c?.features?.unsafe_allow_html,
      latex: c?.features?.latex,
      defaultCollapseContent: !!c?.ui.default_collapse_content,
      highlightedMessage: p,
      loading: e,
      showFeedbackButtons: g,
      uiName: c?.ui?.name || "",
      onElementRefClick: T,
      onError: A,
      onFeedbackUpdated: i,
      onFeedbackDeleted: s
    }), [
      t,
      g,
      p,
      e,
      c?.ui?.name,
      c?.features?.unsafe_allow_html,
      T,
      A,
      i
    ]);
    return /* @__PURE__ */ C.jsx(
      rse,
      {
        actions: R,
        elements: r,
        messages: a,
        context: I
      }
    );
  }
), ise = () => {
  const t = qn(Yi), { elements: e, askUser: n, loading: r, actions: a } = uo(), { messages: i } = po(), { callAction: s } = zi(), l = Qt(Od), c = Yt(Vl), { t: d } = K1(), p = dt(
    async (f, g, E) => {
      try {
        si.promise(t.setFeedback(E, l), {
          loading: d("components.organisms.chat.Messages.index.updating"),
          success: (T) => (c(
            (R) => Dl(R, f.id, {
              ...f,
              feedback: {
                ...E,
                id: T.feedbackId
              }
            })
          ), g(), d(
            "components.organisms.chat.Messages.index.feedbackUpdated"
          )),
          error: (T) => /* @__PURE__ */ C.jsx("span", { children: T.message })
        });
      } catch (T) {
        console.log(T);
      }
    },
    []
  ), _ = dt(
    async (f, g, E) => {
      try {
        si.promise(t.deleteFeedback(E, l), {
          loading: d("components.organisms.chat.Messages.index.updating"),
          success: () => (c(
            (T) => Dl(T, f.id, {
              ...f,
              feedback: void 0
            })
          ), g(), d(
            "components.organisms.chat.Messages.index.feedbackUpdated"
          )),
          error: (T) => /* @__PURE__ */ C.jsx("span", { children: T.message })
        });
      } catch (T) {
        console.log(T);
      }
    },
    []
  );
  return /* @__PURE__ */ C.jsx(
    ase,
    {
      loading: r,
      askUser: n,
      actions: a,
      elements: e,
      messages: i,
      onFeedbackUpdated: p,
      onFeedbackDeleted: _,
      callAction: s
    }
  );
}, sse = (t) => /* @__PURE__ */ C.jsxs(
  xr,
  {
    ...t,
    style: {
      fill: "currentColor"
    },
    viewBox: "0 0 24 24",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M12.588 11.646a1.5 1.5 0 1 1-2.97.418 1.5 1.5 0 0 1 2.97-.418Z" }),
      /* @__PURE__ */ C.jsx(
        "path",
        {
          fillRule: "evenodd",
          d: "M11.297 1.03c-1.732-.232-3.403.918-3.66 2.674L7.04 7.759l-3.33.468a3.148 3.148 0 0 0-2.68 3.555l1.197 8.508a3.148 3.148 0 0 0 3.555 2.68l8.508-1.197a3.148 3.148 0 0 0 2.68-3.555l-.2-1.42 1.285.172c1.732.233 3.403-.918 3.661-2.674l1.251-8.508c.26-1.766-1.03-3.329-2.769-3.562L11.297 1.03Zm5.183 13.71 1.842.248c.727.097 1.328-.389 1.415-.983l1.252-8.508c.085-.582-.338-1.192-1.057-1.289l-8.901-1.196c-.727-.097-1.329.389-1.416.983l-.51 3.474 3.113-.438a3.148 3.148 0 0 1 3.555 2.68l.707 5.03Zm-2.687-4.752a1.148 1.148 0 0 0-1.297-.977l-8.508 1.196a1.148 1.148 0 0 0-.977 1.297l.619 4.4 1.068-1.063a3.148 3.148 0 0 1 4.115-.283l6.08 4.582c.09-.195.128-.416.096-.644l-1.196-8.508Zm-1.109 9.991L7.61 16.155a1.148 1.148 0 0 0-1.5.103L3.978 18.38l.23 1.632a1.148 1.148 0 0 0 1.296.977l7.18-1.01Z",
          clipRule: "evenodd"
        }
      )
    ]
  }
);
function ose() {
  return /* @__PURE__ */ C.jsx(
    xP,
    {
      open: !0,
      sx: {
        zIndex: 10
      },
      children: /* @__PURE__ */ C.jsxs(Fa, { alignItems: "center", gap: 2, children: [
        /* @__PURE__ */ C.jsx(
          sse,
          {
            sx: { width: "100px", height: "100px", color: "grey.400" }
          }
        ),
        /* @__PURE__ */ C.jsx(Sa, { color: "grey.200", fontWeight: 600, fontSize: "1.5rem", children: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.dropScreen.dropYourFilesHere" }) })
      ] })
    }
  );
}
function lse({ onClick: t }) {
  return /* @__PURE__ */ C.jsx(
    zr,
    {
      size: "small",
      sx: {
        width: "fit-content",
        margin: "auto",
        position: "absolute",
        backgroundColor: "text.primary",
        color: "background.paper",
        zIndex: 1,
        transform: "translateY(-100%)",
        top: -20,
        left: 0,
        right: 0,
        "&:hover": {
          backgroundColor: "text.primary"
        }
      },
      onClick: t,
      children: /* @__PURE__ */ C.jsx(WE, { fontSize: "large" })
    }
  );
}
const cse = "input_history", use = (t) => ({ setSelf: e, onSet: n }) => {
  const r = localStorage.getItem(t);
  r != null && e(JSON.parse(r)), n((a, i, s) => {
    s ? localStorage.removeItem(t) : localStorage.setItem(t, JSON.stringify(a));
  });
}, X1 = Vt({
  key: "UserInputHistory",
  default: {
    open: !1,
    inputs: []
  },
  effects: [use(cse)]
});
function dse({
  type: t,
  height: e,
  width: n,
  barCount: r,
  barSpacing: a
}) {
  const i = A2(), { wavRecorder: s, wavStreamPlayer: l, isAiSpeaking: c } = YE(), d = un(null);
  return n = t === "server" && !c ? e : n, wn(() => {
    let p = !0;
    const _ = window.devicePixelRatio || 1;
    let f = 1, g = 0;
    const E = () => t === "server" && c ? l.analyser ? l.getFrequencies("voice") : { values: new Float32Array([0]) } : s.recording ? s.getFrequencies("voice") : { values: new Float32Array([0]) }, T = () => {
      if (!p) return;
      const R = d.current;
      let A = null;
      if (R && (R.width = n * _, R.height = e * _, R.style.width = `${n}px`, R.style.height = `${e}px`, A = A || R.getContext("2d"), A)) {
        A.scale(_, _), A.clearRect(0, 0, n, e);
        const I = E();
        if (t === "server" && !c) {
          const x = Math.min(
            Math.max(0.6, Math.max(...I.values)),
            1
          ), L = n / 2 * x * (0.6 + 0.2 * g), K = n / 2, J = e / 2;
          A.fillStyle = i.palette.text.primary, A.beginPath(), A.arc(K, J, L, 0, Math.PI * 2), A.fill();
          const X = g + 0.01 * f;
          (X > 1 || X < 0) && (f *= -1), g = Math.max(0, Math.min(X, 1));
        } else
          gF.drawBars(
            A,
            I.values,
            n,
            e,
            i.palette.text.primary,
            r,
            0,
            a,
            !0
          );
      }
      window.requestAnimationFrame(T);
    };
    return T(), () => {
      p = !1;
    };
  }, [e, n, r, a, i, s, c]), /* @__PURE__ */ C.jsxs(mn, { sx: { display: "flex", alignItems: "center", gap: 0.5 }, children: [
    t === "server" && !c ? /* @__PURE__ */ C.jsx(Sa, { fontSize: "12px", color: "text.secondary", children: "Listening" }) : null,
    /* @__PURE__ */ C.jsx("canvas", { ref: d })
  ] });
}
const pse = (t) => /* @__PURE__ */ yt.createElement("svg", { width: 1143, height: 266, viewBox: "0 0 1143 266", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...t }, /* @__PURE__ */ yt.createElement("path", { d: "M342.542 133.753C342.542 85.5861 378.512 59.1252 416.55 59.7454C445.698 59.7454 476.707 75.4565 483.322 111.22H453.347C446.938 94.8888 433.915 87.6533 416.55 87.6533C390.916 87.6533 373.757 106.259 373.757 133.753C373.757 158.56 390.502 179.233 416.343 179.233C434.328 179.233 449.006 170.757 453.967 153.185H483.735C477.534 191.43 446.732 207.347 416.55 207.347C378.512 207.347 342.542 181.713 342.542 133.753ZM533.503 148.844V206.107H504.561V54.784H533.503V119.696C541.565 107.499 553.555 103.778 566.166 104.398C588.492 105.432 598.622 117.835 601.722 136.647C602.343 141.402 602.549 145.95 602.549 150.911V177.579C602.549 186.468 603.996 188.535 613.713 187.915V205.28C589.732 210.242 573.608 205.28 573.608 179.026V160.007C573.608 153.392 573.608 147.81 572.988 143.056C571.334 132.513 566.993 126.931 554.796 126.931C543.633 126.931 533.503 134.787 533.503 148.844ZM726.013 113.287V173.858C726.013 182.334 725.6 186.882 735.522 186.261V204.867C722.085 207.761 702.653 208.795 702.653 188.329C697.071 200.732 684.254 207.554 671.024 207.554C640.222 206.934 625.958 183.161 625.958 154.839C626.991 121.143 649.938 103.364 683.634 103.985C698.312 104.191 712.783 107.706 726.013 113.287ZM697.898 155.873V130.032C692.317 127.758 686.322 127.138 681.36 127.138C665.649 127.138 655.52 135.82 654.899 154.839C654.899 170.55 662.341 182.127 677.226 181.92C691.076 181.92 697.278 170.964 697.898 155.873ZM753.629 77.5238C753.629 55.4042 787.532 55.4042 787.532 77.5238C787.532 99.8502 753.629 99.8502 753.629 77.5238ZM785.051 107.499V205.9H756.109V107.499H785.051ZM804.992 122.797V105.845C819.669 103.158 843.029 101.711 843.029 120.936C849.438 109.153 861.221 103.985 874.452 103.985C902.566 103.985 914.35 123.21 913.73 148.017V175.098C913.73 184.401 914.143 188.949 924.273 188.329V205.28C904.634 210.242 884.995 207.761 884.995 182.954V148.017C885.201 134.167 876.312 126.931 865.769 126.931C855.019 126.311 844.89 134.787 844.89 148.637V205.9H815.948V137.061C815.948 126.104 816.155 122.177 804.992 122.797ZM942.017 54.5773H970.545V168.07C970.545 183.367 976.54 186.468 990.391 184.194L991.424 205.9C960.622 211.482 942.017 203.833 942.017 168.07V54.5773ZM1004.36 77.5238C1004.36 55.4042 1038.27 55.4042 1038.27 77.5238C1038.27 99.8502 1004.36 99.8502 1004.36 77.5238ZM1035.79 107.499V205.9H1006.84V107.499H1035.79ZM1101 75.4565V106.465H1133.46V128.172H1101V166.829C1101 187.502 1118.16 188.535 1134.7 182.54L1137.38 204.453C1103.07 213.963 1072.68 208.381 1072.68 167.449V128.172L1053.87 126.311V106.465H1074.75L1077.85 75.4565H1101Z", fill: "white" }), /* @__PURE__ */ yt.createElement("path", { d: "M80.0961 121.626C78.244 115.214 74.7914 109.167 69.7384 104.114C53.7848 88.16 27.9188 88.16 11.9652 104.114C-3.98841 120.067 -3.98841 145.933 11.9652 161.887C17.0183 166.94 23.0657 170.392 29.4777 172.245C32.8124 173.307 36.6495 174.133 40.8349 175.034C54.6805 178.016 72.3375 181.818 88.2258 197.706C88.2258 197.706 90.5368 192.507 95.4475 187.596C100.358 182.685 105.558 180.374 105.558 180.374C89.6695 164.486 85.8674 146.829 82.8861 132.983C81.9848 128.798 81.1586 124.961 80.0961 121.626Z", fill: "url(#paint0_linear_361_1664)" }), /* @__PURE__ */ yt.createElement("path", { d: "M185.904 144.375C187.756 150.786 191.209 156.834 196.262 161.887C212.215 177.84 238.081 177.84 254.035 161.887C269.988 145.933 269.988 120.067 254.035 104.114C248.982 99.0605 242.934 95.608 236.522 93.7559C233.188 92.6934 229.351 91.8672 225.165 90.966C211.32 87.9846 193.662 84.1825 177.774 68.2942C177.774 68.2942 175.463 73.4938 170.553 78.4045C165.642 83.3153 160.442 85.6262 160.442 85.6262C176.331 101.514 180.133 119.172 183.114 133.017C184.015 137.203 184.841 141.04 185.904 144.375Z", fill: "url(#paint1_linear_361_1664)" }), /* @__PURE__ */ yt.createElement("path", { d: "M93.7559 29.4775C95.608 23.0656 99.0606 17.0182 104.114 11.9652C120.067 -3.98841 145.933 -3.98841 161.887 11.9652C177.84 27.9188 177.84 53.7848 161.887 69.7384C156.834 74.7915 150.786 78.244 144.374 80.0962C141.04 81.1586 137.203 81.9848 133.017 82.8861C119.172 85.8674 101.514 89.6695 85.6262 105.558C85.6262 105.558 83.3153 100.358 78.4045 95.4475C73.4938 90.5368 68.2942 88.2258 68.2942 88.2258C84.1825 72.3375 87.9846 54.6805 90.966 40.8349C91.8672 36.6494 92.6935 32.8122 93.7559 29.4775Z", fill: "url(#paint2_linear_361_1664)" }), /* @__PURE__ */ yt.createElement("path", { d: "M172.244 236.523C170.392 242.935 166.939 248.982 161.886 254.035C145.933 269.989 120.067 269.989 104.113 254.035C88.1596 238.082 88.1596 212.216 104.113 196.262C109.166 191.209 115.214 187.756 121.626 185.904C124.96 184.842 128.797 184.016 132.983 183.114C146.828 180.133 164.486 176.331 180.374 160.443C180.374 160.443 182.685 165.642 187.595 170.553C192.506 175.464 197.706 177.775 197.706 177.775C181.817 193.663 178.015 211.32 175.034 225.165C174.133 229.351 173.307 233.188 172.244 236.523Z", fill: "url(#paint3_linear_361_1664)" }), /* @__PURE__ */ yt.createElement("path", { d: "M79.6157 121.765L79.6156 121.765L79.6197 121.778C80.6734 125.085 81.4946 128.897 82.3973 133.089L82.4019 133.11C85.3524 146.812 89.1323 164.366 104.71 180.229C104.626 180.271 104.536 180.318 104.438 180.368C103.864 180.667 103.049 181.116 102.08 181.719C100.143 182.925 97.5829 184.753 95.0939 187.242C92.605 189.731 90.7768 192.291 89.5707 194.228C88.9673 195.197 88.5186 196.012 88.22 196.586C88.1692 196.684 88.1227 196.775 88.0806 196.858C72.218 181.281 54.664 177.501 40.9618 174.55L40.9401 174.546C36.7483 173.643 32.9366 172.822 29.6295 171.768L29.6295 171.768L29.6164 171.764C23.2836 169.935 17.3106 166.525 12.3188 161.533C-3.43959 145.775 -3.43959 120.226 12.3188 104.467C28.0771 88.7088 53.6265 88.7088 69.3849 104.467C74.3766 109.459 77.7865 115.432 79.6157 121.765ZM186.384 144.236L186.384 144.236L186.38 144.223C185.327 140.916 184.505 137.104 183.603 132.912L183.598 132.89C180.648 119.188 176.868 101.634 161.29 85.7715C161.374 85.7293 161.464 85.6828 161.562 85.632C162.136 85.3334 162.951 84.8847 163.92 84.2813C165.857 83.0752 168.417 81.247 170.906 78.7581C173.395 76.2692 175.223 73.7092 176.429 71.7721C177.033 70.803 177.481 69.9883 177.78 69.4141C177.831 69.3163 177.877 69.2255 177.919 69.1421C193.782 84.7197 211.336 88.4996 225.038 91.4501L225.06 91.4548C229.252 92.3574 233.063 93.1786 236.371 94.2323L236.37 94.2324L236.384 94.2362C242.716 96.0655 248.689 99.4753 253.681 104.467C269.44 120.226 269.44 145.775 253.681 161.533C237.923 177.292 212.374 177.292 196.615 161.533C191.623 156.541 188.214 150.569 186.384 144.236ZM94.2323 29.6293L94.2325 29.6293L94.2363 29.6162C96.0655 23.2835 99.4754 17.3105 104.467 12.3188C120.226 -3.43959 145.775 -3.43959 161.533 12.3188C177.292 28.0771 177.292 53.6265 161.533 69.3849C156.541 74.3767 150.568 77.7865 144.236 79.6158L144.236 79.6156L144.223 79.6198C140.915 80.6734 137.104 81.4946 132.912 82.3973L132.89 82.4019C119.188 85.3524 101.634 89.1323 85.7715 104.71C85.7293 104.626 85.6828 104.536 85.632 104.438C85.3334 103.864 84.8847 103.049 84.2813 102.08C83.0752 100.143 81.247 97.5829 78.7581 95.0939C76.2692 92.605 73.7092 90.7768 71.7721 89.5707C70.803 88.9673 69.9883 88.5186 69.4141 88.22C69.3163 88.1692 69.2255 88.1227 69.1421 88.0806C84.7197 72.218 88.4996 54.664 91.4501 40.9618L91.4548 40.9401C92.3574 36.7482 93.1786 32.9364 94.2323 29.6293ZM171.768 236.371L171.768 236.371L171.764 236.384C169.934 242.717 166.525 248.69 161.533 253.682C145.774 269.44 120.225 269.44 104.467 253.682C88.7084 237.923 88.7084 212.374 104.467 196.616C109.459 191.624 115.432 188.214 121.764 186.385L121.764 186.385L121.777 186.381C125.085 185.327 128.896 184.506 133.088 183.603L133.11 183.598C146.812 180.648 164.366 176.868 180.229 161.29C180.271 161.374 180.317 161.465 180.368 161.562C180.667 162.137 181.115 162.951 181.719 163.92C182.925 165.858 184.753 168.418 187.242 170.906C189.731 173.395 192.291 175.224 194.228 176.43C195.197 177.033 196.012 177.482 196.586 177.78C196.684 177.831 196.774 177.878 196.858 177.92C181.28 193.782 177.5 211.336 174.55 225.039L174.545 225.06C173.643 229.252 172.821 233.064 171.768 236.371Z", stroke: "black", strokeOpacity: 0.1, strokeLinejoin: "round" }), /* @__PURE__ */ yt.createElement("defs", null, /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint0_linear_361_1664", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })), /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint1_linear_361_1664", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })), /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint2_linear_361_1664", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })), /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint3_linear_361_1664", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })))), _se = (t) => /* @__PURE__ */ yt.createElement("svg", { width: 1143, height: 266, viewBox: "0 0 1143 266", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...t }, /* @__PURE__ */ yt.createElement("path", { d: "M342.542 133.753C342.542 181.713 378.512 207.347 416.55 207.347C446.732 207.347 477.534 191.43 483.735 153.185H453.967C449.006 170.757 434.328 179.233 416.343 179.233C390.502 179.233 373.757 158.56 373.757 133.753C373.757 106.259 390.916 87.6533 416.55 87.6533C433.915 87.6533 446.938 94.8888 453.347 111.22H483.322C476.707 75.4565 445.698 59.7454 416.55 59.7454C378.512 59.1252 342.542 85.5861 342.542 133.753ZM533.503 148.844C533.503 134.787 543.633 126.931 554.796 126.931C566.993 126.931 571.334 132.513 572.988 143.056C573.608 147.81 573.608 153.392 573.608 160.007V179.026C573.608 205.28 589.732 210.242 613.713 205.28V187.915C603.996 188.535 602.549 186.468 602.549 177.579V150.911C602.549 145.95 602.343 141.402 601.722 136.647C598.622 117.835 588.492 105.432 566.166 104.398C553.555 103.778 541.565 107.499 533.503 119.696V54.784H504.561V206.107H533.503V148.844ZM726.013 113.287C712.783 107.706 698.312 104.191 683.634 103.985C649.938 103.364 626.991 121.143 625.958 154.839C625.958 183.161 640.222 206.934 671.024 207.554C684.254 207.554 697.071 200.732 702.653 188.329C702.653 208.795 722.085 207.761 735.522 204.867V186.261C725.6 186.882 726.013 182.334 726.013 173.858V113.287ZM697.898 155.873C697.278 170.964 691.076 181.92 677.226 181.92C662.341 182.127 654.899 170.55 654.899 154.839C655.52 135.82 665.649 127.138 681.36 127.138C686.322 127.138 692.317 127.758 697.898 130.032V155.873ZM753.629 77.5238C753.629 99.8502 787.532 99.8502 787.532 77.5238C787.532 55.4042 753.629 55.4042 753.629 77.5238ZM785.051 107.499H756.109V205.9H785.051V107.499ZM804.992 122.797C816.155 122.177 815.948 126.104 815.948 137.061V205.9H844.89V148.637C844.89 134.787 855.019 126.311 865.769 126.931C876.312 126.931 885.201 134.167 884.995 148.017V182.954C884.995 207.761 904.634 210.242 924.273 205.28V188.329C914.143 188.949 913.73 184.401 913.73 175.098V148.017C914.35 123.21 902.566 103.985 874.452 103.985C861.221 103.985 849.438 109.153 843.029 120.936C843.029 101.711 819.669 103.158 804.992 105.845V122.797ZM942.017 54.5773V168.07C942.017 203.833 960.622 211.482 991.424 205.9L990.391 184.194C976.54 186.468 970.545 183.367 970.545 168.07V54.5773H942.017ZM1004.36 77.5238C1004.36 99.8502 1038.27 99.8502 1038.27 77.5238C1038.27 55.4042 1004.36 55.4042 1004.36 77.5238ZM1035.79 107.499H1006.84V205.9H1035.79V107.499ZM1101 75.4565H1077.85L1074.75 106.465H1053.87V126.311L1072.68 128.172V167.449C1072.68 208.381 1103.07 213.963 1137.38 204.453L1134.7 182.54C1118.16 188.535 1101 187.502 1101 166.829V128.172H1133.46V106.465H1101V75.4565Z", fill: "#2A1351" }), /* @__PURE__ */ yt.createElement("path", { d: "M80.0961 121.626C78.244 115.214 74.7914 109.167 69.7384 104.114C53.7848 88.16 27.9188 88.16 11.9652 104.114C-3.98841 120.067 -3.98841 145.933 11.9652 161.887C17.0183 166.94 23.0657 170.392 29.4777 172.245C32.8124 173.307 36.6495 174.133 40.8349 175.034C54.6805 178.016 72.3375 181.818 88.2258 197.706C88.2258 197.706 90.5368 192.507 95.4475 187.596C100.358 182.685 105.558 180.374 105.558 180.374C89.6695 164.486 85.8674 146.829 82.8861 132.983C81.9848 128.798 81.1586 124.961 80.0961 121.626Z", fill: "url(#paint0_linear_361_1534)" }), /* @__PURE__ */ yt.createElement("path", { d: "M185.904 144.375C187.756 150.786 191.209 156.834 196.262 161.887C212.215 177.84 238.081 177.84 254.035 161.887C269.988 145.933 269.988 120.067 254.035 104.114C248.982 99.0605 242.934 95.608 236.522 93.7559C233.188 92.6934 229.351 91.8672 225.165 90.966C211.32 87.9846 193.662 84.1825 177.774 68.2942C177.774 68.2942 175.463 73.4938 170.553 78.4045C165.642 83.3153 160.442 85.6262 160.442 85.6262C176.331 101.514 180.133 119.172 183.114 133.017C184.015 137.203 184.841 141.04 185.904 144.375Z", fill: "url(#paint1_linear_361_1534)" }), /* @__PURE__ */ yt.createElement("path", { d: "M93.7559 29.4775C95.608 23.0656 99.0606 17.0182 104.114 11.9652C120.067 -3.98841 145.933 -3.98841 161.887 11.9652C177.84 27.9188 177.84 53.7848 161.887 69.7384C156.834 74.7915 150.786 78.244 144.374 80.0962C141.04 81.1586 137.203 81.9848 133.017 82.8861C119.172 85.8674 101.514 89.6695 85.6262 105.558C85.6262 105.558 83.3153 100.358 78.4045 95.4475C73.4938 90.5368 68.2942 88.2258 68.2942 88.2258C84.1825 72.3375 87.9846 54.6805 90.966 40.8349C91.8672 36.6494 92.6935 32.8122 93.7559 29.4775Z", fill: "url(#paint2_linear_361_1534)" }), /* @__PURE__ */ yt.createElement("path", { d: "M172.244 236.523C170.392 242.935 166.939 248.982 161.886 254.035C145.933 269.989 120.067 269.989 104.113 254.035C88.1596 238.082 88.1596 212.216 104.113 196.262C109.166 191.209 115.214 187.756 121.626 185.904C124.96 184.842 128.797 184.016 132.983 183.114C146.828 180.133 164.486 176.331 180.374 160.443C180.374 160.443 182.685 165.642 187.595 170.553C192.506 175.464 197.706 177.775 197.706 177.775C181.817 193.663 178.015 211.32 175.034 225.165C174.133 229.351 173.307 233.188 172.244 236.523Z", fill: "url(#paint3_linear_361_1534)" }), /* @__PURE__ */ yt.createElement("path", { d: "M79.6157 121.765L79.6156 121.765L79.6197 121.778C80.6734 125.085 81.4946 128.897 82.3973 133.089L82.4019 133.11C85.3524 146.812 89.1323 164.366 104.71 180.229C104.626 180.271 104.536 180.318 104.438 180.368C103.864 180.667 103.049 181.116 102.08 181.719C100.143 182.925 97.5829 184.753 95.0939 187.242C92.605 189.731 90.7768 192.291 89.5707 194.228C88.9673 195.197 88.5186 196.012 88.22 196.586C88.1692 196.684 88.1227 196.775 88.0806 196.858C72.218 181.281 54.664 177.501 40.9618 174.55L40.9401 174.546C36.7483 173.643 32.9366 172.822 29.6295 171.768L29.6295 171.768L29.6164 171.764C23.2836 169.935 17.3106 166.525 12.3188 161.533C-3.43959 145.775 -3.43959 120.226 12.3188 104.467C28.0771 88.7088 53.6265 88.7088 69.3849 104.467C74.3766 109.459 77.7865 115.432 79.6157 121.765ZM186.384 144.236L186.384 144.236L186.38 144.223C185.327 140.916 184.505 137.104 183.603 132.912L183.598 132.89C180.648 119.188 176.868 101.634 161.29 85.7715C161.374 85.7293 161.464 85.6828 161.562 85.632C162.136 85.3334 162.951 84.8847 163.92 84.2813C165.857 83.0752 168.417 81.247 170.906 78.7581C173.395 76.2692 175.223 73.7092 176.429 71.7721C177.033 70.803 177.481 69.9883 177.78 69.4141C177.831 69.3163 177.877 69.2255 177.919 69.1421C193.782 84.7197 211.336 88.4996 225.038 91.4501L225.06 91.4548C229.252 92.3574 233.063 93.1786 236.371 94.2323L236.37 94.2324L236.384 94.2362C242.716 96.0655 248.689 99.4753 253.681 104.467C269.44 120.226 269.44 145.775 253.681 161.533C237.923 177.292 212.374 177.292 196.615 161.533C191.623 156.541 188.214 150.569 186.384 144.236ZM94.2323 29.6293L94.2325 29.6293L94.2363 29.6162C96.0655 23.2835 99.4754 17.3105 104.467 12.3188C120.226 -3.43959 145.775 -3.43959 161.533 12.3188C177.292 28.0771 177.292 53.6265 161.533 69.3849C156.541 74.3767 150.568 77.7865 144.236 79.6158L144.236 79.6156L144.223 79.6198C140.915 80.6734 137.104 81.4946 132.912 82.3973L132.89 82.4019C119.188 85.3524 101.634 89.1323 85.7715 104.71C85.7293 104.626 85.6828 104.536 85.632 104.438C85.3334 103.864 84.8847 103.049 84.2813 102.08C83.0752 100.143 81.247 97.5829 78.7581 95.0939C76.2692 92.605 73.7092 90.7768 71.7721 89.5707C70.803 88.9673 69.9883 88.5186 69.4141 88.22C69.3163 88.1692 69.2255 88.1227 69.1421 88.0806C84.7197 72.218 88.4996 54.664 91.4501 40.9618L91.4548 40.9401C92.3574 36.7482 93.1786 32.9364 94.2323 29.6293ZM171.768 236.371L171.768 236.371L171.764 236.384C169.934 242.717 166.525 248.69 161.533 253.682C145.774 269.44 120.225 269.44 104.467 253.682C88.7084 237.923 88.7084 212.374 104.467 196.616C109.459 191.624 115.432 188.214 121.764 186.385L121.764 186.385L121.777 186.381C125.085 185.327 128.896 184.506 133.088 183.603L133.11 183.598C146.812 180.648 164.366 176.868 180.229 161.29C180.271 161.374 180.317 161.465 180.368 161.562C180.667 162.137 181.115 162.951 181.719 163.92C182.925 165.858 184.753 168.418 187.242 170.906C189.731 173.395 192.291 175.224 194.228 176.43C195.197 177.033 196.012 177.482 196.586 177.78C196.684 177.831 196.774 177.878 196.858 177.92C181.28 193.782 177.5 211.336 174.55 225.039L174.545 225.06C173.643 229.252 172.821 233.064 171.768 236.371Z", stroke: "black", strokeOpacity: 0.1, strokeLinejoin: "round" }), /* @__PURE__ */ yt.createElement("defs", null, /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint0_linear_361_1534", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })), /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint1_linear_361_1534", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })), /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint2_linear_361_1534", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })), /* @__PURE__ */ yt.createElement("linearGradient", { id: "paint3_linear_361_1534", x1: 119.251, y1: 276.386, x2: 112.859, y2: -28.0325, gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ yt.createElement("stop", { stopColor: "#FF004F" }), /* @__PURE__ */ yt.createElement("stop", { offset: 1, stopColor: "#FF0581" })))), mse = window?.theme?.default || "dark", $N = localStorage.getItem(
  "themeVariant"
), fse = $N || mse, gse = {
  open: !1,
  defaultCollapseContent: !0,
  isChatHistoryOpen: !0,
  language: "en-US",
  theme: fse
}, hse = Vt({
  key: "AppSettings",
  default: gse
});
function Ese() {
  const { theme: t } = Qt(hse), e = t === "light" ? _se : pse;
  return /* @__PURE__ */ C.jsxs(
    "a",
    {
      href: "https://github.com/Chainlit/chainlit",
      target: "_blank",
      style: {
        display: "flex",
        alignItems: "center",
        textDecoration: "none"
      },
      children: [
        /* @__PURE__ */ C.jsx(Sa, { fontSize: "12px", color: "text.secondary", children: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.inputBox.waterMark.text" }) }),
        /* @__PURE__ */ C.jsx(
          e,
          {
            style: {
              width: 65,
              height: "auto",
              filter: "grayscale(1)",
              marginLeft: "4px"
            }
          }
        )
      ]
    }
  );
}
function Sse() {
  const { audioConnection: t } = YE();
  return /* @__PURE__ */ C.jsx(Fa, { mx: "auto", className: "watermark", children: t === "on" ? /* @__PURE__ */ C.jsx(
    dse,
    {
      type: "client",
      height: 18,
      width: 36,
      barCount: 4,
      barSpacing: 2
    }
  ) : /* @__PURE__ */ C.jsx(Ese, {}) });
}
var bse = { exports: {} };
(function(t) {
  var e = function(n) {
    var r = Object.prototype, a = r.hasOwnProperty, i = Object.defineProperty || function(z, v, H) {
      z[v] = H.value;
    }, s, l = typeof Symbol == "function" ? Symbol : {}, c = l.iterator || "@@iterator", d = l.asyncIterator || "@@asyncIterator", p = l.toStringTag || "@@toStringTag";
    function _(z, v, H) {
      return Object.defineProperty(z, v, {
        value: H,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), z[v];
    }
    try {
      _({}, "");
    } catch {
      _ = function(v, H, oe) {
        return v[H] = oe;
      };
    }
    function f(z, v, H, oe) {
      var k = v && v.prototype instanceof x ? v : x, me = Object.create(k.prototype), Ce = new Fe(oe || []);
      return i(me, "_invoke", { value: ce(z, H, Ce) }), me;
    }
    n.wrap = f;
    function g(z, v, H) {
      try {
        return { type: "normal", arg: z.call(v, H) };
      } catch (oe) {
        return { type: "throw", arg: oe };
      }
    }
    var E = "suspendedStart", T = "suspendedYield", R = "executing", A = "completed", I = {};
    function x() {
    }
    function P() {
    }
    function D() {
    }
    var L = {};
    _(L, c, function() {
      return this;
    });
    var K = Object.getPrototypeOf, J = K && K(K(ne([])));
    J && J !== r && a.call(J, c) && (L = J);
    var X = D.prototype = x.prototype = Object.create(L);
    P.prototype = D, i(X, "constructor", { value: D, configurable: !0 }), i(
      D,
      "constructor",
      { value: P, configurable: !0 }
    ), P.displayName = _(
      D,
      p,
      "GeneratorFunction"
    );
    function $(z) {
      ["next", "throw", "return"].forEach(function(v) {
        _(z, v, function(H) {
          return this._invoke(v, H);
        });
      });
    }
    n.isGeneratorFunction = function(z) {
      var v = typeof z == "function" && z.constructor;
      return v ? v === P || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (v.displayName || v.name) === "GeneratorFunction" : !1;
    }, n.mark = function(z) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(z, D) : (z.__proto__ = D, _(z, p, "GeneratorFunction")), z.prototype = Object.create(X), z;
    }, n.awrap = function(z) {
      return { __await: z };
    };
    function ae(z, v) {
      function H(me, Ce, he, Ne) {
        var ye = g(z[me], z, Ce);
        if (ye.type === "throw")
          Ne(ye.arg);
        else {
          var Ue = ye.arg, Me = Ue.value;
          return Me && typeof Me == "object" && a.call(Me, "__await") ? v.resolve(Me.__await).then(function(Qe) {
            H("next", Qe, he, Ne);
          }, function(Qe) {
            H("throw", Qe, he, Ne);
          }) : v.resolve(Me).then(function(Qe) {
            Ue.value = Qe, he(Ue);
          }, function(Qe) {
            return H("throw", Qe, he, Ne);
          });
        }
      }
      var oe;
      function k(me, Ce) {
        function he() {
          return new v(function(Ne, ye) {
            H(me, Ce, Ne, ye);
          });
        }
        return oe = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        oe ? oe.then(
          he,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          he
        ) : he();
      }
      i(this, "_invoke", { value: k });
    }
    $(ae.prototype), _(ae.prototype, d, function() {
      return this;
    }), n.AsyncIterator = ae, n.async = function(z, v, H, oe, k) {
      k === void 0 && (k = Promise);
      var me = new ae(
        f(z, v, H, oe),
        k
      );
      return n.isGeneratorFunction(v) ? me : me.next().then(function(Ce) {
        return Ce.done ? Ce.value : me.next();
      });
    };
    function ce(z, v, H) {
      var oe = E;
      return function(me, Ce) {
        if (oe === R)
          throw new Error("Generator is already running");
        if (oe === A) {
          if (me === "throw")
            throw Ce;
          return se();
        }
        for (H.method = me, H.arg = Ce; ; ) {
          var he = H.delegate;
          if (he) {
            var Ne = ve(he, H);
            if (Ne) {
              if (Ne === I) continue;
              return Ne;
            }
          }
          if (H.method === "next")
            H.sent = H._sent = H.arg;
          else if (H.method === "throw") {
            if (oe === E)
              throw oe = A, H.arg;
            H.dispatchException(H.arg);
          } else H.method === "return" && H.abrupt("return", H.arg);
          oe = R;
          var ye = g(z, v, H);
          if (ye.type === "normal") {
            if (oe = H.done ? A : T, ye.arg === I)
              continue;
            return {
              value: ye.arg,
              done: H.done
            };
          } else ye.type === "throw" && (oe = A, H.method = "throw", H.arg = ye.arg);
        }
      };
    }
    function ve(z, v) {
      var H = v.method, oe = z.iterator[H];
      if (oe === s)
        return v.delegate = null, H === "throw" && z.iterator.return && (v.method = "return", v.arg = s, ve(z, v), v.method === "throw") || H !== "return" && (v.method = "throw", v.arg = new TypeError(
          "The iterator does not provide a '" + H + "' method"
        )), I;
      var k = g(oe, z.iterator, v.arg);
      if (k.type === "throw")
        return v.method = "throw", v.arg = k.arg, v.delegate = null, I;
      var me = k.arg;
      if (!me)
        return v.method = "throw", v.arg = new TypeError("iterator result is not an object"), v.delegate = null, I;
      if (me.done)
        v[z.resultName] = me.value, v.next = z.nextLoc, v.method !== "return" && (v.method = "next", v.arg = s);
      else
        return me;
      return v.delegate = null, I;
    }
    $(X), _(X, p, "Generator"), _(X, c, function() {
      return this;
    }), _(X, "toString", function() {
      return "[object Generator]";
    });
    function ge(z) {
      var v = { tryLoc: z[0] };
      1 in z && (v.catchLoc = z[1]), 2 in z && (v.finallyLoc = z[2], v.afterLoc = z[3]), this.tryEntries.push(v);
    }
    function fe(z) {
      var v = z.completion || {};
      v.type = "normal", delete v.arg, z.completion = v;
    }
    function Fe(z) {
      this.tryEntries = [{ tryLoc: "root" }], z.forEach(ge, this), this.reset(!0);
    }
    n.keys = function(z) {
      var v = Object(z), H = [];
      for (var oe in v)
        H.push(oe);
      return H.reverse(), function k() {
        for (; H.length; ) {
          var me = H.pop();
          if (me in v)
            return k.value = me, k.done = !1, k;
        }
        return k.done = !0, k;
      };
    };
    function ne(z) {
      if (z || z === "") {
        var v = z[c];
        if (v)
          return v.call(z);
        if (typeof z.next == "function")
          return z;
        if (!isNaN(z.length)) {
          var H = -1, oe = function k() {
            for (; ++H < z.length; )
              if (a.call(z, H))
                return k.value = z[H], k.done = !1, k;
            return k.value = s, k.done = !0, k;
          };
          return oe.next = oe;
        }
      }
      throw new TypeError(typeof z + " is not iterable");
    }
    n.values = ne;
    function se() {
      return { value: s, done: !0 };
    }
    return Fe.prototype = {
      constructor: Fe,
      reset: function(z) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = s, this.done = !1, this.delegate = null, this.method = "next", this.arg = s, this.tryEntries.forEach(fe), !z)
          for (var v in this)
            v.charAt(0) === "t" && a.call(this, v) && !isNaN(+v.slice(1)) && (this[v] = s);
      },
      stop: function() {
        this.done = !0;
        var z = this.tryEntries[0], v = z.completion;
        if (v.type === "throw")
          throw v.arg;
        return this.rval;
      },
      dispatchException: function(z) {
        if (this.done)
          throw z;
        var v = this;
        function H(Ne, ye) {
          return me.type = "throw", me.arg = z, v.next = Ne, ye && (v.method = "next", v.arg = s), !!ye;
        }
        for (var oe = this.tryEntries.length - 1; oe >= 0; --oe) {
          var k = this.tryEntries[oe], me = k.completion;
          if (k.tryLoc === "root")
            return H("end");
          if (k.tryLoc <= this.prev) {
            var Ce = a.call(k, "catchLoc"), he = a.call(k, "finallyLoc");
            if (Ce && he) {
              if (this.prev < k.catchLoc)
                return H(k.catchLoc, !0);
              if (this.prev < k.finallyLoc)
                return H(k.finallyLoc);
            } else if (Ce) {
              if (this.prev < k.catchLoc)
                return H(k.catchLoc, !0);
            } else if (he) {
              if (this.prev < k.finallyLoc)
                return H(k.finallyLoc);
            } else
              throw new Error("try statement without catch or finally");
          }
        }
      },
      abrupt: function(z, v) {
        for (var H = this.tryEntries.length - 1; H >= 0; --H) {
          var oe = this.tryEntries[H];
          if (oe.tryLoc <= this.prev && a.call(oe, "finallyLoc") && this.prev < oe.finallyLoc) {
            var k = oe;
            break;
          }
        }
        k && (z === "break" || z === "continue") && k.tryLoc <= v && v <= k.finallyLoc && (k = null);
        var me = k ? k.completion : {};
        return me.type = z, me.arg = v, k ? (this.method = "next", this.next = k.finallyLoc, I) : this.complete(me);
      },
      complete: function(z, v) {
        if (z.type === "throw")
          throw z.arg;
        return z.type === "break" || z.type === "continue" ? this.next = z.arg : z.type === "return" ? (this.rval = this.arg = z.arg, this.method = "return", this.next = "end") : z.type === "normal" && v && (this.next = v), I;
      },
      finish: function(z) {
        for (var v = this.tryEntries.length - 1; v >= 0; --v) {
          var H = this.tryEntries[v];
          if (H.finallyLoc === z)
            return this.complete(H.completion, H.afterLoc), fe(H), I;
        }
      },
      catch: function(z) {
        for (var v = this.tryEntries.length - 1; v >= 0; --v) {
          var H = this.tryEntries[v];
          if (H.tryLoc === z) {
            var oe = H.completion;
            if (oe.type === "throw") {
              var k = oe.arg;
              fe(H);
            }
            return k;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function(z, v, H) {
        return this.delegate = {
          iterator: ne(z),
          resultName: v,
          nextLoc: H
        }, this.method === "next" && (this.arg = s), I;
      }
    }, n;
  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    t.exports
  );
  try {
    regeneratorRuntime = e;
  } catch {
    typeof globalThis == "object" ? globalThis.regeneratorRuntime = e : Function("r", "regeneratorRuntime = r")(e);
  }
})(bse);
function Tse({
  progress: t,
  children: e,
  ...n
}) {
  return /* @__PURE__ */ C.jsxs("div", { style: { position: "relative", display: "inline-flex" }, children: [
    /* @__PURE__ */ C.jsx(zr, { ...n, children: e }),
    t < 100 && /* @__PURE__ */ C.jsx(
      y2,
      {
        variant: "determinate",
        value: t,
        size: 30,
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          pointerEvents: "none"
        }
      }
    )
  ] });
}
const yse = () => {
  const t = Qt(j1);
  return t.length === 0 ? /* @__PURE__ */ C.jsx(C.Fragment, {}) : /* @__PURE__ */ C.jsx(
    fn,
    {
      id: "attachments",
      sx: {
        flexDirection: "row",
        gap: 2,
        width: "fit-content",
        flexWrap: "wrap"
      },
      children: t.map((e) => {
        const n = !e.uploaded && e.cancel, r = n ? /* @__PURE__ */ C.jsx(
          ba,
          {
            title: /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.attachments.cancelUpload" }),
            children: /* @__PURE__ */ C.jsx(
              Zt,
              {
                sx: {
                  position: "absolute",
                  right: -10,
                  top: -10
                },
                children: /* @__PURE__ */ C.jsx(
                  Tse,
                  {
                    progress: e.uploadProgress || 0,
                    onClick: e.cancel,
                    sx: {
                      p: 0.5,
                      background: "white",
                      backgroundColor: "background.paper",
                      border: (i) => `1px solid ${i.palette.divider}`,
                      "&:hover": {
                        backgroundColor: "background.default"
                      }
                    },
                    children: /* @__PURE__ */ C.jsx(
                      uh,
                      {
                        sx: (i) => ({
                          height: 20,
                          width: 20,
                          [i.breakpoints.down("sm")]: {
                            height: 12,
                            width: 12
                          }
                        })
                      }
                    )
                  }
                )
              }
            )
          }
        ) : null, a = !n && e.remove ? /* @__PURE__ */ C.jsx(
          ba,
          {
            title: /* @__PURE__ */ C.jsx(Yn, { path: "components.molecules.attachments.removeAttachment" }),
            children: /* @__PURE__ */ C.jsx(
              zr,
              {
                sx: {
                  position: "absolute",
                  p: 0.5,
                  right: -10,
                  top: -10,
                  background: "white",
                  backgroundColor: "background.paper",
                  border: (i) => `1px solid ${i.palette.divider}`,
                  "&:hover": {
                    backgroundColor: "background.default"
                  }
                },
                onClick: e.remove,
                children: /* @__PURE__ */ C.jsx(
                  uh,
                  {
                    sx: (i) => ({
                      height: 20,
                      width: 20,
                      [i.breakpoints.down("sm")]: {
                        height: 12,
                        width: 12
                      }
                    })
                  }
                )
              }
            )
          }
        ) : null;
        return /* @__PURE__ */ C.jsxs(
          $I,
          {
            name: e.name,
            mime: e.type,
            children: [
              r,
              a
            ]
          },
          e.id
        );
      })
    }
  );
};
function vse() {
  this.__data__ = [], this.size = 0;
}
var Cse = vse;
function Rse(t, e) {
  return t === e || t !== t && e !== e;
}
var jD = Rse, Ase = jD;
function Ose(t, e) {
  for (var n = t.length; n--; )
    if (Ase(t[n][0], e))
      return n;
  return -1;
}
var tp = Ose, Nse = tp, Ise = Array.prototype, xse = Ise.splice;
function Dse(t) {
  var e = this.__data__, n = Nse(e, t);
  if (n < 0)
    return !1;
  var r = e.length - 1;
  return n == r ? e.pop() : xse.call(e, n, 1), --this.size, !0;
}
var wse = Dse, Lse = tp;
function Mse(t) {
  var e = this.__data__, n = Lse(e, t);
  return n < 0 ? void 0 : e[n][1];
}
var kse = Mse, Pse = tp;
function Fse(t) {
  return Pse(this.__data__, t) > -1;
}
var Bse = Fse, Use = tp;
function Gse(t, e) {
  var n = this.__data__, r = Use(n, t);
  return r < 0 ? (++this.size, n.push([t, e])) : n[r][1] = e, this;
}
var Hse = Gse, Yse = Cse, zse = wse, qse = kse, Vse = Bse, $se = Hse;
function yo(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
yo.prototype.clear = Yse;
yo.prototype.delete = zse;
yo.prototype.get = qse;
yo.prototype.has = Vse;
yo.prototype.set = $se;
var np = yo, Wse = np;
function Kse() {
  this.__data__ = new Wse(), this.size = 0;
}
var Qse = Kse;
function jse(t) {
  var e = this.__data__, n = e.delete(t);
  return this.size = e.size, n;
}
var Xse = jse;
function Zse(t) {
  return this.__data__.get(t);
}
var Jse = Zse;
function eoe(t) {
  return this.__data__.has(t);
}
var toe = eoe, noe = typeof Qn == "object" && Qn && Qn.Object === Object && Qn, XD = noe, roe = XD, aoe = typeof self == "object" && self && self.Object === Object && self, ioe = roe || aoe || Function("return this")(), Va = ioe, soe = Va, ooe = soe.Symbol, Z1 = ooe, WN = Z1, ZD = Object.prototype, loe = ZD.hasOwnProperty, coe = ZD.toString, pl = WN ? WN.toStringTag : void 0;
function uoe(t) {
  var e = loe.call(t, pl), n = t[pl];
  try {
    t[pl] = void 0;
    var r = !0;
  } catch {
  }
  var a = coe.call(t);
  return r && (e ? t[pl] = n : delete t[pl]), a;
}
var doe = uoe, poe = Object.prototype, _oe = poe.toString;
function moe(t) {
  return _oe.call(t);
}
var foe = moe, KN = Z1, goe = doe, hoe = foe, Eoe = "[object Null]", Soe = "[object Undefined]", QN = KN ? KN.toStringTag : void 0;
function boe(t) {
  return t == null ? t === void 0 ? Soe : Eoe : QN && QN in Object(t) ? goe(t) : hoe(t);
}
var rp = boe;
function Toe(t) {
  var e = typeof t;
  return t != null && (e == "object" || e == "function");
}
var oc = Toe, yoe = rp, voe = oc, Coe = "[object AsyncFunction]", Roe = "[object Function]", Aoe = "[object GeneratorFunction]", Ooe = "[object Proxy]";
function Noe(t) {
  if (!voe(t))
    return !1;
  var e = yoe(t);
  return e == Roe || e == Aoe || e == Coe || e == Ooe;
}
var JD = Noe, Ioe = Va, xoe = Ioe["__core-js_shared__"], Doe = xoe, oh = Doe, jN = function() {
  var t = /[^.]+$/.exec(oh && oh.keys && oh.keys.IE_PROTO || "");
  return t ? "Symbol(src)_1." + t : "";
}();
function woe(t) {
  return !!jN && jN in t;
}
var Loe = woe, Moe = Function.prototype, koe = Moe.toString;
function Poe(t) {
  if (t != null) {
    try {
      return koe.call(t);
    } catch {
    }
    try {
      return t + "";
    } catch {
    }
  }
  return "";
}
var ew = Poe, Foe = JD, Boe = Loe, Uoe = oc, Goe = ew, Hoe = /[\\^$.*+?()[\]{}|]/g, Yoe = /^\[object .+?Constructor\]$/, zoe = Function.prototype, qoe = Object.prototype, Voe = zoe.toString, $oe = qoe.hasOwnProperty, Woe = RegExp(
  "^" + Voe.call($oe).replace(Hoe, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function Koe(t) {
  if (!Uoe(t) || Boe(t))
    return !1;
  var e = Foe(t) ? Woe : Yoe;
  return e.test(Goe(t));
}
var Qoe = Koe;
function joe(t, e) {
  return t?.[e];
}
var Xoe = joe, Zoe = Qoe, Joe = Xoe;
function ele(t, e) {
  var n = Joe(t, e);
  return Zoe(n) ? n : void 0;
}
var ys = ele, tle = ys, nle = Va, rle = tle(nle, "Map"), J1 = rle, ale = ys, ile = ale(Object, "create"), ap = ile, XN = ap;
function sle() {
  this.__data__ = XN ? XN(null) : {}, this.size = 0;
}
var ole = sle;
function lle(t) {
  var e = this.has(t) && delete this.__data__[t];
  return this.size -= e ? 1 : 0, e;
}
var cle = lle, ule = ap, dle = "__lodash_hash_undefined__", ple = Object.prototype, _le = ple.hasOwnProperty;
function mle(t) {
  var e = this.__data__;
  if (ule) {
    var n = e[t];
    return n === dle ? void 0 : n;
  }
  return _le.call(e, t) ? e[t] : void 0;
}
var fle = mle, gle = ap, hle = Object.prototype, Ele = hle.hasOwnProperty;
function Sle(t) {
  var e = this.__data__;
  return gle ? e[t] !== void 0 : Ele.call(e, t);
}
var ble = Sle, Tle = ap, yle = "__lodash_hash_undefined__";
function vle(t, e) {
  var n = this.__data__;
  return this.size += this.has(t) ? 0 : 1, n[t] = Tle && e === void 0 ? yle : e, this;
}
var Cle = vle, Rle = ole, Ale = cle, Ole = fle, Nle = ble, Ile = Cle;
function vo(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
vo.prototype.clear = Rle;
vo.prototype.delete = Ale;
vo.prototype.get = Ole;
vo.prototype.has = Nle;
vo.prototype.set = Ile;
var xle = vo, ZN = xle, Dle = np, wle = J1;
function Lle() {
  this.size = 0, this.__data__ = {
    hash: new ZN(),
    map: new (wle || Dle)(),
    string: new ZN()
  };
}
var Mle = Lle;
function kle(t) {
  var e = typeof t;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null;
}
var Ple = kle, Fle = Ple;
function Ble(t, e) {
  var n = t.__data__;
  return Fle(e) ? n[typeof e == "string" ? "string" : "hash"] : n.map;
}
var ip = Ble, Ule = ip;
function Gle(t) {
  var e = Ule(this, t).delete(t);
  return this.size -= e ? 1 : 0, e;
}
var Hle = Gle, Yle = ip;
function zle(t) {
  return Yle(this, t).get(t);
}
var qle = zle, Vle = ip;
function $le(t) {
  return Vle(this, t).has(t);
}
var Wle = $le, Kle = ip;
function Qle(t, e) {
  var n = Kle(this, t), r = n.size;
  return n.set(t, e), this.size += n.size == r ? 0 : 1, this;
}
var jle = Qle, Xle = Mle, Zle = Hle, Jle = qle, ece = Wle, tce = jle;
function Co(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
Co.prototype.clear = Xle;
Co.prototype.delete = Zle;
Co.prototype.get = Jle;
Co.prototype.has = ece;
Co.prototype.set = tce;
var nce = Co, rce = np, ace = J1, ice = nce, sce = 200;
function oce(t, e) {
  var n = this.__data__;
  if (n instanceof rce) {
    var r = n.__data__;
    if (!ace || r.length < sce - 1)
      return r.push([t, e]), this.size = ++n.size, this;
    n = this.__data__ = new ice(r);
  }
  return n.set(t, e), this.size = n.size, this;
}
var lce = oce, cce = np, uce = Qse, dce = Xse, pce = Jse, _ce = toe, mce = lce;
function Ro(t) {
  var e = this.__data__ = new cce(t);
  this.size = e.size;
}
Ro.prototype.clear = uce;
Ro.prototype.delete = dce;
Ro.prototype.get = pce;
Ro.prototype.has = _ce;
Ro.prototype.set = mce;
var fce = Ro;
function gce(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length; ++n < r && e(t[n], n, t) !== !1; )
    ;
  return t;
}
var hce = gce, Ece = ys, Sce = function() {
  try {
    var t = Ece(Object, "defineProperty");
    return t({}, "", {}), t;
  } catch {
  }
}(), bce = Sce, JN = bce;
function Tce(t, e, n) {
  e == "__proto__" && JN ? JN(t, e, {
    configurable: !0,
    enumerable: !0,
    value: n,
    writable: !0
  }) : t[e] = n;
}
var tw = Tce, yce = tw, vce = jD, Cce = Object.prototype, Rce = Cce.hasOwnProperty;
function Ace(t, e, n) {
  var r = t[e];
  (!(Rce.call(t, e) && vce(r, n)) || n === void 0 && !(e in t)) && yce(t, e, n);
}
var nw = Ace, Oce = nw, Nce = tw;
function Ice(t, e, n, r) {
  var a = !n;
  n || (n = {});
  for (var i = -1, s = e.length; ++i < s; ) {
    var l = e[i], c = r ? r(n[l], t[l], l, n, t) : void 0;
    c === void 0 && (c = t[l]), a ? Nce(n, l, c) : Oce(n, l, c);
  }
  return n;
}
var sp = Ice;
function xce(t, e) {
  for (var n = -1, r = Array(t); ++n < t; )
    r[n] = e(n);
  return r;
}
var Dce = xce;
function wce(t) {
  return t != null && typeof t == "object";
}
var lc = wce, Lce = rp, Mce = lc, kce = "[object Arguments]";
function Pce(t) {
  return Mce(t) && Lce(t) == kce;
}
var Fce = Pce, e2 = Fce, Bce = lc, rw = Object.prototype, Uce = rw.hasOwnProperty, Gce = rw.propertyIsEnumerable, Hce = e2(/* @__PURE__ */ function() {
  return arguments;
}()) ? e2 : function(t) {
  return Bce(t) && Uce.call(t, "callee") && !Gce.call(t, "callee");
}, Yce = Hce, zce = Array.isArray, eS = zce, Ed = { exports: {} };
function qce() {
  return !1;
}
var Vce = qce;
Ed.exports;
(function(t, e) {
  var n = Va, r = Vce, a = e && !e.nodeType && e, i = a && !0 && t && !t.nodeType && t, s = i && i.exports === a, l = s ? n.Buffer : void 0, c = l ? l.isBuffer : void 0, d = c || r;
  t.exports = d;
})(Ed, Ed.exports);
var aw = Ed.exports, $ce = 9007199254740991, Wce = /^(?:0|[1-9]\d*)$/;
function Kce(t, e) {
  var n = typeof t;
  return e = e ?? $ce, !!e && (n == "number" || n != "symbol" && Wce.test(t)) && t > -1 && t % 1 == 0 && t < e;
}
var Qce = Kce, jce = 9007199254740991;
function Xce(t) {
  return typeof t == "number" && t > -1 && t % 1 == 0 && t <= jce;
}
var iw = Xce, Zce = rp, Jce = iw, eue = lc, tue = "[object Arguments]", nue = "[object Array]", rue = "[object Boolean]", aue = "[object Date]", iue = "[object Error]", sue = "[object Function]", oue = "[object Map]", lue = "[object Number]", cue = "[object Object]", uue = "[object RegExp]", due = "[object Set]", pue = "[object String]", _ue = "[object WeakMap]", mue = "[object ArrayBuffer]", fue = "[object DataView]", gue = "[object Float32Array]", hue = "[object Float64Array]", Eue = "[object Int8Array]", Sue = "[object Int16Array]", bue = "[object Int32Array]", Tue = "[object Uint8Array]", yue = "[object Uint8ClampedArray]", vue = "[object Uint16Array]", Cue = "[object Uint32Array]", cn = {};
cn[gue] = cn[hue] = cn[Eue] = cn[Sue] = cn[bue] = cn[Tue] = cn[yue] = cn[vue] = cn[Cue] = !0;
cn[tue] = cn[nue] = cn[mue] = cn[rue] = cn[fue] = cn[aue] = cn[iue] = cn[sue] = cn[oue] = cn[lue] = cn[cue] = cn[uue] = cn[due] = cn[pue] = cn[_ue] = !1;
function Rue(t) {
  return eue(t) && Jce(t.length) && !!cn[Zce(t)];
}
var Aue = Rue;
function Oue(t) {
  return function(e) {
    return t(e);
  };
}
var tS = Oue, Sd = { exports: {} };
Sd.exports;
(function(t, e) {
  var n = XD, r = e && !e.nodeType && e, a = r && !0 && t && !t.nodeType && t, i = a && a.exports === r, s = i && n.process, l = function() {
    try {
      var c = a && a.require && a.require("util").types;
      return c || s && s.binding && s.binding("util");
    } catch {
    }
  }();
  t.exports = l;
})(Sd, Sd.exports);
var nS = Sd.exports, Nue = Aue, Iue = tS, t2 = nS, n2 = t2 && t2.isTypedArray, xue = n2 ? Iue(n2) : Nue, Due = xue, wue = Dce, Lue = Yce, Mue = eS, kue = aw, Pue = Qce, Fue = Due, Bue = Object.prototype, Uue = Bue.hasOwnProperty;
function Gue(t, e) {
  var n = Mue(t), r = !n && Lue(t), a = !n && !r && kue(t), i = !n && !r && !a && Fue(t), s = n || r || a || i, l = s ? wue(t.length, String) : [], c = l.length;
  for (var d in t)
    (e || Uue.call(t, d)) && !(s && // Safari 9 has enumerable `arguments.length` in strict mode.
    (d == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    a && (d == "offset" || d == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    i && (d == "buffer" || d == "byteLength" || d == "byteOffset") || // Skip index properties.
    Pue(d, c))) && l.push(d);
  return l;
}
var sw = Gue, Hue = Object.prototype;
function Yue(t) {
  var e = t && t.constructor, n = typeof e == "function" && e.prototype || Hue;
  return t === n;
}
var rS = Yue;
function zue(t, e) {
  return function(n) {
    return t(e(n));
  };
}
var ow = zue, que = ow, Vue = que(Object.keys, Object), $ue = Vue, Wue = rS, Kue = $ue, Que = Object.prototype, jue = Que.hasOwnProperty;
function Xue(t) {
  if (!Wue(t))
    return Kue(t);
  var e = [];
  for (var n in Object(t))
    jue.call(t, n) && n != "constructor" && e.push(n);
  return e;
}
var Zue = Xue, Jue = JD, ede = iw;
function tde(t) {
  return t != null && ede(t.length) && !Jue(t);
}
var lw = tde, nde = sw, rde = Zue, ade = lw;
function ide(t) {
  return ade(t) ? nde(t) : rde(t);
}
var aS = ide, sde = sp, ode = aS;
function lde(t, e) {
  return t && sde(e, ode(e), t);
}
var cde = lde;
function ude(t) {
  var e = [];
  if (t != null)
    for (var n in Object(t))
      e.push(n);
  return e;
}
var dde = ude, pde = oc, _de = rS, mde = dde, fde = Object.prototype, gde = fde.hasOwnProperty;
function hde(t) {
  if (!pde(t))
    return mde(t);
  var e = _de(t), n = [];
  for (var r in t)
    r == "constructor" && (e || !gde.call(t, r)) || n.push(r);
  return n;
}
var Ede = hde, Sde = sw, bde = Ede, Tde = lw;
function yde(t) {
  return Tde(t) ? Sde(t, !0) : bde(t);
}
var iS = yde, vde = sp, Cde = iS;
function Rde(t, e) {
  return t && vde(e, Cde(e), t);
}
var Ade = Rde, bd = { exports: {} };
bd.exports;
(function(t, e) {
  var n = Va, r = e && !e.nodeType && e, a = r && !0 && t && !t.nodeType && t, i = a && a.exports === r, s = i ? n.Buffer : void 0, l = s ? s.allocUnsafe : void 0;
  function c(d, p) {
    if (p)
      return d.slice();
    var _ = d.length, f = l ? l(_) : new d.constructor(_);
    return d.copy(f), f;
  }
  t.exports = c;
})(bd, bd.exports);
var Ode = bd.exports;
function Nde(t, e) {
  var n = -1, r = t.length;
  for (e || (e = Array(r)); ++n < r; )
    e[n] = t[n];
  return e;
}
var Ide = Nde;
function xde(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length, a = 0, i = []; ++n < r; ) {
    var s = t[n];
    e(s, n, t) && (i[a++] = s);
  }
  return i;
}
var Dde = xde;
function wde() {
  return [];
}
var cw = wde, Lde = Dde, Mde = cw, kde = Object.prototype, Pde = kde.propertyIsEnumerable, r2 = Object.getOwnPropertySymbols, Fde = r2 ? function(t) {
  return t == null ? [] : (t = Object(t), Lde(r2(t), function(e) {
    return Pde.call(t, e);
  }));
} : Mde, sS = Fde, Bde = sp, Ude = sS;
function Gde(t, e) {
  return Bde(t, Ude(t), e);
}
var Hde = Gde;
function Yde(t, e) {
  for (var n = -1, r = e.length, a = t.length; ++n < r; )
    t[a + n] = e[n];
  return t;
}
var uw = Yde, zde = ow, qde = zde(Object.getPrototypeOf, Object), dw = qde, Vde = uw, $de = dw, Wde = sS, Kde = cw, Qde = Object.getOwnPropertySymbols, jde = Qde ? function(t) {
  for (var e = []; t; )
    Vde(e, Wde(t)), t = $de(t);
  return e;
} : Kde, pw = jde, Xde = sp, Zde = pw;
function Jde(t, e) {
  return Xde(t, Zde(t), e);
}
var epe = Jde, tpe = uw, npe = eS;
function rpe(t, e, n) {
  var r = e(t);
  return npe(t) ? r : tpe(r, n(t));
}
var _w = rpe, ape = _w, ipe = sS, spe = aS;
function ope(t) {
  return ape(t, spe, ipe);
}
var lpe = ope, cpe = _w, upe = pw, dpe = iS;
function ppe(t) {
  return cpe(t, dpe, upe);
}
var _pe = ppe, mpe = ys, fpe = Va, gpe = mpe(fpe, "DataView"), hpe = gpe, Epe = ys, Spe = Va, bpe = Epe(Spe, "Promise"), Tpe = bpe, ype = ys, vpe = Va, Cpe = ype(vpe, "Set"), Rpe = Cpe, Ape = ys, Ope = Va, Npe = Ape(Ope, "WeakMap"), Ipe = Npe, _E = hpe, mE = J1, fE = Tpe, gE = Rpe, hE = Ipe, mw = rp, Ao = ew, a2 = "[object Map]", xpe = "[object Object]", i2 = "[object Promise]", s2 = "[object Set]", o2 = "[object WeakMap]", l2 = "[object DataView]", Dpe = Ao(_E), wpe = Ao(mE), Lpe = Ao(fE), Mpe = Ao(gE), kpe = Ao(hE), ls = mw;
(_E && ls(new _E(new ArrayBuffer(1))) != l2 || mE && ls(new mE()) != a2 || fE && ls(fE.resolve()) != i2 || gE && ls(new gE()) != s2 || hE && ls(new hE()) != o2) && (ls = function(t) {
  var e = mw(t), n = e == xpe ? t.constructor : void 0, r = n ? Ao(n) : "";
  if (r)
    switch (r) {
      case Dpe:
        return l2;
      case wpe:
        return a2;
      case Lpe:
        return i2;
      case Mpe:
        return s2;
      case kpe:
        return o2;
    }
  return e;
});
var oS = ls, Ppe = Object.prototype, Fpe = Ppe.hasOwnProperty;
function Bpe(t) {
  var e = t.length, n = new t.constructor(e);
  return e && typeof t[0] == "string" && Fpe.call(t, "index") && (n.index = t.index, n.input = t.input), n;
}
var Upe = Bpe, Gpe = Va, Hpe = Gpe.Uint8Array, Ype = Hpe, c2 = Ype;
function zpe(t) {
  var e = new t.constructor(t.byteLength);
  return new c2(e).set(new c2(t)), e;
}
var lS = zpe, qpe = lS;
function Vpe(t, e) {
  var n = e ? qpe(t.buffer) : t.buffer;
  return new t.constructor(n, t.byteOffset, t.byteLength);
}
var $pe = Vpe, Wpe = /\w*$/;
function Kpe(t) {
  var e = new t.constructor(t.source, Wpe.exec(t));
  return e.lastIndex = t.lastIndex, e;
}
var Qpe = Kpe, u2 = Z1, d2 = u2 ? u2.prototype : void 0, p2 = d2 ? d2.valueOf : void 0;
function jpe(t) {
  return p2 ? Object(p2.call(t)) : {};
}
var Xpe = jpe, Zpe = lS;
function Jpe(t, e) {
  var n = e ? Zpe(t.buffer) : t.buffer;
  return new t.constructor(n, t.byteOffset, t.length);
}
var e0e = Jpe, t0e = lS, n0e = $pe, r0e = Qpe, a0e = Xpe, i0e = e0e, s0e = "[object Boolean]", o0e = "[object Date]", l0e = "[object Map]", c0e = "[object Number]", u0e = "[object RegExp]", d0e = "[object Set]", p0e = "[object String]", _0e = "[object Symbol]", m0e = "[object ArrayBuffer]", f0e = "[object DataView]", g0e = "[object Float32Array]", h0e = "[object Float64Array]", E0e = "[object Int8Array]", S0e = "[object Int16Array]", b0e = "[object Int32Array]", T0e = "[object Uint8Array]", y0e = "[object Uint8ClampedArray]", v0e = "[object Uint16Array]", C0e = "[object Uint32Array]";
function R0e(t, e, n) {
  var r = t.constructor;
  switch (e) {
    case m0e:
      return t0e(t);
    case s0e:
    case o0e:
      return new r(+t);
    case f0e:
      return n0e(t, n);
    case g0e:
    case h0e:
    case E0e:
    case S0e:
    case b0e:
    case T0e:
    case y0e:
    case v0e:
    case C0e:
      return i0e(t, n);
    case l0e:
      return new r();
    case c0e:
    case p0e:
      return new r(t);
    case u0e:
      return r0e(t);
    case d0e:
      return new r();
    case _0e:
      return a0e(t);
  }
}
var A0e = R0e, O0e = oc, _2 = Object.create, N0e = /* @__PURE__ */ function() {
  function t() {
  }
  return function(e) {
    if (!O0e(e))
      return {};
    if (_2)
      return _2(e);
    t.prototype = e;
    var n = new t();
    return t.prototype = void 0, n;
  };
}(), I0e = N0e, x0e = I0e, D0e = dw, w0e = rS;
function L0e(t) {
  return typeof t.constructor == "function" && !w0e(t) ? x0e(D0e(t)) : {};
}
var M0e = L0e, k0e = oS, P0e = lc, F0e = "[object Map]";
function B0e(t) {
  return P0e(t) && k0e(t) == F0e;
}
var U0e = B0e, G0e = U0e, H0e = tS, m2 = nS, f2 = m2 && m2.isMap, Y0e = f2 ? H0e(f2) : G0e, z0e = Y0e, q0e = oS, V0e = lc, $0e = "[object Set]";
function W0e(t) {
  return V0e(t) && q0e(t) == $0e;
}
var K0e = W0e, Q0e = K0e, j0e = tS, g2 = nS, h2 = g2 && g2.isSet, X0e = h2 ? j0e(h2) : Q0e, Z0e = X0e, J0e = fce, e_e = hce, t_e = nw, n_e = cde, r_e = Ade, a_e = Ode, i_e = Ide, s_e = Hde, o_e = epe, l_e = lpe, c_e = _pe, u_e = oS, d_e = Upe, p_e = A0e, __e = M0e, m_e = eS, f_e = aw, g_e = z0e, h_e = oc, E_e = Z0e, S_e = aS, b_e = iS, T_e = 1, y_e = 2, v_e = 4, fw = "[object Arguments]", C_e = "[object Array]", R_e = "[object Boolean]", A_e = "[object Date]", O_e = "[object Error]", gw = "[object Function]", N_e = "[object GeneratorFunction]", I_e = "[object Map]", x_e = "[object Number]", hw = "[object Object]", D_e = "[object RegExp]", w_e = "[object Set]", L_e = "[object String]", M_e = "[object Symbol]", k_e = "[object WeakMap]", P_e = "[object ArrayBuffer]", F_e = "[object DataView]", B_e = "[object Float32Array]", U_e = "[object Float64Array]", G_e = "[object Int8Array]", H_e = "[object Int16Array]", Y_e = "[object Int32Array]", z_e = "[object Uint8Array]", q_e = "[object Uint8ClampedArray]", V_e = "[object Uint16Array]", $_e = "[object Uint32Array]", an = {};
an[fw] = an[C_e] = an[P_e] = an[F_e] = an[R_e] = an[A_e] = an[B_e] = an[U_e] = an[G_e] = an[H_e] = an[Y_e] = an[I_e] = an[x_e] = an[hw] = an[D_e] = an[w_e] = an[L_e] = an[M_e] = an[z_e] = an[q_e] = an[V_e] = an[$_e] = !0;
an[O_e] = an[gw] = an[k_e] = !1;
function Wu(t, e, n, r, a, i) {
  var s, l = e & T_e, c = e & y_e, d = e & v_e;
  if (n && (s = a ? n(t, r, a, i) : n(t)), s !== void 0)
    return s;
  if (!h_e(t))
    return t;
  var p = m_e(t);
  if (p) {
    if (s = d_e(t), !l)
      return i_e(t, s);
  } else {
    var _ = u_e(t), f = _ == gw || _ == N_e;
    if (f_e(t))
      return a_e(t, l);
    if (_ == hw || _ == fw || f && !a) {
      if (s = c || f ? {} : __e(t), !l)
        return c ? o_e(t, r_e(s, t)) : s_e(t, n_e(s, t));
    } else {
      if (!an[_])
        return a ? t : {};
      s = p_e(t, _, l);
    }
  }
  i || (i = new J0e());
  var g = i.get(t);
  if (g)
    return g;
  i.set(t, s), E_e(t) ? t.forEach(function(R) {
    s.add(Wu(R, e, n, R, t, i));
  }) : g_e(t) && t.forEach(function(R, A) {
    s.set(A, Wu(R, e, n, A, t, i));
  });
  var E = d ? c ? c_e : l_e : c ? b_e : S_e, T = p ? void 0 : E(t);
  return e_e(T || t, function(R, A) {
    T && (A = R, R = t[A]), t_e(s, A, Wu(R, e, n, A, t, i));
  }), s;
}
var W_e = Wu, K_e = W_e, Q_e = 1, j_e = 4;
function X_e(t) {
  return K_e(t, Q_e | j_e);
}
var Z_e = X_e;
const J_e = /* @__PURE__ */ oo(Z_e);
function eme(t) {
  const e = {};
  return J_e(t).reverse()?.forEach((r) => {
    const { createdAt: a, content: i } = r, s = {
      day: "numeric",
      month: "numeric",
      year: "numeric"
    }, l = new Date(a).toLocaleDateString(void 0, s);
    e[l] || (e[l] = []);
    const c = {
      hour: "numeric",
      minute: "numeric"
    };
    e[l].push({
      key: a,
      hour: new Date(a).toLocaleTimeString(void 0, c),
      content: i
    });
  }), e;
}
function tme({ onClick: t }) {
  const [e, n] = Pa(X1), r = un(), [a, i] = Hn(null);
  e.open && !a && r.current && i(r.current);
  const s = (f) => n((g) => ({ ...g, open: f })), l = (
    // @ts-ignore
    /* @__PURE__ */ C.jsxs(
      Fa,
      {
        disabled: !0,
        direction: "row",
        p: 1,
        justifyContent: "space-between",
        alignItems: "center",
        children: [
          /* @__PURE__ */ C.jsx(
            Sa,
            {
              color: "text.primary",
              sx: { fontSize: "14px", fontWeight: 700 },
              children: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.history.index.lastInputs" })
            }
          ),
          /* @__PURE__ */ C.jsx(
            zl,
            {
              onClick: () => n((f) => ({ ...f, inputs: [] })),
              children: /* @__PURE__ */ C.jsx(_7, {})
            }
          )
        ]
      },
      "title"
    )
  ), c = e?.inputs.length === 0 ? (
    // @ts-ignore
    /* @__PURE__ */ C.jsx("div", { id: "history-empty", disabled: !0, children: /* @__PURE__ */ C.jsx(
      Sa,
      {
        color: "text.secondary",
        sx: {
          fontSize: "12px",
          fontWeight: 700,
          padding: "16px 12px",
          textTransform: "uppercase"
        },
        children: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.history.index.noInputs" })
      }
    ) }, "empty")
  ) : null, d = e.inputs ? null : (
    // @ts-ignore
    /* @__PURE__ */ C.jsx("div", { id: "history-loading", disabled: !0, children: /* @__PURE__ */ C.jsx(
      Sa,
      {
        color: "text.secondary",
        sx: {
          fontSize: "12px",
          fontWeight: 700,
          padding: "16px 12px",
          textTransform: "uppercase"
        },
        children: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.history.index.loading" })
      }
    ) }, "loading")
  ), p = [l, c, d];
  if (e.inputs) {
    const f = eme(e.inputs);
    Object.keys(f).forEach((g) => {
      p.push(
        // @ts-ignore
        /* @__PURE__ */ C.jsx("div", { disabled: !0, children: /* @__PURE__ */ C.jsx(
          Sa,
          {
            color: "text.primary",
            sx: {
              p: 1,
              fontSize: "10px",
              fontWeight: 700,
              color: Bt[500]
            },
            children: g
          }
        ) }, g)
      );
      let E = "";
      f[g].forEach((T) => {
        E !== T.content && (E = T.content, p.push(
          /* @__PURE__ */ C.jsx(
            DP,
            {
              className: "history-item",
              onClick: (R) => {
                R.stopPropagation(), R.preventDefault(), s(!1), t(T.content);
              },
              disableRipple: !0,
              sx: {
                p: 1,
                alignItems: "baseline",
                borderRadius: "4px"
              },
              children: /* @__PURE__ */ C.jsx(
                Sa,
                {
                  color: "text.primary",
                  sx: {
                    whiteSpace: "pre-wrap",
                    fontSize: "14px",
                    maxHeight: "50px",
                    display: "-webkit-box",
                    WebkitLineClamp: "2",
                    WebkitBoxOrient: "vertical",
                    flexGrow: 0,
                    overflow: "hidden",
                    textOverflow: "ellipsis",
                    lineHeight: "24px"
                  },
                  children: T.content
                }
              )
            },
            T.key
          )
        ));
      });
    });
  }
  const _ = a ? /* @__PURE__ */ C.jsx(
    wP,
    {
      autoFocus: !0,
      anchorEl: a,
      open: e.open,
      onClose: () => s(!1),
      PaperProps: {
        sx: {
          p: 1,
          backgroundImage: "none",
          mt: -4,
          ml: -1,
          overflow: "visible",
          maxHeight: "314px",
          width: "334px",
          overflowY: "auto",
          border: (f) => `1px solid ${f.palette.divider}`,
          boxShadow: (f) => f.palette.mode === "light" ? "0px 2px 4px 0px #0000000D" : "0px 10px 10px 0px #0000000D"
        }
      },
      anchorOrigin: { vertical: "top", horizontal: "left" },
      transformOrigin: { vertical: "bottom", horizontal: "left" },
      children: p
    }
  ) : null;
  return /* @__PURE__ */ C.jsx("div", { ref: r, children: _ });
}
function EE() {
  return EE = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
    }
    return t;
  }, EE.apply(this, arguments);
}
var Ew = ["shift", "alt", "meta", "mod", "ctrl"], nme = {
  esc: "escape",
  return: "enter",
  ".": "period",
  ",": "comma",
  "-": "slash",
  " ": "space",
  "`": "backquote",
  "#": "backslash",
  "+": "bracketright",
  ShiftLeft: "shift",
  ShiftRight: "shift",
  AltLeft: "alt",
  AltRight: "alt",
  MetaLeft: "meta",
  MetaRight: "meta",
  OSLeft: "meta",
  OSRight: "meta",
  ControlLeft: "ctrl",
  ControlRight: "ctrl"
};
function wi(t) {
  return (nme[t] || t).trim().toLowerCase().replace(/key|digit|numpad|arrow/, "");
}
function rme(t) {
  return Ew.includes(t);
}
function lh(t, e) {
  return e === void 0 && (e = ","), t.split(e);
}
function ch(t, e, n) {
  e === void 0 && (e = "+");
  var r = t.toLocaleLowerCase().split(e).map(function(s) {
    return wi(s);
  }), a = {
    alt: r.includes("alt"),
    ctrl: r.includes("ctrl") || r.includes("control"),
    shift: r.includes("shift"),
    meta: r.includes("meta"),
    mod: r.includes("mod")
  }, i = r.filter(function(s) {
    return !Ew.includes(s);
  });
  return EE({}, a, {
    keys: i,
    description: n
  });
}
(function() {
  typeof document < "u" && (document.addEventListener("keydown", function(t) {
    t.key !== void 0 && Sw([wi(t.key), wi(t.code)]);
  }), document.addEventListener("keyup", function(t) {
    t.key !== void 0 && bw([wi(t.key), wi(t.code)]);
  })), typeof window < "u" && window.addEventListener("blur", function() {
    Li.clear();
  });
})();
var Li = /* @__PURE__ */ new Set();
function cS(t) {
  return Array.isArray(t);
}
function ame(t, e) {
  e === void 0 && (e = ",");
  var n = cS(t) ? t : t.split(e);
  return n.every(function(r) {
    return Li.has(r.trim().toLowerCase());
  });
}
function Sw(t) {
  var e = Array.isArray(t) ? t : [t];
  Li.has("meta") && Li.forEach(function(n) {
    return !rme(n) && Li.delete(n.toLowerCase());
  }), e.forEach(function(n) {
    return Li.add(n.toLowerCase());
  });
}
function bw(t) {
  var e = Array.isArray(t) ? t : [t];
  t === "meta" ? Li.clear() : e.forEach(function(n) {
    return Li.delete(n.toLowerCase());
  });
}
function ime(t, e, n) {
  (typeof n == "function" && n(t, e) || n === !0) && t.preventDefault();
}
function sme(t, e, n) {
  return typeof n == "function" ? n(t, e) : n === !0 || n === void 0;
}
function ome(t) {
  return Tw(t, ["input", "textarea", "select"]);
}
function Tw(t, e) {
  var n = t.target;
  e === void 0 && (e = !1);
  var r = n && n.tagName;
  return cS(e) ? !!(r && e && e.some(function(a) {
    return a.toLowerCase() === r.toLowerCase();
  })) : !!(r && e && e === !0);
}
function lme(t, e) {
  return t.length === 0 && e ? (console.warn('A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'), !0) : e ? t.some(function(n) {
    return e.includes(n);
  }) || t.includes("*") : !0;
}
var cme = function(e, n, r) {
  r === void 0 && (r = !1);
  var a = n.alt, i = n.meta, s = n.mod, l = n.shift, c = n.ctrl, d = n.keys, p = e.key, _ = e.code, f = e.ctrlKey, g = e.metaKey, E = e.shiftKey, T = e.altKey, R = wi(_), A = p.toLowerCase();
  if (!r) {
    if (a === !T && A !== "alt" || l === !E && A !== "shift")
      return !1;
    if (s) {
      if (!g && !f)
        return !1;
    } else if (i === !g && A !== "meta" && A !== "os" || c === !f && A !== "ctrl" && A !== "control")
      return !1;
  }
  return d && d.length === 1 && (d.includes(A) || d.includes(R)) ? !0 : d ? ame(d) : !d;
}, ume = /* @__PURE__ */ so(void 0), dme = function() {
  return qn(ume);
};
function yw(t, e) {
  return t && e && typeof t == "object" && typeof e == "object" ? Object.keys(t).length === Object.keys(e).length && //@ts-ignore
  Object.keys(t).reduce(function(n, r) {
    return n && yw(t[r], e[r]);
  }, !0) : t === e;
}
var pme = /* @__PURE__ */ so({
  hotkeys: [],
  enabledScopes: [],
  toggleScope: function() {
  },
  enableScope: function() {
  },
  disableScope: function() {
  }
}), _me = function() {
  return qn(pme);
};
function mme(t) {
  var e = un(void 0);
  return yw(e.current, t) || (e.current = t), e.current;
}
var E2 = function(e) {
  e.stopPropagation(), e.preventDefault(), e.stopImmediatePropagation();
}, fme = typeof window < "u" ? S2 : wn;
function gme(t, e, n, r) {
  var a = un(null), i = un(!1), s = n instanceof Array ? r instanceof Array ? void 0 : r : n, l = cS(t) ? t.join(s?.splitKey) : t, c = n instanceof Array ? n : r instanceof Array ? r : void 0, d = dt(e, c ?? []), p = un(d);
  c ? p.current = d : p.current = e;
  var _ = mme(s), f = _me(), g = f.enabledScopes, E = dme();
  return fme(function() {
    if (!(_?.enabled === !1 || !lme(g, _?.scopes))) {
      var T = function(P, D) {
        var L;
        if (D === void 0 && (D = !1), !(ome(P) && !Tw(P, _?.enableOnFormTags)) && !(_ != null && _.ignoreEventWhen != null && _.ignoreEventWhen(P))) {
          if (a.current !== null && document.activeElement !== a.current && !a.current.contains(document.activeElement)) {
            E2(P);
            return;
          }
          (L = P.target) != null && L.isContentEditable && !(_ != null && _.enableOnContentEditable) || lh(l, _?.splitKey).forEach(function(K) {
            var J, X = ch(K, _?.combinationKey);
            if (cme(P, X, _?.ignoreModifiers) || (J = X.keys) != null && J.includes("*")) {
              if (D && i.current)
                return;
              if (ime(P, X, _?.preventDefault), !sme(P, X, _?.enabled)) {
                E2(P);
                return;
              }
              p.current(P, X), D || (i.current = !0);
            }
          });
        }
      }, R = function(P) {
        P.key !== void 0 && (Sw(wi(P.code)), (_?.keydown === void 0 && _?.keyup !== !0 || _ != null && _.keydown) && T(P));
      }, A = function(P) {
        P.key !== void 0 && (bw(wi(P.code)), i.current = !1, _ != null && _.keyup && T(P, !0));
      }, I = a.current || s?.document || document;
      return I.addEventListener("keyup", A), I.addEventListener("keydown", R), E && lh(l, _?.splitKey).forEach(function(x) {
        return E.addHotkey(ch(x, _?.combinationKey, _?.description));
      }), function() {
        I.removeEventListener("keyup", A), I.removeEventListener("keydown", R), E && lh(l, _?.splitKey).forEach(function(x) {
          return E.removeHotkey(ch(x, _?.combinationKey, _?.description));
        });
      };
    }
  }, [l, _, g]), a;
}
const hme = (t) => /* @__PURE__ */ C.jsxs(
  xr,
  {
    ...t,
    style: {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      fill: "none",
      stroke: "currentColor"
    },
    viewBox: "0 0 24 24",
    children: [
      /* @__PURE__ */ C.jsx("path", { d: "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z" }),
      /* @__PURE__ */ C.jsx("path", { d: "M19 10v2a7 7 0 0 1-14 0v-2" }),
      /* @__PURE__ */ C.jsx("line", { x1: "12", x2: "12", y1: "19", y2: "22" })
    ]
  }
), Eme = (t) => /* @__PURE__ */ C.jsxs(
  xr,
  {
    ...t,
    style: {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      fill: "none",
      stroke: "currentColor"
    },
    viewBox: "0 0 24 24",
    children: [
      /* @__PURE__ */ C.jsx("line", { x1: "2", x2: "22", y1: "2", y2: "22" }),
      /* @__PURE__ */ C.jsx("path", { d: "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2" }),
      /* @__PURE__ */ C.jsx("path", { d: "M5 10v2a7 7 0 0 0 12 5" }),
      /* @__PURE__ */ C.jsx("path", { d: "M15 9.34V5a3 3 0 0 0-5.68-1.33" }),
      /* @__PURE__ */ C.jsx("path", { d: "M9 9v3a3 3 0 0 0 5.12 2.12" }),
      /* @__PURE__ */ C.jsx("line", { x1: "12", x2: "12", y1: "19", y2: "22" })
    ]
  }
), Sme = ({ disabled: t }) => {
  const { config: e } = ua(), { startConversation: n, endConversation: r, audioConnection: a } = YE(), i = !!e?.features.audio.enabled;
  gme(
    "p",
    () => {
      if (i)
        return a === "on" ? r() : n();
    },
    [i, a, n, r]
  );
  const s = R2((l) => l.breakpoints.down("sm")) ? "small" : "medium";
  return i ? /* @__PURE__ */ C.jsx(C.Fragment, { children: /* @__PURE__ */ C.jsx(
    Nl,
    {
      title: /* @__PURE__ */ C.jsx(
        Yn,
        {
          path: a === "on" ? "components.organisms.chat.inputBox.speechButton.stop" : a === "off" ? "components.organisms.chat.inputBox.speechButton.start" : "components.organisms.chat.inputBox.speechButton.loading",
          suffix: " (P)"
        }
      ),
      children: /* @__PURE__ */ C.jsx("span", { children: /* @__PURE__ */ C.jsxs(
        zl,
        {
          disabled: t,
          color: "inherit",
          size: s,
          onClick: a === "on" ? r : a === "off" ? n : void 0,
          children: [
            a === "on" ? /* @__PURE__ */ C.jsx(Eme, { fontSize: s }) : null,
            a === "off" ? /* @__PURE__ */ C.jsx(hme, { fontSize: s }) : null,
            a === "connecting" ? /* @__PURE__ */ C.jsx(
              C2,
              {
                color: "inherit",
                variant: "indeterminate",
                size: 18
              }
            ) : null
          ]
        }
      ) })
    }
  ) }) : null;
}, bme = ({ disabled: t, onSubmit: e }) => {
  const { loading: n } = uo(), { firstInteraction: r } = po(), { stopTask: a } = zi(), i = () => {
    a();
  };
  return /* @__PURE__ */ C.jsx(
    Zt,
    {
      sx: {
        mr: 1,
        color: "text.secondary"
      },
      children: n && r ? /* @__PURE__ */ C.jsx(
        Nl,
        {
          title: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.inputBox.SubmitButton.stopTask" }),
          children: /* @__PURE__ */ C.jsx(zr, { id: "stop-button", onClick: i, children: /* @__PURE__ */ C.jsx(m7, {}) })
        }
      ) : /* @__PURE__ */ C.jsx(
        Nl,
        {
          title: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.inputBox.SubmitButton.sendMessage" }),
          children: /* @__PURE__ */ C.jsx(zr, { disabled: t, color: "inherit", onClick: e, children: /* @__PURE__ */ C.jsx(f7, {}) })
        }
      )
    }
  );
}, Tme = (t) => /* @__PURE__ */ C.jsx(
  xr,
  {
    ...t,
    style: {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      fill: "none",
      stroke: "currentColor"
    },
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ C.jsx("path", { d: "m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48" })
  }
), yme = ({
  disabled: t,
  fileSpec: e,
  onFileUpload: n,
  onFileUploadError: r
}) => {
  const { config: a } = ua(), i = VE({
    spec: e,
    onResolved: (d) => n(d),
    onError: r,
    options: { noDrag: !0 }
  }), s = R2((d) => d.breakpoints.down("sm")) ? "small" : "medium";
  if (!i || !a?.features?.spontaneous_file_upload?.enabled)
    return null;
  const { getRootProps: l, getInputProps: c } = i;
  return /* @__PURE__ */ C.jsx(
    Nl,
    {
      title: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.inputBox.UploadButton.attachFiles" }),
      children: /* @__PURE__ */ C.jsxs("span", { children: [
        /* @__PURE__ */ C.jsx("input", { id: "upload-button-input", ...c() }),
        /* @__PURE__ */ C.jsx(
          zl,
          {
            id: t ? "upload-button-loading" : "upload-button",
            disabled: t,
            color: "inherit",
            size: s,
            ...l({ className: "dropzone" }),
            children: /* @__PURE__ */ C.jsx(Tme, { fontSize: s })
          }
        )
      ] })
    }
  );
};
function vme(t) {
  const e = t.querySelector("textarea");
  return e ? e.value.split(`
`).length : 0;
}
const Cme = gs(
  ({ fileSpec: t, onFileUpload: e, onFileUploadError: n, onSubmit: r, onReply: a }) => {
    const [i, s] = Pa(j1), l = Yt(X1), c = Yt(Jie), d = un(null), {
      loading: p,
      askUser: _,
      chatSettingsInputs: f,
      disabled: g
    } = uo(), E = g || !!i.find((K) => !K.uploaded), [T, R] = Hn(""), [A, I] = Hn(!1);
    K1(), wn(() => {
      const K = (X) => {
        if (X.clipboardData && X.clipboardData.items) {
          const $ = Array.from(X.clipboardData.items);
          if (X.clipboardData.getData("text/plain"))
            return;
          $.forEach((ce) => {
            if (ce.kind === "file") {
              const ve = ce.getAsFile();
              ve && e([ve]);
            }
          });
        }
      };
      if (!d.current)
        return;
      const J = d.current;
      return J.addEventListener("paste", K), () => {
        J.removeEventListener("paste", K);
      };
    }, []), wn(() => {
      d.current && !p && !E && d.current.focus();
    }, [p, E]);
    const x = dt(() => {
      E || T === "" && i.length === 0 || (_ ? a(T) : r(T, i), s([]), R(""));
    }, [
      T,
      E,
      R,
      _,
      i,
      s,
      r
    ]), P = dt(
      (K) => {
        K.key === "Enter" && !K.shiftKey ? A || (K.preventDefault(), x()) : K.key === "ArrowUp" && vme(K.currentTarget) <= 1 && l((X) => ({ ...X, open: !0 }));
      },
      [x, l, A]
    ), D = dt((K) => {
      d.current && R(K);
    }, []), L = /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
      /* @__PURE__ */ C.jsx(tme, { disabled: E, onClick: D }),
      /* @__PURE__ */ C.jsx(
        yme,
        {
          disabled: E,
          fileSpec: t,
          onFileUploadError: n,
          onFileUpload: e
        }
      ),
      f.length > 0 && /* @__PURE__ */ C.jsx(
        zl,
        {
          id: "chat-settings-open-modal",
          disabled: E,
          color: "inherit",
          onClick: () => c(!0),
          children: /* @__PURE__ */ C.jsx(d7, {})
        }
      ),
      /* @__PURE__ */ C.jsx(Sme, { disabled: E })
    ] });
    return /* @__PURE__ */ C.jsxs(
      Fa,
      {
        sx: {
          backgroundColor: "background.paper",
          borderRadius: "1.5rem",
          boxShadow: "box-shadow: 0px 2px 4px 0px #0000000D",
          textarea: {
            height: "34px",
            maxHeight: "30vh",
            overflowY: "auto !important",
            resize: "none",
            paddingBottom: "0.7rem",
            paddingTop: "0.7rem",
            color: "text.primary",
            lineHeight: "24px"
          }
        },
        children: [
          i.length > 0 ? /* @__PURE__ */ C.jsx(
            mn,
            {
              sx: {
                mt: 2,
                mx: 2,
                padding: "2px"
              },
              children: /* @__PURE__ */ C.jsx(yse, {})
            }
          ) : null,
          /* @__PURE__ */ C.jsx(
            v2,
            {
              inputRef: d,
              id: "chat-input",
              autoFocus: !0,
              multiline: !0,
              variant: "standard",
              autoComplete: "false",
              placeholder: "Type your message here...",
              disabled: E,
              onChange: (K) => R(K.target.value),
              onKeyDown: P,
              onCompositionStart: () => I(!0),
              onCompositionEnd: () => I(!1),
              value: T,
              fullWidth: !0,
              InputProps: {
                disableUnderline: !0,
                startAdornment: /* @__PURE__ */ C.jsx(
                  p7,
                  {
                    sx: { ml: 1, color: "text.secondary" },
                    position: "start",
                    children: L
                  }
                ),
                endAdornment: /* @__PURE__ */ C.jsx(bme, { onSubmit: x, disabled: E || !T })
              }
            }
          )
        ]
      }
    );
  }
), Rme = gs(
  ({
    fileSpec: t,
    onFileUpload: e,
    onFileUploadError: n,
    setAutoScroll: r,
    autoScroll: a
  }) => {
    const i = Jd(), s = Yt(X1), { user: l } = Id(), { sendMessage: c, replyMessage: d } = zi(), p = dt(
      async (f, g) => {
        const E = {
          threadId: "",
          id: ms(),
          name: l?.identifier || "User",
          type: "user_message",
          output: f,
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        };
        s((R) => {
          const I = [...R.inputs || []];
          return I.push({
            content: f,
            createdAt: (/* @__PURE__ */ new Date()).getTime()
          }), {
            ...R,
            inputs: I.length > 50 ? I.slice(I.length - 50) : I
          };
        });
        const T = g?.filter((R) => !!R.serverId).map((R) => ({ id: R.serverId }));
        r(!0), c(E, T);
      },
      [l, c]
    ), _ = dt(
      async (f) => {
        const g = {
          threadId: "",
          id: ms(),
          name: l?.identifier || "User",
          type: "user_message",
          output: f,
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        };
        d(g), r(!0);
      },
      [l, d]
    );
    return /* @__PURE__ */ C.jsxs(
      mn,
      {
        display: "flex",
        position: "relative",
        flexDirection: "column",
        gap: 1,
        pb: 2,
        px: 2,
        sx: {
          boxSizing: "border-box",
          width: "100%",
          maxWidth: i,
          m: "auto",
          justifyContent: "center"
        },
        children: [
          a ? null : /* @__PURE__ */ C.jsx(lse, { onClick: () => r(!0) }),
          /* @__PURE__ */ C.jsx(mn, { children: /* @__PURE__ */ C.jsx(
            Cme,
            {
              fileSpec: t,
              onFileUpload: e,
              onFileUploadError: n,
              onSubmit: p,
              onReply: _
            }
          ) }),
          /* @__PURE__ */ C.jsx(Sse, {})
        ]
      }
    );
  }
);
function Ame({ starter: t }) {
  const e = qn(Yi), { sendMessage: n } = zi(), { loading: r } = uo(), { user: a } = Id(), i = dt(async () => {
    const s = {
      threadId: "",
      id: ms(),
      name: a?.identifier || "User",
      type: "user_message",
      output: t.message,
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    };
    n(s, []);
  }, [a, n, t]);
  return /* @__PURE__ */ C.jsx(
    LP,
    {
      id: `starter-${t.label.trim().toLowerCase().replaceAll(" ", "-")}`,
      fullWidth: !0,
      disabled: r,
      color: "inherit",
      sx: {
        border: (s) => `1px solid ${s.palette.divider}`,
        borderRadius: "1rem",
        height: 100,
        p: 2,
        textTransform: "none",
        justifyContent: "flex-start"
      },
      onClick: i,
      children: /* @__PURE__ */ C.jsxs(Fa, { gap: 0.5, flexGrow: 1, height: "100%", children: [
        t.icon ? /* @__PURE__ */ C.jsx(
          "img",
          {
            style: { borderRadius: "50%" },
            src: t.icon?.startsWith("/public") ? e.buildEndpoint(t.icon) : t.icon,
            alt: t.label,
            height: 20,
            width: 20
          }
        ) : /* @__PURE__ */ C.jsx(mn, { sx: { height: 20, width: 20 } }),
        /* @__PURE__ */ C.jsx(
          Sa,
          {
            sx: {
              overflow: "hidden",
              textOverflow: "ellipsis",
              display: "-webkit-box",
              WebkitLineClamp: "2",
              WebkitBoxOrient: "vertical",
              fontSize: "14px"
            },
            color: "text.secondary",
            align: "left",
            children: t.label
          }
        )
      ] })
    }
  );
}
const vw = (t) => {
  const e = ["user_message", "assistant_message"];
  return t.some(
    (n) => e.includes(n.type) || vw(n.steps || [])
  );
};
function Ome({ hideLogo: t }) {
  const { messages: e } = po(), [n, r] = Hn(!0), { chatProfile: a } = xd(), i = qn(Yi), { config: s } = ua(), l = i?.buildEndpoint("/avatars/default");
  wn(() => {
    r(!vw(e));
  }, [e]);
  const c = Cn(() => s?.chatProfiles.find((_) => _.name === a), [s, a]), d = Cn(() => {
    const _ = c?.name;
    let f = c?.icon || l;
    return f?.startsWith("/public") && (f = i.buildEndpoint(f)), /* @__PURE__ */ C.jsxs(Fa, { gap: 2, alignItems: "center", children: [
      /* @__PURE__ */ C.jsx(MP, { sx: { height: 48, width: 48 }, src: f }),
      _ ? /* @__PURE__ */ C.jsx(
        Sa,
        {
          color: "text.primary",
          sx: { fontSize: "1.1rem", fontWeight: 600 },
          children: _
        }
      ) : null
    ] });
  }, [s, a, c]), p = Cn(() => {
    if (a) {
      const _ = s?.chatProfiles.find(
        (f) => f.name === a
      );
      if (_?.starters)
        return _.starters.slice(0, 4);
    }
    return s?.starters;
  }, [s, a]);
  return p?.length ? /* @__PURE__ */ C.jsx(DT, { in: n, children: /* @__PURE__ */ C.jsxs(
    Fa,
    {
      position: "absolute",
      zIndex: n ? 1 : -1,
      width: "100%",
      height: "100%",
      mx: "auto",
      left: 0,
      right: 0,
      sx: { overflowY: "auto" },
      maxWidth: "min(48rem, 80vw)",
      justifyContent: t ? "end" : "center",
      alignItems: "center",
      gap: 6,
      px: 2,
      boxSizing: "border-box",
      children: [
        t ? null : /* @__PURE__ */ C.jsx(Fa, { children: d }),
        /* @__PURE__ */ C.jsx(IT, { container: !0, spacing: 2, minHeight: 100, justifyContent: "center", children: p?.map((_, f) => /* @__PURE__ */ C.jsx(DT, { in: n, timeout: f * 300, children: /* @__PURE__ */ C.jsx(IT, { item: !0, xs: 6, sm: 3, children: /* @__PURE__ */ C.jsx(Ame, { starter: _ }) }) }, f)) })
      ]
    }
  ) }) : null;
}
const qfe = () => {
  const { user: t } = Id(), { config: e } = ua(), n = Yt(j1), r = Yt(uI), [a, i] = Hn(!0), { error: s, disabled: l } = uo(), { uploadFile: c } = zi(), d = un(c), p = D2(), _ = Cn(
    () => ({
      max_size_mb: e?.features?.spontaneous_file_upload?.max_size_mb || 500,
      max_files: e?.features?.spontaneous_file_upload?.max_files || 20,
      accept: e?.features?.spontaneous_file_upload?.accept || ["*/*"]
    }),
    [e]
  ), { t: f } = K1(), g = Jd();
  wn(() => {
    d.current = c;
  }, [c]);
  const E = dt(
    (x) => {
      const P = x.map((D) => {
        const L = ms(), { xhr: K, promise: J } = d.current(D, (X) => {
          n(
            ($) => $.map((ae) => ae.id === L ? {
              ...ae,
              uploadProgress: X
            } : ae)
          );
        });
        return J.then((X) => {
          n(
            ($) => $.map((ae) => ae.id === L ? {
              ...ae,
              // Update with the server ID
              serverId: X.id,
              uploaded: !0,
              uploadProgress: 100,
              cancel: void 0
            } : ae)
          );
        }).catch((X) => {
          si.error(
            `${f("components.organisms.chat.index.failedToUpload")} ${D.name}: ${X.message}`
          ), n(
            ($) => $.filter((ae) => ae.id !== L)
          );
        }), {
          id: L,
          type: D.type,
          name: D.name,
          size: D.size,
          uploadProgress: 0,
          cancel: () => {
            si.info(
              `${f("components.organisms.chat.index.cancelledUploadOf")} ${D.name}`
            ), K.abort(), n(
              (X) => X.filter(($) => $.id !== L)
            );
          },
          remove: () => {
            n(
              (X) => X.filter(($) => $.id !== L)
            );
          }
        };
      });
      n((D) => D.concat(P));
    },
    [c]
  ), T = dt(
    (x) => si.error(x),
    [si]
  ), R = VE({
    spec: _,
    onResolved: E,
    onError: T,
    options: { noClick: !0 }
  }), { threadId: A } = po();
  wn(() => {
    const x = new URL(window.location.href);
    t && e?.dataPersistence && A && x.pathname === "/" ? p(`/thread/${A}`) : r((P) => ({
      ...P,
      currentThreadId: A
    }));
  }, []);
  const I = !l && e?.features?.spontaneous_file_upload?.enabled;
  return /* @__PURE__ */ C.jsxs(
    mn,
    {
      ...I ? R?.getRootProps({ className: "dropzone" }) : {},
      onBlur: void 0,
      onFocus: void 0,
      display: "flex",
      width: "100%",
      flexGrow: 1,
      position: "relative",
      children: [
        R ? /* @__PURE__ */ C.jsxs(C.Fragment, { children: [
          /* @__PURE__ */ C.jsx("input", { id: "#upload-drop-input", ...R.getInputProps() }),
          R?.isDragActive ? /* @__PURE__ */ C.jsx(ose, {}) : null
        ] }) : null,
        /* @__PURE__ */ C.jsxs(Fa, { width: "100%", children: [
          s ? /* @__PURE__ */ C.jsx(
            mn,
            {
              sx: {
                width: "100%",
                maxWidth: g,
                mx: "auto",
                my: 2
              },
              children: /* @__PURE__ */ C.jsx(kP, { sx: { mx: 2 }, id: "session-error", severity: "error", children: /* @__PURE__ */ C.jsx(Yn, { path: "components.organisms.chat.index.couldNotReachServer" }) })
            }
          ) : null,
          /* @__PURE__ */ C.jsx(nse, { isMobile: !0 }),
          /* @__PURE__ */ C.jsxs(KI, { children: [
            /* @__PURE__ */ C.jsxs(
              Zie,
              {
                autoScroll: a,
                setAutoScroll: i,
                children: [
                  /* @__PURE__ */ C.jsx(Ome, {}),
                  /* @__PURE__ */ C.jsx(mn, { py: 2 }),
                  /* @__PURE__ */ C.jsx(ise, {})
                ]
              }
            ),
            /* @__PURE__ */ C.jsx(
              Rme,
              {
                fileSpec: _,
                onFileUpload: E,
                onFileUploadError: T,
                autoScroll: a,
                setAutoScroll: i
              }
            )
          ] })
        ] })
      ]
    }
  );
};
export {
  qfe as C,
  Rme as I,
  $ie as M,
  Ome as W,
  Lre as a,
  oo as g,
  TI as p,
  Qd as u
};
//# sourceMappingURL=index-DekrVGoT.js.map
